
target_unit_piezo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b524  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003110  0801b6c8  0801b6c8  0001c6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e7d8  0801e7d8  000203a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e7d8  0801e7d8  0001f7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e7e0  0801e7e0  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e7e0  0801e7e0  0001f7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e7e4  0801e7e4  0001f7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0801e7e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003298  200003a8  0801eb90  000203a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003640  0801eb90  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c778  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005073  00000000  00000000  0003cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  00041bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d229  00000000  00000000  000434a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000262da  00000000  00000000  000606d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a0f12  00000000  00000000  000869ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001278bd  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000012e0  00000000  00000000  00127900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ec8  00000000  00000000  00128be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00130aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a8 	.word	0x200003a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b6ac 	.word	0x0801b6ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003ac 	.word	0x200003ac
 80001dc:	0801b6ac 	.word	0x0801b6ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f001 b822 	b.w	8001cb4 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 febe 	bl	80019f8 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__muldc3>:
 8000c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c8c:	ed2d 8b02 	vpush	{d8}
 8000c90:	ec55 4b10 	vmov	r4, r5, d0
 8000c94:	ec5b ab12 	vmov	sl, fp, d2
 8000c98:	b091      	sub	sp, #68	@ 0x44
 8000c9a:	4652      	mov	r2, sl
 8000c9c:	465b      	mov	r3, fp
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	ec59 8b11 	vmov	r8, r9, d1
 8000ca6:	ec57 6b13 	vmov	r6, r7, d3
 8000caa:	f7ff fcad 	bl	8000608 <__aeabi_dmul>
 8000cae:	4632      	mov	r2, r6
 8000cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4640      	mov	r0, r8
 8000cb8:	4649      	mov	r1, r9
 8000cba:	f7ff fca5 	bl	8000608 <__aeabi_dmul>
 8000cbe:	4632      	mov	r2, r6
 8000cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	4629      	mov	r1, r5
 8000cca:	f7ff fc9d 	bl	8000608 <__aeabi_dmul>
 8000cce:	4642      	mov	r2, r8
 8000cd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	4650      	mov	r0, sl
 8000cd8:	4659      	mov	r1, fp
 8000cda:	f7ff fc95 	bl	8000608 <__aeabi_dmul>
 8000cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000ce2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8000ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000cea:	f7ff fad5 	bl	8000298 <__aeabi_dsub>
 8000cee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000cf2:	e9cd 0100 	strd	r0, r1, [sp]
 8000cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000cfa:	f7ff facf 	bl	800029c <__adddf3>
 8000cfe:	ec41 0b18 	vmov	d8, r0, r1
 8000d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000d06:	4602      	mov	r2, r0
 8000d08:	460b      	mov	r3, r1
 8000d0a:	f7ff ff17 	bl	8000b3c <__aeabi_dcmpun>
 8000d0e:	b950      	cbnz	r0, 8000d26 <__muldc3+0x9e>
 8000d10:	eeb0 1a48 	vmov.f32	s2, s16
 8000d14:	eef0 1a68 	vmov.f32	s3, s17
 8000d18:	ed9d 0b00 	vldr	d0, [sp]
 8000d1c:	b011      	add	sp, #68	@ 0x44
 8000d1e:	ecbd 8b02 	vpop	{d8}
 8000d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d26:	ec53 2b18 	vmov	r2, r3, d8
 8000d2a:	ec51 0b18 	vmov	r0, r1, d8
 8000d2e:	f7ff ff05 	bl	8000b3c <__aeabi_dcmpun>
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d0ec      	beq.n	8000d10 <__muldc3+0x88>
 8000d36:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8000d3a:	e9cd 380b 	strd	r3, r8, [sp, #44]	@ 0x2c
 8000d3e:	940a      	str	r4, [sp, #40]	@ 0x28
 8000d40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8000d44:	930d      	str	r3, [sp, #52]	@ 0x34
 8000d46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000d4a:	4bb4      	ldr	r3, [pc, #720]	@ (800101c <__muldc3+0x394>)
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	f7ff fef4 	bl	8000b3c <__aeabi_dcmpun>
 8000d54:	b948      	cbnz	r0, 8000d6a <__muldc3+0xe2>
 8000d56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000d5a:	4bb0      	ldr	r3, [pc, #704]	@ (800101c <__muldc3+0x394>)
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	f7ff fece 	bl	8000b00 <__aeabi_dcmple>
 8000d64:	2800      	cmp	r0, #0
 8000d66:	f000 80fc 	beq.w	8000f62 <__muldc3+0x2da>
 8000d6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8000d6e:	4bab      	ldr	r3, [pc, #684]	@ (800101c <__muldc3+0x394>)
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	f7ff fee2 	bl	8000b3c <__aeabi_dcmpun>
 8000d78:	b948      	cbnz	r0, 8000d8e <__muldc3+0x106>
 8000d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8000d7e:	4ba7      	ldr	r3, [pc, #668]	@ (800101c <__muldc3+0x394>)
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	f7ff febc 	bl	8000b00 <__aeabi_dcmple>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	f000 80ea 	beq.w	8000f62 <__muldc3+0x2da>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000d92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8000d96:	e9cd 360b 	strd	r3, r6, [sp, #44]	@ 0x2c
 8000d9a:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8000d9e:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
 8000da2:	930d      	str	r3, [sp, #52]	@ 0x34
 8000da4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000da8:	4b9c      	ldr	r3, [pc, #624]	@ (800101c <__muldc3+0x394>)
 8000daa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dae:	f7ff fec5 	bl	8000b3c <__aeabi_dcmpun>
 8000db2:	b948      	cbnz	r0, 8000dc8 <__muldc3+0x140>
 8000db4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000db8:	4b98      	ldr	r3, [pc, #608]	@ (800101c <__muldc3+0x394>)
 8000dba:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbe:	f7ff fe9f 	bl	8000b00 <__aeabi_dcmple>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	f000 812e 	beq.w	8001024 <__muldc3+0x39c>
 8000dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8000dcc:	4b93      	ldr	r3, [pc, #588]	@ (800101c <__muldc3+0x394>)
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	f7ff feb3 	bl	8000b3c <__aeabi_dcmpun>
 8000dd6:	b948      	cbnz	r0, 8000dec <__muldc3+0x164>
 8000dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8000ddc:	4b8f      	ldr	r3, [pc, #572]	@ (800101c <__muldc3+0x394>)
 8000dde:	f04f 32ff 	mov.w	r2, #4294967295
 8000de2:	f7ff fe8d 	bl	8000b00 <__aeabi_dcmple>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	f000 811c 	beq.w	8001024 <__muldc3+0x39c>
 8000dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8082 	bne.w	8000ef8 <__muldc3+0x270>
 8000df4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8000df8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8000dfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000dfe:	910a      	str	r1, [sp, #40]	@ 0x28
 8000e00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000e04:	4b85      	ldr	r3, [pc, #532]	@ (800101c <__muldc3+0x394>)
 8000e06:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0a:	f7ff fe97 	bl	8000b3c <__aeabi_dcmpun>
 8000e0e:	b940      	cbnz	r0, 8000e22 <__muldc3+0x19a>
 8000e10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000e14:	4b81      	ldr	r3, [pc, #516]	@ (800101c <__muldc3+0x394>)
 8000e16:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1a:	f7ff fe71 	bl	8000b00 <__aeabi_dcmple>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d046      	beq.n	8000eb0 <__muldc3+0x228>
 8000e22:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8000e26:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8000e2a:	9303      	str	r3, [sp, #12]
 8000e2c:	9102      	str	r1, [sp, #8]
 8000e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000e32:	4b7a      	ldr	r3, [pc, #488]	@ (800101c <__muldc3+0x394>)
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	f7ff fe80 	bl	8000b3c <__aeabi_dcmpun>
 8000e3c:	b940      	cbnz	r0, 8000e50 <__muldc3+0x1c8>
 8000e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000e42:	4b76      	ldr	r3, [pc, #472]	@ (800101c <__muldc3+0x394>)
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	f7ff fe5a 	bl	8000b00 <__aeabi_dcmple>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d02f      	beq.n	8000eb0 <__muldc3+0x228>
 8000e50:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8000e54:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	9102      	str	r1, [sp, #8]
 8000e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000e60:	4b6e      	ldr	r3, [pc, #440]	@ (800101c <__muldc3+0x394>)
 8000e62:	f04f 32ff 	mov.w	r2, #4294967295
 8000e66:	f7ff fe69 	bl	8000b3c <__aeabi_dcmpun>
 8000e6a:	b938      	cbnz	r0, 8000e7c <__muldc3+0x1f4>
 8000e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000e70:	4b6a      	ldr	r3, [pc, #424]	@ (800101c <__muldc3+0x394>)
 8000e72:	f04f 32ff 	mov.w	r2, #4294967295
 8000e76:	f7ff fe43 	bl	8000b00 <__aeabi_dcmple>
 8000e7a:	b1c8      	cbz	r0, 8000eb0 <__muldc3+0x228>
 8000e7c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8000e80:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8000e84:	9303      	str	r3, [sp, #12]
 8000e86:	9102      	str	r1, [sp, #8]
 8000e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000e8c:	4b63      	ldr	r3, [pc, #396]	@ (800101c <__muldc3+0x394>)
 8000e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e92:	f7ff fe53 	bl	8000b3c <__aeabi_dcmpun>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	f47f af3a 	bne.w	8000d10 <__muldc3+0x88>
 8000e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <__muldc3+0x394>)
 8000ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea6:	f7ff fe2b 	bl	8000b00 <__aeabi_dcmple>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	f47f af30 	bne.w	8000d10 <__muldc3+0x88>
 8000eb0:	4622      	mov	r2, r4
 8000eb2:	462b      	mov	r3, r5
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	f7ff fe40 	bl	8000b3c <__aeabi_dcmpun>
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	f040 8167 	bne.w	8001190 <__muldc3+0x508>
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	4649      	mov	r1, r9
 8000eca:	f7ff fe37 	bl	8000b3c <__aeabi_dcmpun>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	f040 8151 	bne.w	8001176 <__muldc3+0x4ee>
 8000ed4:	4652      	mov	r2, sl
 8000ed6:	465b      	mov	r3, fp
 8000ed8:	4650      	mov	r0, sl
 8000eda:	4659      	mov	r1, fp
 8000edc:	f7ff fe2e 	bl	8000b3c <__aeabi_dcmpun>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	f040 813b 	bne.w	800115c <__muldc3+0x4d4>
 8000ee6:	4632      	mov	r2, r6
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4630      	mov	r0, r6
 8000eec:	4639      	mov	r1, r7
 8000eee:	f7ff fe25 	bl	8000b3c <__aeabi_dcmpun>
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	f040 8126 	bne.w	8001144 <__muldc3+0x4bc>
 8000ef8:	4652      	mov	r2, sl
 8000efa:	465b      	mov	r3, fp
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	f7ff fb82 	bl	8000608 <__aeabi_dmul>
 8000f04:	4632      	mov	r2, r6
 8000f06:	e9cd 0100 	strd	r0, r1, [sp]
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4640      	mov	r0, r8
 8000f0e:	4649      	mov	r1, r9
 8000f10:	f7ff fb7a 	bl	8000608 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000f1c:	f7ff f9bc 	bl	8000298 <__aeabi_dsub>
 8000f20:	4b3f      	ldr	r3, [pc, #252]	@ (8001020 <__muldc3+0x398>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f7ff fb70 	bl	8000608 <__aeabi_dmul>
 8000f28:	4632      	mov	r2, r6
 8000f2a:	e9cd 0100 	strd	r0, r1, [sp]
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4620      	mov	r0, r4
 8000f32:	4629      	mov	r1, r5
 8000f34:	f7ff fb68 	bl	8000608 <__aeabi_dmul>
 8000f38:	4652      	mov	r2, sl
 8000f3a:	465b      	mov	r3, fp
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	460d      	mov	r5, r1
 8000f40:	4640      	mov	r0, r8
 8000f42:	4649      	mov	r1, r9
 8000f44:	f7ff fb60 	bl	8000608 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	4629      	mov	r1, r5
 8000f50:	f7ff f9a4 	bl	800029c <__adddf3>
 8000f54:	4b32      	ldr	r3, [pc, #200]	@ (8001020 <__muldc3+0x398>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f7ff fb56 	bl	8000608 <__aeabi_dmul>
 8000f5c:	ec41 0b18 	vmov	d8, r0, r1
 8000f60:	e6d6      	b.n	8000d10 <__muldc3+0x88>
 8000f62:	f04f 0301 	mov.w	r3, #1
 8000f66:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8000f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <__muldc3+0x394>)
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	f7ff fde2 	bl	8000b3c <__aeabi_dcmpun>
 8000f78:	b948      	cbnz	r0, 8000f8e <__muldc3+0x306>
 8000f7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8000f7e:	4b27      	ldr	r3, [pc, #156]	@ (800101c <__muldc3+0x394>)
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	f7ff fdbc 	bl	8000b00 <__aeabi_dcmple>
 8000f88:	b908      	cbnz	r0, 8000f8e <__muldc3+0x306>
 8000f8a:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 8000f8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8000f90:	f083 0001 	eor.w	r0, r3, #1
 8000f94:	f000 0001 	and.w	r0, r0, #1
 8000f98:	f7ff facc 	bl	8000534 <__aeabi_i2d>
 8000f9c:	f04f 0201 	mov.w	r2, #1
 8000fa0:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 8000fa4:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 8000fa8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8000fac:	ea42 0503 	orr.w	r5, r2, r3
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <__muldc3+0x394>)
 8000fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	f7ff fdbe 	bl	8000b3c <__aeabi_dcmpun>
 8000fc0:	b948      	cbnz	r0, 8000fd6 <__muldc3+0x34e>
 8000fc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <__muldc3+0x394>)
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	f7ff fd98 	bl	8000b00 <__aeabi_dcmple>
 8000fd0:	b908      	cbnz	r0, 8000fd6 <__muldc3+0x34e>
 8000fd2:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8000fd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000fd8:	f083 0001 	eor.w	r0, r3, #1
 8000fdc:	f000 0001 	and.w	r0, r0, #1
 8000fe0:	f7ff faa8 	bl	8000534 <__aeabi_i2d>
 8000fe4:	f009 4c00 	and.w	ip, r9, #2147483648	@ 0x80000000
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000fee:	4690      	mov	r8, r2
 8000ff0:	ea41 090c 	orr.w	r9, r1, ip
 8000ff4:	4652      	mov	r2, sl
 8000ff6:	465b      	mov	r3, fp
 8000ff8:	4650      	mov	r0, sl
 8000ffa:	4659      	mov	r1, fp
 8000ffc:	f7ff fd9e 	bl	8000b3c <__aeabi_dcmpun>
 8001000:	2800      	cmp	r0, #0
 8001002:	f040 8086 	bne.w	8001112 <__muldc3+0x48a>
 8001006:	4632      	mov	r2, r6
 8001008:	463b      	mov	r3, r7
 800100a:	4630      	mov	r0, r6
 800100c:	4639      	mov	r1, r7
 800100e:	f7ff fd95 	bl	8000b3c <__aeabi_dcmpun>
 8001012:	2800      	cmp	r0, #0
 8001014:	d16e      	bne.n	80010f4 <__muldc3+0x46c>
 8001016:	2301      	movs	r3, #1
 8001018:	930f      	str	r3, [sp, #60]	@ 0x3c
 800101a:	e6ba      	b.n	8000d92 <__muldc3+0x10a>
 800101c:	7fefffff 	.word	0x7fefffff
 8001020:	7ff00000 	.word	0x7ff00000
 8001024:	f04f 0301 	mov.w	r3, #1
 8001028:	f88d 3000 	strb.w	r3, [sp]
 800102c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8001030:	4b5d      	ldr	r3, [pc, #372]	@ (80011a8 <__muldc3+0x520>)
 8001032:	f04f 32ff 	mov.w	r2, #4294967295
 8001036:	f7ff fd81 	bl	8000b3c <__aeabi_dcmpun>
 800103a:	b948      	cbnz	r0, 8001050 <__muldc3+0x3c8>
 800103c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8001040:	4b59      	ldr	r3, [pc, #356]	@ (80011a8 <__muldc3+0x520>)
 8001042:	f04f 32ff 	mov.w	r2, #4294967295
 8001046:	f7ff fd5b 	bl	8000b00 <__aeabi_dcmple>
 800104a:	b908      	cbnz	r0, 8001050 <__muldc3+0x3c8>
 800104c:	f88d 0000 	strb.w	r0, [sp]
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	f083 0001 	eor.w	r0, r3, #1
 8001056:	f000 0001 	and.w	r0, r0, #1
 800105a:	f7ff fa6b 	bl	8000534 <__aeabi_i2d>
 800105e:	f04f 0301 	mov.w	r3, #1
 8001062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001066:	f00b 4c00 	and.w	ip, fp, #2147483648	@ 0x80000000
 800106a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800106e:	f88d 3000 	strb.w	r3, [sp]
 8001072:	ea41 0b0c 	orr.w	fp, r1, ip
 8001076:	4b4c      	ldr	r3, [pc, #304]	@ (80011a8 <__muldc3+0x520>)
 8001078:	f8dd a008 	ldr.w	sl, [sp, #8]
 800107c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	f7ff fd5a 	bl	8000b3c <__aeabi_dcmpun>
 8001088:	b948      	cbnz	r0, 800109e <__muldc3+0x416>
 800108a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800108e:	4b46      	ldr	r3, [pc, #280]	@ (80011a8 <__muldc3+0x520>)
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	f7ff fd34 	bl	8000b00 <__aeabi_dcmple>
 8001098:	b908      	cbnz	r0, 800109e <__muldc3+0x416>
 800109a:	f88d 0000 	strb.w	r0, [sp]
 800109e:	9b00      	ldr	r3, [sp, #0]
 80010a0:	f083 0001 	eor.w	r0, r3, #1
 80010a4:	f000 0001 	and.w	r0, r0, #1
 80010a8:	f7ff fa44 	bl	8000534 <__aeabi_i2d>
 80010ac:	f007 4300 	and.w	r3, r7, #2147483648	@ 0x80000000
 80010b0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80010b4:	ea42 0703 	orr.w	r7, r2, r3
 80010b8:	4606      	mov	r6, r0
 80010ba:	4622      	mov	r2, r4
 80010bc:	462b      	mov	r3, r5
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff fd3b 	bl	8000b3c <__aeabi_dcmpun>
 80010c6:	bb88      	cbnz	r0, 800112c <__muldc3+0x4a4>
 80010c8:	4642      	mov	r2, r8
 80010ca:	464b      	mov	r3, r9
 80010cc:	4640      	mov	r0, r8
 80010ce:	4649      	mov	r1, r9
 80010d0:	f7ff fd34 	bl	8000b3c <__aeabi_dcmpun>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	f43f af0f 	beq.w	8000ef8 <__muldc3+0x270>
 80010da:	f1b9 0f00 	cmp.w	r9, #0
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	bfbc      	itt	lt
 80010e8:	2200      	movlt	r2, #0
 80010ea:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 80010ee:	4690      	mov	r8, r2
 80010f0:	4699      	mov	r9, r3
 80010f2:	e701      	b.n	8000ef8 <__muldc3+0x270>
 80010f4:	2f00      	cmp	r7, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	bfb8      	it	lt
 80010fc:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	461f      	mov	r7, r3
 8001106:	bfb8      	it	lt
 8001108:	2200      	movlt	r2, #0
 800110a:	2301      	movs	r3, #1
 800110c:	4616      	mov	r6, r2
 800110e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001110:	e63f      	b.n	8000d92 <__muldc3+0x10a>
 8001112:	f1bb 0f00 	cmp.w	fp, #0
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	bfbc      	itt	lt
 8001120:	2200      	movlt	r2, #0
 8001122:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 8001126:	4692      	mov	sl, r2
 8001128:	469b      	mov	fp, r3
 800112a:	e76c      	b.n	8001006 <__muldc3+0x37e>
 800112c:	2d00      	cmp	r5, #0
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	bfbc      	itt	lt
 8001138:	2200      	movlt	r2, #0
 800113a:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 800113e:	4614      	mov	r4, r2
 8001140:	461d      	mov	r5, r3
 8001142:	e7c1      	b.n	80010c8 <__muldc3+0x440>
 8001144:	2f00      	cmp	r7, #0
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	bfbc      	itt	lt
 8001150:	2200      	movlt	r2, #0
 8001152:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 8001156:	4616      	mov	r6, r2
 8001158:	461f      	mov	r7, r3
 800115a:	e6cd      	b.n	8000ef8 <__muldc3+0x270>
 800115c:	f1bb 0f00 	cmp.w	fp, #0
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	bfbc      	itt	lt
 800116a:	2200      	movlt	r2, #0
 800116c:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 8001170:	4692      	mov	sl, r2
 8001172:	469b      	mov	fp, r3
 8001174:	e6b7      	b.n	8000ee6 <__muldc3+0x25e>
 8001176:	f1b9 0f00 	cmp.w	r9, #0
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	bfbc      	itt	lt
 8001184:	2200      	movlt	r2, #0
 8001186:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 800118a:	4690      	mov	r8, r2
 800118c:	4699      	mov	r9, r3
 800118e:	e6a1      	b.n	8000ed4 <__muldc3+0x24c>
 8001190:	2d00      	cmp	r5, #0
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	bfbc      	itt	lt
 800119c:	2200      	movlt	r2, #0
 800119e:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 80011a2:	4614      	mov	r4, r2
 80011a4:	461d      	mov	r5, r3
 80011a6:	e68c      	b.n	8000ec2 <__muldc3+0x23a>
 80011a8:	7fefffff 	.word	0x7fefffff

080011ac <__divdc3>:
 80011ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b0:	ec5b ab12 	vmov	sl, fp, d2
 80011b4:	ed2d 8b02 	vpush	{d8}
 80011b8:	ec59 8b13 	vmov	r8, r9, d3
 80011bc:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 80011c0:	f029 4700 	bic.w	r7, r9, #2147483648	@ 0x80000000
 80011c4:	b089      	sub	sp, #36	@ 0x24
 80011c6:	4642      	mov	r2, r8
 80011c8:	463b      	mov	r3, r7
 80011ca:	4650      	mov	r0, sl
 80011cc:	4629      	mov	r1, r5
 80011ce:	ed8d 0b00 	vstr	d0, [sp]
 80011d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80011d6:	f7ff fc89 	bl	8000aec <__aeabi_dcmplt>
 80011da:	2800      	cmp	r0, #0
 80011dc:	f000 8095 	beq.w	800130a <__divdc3+0x15e>
 80011e0:	4bb7      	ldr	r3, [pc, #732]	@ (80014c0 <__divdc3+0x314>)
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295
 80011e6:	4640      	mov	r0, r8
 80011e8:	4639      	mov	r1, r7
 80011ea:	4646      	mov	r6, r8
 80011ec:	f7ff fc92 	bl	8000b14 <__aeabi_dcmpge>
 80011f0:	b330      	cbz	r0, 8001240 <__divdc3+0x94>
 80011f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80011f6:	4bb3      	ldr	r3, [pc, #716]	@ (80014c4 <__divdc3+0x318>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	f7ff fa05 	bl	8000608 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	e9cd 2300 	strd	r2, r3, [sp]
 8001206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800120a:	4bae      	ldr	r3, [pc, #696]	@ (80014c4 <__divdc3+0x318>)
 800120c:	2200      	movs	r2, #0
 800120e:	f7ff f9fb 	bl	8000608 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800121a:	4650      	mov	r0, sl
 800121c:	4ba9      	ldr	r3, [pc, #676]	@ (80014c4 <__divdc3+0x318>)
 800121e:	4659      	mov	r1, fp
 8001220:	2200      	movs	r2, #0
 8001222:	f7ff f9f1 	bl	8000608 <__aeabi_dmul>
 8001226:	4ba7      	ldr	r3, [pc, #668]	@ (80014c4 <__divdc3+0x318>)
 8001228:	4682      	mov	sl, r0
 800122a:	468b      	mov	fp, r1
 800122c:	4640      	mov	r0, r8
 800122e:	4649      	mov	r1, r9
 8001230:	2200      	movs	r2, #0
 8001232:	f7ff f9e9 	bl	8000608 <__aeabi_dmul>
 8001236:	4680      	mov	r8, r0
 8001238:	4689      	mov	r9, r1
 800123a:	4606      	mov	r6, r0
 800123c:	f021 4700 	bic.w	r7, r1, #2147483648	@ 0x80000000
 8001240:	4ba1      	ldr	r3, [pc, #644]	@ (80014c8 <__divdc3+0x31c>)
 8001242:	2200      	movs	r2, #0
 8001244:	4630      	mov	r0, r6
 8001246:	4639      	mov	r1, r7
 8001248:	f7ff fc50 	bl	8000aec <__aeabi_dcmplt>
 800124c:	2800      	cmp	r0, #0
 800124e:	f000 8141 	beq.w	80014d4 <__divdc3+0x328>
 8001252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001256:	4b9d      	ldr	r3, [pc, #628]	@ (80014cc <__divdc3+0x320>)
 8001258:	2200      	movs	r2, #0
 800125a:	f7ff f9d5 	bl	8000608 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	e9cd 2300 	strd	r2, r3, [sp]
 8001266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800126a:	4b98      	ldr	r3, [pc, #608]	@ (80014cc <__divdc3+0x320>)
 800126c:	2200      	movs	r2, #0
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800127a:	4650      	mov	r0, sl
 800127c:	4b93      	ldr	r3, [pc, #588]	@ (80014cc <__divdc3+0x320>)
 800127e:	4659      	mov	r1, fp
 8001280:	2200      	movs	r2, #0
 8001282:	f7ff f9c1 	bl	8000608 <__aeabi_dmul>
 8001286:	4b91      	ldr	r3, [pc, #580]	@ (80014cc <__divdc3+0x320>)
 8001288:	4682      	mov	sl, r0
 800128a:	468b      	mov	fp, r1
 800128c:	4640      	mov	r0, r8
 800128e:	4649      	mov	r1, r9
 8001290:	2200      	movs	r2, #0
 8001292:	f7ff f9b9 	bl	8000608 <__aeabi_dmul>
 8001296:	4680      	mov	r8, r0
 8001298:	4689      	mov	r9, r1
 800129a:	4642      	mov	r2, r8
 800129c:	464b      	mov	r3, r9
 800129e:	4650      	mov	r0, sl
 80012a0:	4659      	mov	r1, fp
 80012a2:	f7ff fadb 	bl	800085c <__aeabi_ddiv>
 80012a6:	4604      	mov	r4, r0
 80012a8:	460d      	mov	r5, r1
 80012aa:	4622      	mov	r2, r4
 80012ac:	462b      	mov	r3, r5
 80012ae:	4650      	mov	r0, sl
 80012b0:	4659      	mov	r1, fp
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4642      	mov	r2, r8
 80012b8:	464b      	mov	r3, r9
 80012ba:	f7fe ffef 	bl	800029c <__adddf3>
 80012be:	2200      	movs	r2, #0
 80012c0:	4606      	mov	r6, r0
 80012c2:	460f      	mov	r7, r1
 80012c4:	4620      	mov	r0, r4
 80012c6:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
 80012ca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012ce:	f7ff fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	f000 8126 	beq.w	8001524 <__divdc3+0x378>
 80012d8:	4622      	mov	r2, r4
 80012da:	462b      	mov	r3, r5
 80012dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80012e0:	f7ff f992 	bl	8000608 <__aeabi_dmul>
 80012e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012e8:	f7fe ffd8 	bl	800029c <__adddf3>
 80012ec:	4632      	mov	r2, r6
 80012ee:	463b      	mov	r3, r7
 80012f0:	f7ff fab4 	bl	800085c <__aeabi_ddiv>
 80012f4:	4622      	mov	r2, r4
 80012f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012fa:	462b      	mov	r3, r5
 80012fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001300:	f7ff f982 	bl	8000608 <__aeabi_dmul>
 8001304:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001308:	e094      	b.n	8001434 <__divdc3+0x288>
 800130a:	4b6d      	ldr	r3, [pc, #436]	@ (80014c0 <__divdc3+0x314>)
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	4650      	mov	r0, sl
 8001312:	4629      	mov	r1, r5
 8001314:	4654      	mov	r4, sl
 8001316:	f7ff fbfd 	bl	8000b14 <__aeabi_dcmpge>
 800131a:	b330      	cbz	r0, 800136a <__divdc3+0x1be>
 800131c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001320:	4b68      	ldr	r3, [pc, #416]	@ (80014c4 <__divdc3+0x318>)
 8001322:	2200      	movs	r2, #0
 8001324:	f7ff f970 	bl	8000608 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	e9cd 2300 	strd	r2, r3, [sp]
 8001330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001334:	4b63      	ldr	r3, [pc, #396]	@ (80014c4 <__divdc3+0x318>)
 8001336:	2200      	movs	r2, #0
 8001338:	f7ff f966 	bl	8000608 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001344:	4650      	mov	r0, sl
 8001346:	4b5f      	ldr	r3, [pc, #380]	@ (80014c4 <__divdc3+0x318>)
 8001348:	4659      	mov	r1, fp
 800134a:	2200      	movs	r2, #0
 800134c:	f7ff f95c 	bl	8000608 <__aeabi_dmul>
 8001350:	4b5c      	ldr	r3, [pc, #368]	@ (80014c4 <__divdc3+0x318>)
 8001352:	4682      	mov	sl, r0
 8001354:	468b      	mov	fp, r1
 8001356:	4640      	mov	r0, r8
 8001358:	4649      	mov	r1, r9
 800135a:	2200      	movs	r2, #0
 800135c:	f7ff f954 	bl	8000608 <__aeabi_dmul>
 8001360:	4654      	mov	r4, sl
 8001362:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8001366:	4680      	mov	r8, r0
 8001368:	4689      	mov	r9, r1
 800136a:	4b57      	ldr	r3, [pc, #348]	@ (80014c8 <__divdc3+0x31c>)
 800136c:	2200      	movs	r2, #0
 800136e:	4620      	mov	r0, r4
 8001370:	4629      	mov	r1, r5
 8001372:	f7ff fbbb 	bl	8000aec <__aeabi_dcmplt>
 8001376:	2800      	cmp	r0, #0
 8001378:	d078      	beq.n	800146c <__divdc3+0x2c0>
 800137a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800137e:	4b53      	ldr	r3, [pc, #332]	@ (80014cc <__divdc3+0x320>)
 8001380:	2200      	movs	r2, #0
 8001382:	f7ff f941 	bl	8000608 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	e9cd 2300 	strd	r2, r3, [sp]
 800138e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001392:	4b4e      	ldr	r3, [pc, #312]	@ (80014cc <__divdc3+0x320>)
 8001394:	2200      	movs	r2, #0
 8001396:	f7ff f937 	bl	8000608 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013a2:	4650      	mov	r0, sl
 80013a4:	4b49      	ldr	r3, [pc, #292]	@ (80014cc <__divdc3+0x320>)
 80013a6:	4659      	mov	r1, fp
 80013a8:	2200      	movs	r2, #0
 80013aa:	f7ff f92d 	bl	8000608 <__aeabi_dmul>
 80013ae:	4b47      	ldr	r3, [pc, #284]	@ (80014cc <__divdc3+0x320>)
 80013b0:	4682      	mov	sl, r0
 80013b2:	468b      	mov	fp, r1
 80013b4:	4640      	mov	r0, r8
 80013b6:	4649      	mov	r1, r9
 80013b8:	2200      	movs	r2, #0
 80013ba:	f7ff f925 	bl	8000608 <__aeabi_dmul>
 80013be:	4680      	mov	r8, r0
 80013c0:	4689      	mov	r9, r1
 80013c2:	4652      	mov	r2, sl
 80013c4:	465b      	mov	r3, fp
 80013c6:	4640      	mov	r0, r8
 80013c8:	4649      	mov	r1, r9
 80013ca:	f7ff fa47 	bl	800085c <__aeabi_ddiv>
 80013ce:	4604      	mov	r4, r0
 80013d0:	460d      	mov	r5, r1
 80013d2:	4622      	mov	r2, r4
 80013d4:	462b      	mov	r3, r5
 80013d6:	4640      	mov	r0, r8
 80013d8:	4649      	mov	r1, r9
 80013da:	f7ff f915 	bl	8000608 <__aeabi_dmul>
 80013de:	4652      	mov	r2, sl
 80013e0:	465b      	mov	r3, fp
 80013e2:	f7fe ff5b 	bl	800029c <__adddf3>
 80013e6:	2200      	movs	r2, #0
 80013e8:	4606      	mov	r6, r0
 80013ea:	460f      	mov	r7, r1
 80013ec:	4620      	mov	r0, r4
 80013ee:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
 80013f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013f6:	f7ff fb97 	bl	8000b28 <__aeabi_dcmpgt>
 80013fa:	2800      	cmp	r0, #0
 80013fc:	f000 80b5 	beq.w	800156a <__divdc3+0x3be>
 8001400:	4622      	mov	r2, r4
 8001402:	462b      	mov	r3, r5
 8001404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001408:	f7ff f8fe 	bl	8000608 <__aeabi_dmul>
 800140c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001410:	f7fe ff44 	bl	800029c <__adddf3>
 8001414:	4632      	mov	r2, r6
 8001416:	463b      	mov	r3, r7
 8001418:	f7ff fa20 	bl	800085c <__aeabi_ddiv>
 800141c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001424:	4622      	mov	r2, r4
 8001426:	462b      	mov	r3, r5
 8001428:	f7ff f8ee 	bl	8000608 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001434:	f7fe ff30 	bl	8000298 <__aeabi_dsub>
 8001438:	4632      	mov	r2, r6
 800143a:	463b      	mov	r3, r7
 800143c:	f7ff fa0e 	bl	800085c <__aeabi_ddiv>
 8001440:	ec41 0b18 	vmov	d8, r0, r1
 8001444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	f7ff fb76 	bl	8000b3c <__aeabi_dcmpun>
 8001450:	2800      	cmp	r0, #0
 8001452:	f040 80d3 	bne.w	80015fc <__divdc3+0x450>
 8001456:	eeb0 1a48 	vmov.f32	s2, s16
 800145a:	eef0 1a68 	vmov.f32	s3, s17
 800145e:	ed9d 0b04 	vldr	d0, [sp, #16]
 8001462:	b009      	add	sp, #36	@ 0x24
 8001464:	ecbd 8b02 	vpop	{d8}
 8001468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800146c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001470:	4616      	mov	r6, r2
 8001472:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8001476:	f023 4700 	bic.w	r7, r3, #2147483648	@ 0x80000000
 800147a:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800147e:	9104      	str	r1, [sp, #16]
 8001480:	9305      	str	r3, [sp, #20]
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001488:	4630      	mov	r0, r6
 800148a:	4639      	mov	r1, r7
 800148c:	f7ff fb2e 	bl	8000aec <__aeabi_dcmplt>
 8001490:	2800      	cmp	r0, #0
 8001492:	f000 809e 	beq.w	80015d2 <__divdc3+0x426>
 8001496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <__divdc3+0x324>)
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	f7ff fb24 	bl	8000aec <__aeabi_dcmplt>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	f000 8094 	beq.w	80015d2 <__divdc3+0x426>
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <__divdc3+0x324>)
 80014ac:	4620      	mov	r0, r4
 80014ae:	4629      	mov	r1, r5
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	f7ff fb1a 	bl	8000aec <__aeabi_dcmplt>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d082      	beq.n	80013c2 <__divdc3+0x216>
 80014bc:	e75d      	b.n	800137a <__divdc3+0x1ce>
 80014be:	bf00      	nop
 80014c0:	7fdfffff 	.word	0x7fdfffff
 80014c4:	3fe00000 	.word	0x3fe00000
 80014c8:	3cb00000 	.word	0x3cb00000
 80014cc:	43300000 	.word	0x43300000
 80014d0:	7c9fffff 	.word	0x7c9fffff
 80014d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80014d8:	4614      	mov	r4, r2
 80014da:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80014de:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014e2:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 80014e6:	9104      	str	r1, [sp, #16]
 80014e8:	9305      	str	r3, [sp, #20]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7ff fafa 	bl	8000aec <__aeabi_dcmplt>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d055      	beq.n	80015a8 <__divdc3+0x3fc>
 80014fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001500:	4b5c      	ldr	r3, [pc, #368]	@ (8001674 <__divdc3+0x4c8>)
 8001502:	f04f 32ff 	mov.w	r2, #4294967295
 8001506:	f7ff faf1 	bl	8000aec <__aeabi_dcmplt>
 800150a:	2800      	cmp	r0, #0
 800150c:	d04c      	beq.n	80015a8 <__divdc3+0x3fc>
 800150e:	4b59      	ldr	r3, [pc, #356]	@ (8001674 <__divdc3+0x4c8>)
 8001510:	4630      	mov	r0, r6
 8001512:	4639      	mov	r1, r7
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	f7ff fae8 	bl	8000aec <__aeabi_dcmplt>
 800151c:	2800      	cmp	r0, #0
 800151e:	f43f aebc 	beq.w	800129a <__divdc3+0xee>
 8001522:	e696      	b.n	8001252 <__divdc3+0xa6>
 8001524:	4642      	mov	r2, r8
 8001526:	464b      	mov	r3, r9
 8001528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800152c:	f7ff f996 	bl	800085c <__aeabi_ddiv>
 8001530:	4652      	mov	r2, sl
 8001532:	465b      	mov	r3, fp
 8001534:	f7ff f868 	bl	8000608 <__aeabi_dmul>
 8001538:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800153c:	4622      	mov	r2, r4
 800153e:	462b      	mov	r3, r5
 8001540:	f7fe feac 	bl	800029c <__adddf3>
 8001544:	4632      	mov	r2, r6
 8001546:	463b      	mov	r3, r7
 8001548:	f7ff f988 	bl	800085c <__aeabi_ddiv>
 800154c:	4642      	mov	r2, r8
 800154e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001552:	464b      	mov	r3, r9
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7ff f980 	bl	800085c <__aeabi_ddiv>
 800155c:	4652      	mov	r2, sl
 800155e:	465b      	mov	r3, fp
 8001560:	f7ff f852 	bl	8000608 <__aeabi_dmul>
 8001564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001568:	e764      	b.n	8001434 <__divdc3+0x288>
 800156a:	4652      	mov	r2, sl
 800156c:	465b      	mov	r3, fp
 800156e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001572:	f7ff f973 	bl	800085c <__aeabi_ddiv>
 8001576:	4642      	mov	r2, r8
 8001578:	464b      	mov	r3, r9
 800157a:	f7ff f845 	bl	8000608 <__aeabi_dmul>
 800157e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8001582:	4622      	mov	r2, r4
 8001584:	462b      	mov	r3, r5
 8001586:	f7fe fe89 	bl	800029c <__adddf3>
 800158a:	4632      	mov	r2, r6
 800158c:	463b      	mov	r3, r7
 800158e:	f7ff f965 	bl	800085c <__aeabi_ddiv>
 8001592:	4652      	mov	r2, sl
 8001594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001598:	465b      	mov	r3, fp
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7ff f95d 	bl	800085c <__aeabi_ddiv>
 80015a2:	4642      	mov	r2, r8
 80015a4:	464b      	mov	r3, r9
 80015a6:	e73f      	b.n	8001428 <__divdc3+0x27c>
 80015a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015b2:	f7ff fa9b 	bl	8000aec <__aeabi_dcmplt>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	f43f ae6f 	beq.w	800129a <__divdc3+0xee>
 80015bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <__divdc3+0x4c8>)
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f04f 32ff 	mov.w	r2, #4294967295
 80015c6:	f7ff fa91 	bl	8000aec <__aeabi_dcmplt>
 80015ca:	2800      	cmp	r0, #0
 80015cc:	f43f ae65 	beq.w	800129a <__divdc3+0xee>
 80015d0:	e79d      	b.n	800150e <__divdc3+0x362>
 80015d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015dc:	f7ff fa86 	bl	8000aec <__aeabi_dcmplt>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	f43f aeee 	beq.w	80013c2 <__divdc3+0x216>
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <__divdc3+0x4c8>)
 80015e8:	4630      	mov	r0, r6
 80015ea:	4639      	mov	r1, r7
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	f7ff fa7c 	bl	8000aec <__aeabi_dcmplt>
 80015f4:	2800      	cmp	r0, #0
 80015f6:	f43f aee4 	beq.w	80013c2 <__divdc3+0x216>
 80015fa:	e756      	b.n	80014aa <__divdc3+0x2fe>
 80015fc:	ec53 2b18 	vmov	r2, r3, d8
 8001600:	ec51 0b18 	vmov	r0, r1, d8
 8001604:	f7ff fa9a 	bl	8000b3c <__aeabi_dcmpun>
 8001608:	2800      	cmp	r0, #0
 800160a:	f43f af24 	beq.w	8001456 <__divdc3+0x2aa>
 800160e:	2200      	movs	r2, #0
 8001610:	2300      	movs	r3, #0
 8001612:	4650      	mov	r0, sl
 8001614:	4659      	mov	r1, fp
 8001616:	f7ff fa5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800161a:	2800      	cmp	r0, #0
 800161c:	d038      	beq.n	8001690 <__divdc3+0x4e4>
 800161e:	2200      	movs	r2, #0
 8001620:	2300      	movs	r3, #0
 8001622:	4640      	mov	r0, r8
 8001624:	4649      	mov	r1, r9
 8001626:	f7ff fa57 	bl	8000ad8 <__aeabi_dcmpeq>
 800162a:	2800      	cmp	r0, #0
 800162c:	d030      	beq.n	8001690 <__divdc3+0x4e4>
 800162e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	f7ff fa81 	bl	8000b3c <__aeabi_dcmpun>
 800163a:	bb08      	cbnz	r0, 8001680 <__divdc3+0x4d4>
 800163c:	f1bb 0f00 	cmp.w	fp, #0
 8001640:	4d0d      	ldr	r5, [pc, #52]	@ (8001678 <__divdc3+0x4cc>)
 8001642:	bfb8      	it	lt
 8001644:	4d0d      	ldrlt	r5, [pc, #52]	@ (800167c <__divdc3+0x4d0>)
 8001646:	f04f 0400 	mov.w	r4, #0
 800164a:	bfb8      	it	lt
 800164c:	2400      	movlt	r4, #0
 800164e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7fe ffd7 	bl	8000608 <__aeabi_dmul>
 800165a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800165e:	4606      	mov	r6, r0
 8001660:	460f      	mov	r7, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800166a:	f7fe ffcd 	bl	8000608 <__aeabi_dmul>
 800166e:	ec41 0b18 	vmov	d8, r0, r1
 8001672:	e6f0      	b.n	8001456 <__divdc3+0x2aa>
 8001674:	7c9fffff 	.word	0x7c9fffff
 8001678:	7ff00000 	.word	0x7ff00000
 800167c:	fff00000 	.word	0xfff00000
 8001680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	f7ff fa58 	bl	8000b3c <__aeabi_dcmpun>
 800168c:	2800      	cmp	r0, #0
 800168e:	d0d5      	beq.n	800163c <__divdc3+0x490>
 8001690:	e9dd 3400 	ldrd	r3, r4, [sp]
 8001694:	461e      	mov	r6, r3
 8001696:	f024 4700 	bic.w	r7, r4, #2147483648	@ 0x80000000
 800169a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800169e:	9307      	str	r3, [sp, #28]
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	4b68      	ldr	r3, [pc, #416]	@ (8001848 <__divdc3+0x69c>)
 80016a6:	f8cd a018 	str.w	sl, [sp, #24]
 80016aa:	4630      	mov	r0, r6
 80016ac:	4639      	mov	r1, r7
 80016ae:	f7ff fa45 	bl	8000b3c <__aeabi_dcmpun>
 80016b2:	b938      	cbnz	r0, 80016c4 <__divdc3+0x518>
 80016b4:	4b64      	ldr	r3, [pc, #400]	@ (8001848 <__divdc3+0x69c>)
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	4630      	mov	r0, r6
 80016bc:	4639      	mov	r1, r7
 80016be:	f7ff fa1f 	bl	8000b00 <__aeabi_dcmple>
 80016c2:	b1c0      	cbz	r0, 80016f6 <__divdc3+0x54a>
 80016c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80016c8:	4614      	mov	r4, r2
 80016ca:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80016ce:	f04f 32ff 	mov.w	r2, #4294967295
 80016d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001848 <__divdc3+0x69c>)
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7ff fa30 	bl	8000b3c <__aeabi_dcmpun>
 80016dc:	2800      	cmp	r0, #0
 80016de:	f040 80b7 	bne.w	8001850 <__divdc3+0x6a4>
 80016e2:	4b59      	ldr	r3, [pc, #356]	@ (8001848 <__divdc3+0x69c>)
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	f7ff fa08 	bl	8000b00 <__aeabi_dcmple>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	f040 80ad 	bne.w	8001850 <__divdc3+0x6a4>
 80016f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80016fa:	4b53      	ldr	r3, [pc, #332]	@ (8001848 <__divdc3+0x69c>)
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	4620      	mov	r0, r4
 8001702:	4629      	mov	r1, r5
 8001704:	f7ff fa1a 	bl	8000b3c <__aeabi_dcmpun>
 8001708:	2800      	cmp	r0, #0
 800170a:	f040 80a1 	bne.w	8001850 <__divdc3+0x6a4>
 800170e:	4b4e      	ldr	r3, [pc, #312]	@ (8001848 <__divdc3+0x69c>)
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	4620      	mov	r0, r4
 8001716:	4629      	mov	r1, r5
 8001718:	f7ff fa06 	bl	8000b28 <__aeabi_dcmpgt>
 800171c:	2800      	cmp	r0, #0
 800171e:	f040 8097 	bne.w	8001850 <__divdc3+0x6a4>
 8001722:	f029 4500 	bic.w	r5, r9, #2147483648	@ 0x80000000
 8001726:	4b48      	ldr	r3, [pc, #288]	@ (8001848 <__divdc3+0x69c>)
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	4640      	mov	r0, r8
 800172e:	4629      	mov	r1, r5
 8001730:	f7ff fa04 	bl	8000b3c <__aeabi_dcmpun>
 8001734:	2800      	cmp	r0, #0
 8001736:	f040 808b 	bne.w	8001850 <__divdc3+0x6a4>
 800173a:	4b43      	ldr	r3, [pc, #268]	@ (8001848 <__divdc3+0x69c>)
 800173c:	4640      	mov	r0, r8
 800173e:	4629      	mov	r1, r5
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	f7ff f9f0 	bl	8000b28 <__aeabi_dcmpgt>
 8001748:	2800      	cmp	r0, #0
 800174a:	f040 8081 	bne.w	8001850 <__divdc3+0x6a4>
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <__divdc3+0x69c>)
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	4630      	mov	r0, r6
 8001756:	4639      	mov	r1, r7
 8001758:	f04f 0401 	mov.w	r4, #1
 800175c:	f7ff f9ee 	bl	8000b3c <__aeabi_dcmpun>
 8001760:	b940      	cbnz	r0, 8001774 <__divdc3+0x5c8>
 8001762:	4b39      	ldr	r3, [pc, #228]	@ (8001848 <__divdc3+0x69c>)
 8001764:	4630      	mov	r0, r6
 8001766:	4639      	mov	r1, r7
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	f7ff f9c8 	bl	8000b00 <__aeabi_dcmple>
 8001770:	b900      	cbnz	r0, 8001774 <__divdc3+0x5c8>
 8001772:	4604      	mov	r4, r0
 8001774:	f084 0001 	eor.w	r0, r4, #1
 8001778:	f000 0001 	and.w	r0, r0, #1
 800177c:	f7fe feda 	bl	8000534 <__aeabi_i2d>
 8001780:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
 8001784:	9b01      	ldr	r3, [sp, #4]
 8001786:	9000      	str	r0, [sp, #0]
 8001788:	f003 4500 	and.w	r5, r3, #2147483648	@ 0x80000000
 800178c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8001790:	f022 4700 	bic.w	r7, r2, #2147483648	@ 0x80000000
 8001794:	432b      	orrs	r3, r5
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <__divdc3+0x69c>)
 800179e:	4630      	mov	r0, r6
 80017a0:	4639      	mov	r1, r7
 80017a2:	f04f 0401 	mov.w	r4, #1
 80017a6:	f7ff f9c9 	bl	8000b3c <__aeabi_dcmpun>
 80017aa:	b940      	cbnz	r0, 80017be <__divdc3+0x612>
 80017ac:	4b26      	ldr	r3, [pc, #152]	@ (8001848 <__divdc3+0x69c>)
 80017ae:	4630      	mov	r0, r6
 80017b0:	4639      	mov	r1, r7
 80017b2:	f04f 32ff 	mov.w	r2, #4294967295
 80017b6:	f7ff f9a3 	bl	8000b00 <__aeabi_dcmple>
 80017ba:	b900      	cbnz	r0, 80017be <__divdc3+0x612>
 80017bc:	4604      	mov	r4, r0
 80017be:	f084 0001 	eor.w	r0, r4, #1
 80017c2:	f000 0001 	and.w	r0, r0, #1
 80017c6:	f7fe feb5 	bl	8000534 <__aeabi_i2d>
 80017ca:	9b03      	ldr	r3, [sp, #12]
 80017cc:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 80017d0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80017d4:	ea43 0704 	orr.w	r7, r3, r4
 80017d8:	4606      	mov	r6, r0
 80017da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80017de:	4650      	mov	r0, sl
 80017e0:	4659      	mov	r1, fp
 80017e2:	f7fe ff11 	bl	8000608 <__aeabi_dmul>
 80017e6:	4632      	mov	r2, r6
 80017e8:	4604      	mov	r4, r0
 80017ea:	460d      	mov	r5, r1
 80017ec:	463b      	mov	r3, r7
 80017ee:	4640      	mov	r0, r8
 80017f0:	4649      	mov	r1, r9
 80017f2:	f7fe ff09 	bl	8000608 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe fd4d 	bl	800029c <__adddf3>
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <__divdc3+0x6a0>)
 8001804:	2200      	movs	r2, #0
 8001806:	f7fe feff 	bl	8000608 <__aeabi_dmul>
 800180a:	4632      	mov	r2, r6
 800180c:	4604      	mov	r4, r0
 800180e:	460d      	mov	r5, r1
 8001810:	463b      	mov	r3, r7
 8001812:	4650      	mov	r0, sl
 8001814:	4659      	mov	r1, fp
 8001816:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800181a:	f7fe fef5 	bl	8000608 <__aeabi_dmul>
 800181e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001822:	4604      	mov	r4, r0
 8001824:	460d      	mov	r5, r1
 8001826:	4640      	mov	r0, r8
 8001828:	4649      	mov	r1, r9
 800182a:	f7fe feed 	bl	8000608 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fd2f 	bl	8000298 <__aeabi_dsub>
 800183a:	4b04      	ldr	r3, [pc, #16]	@ (800184c <__divdc3+0x6a0>)
 800183c:	2200      	movs	r2, #0
 800183e:	f7fe fee3 	bl	8000608 <__aeabi_dmul>
 8001842:	ec41 0b18 	vmov	d8, r0, r1
 8001846:	e606      	b.n	8001456 <__divdc3+0x2aa>
 8001848:	7fefffff 	.word	0x7fefffff
 800184c:	7ff00000 	.word	0x7ff00000
 8001850:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8001854:	4b67      	ldr	r3, [pc, #412]	@ (80019f4 <__divdc3+0x848>)
 8001856:	f04f 32ff 	mov.w	r2, #4294967295
 800185a:	4620      	mov	r0, r4
 800185c:	4629      	mov	r1, r5
 800185e:	f7ff f96d 	bl	8000b3c <__aeabi_dcmpun>
 8001862:	b938      	cbnz	r0, 8001874 <__divdc3+0x6c8>
 8001864:	4b63      	ldr	r3, [pc, #396]	@ (80019f4 <__divdc3+0x848>)
 8001866:	f04f 32ff 	mov.w	r2, #4294967295
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7ff f947 	bl	8000b00 <__aeabi_dcmple>
 8001872:	b1a8      	cbz	r0, 80018a0 <__divdc3+0x6f4>
 8001874:	f029 4500 	bic.w	r5, r9, #2147483648	@ 0x80000000
 8001878:	4b5e      	ldr	r3, [pc, #376]	@ (80019f4 <__divdc3+0x848>)
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	4640      	mov	r0, r8
 8001880:	4629      	mov	r1, r5
 8001882:	f7ff f95b 	bl	8000b3c <__aeabi_dcmpun>
 8001886:	2800      	cmp	r0, #0
 8001888:	f47f ade5 	bne.w	8001456 <__divdc3+0x2aa>
 800188c:	4b59      	ldr	r3, [pc, #356]	@ (80019f4 <__divdc3+0x848>)
 800188e:	4640      	mov	r0, r8
 8001890:	4629      	mov	r1, r5
 8001892:	f04f 32ff 	mov.w	r2, #4294967295
 8001896:	f7ff f933 	bl	8000b00 <__aeabi_dcmple>
 800189a:	2800      	cmp	r0, #0
 800189c:	f47f addb 	bne.w	8001456 <__divdc3+0x2aa>
 80018a0:	4b54      	ldr	r3, [pc, #336]	@ (80019f4 <__divdc3+0x848>)
 80018a2:	f04f 32ff 	mov.w	r2, #4294967295
 80018a6:	4630      	mov	r0, r6
 80018a8:	4639      	mov	r1, r7
 80018aa:	f7ff f947 	bl	8000b3c <__aeabi_dcmpun>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	f47f add1 	bne.w	8001456 <__divdc3+0x2aa>
 80018b4:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <__divdc3+0x848>)
 80018b6:	4630      	mov	r0, r6
 80018b8:	4639      	mov	r1, r7
 80018ba:	f04f 32ff 	mov.w	r2, #4294967295
 80018be:	f7ff f933 	bl	8000b28 <__aeabi_dcmpgt>
 80018c2:	2800      	cmp	r0, #0
 80018c4:	f47f adc7 	bne.w	8001456 <__divdc3+0x2aa>
 80018c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80018cc:	4614      	mov	r4, r2
 80018ce:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80018d2:	f04f 32ff 	mov.w	r2, #4294967295
 80018d6:	4b47      	ldr	r3, [pc, #284]	@ (80019f4 <__divdc3+0x848>)
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7ff f92e 	bl	8000b3c <__aeabi_dcmpun>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	f47f adb8 	bne.w	8001456 <__divdc3+0x2aa>
 80018e6:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <__divdc3+0x848>)
 80018e8:	4620      	mov	r0, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	f7ff f91a 	bl	8000b28 <__aeabi_dcmpgt>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	f47f adae 	bne.w	8001456 <__divdc3+0x2aa>
 80018fa:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 80018fe:	4b3d      	ldr	r3, [pc, #244]	@ (80019f4 <__divdc3+0x848>)
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	4628      	mov	r0, r5
 8001906:	4631      	mov	r1, r6
 8001908:	f04f 0401 	mov.w	r4, #1
 800190c:	f7ff f916 	bl	8000b3c <__aeabi_dcmpun>
 8001910:	b940      	cbnz	r0, 8001924 <__divdc3+0x778>
 8001912:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <__divdc3+0x848>)
 8001914:	4628      	mov	r0, r5
 8001916:	4631      	mov	r1, r6
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	f7ff f8f0 	bl	8000b00 <__aeabi_dcmple>
 8001920:	b900      	cbnz	r0, 8001924 <__divdc3+0x778>
 8001922:	4604      	mov	r4, r0
 8001924:	f084 0001 	eor.w	r0, r4, #1
 8001928:	f000 0001 	and.w	r0, r0, #1
 800192c:	f7fe fe02 	bl	8000534 <__aeabi_i2d>
 8001930:	f00b 4500 	and.w	r5, fp, #2147483648	@ 0x80000000
 8001934:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8001938:	f029 4700 	bic.w	r7, r9, #2147483648	@ 0x80000000
 800193c:	4682      	mov	sl, r0
 800193e:	ea43 0b05 	orr.w	fp, r3, r5
 8001942:	f04f 32ff 	mov.w	r2, #4294967295
 8001946:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <__divdc3+0x848>)
 8001948:	4640      	mov	r0, r8
 800194a:	4639      	mov	r1, r7
 800194c:	f04f 0401 	mov.w	r4, #1
 8001950:	f7ff f8f4 	bl	8000b3c <__aeabi_dcmpun>
 8001954:	b940      	cbnz	r0, 8001968 <__divdc3+0x7bc>
 8001956:	4b27      	ldr	r3, [pc, #156]	@ (80019f4 <__divdc3+0x848>)
 8001958:	4640      	mov	r0, r8
 800195a:	4639      	mov	r1, r7
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	f7ff f8ce 	bl	8000b00 <__aeabi_dcmple>
 8001964:	b900      	cbnz	r0, 8001968 <__divdc3+0x7bc>
 8001966:	4604      	mov	r4, r0
 8001968:	f084 0001 	eor.w	r0, r4, #1
 800196c:	f000 0001 	and.w	r0, r0, #1
 8001970:	f7fe fde0 	bl	8000534 <__aeabi_i2d>
 8001974:	f009 4400 	and.w	r4, r9, #2147483648	@ 0x80000000
 8001978:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800197c:	ea43 0704 	orr.w	r7, r3, r4
 8001980:	4606      	mov	r6, r0
 8001982:	4652      	mov	r2, sl
 8001984:	465b      	mov	r3, fp
 8001986:	e9dd 0100 	ldrd	r0, r1, [sp]
 800198a:	f7fe fe3d 	bl	8000608 <__aeabi_dmul>
 800198e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8001992:	4604      	mov	r4, r0
 8001994:	460d      	mov	r5, r1
 8001996:	4632      	mov	r2, r6
 8001998:	463b      	mov	r3, r7
 800199a:	4640      	mov	r0, r8
 800199c:	4649      	mov	r1, r9
 800199e:	f7fe fe33 	bl	8000608 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fc77 	bl	800029c <__adddf3>
 80019ae:	2200      	movs	r2, #0
 80019b0:	2300      	movs	r3, #0
 80019b2:	f7fe fe29 	bl	8000608 <__aeabi_dmul>
 80019b6:	4652      	mov	r2, sl
 80019b8:	4604      	mov	r4, r0
 80019ba:	460d      	mov	r5, r1
 80019bc:	465b      	mov	r3, fp
 80019be:	4640      	mov	r0, r8
 80019c0:	4649      	mov	r1, r9
 80019c2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80019c6:	f7fe fe1f 	bl	8000608 <__aeabi_dmul>
 80019ca:	4632      	mov	r2, r6
 80019cc:	463b      	mov	r3, r7
 80019ce:	4604      	mov	r4, r0
 80019d0:	460d      	mov	r5, r1
 80019d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80019d6:	f7fe fe17 	bl	8000608 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4620      	mov	r0, r4
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7fe fc59 	bl	8000298 <__aeabi_dsub>
 80019e6:	2200      	movs	r2, #0
 80019e8:	2300      	movs	r3, #0
 80019ea:	f7fe fe0d 	bl	8000608 <__aeabi_dmul>
 80019ee:	ec41 0b18 	vmov	d8, r0, r1
 80019f2:	e530      	b.n	8001456 <__divdc3+0x2aa>
 80019f4:	7fefffff 	.word	0x7fefffff

080019f8 <__udivmoddi4>:
 80019f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019fc:	9d08      	ldr	r5, [sp, #32]
 80019fe:	460c      	mov	r4, r1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d14e      	bne.n	8001aa2 <__udivmoddi4+0xaa>
 8001a04:	4694      	mov	ip, r2
 8001a06:	458c      	cmp	ip, r1
 8001a08:	4686      	mov	lr, r0
 8001a0a:	fab2 f282 	clz	r2, r2
 8001a0e:	d962      	bls.n	8001ad6 <__udivmoddi4+0xde>
 8001a10:	b14a      	cbz	r2, 8001a26 <__udivmoddi4+0x2e>
 8001a12:	f1c2 0320 	rsb	r3, r2, #32
 8001a16:	4091      	lsls	r1, r2
 8001a18:	fa20 f303 	lsr.w	r3, r0, r3
 8001a1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001a20:	4319      	orrs	r1, r3
 8001a22:	fa00 fe02 	lsl.w	lr, r0, r2
 8001a26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001a2a:	fa1f f68c 	uxth.w	r6, ip
 8001a2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001a32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001a36:	fb07 1114 	mls	r1, r7, r4, r1
 8001a3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001a3e:	fb04 f106 	mul.w	r1, r4, r6
 8001a42:	4299      	cmp	r1, r3
 8001a44:	d90a      	bls.n	8001a5c <__udivmoddi4+0x64>
 8001a46:	eb1c 0303 	adds.w	r3, ip, r3
 8001a4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8001a4e:	f080 8112 	bcs.w	8001c76 <__udivmoddi4+0x27e>
 8001a52:	4299      	cmp	r1, r3
 8001a54:	f240 810f 	bls.w	8001c76 <__udivmoddi4+0x27e>
 8001a58:	3c02      	subs	r4, #2
 8001a5a:	4463      	add	r3, ip
 8001a5c:	1a59      	subs	r1, r3, r1
 8001a5e:	fa1f f38e 	uxth.w	r3, lr
 8001a62:	fbb1 f0f7 	udiv	r0, r1, r7
 8001a66:	fb07 1110 	mls	r1, r7, r0, r1
 8001a6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001a6e:	fb00 f606 	mul.w	r6, r0, r6
 8001a72:	429e      	cmp	r6, r3
 8001a74:	d90a      	bls.n	8001a8c <__udivmoddi4+0x94>
 8001a76:	eb1c 0303 	adds.w	r3, ip, r3
 8001a7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8001a7e:	f080 80fc 	bcs.w	8001c7a <__udivmoddi4+0x282>
 8001a82:	429e      	cmp	r6, r3
 8001a84:	f240 80f9 	bls.w	8001c7a <__udivmoddi4+0x282>
 8001a88:	4463      	add	r3, ip
 8001a8a:	3802      	subs	r0, #2
 8001a8c:	1b9b      	subs	r3, r3, r6
 8001a8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001a92:	2100      	movs	r1, #0
 8001a94:	b11d      	cbz	r5, 8001a9e <__udivmoddi4+0xa6>
 8001a96:	40d3      	lsrs	r3, r2
 8001a98:	2200      	movs	r2, #0
 8001a9a:	e9c5 3200 	strd	r3, r2, [r5]
 8001a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aa2:	428b      	cmp	r3, r1
 8001aa4:	d905      	bls.n	8001ab2 <__udivmoddi4+0xba>
 8001aa6:	b10d      	cbz	r5, 8001aac <__udivmoddi4+0xb4>
 8001aa8:	e9c5 0100 	strd	r0, r1, [r5]
 8001aac:	2100      	movs	r1, #0
 8001aae:	4608      	mov	r0, r1
 8001ab0:	e7f5      	b.n	8001a9e <__udivmoddi4+0xa6>
 8001ab2:	fab3 f183 	clz	r1, r3
 8001ab6:	2900      	cmp	r1, #0
 8001ab8:	d146      	bne.n	8001b48 <__udivmoddi4+0x150>
 8001aba:	42a3      	cmp	r3, r4
 8001abc:	d302      	bcc.n	8001ac4 <__udivmoddi4+0xcc>
 8001abe:	4290      	cmp	r0, r2
 8001ac0:	f0c0 80f0 	bcc.w	8001ca4 <__udivmoddi4+0x2ac>
 8001ac4:	1a86      	subs	r6, r0, r2
 8001ac6:	eb64 0303 	sbc.w	r3, r4, r3
 8001aca:	2001      	movs	r0, #1
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d0e6      	beq.n	8001a9e <__udivmoddi4+0xa6>
 8001ad0:	e9c5 6300 	strd	r6, r3, [r5]
 8001ad4:	e7e3      	b.n	8001a9e <__udivmoddi4+0xa6>
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	f040 8090 	bne.w	8001bfc <__udivmoddi4+0x204>
 8001adc:	eba1 040c 	sub.w	r4, r1, ip
 8001ae0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001ae4:	fa1f f78c 	uxth.w	r7, ip
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fbb4 f6f8 	udiv	r6, r4, r8
 8001aee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001af2:	fb08 4416 	mls	r4, r8, r6, r4
 8001af6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001afa:	fb07 f006 	mul.w	r0, r7, r6
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d908      	bls.n	8001b14 <__udivmoddi4+0x11c>
 8001b02:	eb1c 0303 	adds.w	r3, ip, r3
 8001b06:	f106 34ff 	add.w	r4, r6, #4294967295
 8001b0a:	d202      	bcs.n	8001b12 <__udivmoddi4+0x11a>
 8001b0c:	4298      	cmp	r0, r3
 8001b0e:	f200 80cd 	bhi.w	8001cac <__udivmoddi4+0x2b4>
 8001b12:	4626      	mov	r6, r4
 8001b14:	1a1c      	subs	r4, r3, r0
 8001b16:	fa1f f38e 	uxth.w	r3, lr
 8001b1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8001b1e:	fb08 4410 	mls	r4, r8, r0, r4
 8001b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001b26:	fb00 f707 	mul.w	r7, r0, r7
 8001b2a:	429f      	cmp	r7, r3
 8001b2c:	d908      	bls.n	8001b40 <__udivmoddi4+0x148>
 8001b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8001b32:	f100 34ff 	add.w	r4, r0, #4294967295
 8001b36:	d202      	bcs.n	8001b3e <__udivmoddi4+0x146>
 8001b38:	429f      	cmp	r7, r3
 8001b3a:	f200 80b0 	bhi.w	8001c9e <__udivmoddi4+0x2a6>
 8001b3e:	4620      	mov	r0, r4
 8001b40:	1bdb      	subs	r3, r3, r7
 8001b42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001b46:	e7a5      	b.n	8001a94 <__udivmoddi4+0x9c>
 8001b48:	f1c1 0620 	rsb	r6, r1, #32
 8001b4c:	408b      	lsls	r3, r1
 8001b4e:	fa22 f706 	lsr.w	r7, r2, r6
 8001b52:	431f      	orrs	r7, r3
 8001b54:	fa20 fc06 	lsr.w	ip, r0, r6
 8001b58:	fa04 f301 	lsl.w	r3, r4, r1
 8001b5c:	ea43 030c 	orr.w	r3, r3, ip
 8001b60:	40f4      	lsrs	r4, r6
 8001b62:	fa00 f801 	lsl.w	r8, r0, r1
 8001b66:	0c38      	lsrs	r0, r7, #16
 8001b68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001b6c:	fbb4 fef0 	udiv	lr, r4, r0
 8001b70:	fa1f fc87 	uxth.w	ip, r7
 8001b74:	fb00 441e 	mls	r4, r0, lr, r4
 8001b78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001b7c:	fb0e f90c 	mul.w	r9, lr, ip
 8001b80:	45a1      	cmp	r9, r4
 8001b82:	fa02 f201 	lsl.w	r2, r2, r1
 8001b86:	d90a      	bls.n	8001b9e <__udivmoddi4+0x1a6>
 8001b88:	193c      	adds	r4, r7, r4
 8001b8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001b8e:	f080 8084 	bcs.w	8001c9a <__udivmoddi4+0x2a2>
 8001b92:	45a1      	cmp	r9, r4
 8001b94:	f240 8081 	bls.w	8001c9a <__udivmoddi4+0x2a2>
 8001b98:	f1ae 0e02 	sub.w	lr, lr, #2
 8001b9c:	443c      	add	r4, r7
 8001b9e:	eba4 0409 	sub.w	r4, r4, r9
 8001ba2:	fa1f f983 	uxth.w	r9, r3
 8001ba6:	fbb4 f3f0 	udiv	r3, r4, r0
 8001baa:	fb00 4413 	mls	r4, r0, r3, r4
 8001bae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001bb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8001bb6:	45a4      	cmp	ip, r4
 8001bb8:	d907      	bls.n	8001bca <__udivmoddi4+0x1d2>
 8001bba:	193c      	adds	r4, r7, r4
 8001bbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8001bc0:	d267      	bcs.n	8001c92 <__udivmoddi4+0x29a>
 8001bc2:	45a4      	cmp	ip, r4
 8001bc4:	d965      	bls.n	8001c92 <__udivmoddi4+0x29a>
 8001bc6:	3b02      	subs	r3, #2
 8001bc8:	443c      	add	r4, r7
 8001bca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001bce:	fba0 9302 	umull	r9, r3, r0, r2
 8001bd2:	eba4 040c 	sub.w	r4, r4, ip
 8001bd6:	429c      	cmp	r4, r3
 8001bd8:	46ce      	mov	lr, r9
 8001bda:	469c      	mov	ip, r3
 8001bdc:	d351      	bcc.n	8001c82 <__udivmoddi4+0x28a>
 8001bde:	d04e      	beq.n	8001c7e <__udivmoddi4+0x286>
 8001be0:	b155      	cbz	r5, 8001bf8 <__udivmoddi4+0x200>
 8001be2:	ebb8 030e 	subs.w	r3, r8, lr
 8001be6:	eb64 040c 	sbc.w	r4, r4, ip
 8001bea:	fa04 f606 	lsl.w	r6, r4, r6
 8001bee:	40cb      	lsrs	r3, r1
 8001bf0:	431e      	orrs	r6, r3
 8001bf2:	40cc      	lsrs	r4, r1
 8001bf4:	e9c5 6400 	strd	r6, r4, [r5]
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	e750      	b.n	8001a9e <__udivmoddi4+0xa6>
 8001bfc:	f1c2 0320 	rsb	r3, r2, #32
 8001c00:	fa20 f103 	lsr.w	r1, r0, r3
 8001c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8001c08:	fa24 f303 	lsr.w	r3, r4, r3
 8001c0c:	4094      	lsls	r4, r2
 8001c0e:	430c      	orrs	r4, r1
 8001c10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001c14:	fa00 fe02 	lsl.w	lr, r0, r2
 8001c18:	fa1f f78c 	uxth.w	r7, ip
 8001c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001c20:	fb08 3110 	mls	r1, r8, r0, r3
 8001c24:	0c23      	lsrs	r3, r4, #16
 8001c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001c2a:	fb00 f107 	mul.w	r1, r0, r7
 8001c2e:	4299      	cmp	r1, r3
 8001c30:	d908      	bls.n	8001c44 <__udivmoddi4+0x24c>
 8001c32:	eb1c 0303 	adds.w	r3, ip, r3
 8001c36:	f100 36ff 	add.w	r6, r0, #4294967295
 8001c3a:	d22c      	bcs.n	8001c96 <__udivmoddi4+0x29e>
 8001c3c:	4299      	cmp	r1, r3
 8001c3e:	d92a      	bls.n	8001c96 <__udivmoddi4+0x29e>
 8001c40:	3802      	subs	r0, #2
 8001c42:	4463      	add	r3, ip
 8001c44:	1a5b      	subs	r3, r3, r1
 8001c46:	b2a4      	uxth	r4, r4
 8001c48:	fbb3 f1f8 	udiv	r1, r3, r8
 8001c4c:	fb08 3311 	mls	r3, r8, r1, r3
 8001c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001c54:	fb01 f307 	mul.w	r3, r1, r7
 8001c58:	42a3      	cmp	r3, r4
 8001c5a:	d908      	bls.n	8001c6e <__udivmoddi4+0x276>
 8001c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8001c60:	f101 36ff 	add.w	r6, r1, #4294967295
 8001c64:	d213      	bcs.n	8001c8e <__udivmoddi4+0x296>
 8001c66:	42a3      	cmp	r3, r4
 8001c68:	d911      	bls.n	8001c8e <__udivmoddi4+0x296>
 8001c6a:	3902      	subs	r1, #2
 8001c6c:	4464      	add	r4, ip
 8001c6e:	1ae4      	subs	r4, r4, r3
 8001c70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001c74:	e739      	b.n	8001aea <__udivmoddi4+0xf2>
 8001c76:	4604      	mov	r4, r0
 8001c78:	e6f0      	b.n	8001a5c <__udivmoddi4+0x64>
 8001c7a:	4608      	mov	r0, r1
 8001c7c:	e706      	b.n	8001a8c <__udivmoddi4+0x94>
 8001c7e:	45c8      	cmp	r8, r9
 8001c80:	d2ae      	bcs.n	8001be0 <__udivmoddi4+0x1e8>
 8001c82:	ebb9 0e02 	subs.w	lr, r9, r2
 8001c86:	eb63 0c07 	sbc.w	ip, r3, r7
 8001c8a:	3801      	subs	r0, #1
 8001c8c:	e7a8      	b.n	8001be0 <__udivmoddi4+0x1e8>
 8001c8e:	4631      	mov	r1, r6
 8001c90:	e7ed      	b.n	8001c6e <__udivmoddi4+0x276>
 8001c92:	4603      	mov	r3, r0
 8001c94:	e799      	b.n	8001bca <__udivmoddi4+0x1d2>
 8001c96:	4630      	mov	r0, r6
 8001c98:	e7d4      	b.n	8001c44 <__udivmoddi4+0x24c>
 8001c9a:	46d6      	mov	lr, sl
 8001c9c:	e77f      	b.n	8001b9e <__udivmoddi4+0x1a6>
 8001c9e:	4463      	add	r3, ip
 8001ca0:	3802      	subs	r0, #2
 8001ca2:	e74d      	b.n	8001b40 <__udivmoddi4+0x148>
 8001ca4:	4606      	mov	r6, r0
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	4608      	mov	r0, r1
 8001caa:	e70f      	b.n	8001acc <__udivmoddi4+0xd4>
 8001cac:	3e02      	subs	r6, #2
 8001cae:	4463      	add	r3, ip
 8001cb0:	e730      	b.n	8001b14 <__udivmoddi4+0x11c>
 8001cb2:	bf00      	nop

08001cb4 <__aeabi_idiv0>:
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	480c      	ldr	r0, [pc, #48]	@ (8001cf8 <ST7789_WriteCommand+0x40>)
 8001cc8:	f00e f93e 	bl	800ff48 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2102      	movs	r1, #2
 8001cd0:	4809      	ldr	r0, [pc, #36]	@ (8001cf8 <ST7789_WriteCommand+0x40>)
 8001cd2:	f00e f939 	bl	800ff48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001cd6:	1df9      	adds	r1, r7, #7
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <ST7789_WriteCommand+0x44>)
 8001ce0:	f00f ff87 	bl	8011bf2 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <ST7789_WriteCommand+0x40>)
 8001cea:	f00e f92d 	bl	800ff48 <HAL_GPIO_WritePin>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	2000046c 	.word	0x2000046c

08001d00 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	4815      	ldr	r0, [pc, #84]	@ (8001d64 <ST7789_WriteData+0x64>)
 8001d10:	f00e f91a 	bl	800ff48 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001d14:	2201      	movs	r2, #1
 8001d16:	2102      	movs	r1, #2
 8001d18:	4812      	ldr	r0, [pc, #72]	@ (8001d64 <ST7789_WriteData+0x64>)
 8001d1a:	f00e f915 	bl	800ff48 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001d1e:	e015      	b.n	8001d4c <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d26:	4293      	cmp	r3, r2
 8001d28:	bf28      	it	cs
 8001d2a:	4613      	movcs	r3, r2
 8001d2c:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001d2e:	89fa      	ldrh	r2, [r7, #14]
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <ST7789_WriteData+0x68>)
 8001d38:	f00f ff5b 	bl	8011bf2 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001d3c:	89fb      	ldrh	r3, [r7, #14]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001d44:	89fb      	ldrh	r3, [r7, #14]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1e6      	bne.n	8001d20 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8001d52:	2201      	movs	r2, #1
 8001d54:	2104      	movs	r1, #4
 8001d56:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <ST7789_WriteData+0x64>)
 8001d58:	f00e f8f6 	bl	800ff48 <HAL_GPIO_WritePin>
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40020400 	.word	0x40020400
 8001d68:	2000046c 	.word	0x2000046c

08001d6c <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001d76:	2200      	movs	r2, #0
 8001d78:	2104      	movs	r1, #4
 8001d7a:	480c      	ldr	r0, [pc, #48]	@ (8001dac <ST7789_WriteSmallData+0x40>)
 8001d7c:	f00e f8e4 	bl	800ff48 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001d80:	2201      	movs	r2, #1
 8001d82:	2102      	movs	r1, #2
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <ST7789_WriteSmallData+0x40>)
 8001d86:	f00e f8df 	bl	800ff48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001d8a:	1df9      	adds	r1, r7, #7
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	2201      	movs	r2, #1
 8001d92:	4807      	ldr	r0, [pc, #28]	@ (8001db0 <ST7789_WriteSmallData+0x44>)
 8001d94:	f00f ff2d 	bl	8011bf2 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	4803      	ldr	r0, [pc, #12]	@ (8001dac <ST7789_WriteSmallData+0x40>)
 8001d9e:	f00e f8d3 	bl	800ff48 <HAL_GPIO_WritePin>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40020400 	.word	0x40020400
 8001db0:	2000046c 	.word	0x2000046c

08001db4 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001dbe:	2036      	movs	r0, #54	@ 0x36
 8001dc0:	f7ff ff7a 	bl	8001cb8 <ST7789_WriteCommand>
	switch (m) {
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d81a      	bhi.n	8001e00 <ST7789_SetRotation+0x4c>
 8001dca:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <ST7789_SetRotation+0x1c>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001de9 	.word	0x08001de9
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001df9 	.word	0x08001df9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001de0:	20c0      	movs	r0, #192	@ 0xc0
 8001de2:	f7ff ffc3 	bl	8001d6c <ST7789_WriteSmallData>
		break;
 8001de6:	e00c      	b.n	8001e02 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001de8:	20a0      	movs	r0, #160	@ 0xa0
 8001dea:	f7ff ffbf 	bl	8001d6c <ST7789_WriteSmallData>
		break;
 8001dee:	e008      	b.n	8001e02 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffbb 	bl	8001d6c <ST7789_WriteSmallData>
		break;
 8001df6:	e004      	b.n	8001e02 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001df8:	2060      	movs	r0, #96	@ 0x60
 8001dfa:	f7ff ffb7 	bl	8001d6c <ST7789_WriteSmallData>
		break;
 8001dfe:	e000      	b.n	8001e02 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001e00:	bf00      	nop
	}
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop

08001e0c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4604      	mov	r4, r0
 8001e14:	4608      	mov	r0, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	80fb      	strh	r3, [r7, #6]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80bb      	strh	r3, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	807b      	strh	r3, [r7, #2]
 8001e26:	4613      	mov	r3, r2
 8001e28:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4824      	ldr	r0, [pc, #144]	@ (8001ec0 <ST7789_SetAddressWindow+0xb4>)
 8001e30:	f00e f88a 	bl	800ff48 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	82fb      	strh	r3, [r7, #22]
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	827b      	strh	r3, [r7, #18]
 8001e40:	883b      	ldrh	r3, [r7, #0]
 8001e42:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001e44:	202a      	movs	r0, #42	@ 0x2a
 8001e46:	f7ff ff37 	bl	8001cb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001e4a:	8afb      	ldrh	r3, [r7, #22]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	733b      	strb	r3, [r7, #12]
 8001e54:	8afb      	ldrh	r3, [r7, #22]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	737b      	strb	r3, [r7, #13]
 8001e5a:	8abb      	ldrh	r3, [r7, #20]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	73bb      	strb	r3, [r7, #14]
 8001e64:	8abb      	ldrh	r3, [r7, #20]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2104      	movs	r1, #4
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff45 	bl	8001d00 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001e76:	202b      	movs	r0, #43	@ 0x2b
 8001e78:	f7ff ff1e 	bl	8001cb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001e7c:	8a7b      	ldrh	r3, [r7, #18]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	723b      	strb	r3, [r7, #8]
 8001e86:	8a7b      	ldrh	r3, [r7, #18]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	727b      	strb	r3, [r7, #9]
 8001e8c:	8a3b      	ldrh	r3, [r7, #16]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	72bb      	strb	r3, [r7, #10]
 8001e96:	8a3b      	ldrh	r3, [r7, #16]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff2c 	bl	8001d00 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001ea8:	202c      	movs	r0, #44	@ 0x2c
 8001eaa:	f7ff ff05 	bl	8001cb8 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <ST7789_SetAddressWindow+0xb4>)
 8001eb4:	f00e f848 	bl	800ff48 <HAL_GPIO_WritePin>
}
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	40020400 	.word	0x40020400

08001ec4 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b08b      	sub	sp, #44	@ 0x2c
 8001ec8:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(10);
 8001eca:	200a      	movs	r0, #10
 8001ecc:	f00c fc44 	bl	800e758 <HAL_Delay>
    ST7789_RST_Clr();
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4846      	ldr	r0, [pc, #280]	@ (8001ff0 <ST7789_Init+0x12c>)
 8001ed6:	f00e f837 	bl	800ff48 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001eda:	200a      	movs	r0, #10
 8001edc:	f00c fc3c 	bl	800e758 <HAL_Delay>
    ST7789_RST_Set();
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4842      	ldr	r0, [pc, #264]	@ (8001ff0 <ST7789_Init+0x12c>)
 8001ee6:	f00e f82f 	bl	800ff48 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001eea:	2014      	movs	r0, #20
 8001eec:	f00c fc34 	bl	800e758 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001ef0:	203a      	movs	r0, #58	@ 0x3a
 8001ef2:	f7ff fee1 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001ef6:	2055      	movs	r0, #85	@ 0x55
 8001ef8:	f7ff ff38 	bl	8001d6c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001efc:	20b2      	movs	r0, #178	@ 0xb2
 8001efe:	f7ff fedb 	bl	8001cb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001f02:	4a3c      	ldr	r2, [pc, #240]	@ (8001ff4 <ST7789_Init+0x130>)
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f0c:	6018      	str	r0, [r3, #0]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	2105      	movs	r1, #5
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fef1 	bl	8001d00 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001f1e:	2003      	movs	r0, #3
 8001f20:	f7ff ff48 	bl	8001db4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001f24:	20b7      	movs	r0, #183	@ 0xb7
 8001f26:	f7ff fec7 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001f2a:	2035      	movs	r0, #53	@ 0x35
 8001f2c:	f7ff ff1e 	bl	8001d6c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001f30:	20bb      	movs	r0, #187	@ 0xbb
 8001f32:	f7ff fec1 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001f36:	2019      	movs	r0, #25
 8001f38:	f7ff ff18 	bl	8001d6c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001f3c:	20c0      	movs	r0, #192	@ 0xc0
 8001f3e:	f7ff febb 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001f42:	202c      	movs	r0, #44	@ 0x2c
 8001f44:	f7ff ff12 	bl	8001d6c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001f48:	20c2      	movs	r0, #194	@ 0xc2
 8001f4a:	f7ff feb5 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff ff0c 	bl	8001d6c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001f54:	20c3      	movs	r0, #195	@ 0xc3
 8001f56:	f7ff feaf 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001f5a:	2012      	movs	r0, #18
 8001f5c:	f7ff ff06 	bl	8001d6c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001f60:	20c4      	movs	r0, #196	@ 0xc4
 8001f62:	f7ff fea9 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001f66:	2020      	movs	r0, #32
 8001f68:	f7ff ff00 	bl	8001d6c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001f6c:	20c6      	movs	r0, #198	@ 0xc6
 8001f6e:	f7ff fea3 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001f72:	200f      	movs	r0, #15
 8001f74:	f7ff fefa 	bl	8001d6c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001f78:	20d0      	movs	r0, #208	@ 0xd0
 8001f7a:	f7ff fe9d 	bl	8001cb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001f7e:	20a4      	movs	r0, #164	@ 0xa4
 8001f80:	f7ff fef4 	bl	8001d6c <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001f84:	20a1      	movs	r0, #161	@ 0xa1
 8001f86:	f7ff fef1 	bl	8001d6c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001f8a:	20e0      	movs	r0, #224	@ 0xe0
 8001f8c:	f7ff fe94 	bl	8001cb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001f90:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <ST7789_Init+0x134>)
 8001f92:	f107 0410 	add.w	r4, r7, #16
 8001f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f98:	c407      	stmia	r4!, {r0, r1, r2}
 8001f9a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	210e      	movs	r1, #14
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff feac 	bl	8001d00 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001fa8:	20e1      	movs	r0, #225	@ 0xe1
 8001faa:	f7ff fe85 	bl	8001cb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001fae:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <ST7789_Init+0x138>)
 8001fb0:	463c      	mov	r4, r7
 8001fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb4:	c407      	stmia	r4!, {r0, r1, r2}
 8001fb6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001fb8:	463b      	mov	r3, r7
 8001fba:	210e      	movs	r1, #14
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fe9f 	bl	8001d00 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001fc2:	2021      	movs	r0, #33	@ 0x21
 8001fc4:	f7ff fe78 	bl	8001cb8 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001fc8:	2011      	movs	r0, #17
 8001fca:	f7ff fe75 	bl	8001cb8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001fce:	2013      	movs	r0, #19
 8001fd0:	f7ff fe72 	bl	8001cb8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001fd4:	2029      	movs	r0, #41	@ 0x29
 8001fd6:	f7ff fe6f 	bl	8001cb8 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001fda:	2032      	movs	r0, #50	@ 0x32
 8001fdc:	f00c fbbc 	bl	800e758 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 f80d 	bl	8002000 <ST7789_Fill_Color>
}
 8001fe6:	bf00      	nop
 8001fe8:	372c      	adds	r7, #44	@ 0x2c
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	0801b6c8 	.word	0x0801b6c8
 8001ff8:	0801b6d0 	.word	0x0801b6d0
 8001ffc:	0801b6e0 	.word	0x0801b6e0

08002000 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800200a:	23ef      	movs	r3, #239	@ 0xef
 800200c:	f240 123f 	movw	r2, #319	@ 0x13f
 8002010:	2100      	movs	r1, #0
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff fefa 	bl	8001e0c <ST7789_SetAddressWindow>
	ST7789_Select();
 8002018:	2200      	movs	r2, #0
 800201a:	2104      	movs	r1, #4
 800201c:	4816      	ldr	r0, [pc, #88]	@ (8002078 <ST7789_Fill_Color+0x78>)
 800201e:	f00d ff93 	bl	800ff48 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	81fb      	strh	r3, [r7, #14]
 8002026:	e019      	b.n	800205c <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8002028:	2300      	movs	r3, #0
 800202a:	81bb      	strh	r3, [r7, #12]
 800202c:	e010      	b.n	8002050 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	b29b      	uxth	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	723b      	strb	r3, [r7, #8]
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	2102      	movs	r1, #2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fe5b 	bl	8001d00 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 800204a:	89bb      	ldrh	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	81bb      	strh	r3, [r7, #12]
 8002050:	89bb      	ldrh	r3, [r7, #12]
 8002052:	2bef      	cmp	r3, #239	@ 0xef
 8002054:	d9eb      	bls.n	800202e <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	3301      	adds	r3, #1
 800205a:	81fb      	strh	r3, [r7, #14]
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002062:	d3e1      	bcc.n	8002028 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8002064:	2201      	movs	r2, #1
 8002066:	2104      	movs	r1, #4
 8002068:	4803      	ldr	r0, [pc, #12]	@ (8002078 <ST7789_Fill_Color+0x78>)
 800206a:	f00d ff6d 	bl	800ff48 <HAL_GPIO_WritePin>
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40020400 	.word	0x40020400

0800207c <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
 8002086:	460b      	mov	r3, r1
 8002088:	80bb      	strh	r3, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002094:	d221      	bcs.n	80020da <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002096:	88bb      	ldrh	r3, [r7, #4]
 8002098:	2bef      	cmp	r3, #239	@ 0xef
 800209a:	d81e      	bhi.n	80020da <ST7789_DrawPixel+0x5e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 800209c:	88bb      	ldrh	r3, [r7, #4]
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	88b9      	ldrh	r1, [r7, #4]
 80020a2:	88f8      	ldrh	r0, [r7, #6]
 80020a4:	f7ff feb2 	bl	8001e0c <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	733b      	strb	r3, [r7, #12]
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80020b8:	2200      	movs	r2, #0
 80020ba:	2104      	movs	r1, #4
 80020bc:	4809      	ldr	r0, [pc, #36]	@ (80020e4 <ST7789_DrawPixel+0x68>)
 80020be:	f00d ff43 	bl	800ff48 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2102      	movs	r1, #2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fe19 	bl	8001d00 <ST7789_WriteData>
	ST7789_UnSelect();
 80020ce:	2201      	movs	r2, #1
 80020d0:	2104      	movs	r1, #4
 80020d2:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <ST7789_DrawPixel+0x68>)
 80020d4:	f00d ff38 	bl	800ff48 <HAL_GPIO_WritePin>
 80020d8:	e000      	b.n	80020dc <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80020da:	bf00      	nop
}
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40020400 	.word	0x40020400

080020e8 <ST7789_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4604      	mov	r4, r0
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4623      	mov	r3, r4
 80020f8:	80fb      	strh	r3, [r7, #6]
 80020fa:	4603      	mov	r3, r0
 80020fc:	80bb      	strh	r3, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	807b      	strh	r3, [r7, #2]
 8002102:	4613      	mov	r3, r2
 8002104:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800210c:	d235      	bcs.n	800217a <ST7789_Fill+0x92>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800210e:	883b      	ldrh	r3, [r7, #0]
 8002110:	2bef      	cmp	r3, #239	@ 0xef
 8002112:	d832      	bhi.n	800217a <ST7789_Fill+0x92>
	ST7789_Select();
 8002114:	2200      	movs	r2, #0
 8002116:	2104      	movs	r1, #4
 8002118:	481a      	ldr	r0, [pc, #104]	@ (8002184 <ST7789_Fill+0x9c>)
 800211a:	f00d ff15 	bl	800ff48 <HAL_GPIO_WritePin>
	uint16_t i, j;
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800211e:	883b      	ldrh	r3, [r7, #0]
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	88b9      	ldrh	r1, [r7, #4]
 8002124:	88f8      	ldrh	r0, [r7, #6]
 8002126:	f7ff fe71 	bl	8001e0c <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++)
 800212a:	88bb      	ldrh	r3, [r7, #4]
 800212c:	81fb      	strh	r3, [r7, #14]
 800212e:	e01a      	b.n	8002166 <ST7789_Fill+0x7e>
		for (j = xSta; j <= xEnd; j++) {
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	81bb      	strh	r3, [r7, #12]
 8002134:	e010      	b.n	8002158 <ST7789_Fill+0x70>
			uint8_t data[] = {color >> 8, color & 0xFF};
 8002136:	8c3b      	ldrh	r3, [r7, #32]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	b29b      	uxth	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	723b      	strb	r3, [r7, #8]
 8002140:	8c3b      	ldrh	r3, [r7, #32]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	2102      	movs	r1, #2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fdd7 	bl	8001d00 <ST7789_WriteData>
		for (j = xSta; j <= xEnd; j++) {
 8002152:	89bb      	ldrh	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	81bb      	strh	r3, [r7, #12]
 8002158:	89ba      	ldrh	r2, [r7, #12]
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	429a      	cmp	r2, r3
 800215e:	d9ea      	bls.n	8002136 <ST7789_Fill+0x4e>
	for (i = ySta; i <= yEnd; i++)
 8002160:	89fb      	ldrh	r3, [r7, #14]
 8002162:	3301      	adds	r3, #1
 8002164:	81fb      	strh	r3, [r7, #14]
 8002166:	89fa      	ldrh	r2, [r7, #14]
 8002168:	883b      	ldrh	r3, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d9e0      	bls.n	8002130 <ST7789_Fill+0x48>
		}
	ST7789_UnSelect();
 800216e:	2201      	movs	r2, #1
 8002170:	2104      	movs	r1, #4
 8002172:	4804      	ldr	r0, [pc, #16]	@ (8002184 <ST7789_Fill+0x9c>)
 8002174:	f00d fee8 	bl	800ff48 <HAL_GPIO_WritePin>
 8002178:	e000      	b.n	800217c <ST7789_Fill+0x94>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800217a:	bf00      	nop
}
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	bf00      	nop
 8002184:	40020400 	.word	0x40020400

08002188 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4623      	mov	r3, r4
 8002198:	80fb      	strh	r3, [r7, #6]
 800219a:	4603      	mov	r3, r0
 800219c:	80bb      	strh	r3, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	807b      	strh	r3, [r7, #2]
 80021a2:	4613      	mov	r3, r2
 80021a4:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 80021a6:	883a      	ldrh	r2, [r7, #0]
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80021b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80021b4:	8879      	ldrh	r1, [r7, #2]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	1acb      	subs	r3, r1, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bfb8      	it	lt
 80021be:	425b      	neglt	r3, r3
 80021c0:	429a      	cmp	r2, r3
 80021c2:	bfcc      	ite	gt
 80021c4:	2301      	movgt	r3, #1
 80021c6:	2300      	movle	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80021cc:	8a7b      	ldrh	r3, [r7, #18]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <ST7789_DrawLine+0x62>
		swap = x0;
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80021d6:	88bb      	ldrh	r3, [r7, #4]
 80021d8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80021da:	8a3b      	ldrh	r3, [r7, #16]
 80021dc:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80021e2:	883b      	ldrh	r3, [r7, #0]
 80021e4:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80021e6:	8a3b      	ldrh	r3, [r7, #16]
 80021e8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d90b      	bls.n	800220a <ST7789_DrawLine+0x82>
		swap = x0;
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80021fa:	8a3b      	ldrh	r3, [r7, #16]
 80021fc:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80021fe:	88bb      	ldrh	r3, [r7, #4]
 8002200:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8002202:	883b      	ldrh	r3, [r7, #0]
 8002204:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8002206:	8a3b      	ldrh	r3, [r7, #16]
 8002208:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	b29b      	uxth	r3, r3
 8002212:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8002214:	883a      	ldrh	r2, [r7, #0]
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	bfb8      	it	lt
 800221e:	425b      	neglt	r3, r3
 8002220:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8002222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002226:	0fda      	lsrs	r2, r3, #31
 8002228:	4413      	add	r3, r2
 800222a:	105b      	asrs	r3, r3, #1
 800222c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800222e:	88ba      	ldrh	r2, [r7, #4]
 8002230:	883b      	ldrh	r3, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d202      	bcs.n	800223c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8002236:	2301      	movs	r3, #1
 8002238:	82bb      	strh	r3, [r7, #20]
 800223a:	e028      	b.n	800228e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800223c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002240:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8002242:	e024      	b.n	800228e <ST7789_DrawLine+0x106>
        if (steep) {
 8002244:	8a7b      	ldrh	r3, [r7, #18]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800224a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800224c:	88f9      	ldrh	r1, [r7, #6]
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff13 	bl	800207c <ST7789_DrawPixel>
 8002256:	e005      	b.n	8002264 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8002258:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800225a:	88b9      	ldrh	r1, [r7, #4]
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff0c 	bl	800207c <ST7789_DrawPixel>
        }
        err -= dy;
 8002264:	8afa      	ldrh	r2, [r7, #22]
 8002266:	89bb      	ldrh	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800226e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002272:	2b00      	cmp	r3, #0
 8002274:	da08      	bge.n	8002288 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8002276:	8aba      	ldrh	r2, [r7, #20]
 8002278:	88bb      	ldrh	r3, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800227e:	8afa      	ldrh	r2, [r7, #22]
 8002280:	89fb      	ldrh	r3, [r7, #14]
 8002282:	4413      	add	r3, r2
 8002284:	b29b      	uxth	r3, r3
 8002286:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	3301      	adds	r3, #1
 800228c:	80fb      	strh	r3, [r7, #6]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	429a      	cmp	r2, r3
 8002294:	d9d6      	bls.n	8002244 <ST7789_DrawLine+0xbc>
        }
    }
}
 8002296:	bf00      	nop
 8002298:	bf00      	nop
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd90      	pop	{r4, r7, pc}

080022a0 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	4604      	mov	r4, r0
 80022a8:	4608      	mov	r0, r1
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	4623      	mov	r3, r4
 80022b0:	80fb      	strh	r3, [r7, #6]
 80022b2:	4603      	mov	r3, r0
 80022b4:	80bb      	strh	r3, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	807b      	strh	r3, [r7, #2]
 80022ba:	4613      	mov	r3, r2
 80022bc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80022be:	2200      	movs	r2, #0
 80022c0:	2104      	movs	r1, #4
 80022c2:	4818      	ldr	r0, [pc, #96]	@ (8002324 <ST7789_DrawRectangle+0x84>)
 80022c4:	f00d fe40 	bl	800ff48 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 80022c8:	88bc      	ldrh	r4, [r7, #4]
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	88b9      	ldrh	r1, [r7, #4]
 80022ce:	88f8      	ldrh	r0, [r7, #6]
 80022d0:	8b3b      	ldrh	r3, [r7, #24]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	4623      	mov	r3, r4
 80022d6:	f7ff ff57 	bl	8002188 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 80022da:	883c      	ldrh	r4, [r7, #0]
 80022dc:	88fa      	ldrh	r2, [r7, #6]
 80022de:	88b9      	ldrh	r1, [r7, #4]
 80022e0:	88f8      	ldrh	r0, [r7, #6]
 80022e2:	8b3b      	ldrh	r3, [r7, #24]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	4623      	mov	r3, r4
 80022e8:	f7ff ff4e 	bl	8002188 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 80022ec:	883c      	ldrh	r4, [r7, #0]
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	8839      	ldrh	r1, [r7, #0]
 80022f2:	88f8      	ldrh	r0, [r7, #6]
 80022f4:	8b3b      	ldrh	r3, [r7, #24]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4623      	mov	r3, r4
 80022fa:	f7ff ff45 	bl	8002188 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 80022fe:	883c      	ldrh	r4, [r7, #0]
 8002300:	887a      	ldrh	r2, [r7, #2]
 8002302:	88b9      	ldrh	r1, [r7, #4]
 8002304:	8878      	ldrh	r0, [r7, #2]
 8002306:	8b3b      	ldrh	r3, [r7, #24]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4623      	mov	r3, r4
 800230c:	f7ff ff3c 	bl	8002188 <ST7789_DrawLine>
	ST7789_UnSelect();
 8002310:	2201      	movs	r2, #1
 8002312:	2104      	movs	r1, #4
 8002314:	4803      	ldr	r0, [pc, #12]	@ (8002324 <ST7789_DrawRectangle+0x84>)
 8002316:	f00d fe17 	bl	800ff48 <HAL_GPIO_WritePin>
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	bf00      	nop
 8002324:	40020400 	.word	0x40020400

08002328 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	4604      	mov	r4, r0
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4623      	mov	r3, r4
 8002338:	80fb      	strh	r3, [r7, #6]
 800233a:	4603      	mov	r3, r0
 800233c:	80bb      	strh	r3, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	70fb      	strb	r3, [r7, #3]
 8002342:	4613      	mov	r3, r2
 8002344:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	b29b      	uxth	r3, r3
 800234a:	f1c3 0301 	rsb	r3, r3, #1
 800234e:	b29b      	uxth	r3, r3
 8002350:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	03d2      	lsls	r2, r2, #15
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	b29b      	uxth	r3, r3
 8002364:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 800236e:	2200      	movs	r2, #0
 8002370:	2104      	movs	r1, #4
 8002372:	485f      	ldr	r0, [pc, #380]	@ (80024f0 <ST7789_DrawCircle+0x1c8>)
 8002374:	f00d fde8 	bl	800ff48 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	b29a      	uxth	r2, r3
 800237c:	88bb      	ldrh	r3, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	b299      	uxth	r1, r3
 8002382:	883a      	ldrh	r2, [r7, #0]
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fe78 	bl	800207c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	b29b      	uxth	r3, r3
 8002390:	88ba      	ldrh	r2, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b299      	uxth	r1, r3
 8002396:	883a      	ldrh	r2, [r7, #0]
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fe6e 	bl	800207c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	4413      	add	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	883a      	ldrh	r2, [r7, #0]
 80023ac:	88b9      	ldrh	r1, [r7, #4]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fe64 	bl	800207c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	883a      	ldrh	r2, [r7, #0]
 80023c0:	88b9      	ldrh	r1, [r7, #4]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fe5a 	bl	800207c <ST7789_DrawPixel>

	while (x < y) {
 80023c8:	e081      	b.n	80024ce <ST7789_DrawCircle+0x1a6>
		if (f >= 0) {
 80023ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0e      	blt.n	80023f0 <ST7789_DrawCircle+0xc8>
			y--;
 80023d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29b      	uxth	r3, r3
 80023dc:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80023de:	8a7b      	ldrh	r3, [r7, #18]
 80023e0:	3302      	adds	r3, #2
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80023e6:	8afa      	ldrh	r2, [r7, #22]
 80023e8:	8a7b      	ldrh	r3, [r7, #18]
 80023ea:	4413      	add	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80023f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80023fc:	8abb      	ldrh	r3, [r7, #20]
 80023fe:	3302      	adds	r3, #2
 8002400:	b29b      	uxth	r3, r3
 8002402:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002404:	8afa      	ldrh	r2, [r7, #22]
 8002406:	8abb      	ldrh	r3, [r7, #20]
 8002408:	4413      	add	r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 800240e:	8a3a      	ldrh	r2, [r7, #16]
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	4413      	add	r3, r2
 8002414:	b298      	uxth	r0, r3
 8002416:	89fa      	ldrh	r2, [r7, #14]
 8002418:	88bb      	ldrh	r3, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	b29b      	uxth	r3, r3
 800241e:	883a      	ldrh	r2, [r7, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	f7ff fe2b 	bl	800207c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8002426:	8a3b      	ldrh	r3, [r7, #16]
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b298      	uxth	r0, r3
 800242e:	89fa      	ldrh	r2, [r7, #14]
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	883a      	ldrh	r2, [r7, #0]
 8002438:	4619      	mov	r1, r3
 800243a:	f7ff fe1f 	bl	800207c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 800243e:	8a3a      	ldrh	r2, [r7, #16]
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	4413      	add	r3, r2
 8002444:	b298      	uxth	r0, r3
 8002446:	89fb      	ldrh	r3, [r7, #14]
 8002448:	88ba      	ldrh	r2, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	883a      	ldrh	r2, [r7, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f7ff fe13 	bl	800207c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8002456:	8a3b      	ldrh	r3, [r7, #16]
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	b298      	uxth	r0, r3
 800245e:	89fb      	ldrh	r3, [r7, #14]
 8002460:	88ba      	ldrh	r2, [r7, #4]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b29b      	uxth	r3, r3
 8002466:	883a      	ldrh	r2, [r7, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f7ff fe07 	bl	800207c <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	4413      	add	r3, r2
 8002474:	b298      	uxth	r0, r3
 8002476:	8a3a      	ldrh	r2, [r7, #16]
 8002478:	88bb      	ldrh	r3, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	b29b      	uxth	r3, r3
 800247e:	883a      	ldrh	r2, [r7, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	f7ff fdfb 	bl	800207c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	b298      	uxth	r0, r3
 800248e:	8a3a      	ldrh	r2, [r7, #16]
 8002490:	88bb      	ldrh	r3, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	b29b      	uxth	r3, r3
 8002496:	883a      	ldrh	r2, [r7, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	f7ff fdef 	bl	800207c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 800249e:	89fa      	ldrh	r2, [r7, #14]
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	4413      	add	r3, r2
 80024a4:	b298      	uxth	r0, r3
 80024a6:	8a3b      	ldrh	r3, [r7, #16]
 80024a8:	88ba      	ldrh	r2, [r7, #4]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	883a      	ldrh	r2, [r7, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7ff fde3 	bl	800207c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	88fa      	ldrh	r2, [r7, #6]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	b298      	uxth	r0, r3
 80024be:	8a3b      	ldrh	r3, [r7, #16]
 80024c0:	88ba      	ldrh	r2, [r7, #4]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	883a      	ldrh	r2, [r7, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7ff fdd7 	bl	800207c <ST7789_DrawPixel>
	while (x < y) {
 80024ce:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80024d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	f6ff af77 	blt.w	80023ca <ST7789_DrawCircle+0xa2>
	}
	ST7789_UnSelect();
 80024dc:	2201      	movs	r2, #1
 80024de:	2104      	movs	r1, #4
 80024e0:	4803      	ldr	r0, [pc, #12]	@ (80024f0 <ST7789_DrawCircle+0x1c8>)
 80024e2:	f00d fd31 	bl	800ff48 <HAL_GPIO_WritePin>
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd90      	pop	{r4, r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40020400 	.word	0x40020400

080024f4 <ST7789_InvertColors>:
 * @brief Invert Fullscreen color
 * @param invert -> Whether to invert
 * @return none
 */
void ST7789_InvertColors(uint8_t invert)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80024fe:	2200      	movs	r2, #0
 8002500:	2104      	movs	r1, #4
 8002502:	480a      	ldr	r0, [pc, #40]	@ (800252c <ST7789_InvertColors+0x38>)
 8002504:	f00d fd20 	bl	800ff48 <HAL_GPIO_WritePin>
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <ST7789_InvertColors+0x1e>
 800250e:	2321      	movs	r3, #33	@ 0x21
 8002510:	e000      	b.n	8002514 <ST7789_InvertColors+0x20>
 8002512:	2320      	movs	r3, #32
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fbcf 	bl	8001cb8 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800251a:	2201      	movs	r2, #1
 800251c:	2104      	movs	r1, #4
 800251e:	4803      	ldr	r0, [pc, #12]	@ (800252c <ST7789_InvertColors+0x38>)
 8002520:	f00d fd12 	bl	800ff48 <HAL_GPIO_WritePin>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40020400 	.word	0x40020400

08002530 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002530:	b082      	sub	sp, #8
 8002532:	b580      	push	{r7, lr}
 8002534:	b088      	sub	sp, #32
 8002536:	af00      	add	r7, sp, #0
 8002538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
 800253e:	460b      	mov	r3, r1
 8002540:	80bb      	strh	r3, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8002546:	2200      	movs	r2, #0
 8002548:	2104      	movs	r1, #4
 800254a:	4837      	ldr	r0, [pc, #220]	@ (8002628 <ST7789_WriteChar+0xf8>)
 800254c:	f00d fcfc 	bl	800ff48 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002550:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002554:	461a      	mov	r2, r3
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	4413      	add	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002564:	4619      	mov	r1, r3
 8002566:	88bb      	ldrh	r3, [r7, #4]
 8002568:	440b      	add	r3, r1
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29b      	uxth	r3, r3
 8002570:	88b9      	ldrh	r1, [r7, #4]
 8002572:	88f8      	ldrh	r0, [r7, #6]
 8002574:	f7ff fc4a 	bl	8001e0c <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	e041      	b.n	8002602 <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 800257e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	3b20      	subs	r3, #32
 8002584:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4619      	mov	r1, r3
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	440b      	add	r3, r1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e027      	b.n	80025f0 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80025b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	743b      	strb	r3, [r7, #16]
 80025ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	2102      	movs	r1, #2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fb9a 	bl	8001d00 <ST7789_WriteData>
 80025cc:	e00d      	b.n	80025ea <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80025ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	733b      	strb	r3, [r7, #12]
 80025d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	2102      	movs	r1, #2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fb8b 	bl	8001d00 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025f4:	461a      	mov	r2, r3
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d3d1      	bcc.n	80025a0 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	3301      	adds	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002606:	461a      	mov	r2, r3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4293      	cmp	r3, r2
 800260c:	d3b7      	bcc.n	800257e <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 800260e:	2201      	movs	r2, #1
 8002610:	2104      	movs	r1, #4
 8002612:	4805      	ldr	r0, [pc, #20]	@ (8002628 <ST7789_WriteChar+0xf8>)
 8002614:	f00d fc98 	bl	800ff48 <HAL_GPIO_WritePin>
}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002622:	b002      	add	sp, #8
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40020400 	.word	0x40020400

0800262c <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800262c:	b082      	sub	sp, #8
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af04      	add	r7, sp, #16
 8002634:	603a      	str	r2, [r7, #0]
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	4603      	mov	r3, r0
 800263a:	80fb      	strh	r3, [r7, #6]
 800263c:	460b      	mov	r3, r1
 800263e:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8002640:	2200      	movs	r2, #0
 8002642:	2104      	movs	r1, #4
 8002644:	4822      	ldr	r0, [pc, #136]	@ (80026d0 <ST7789_WriteString+0xa4>)
 8002646:	f00d fc7f 	bl	800ff48 <HAL_GPIO_WritePin>
	while (*str) {
 800264a:	e02e      	b.n	80026aa <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	7d3a      	ldrb	r2, [r7, #20]
 8002650:	4413      	add	r3, r2
 8002652:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002656:	db13      	blt.n	8002680 <ST7789_WriteString+0x54>
			x = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800265c:	7d7b      	ldrb	r3, [r7, #21]
 800265e:	461a      	mov	r2, r3
 8002660:	88bb      	ldrh	r3, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8002666:	88bb      	ldrh	r3, [r7, #4]
 8002668:	7d7a      	ldrb	r2, [r7, #21]
 800266a:	4413      	add	r3, r2
 800266c:	2bef      	cmp	r3, #239	@ 0xef
 800266e:	dc21      	bgt.n	80026b4 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b20      	cmp	r3, #32
 8002676:	d103      	bne.n	8002680 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	603b      	str	r3, [r7, #0]
				continue;
 800267e:	e014      	b.n	80026aa <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	88b9      	ldrh	r1, [r7, #4]
 8002686:	88f8      	ldrh	r0, [r7, #6]
 8002688:	8c3b      	ldrh	r3, [r7, #32]
 800268a:	9302      	str	r3, [sp, #8]
 800268c:	8bbb      	ldrh	r3, [r7, #28]
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f7ff ff4b 	bl	8002530 <ST7789_WriteChar>
		x += font.width;
 800269a:	7d3b      	ldrb	r3, [r7, #20]
 800269c:	461a      	mov	r2, r3
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	4413      	add	r3, r2
 80026a2:	80fb      	strh	r3, [r7, #6]
		str++;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	603b      	str	r3, [r7, #0]
	while (*str) {
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1cc      	bne.n	800264c <ST7789_WriteString+0x20>
 80026b2:	e000      	b.n	80026b6 <ST7789_WriteString+0x8a>
				break;
 80026b4:	bf00      	nop
	}
	ST7789_UnSelect();
 80026b6:	2201      	movs	r2, #1
 80026b8:	2104      	movs	r1, #4
 80026ba:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <ST7789_WriteString+0xa4>)
 80026bc:	f00d fc44 	bl	800ff48 <HAL_GPIO_WritePin>
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026ca:	b002      	add	sp, #8
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40020400 	.word	0x40020400

080026d4 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b089      	sub	sp, #36	@ 0x24
 80026d8:	af02      	add	r7, sp, #8
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	80fb      	strh	r3, [r7, #6]
 80026e6:	4603      	mov	r3, r0
 80026e8:	80bb      	strh	r3, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]
 80026ee:	4613      	mov	r3, r2
 80026f0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80026f2:	2200      	movs	r2, #0
 80026f4:	2104      	movs	r1, #4
 80026f6:	4869      	ldr	r0, [pc, #420]	@ (800289c <ST7789_DrawFilledCircle+0x1c8>)
 80026f8:	f00d fc26 	bl	800ff48 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	f1c3 0301 	rsb	r3, r3, #1
 8002702:	b29b      	uxth	r3, r3
 8002704:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002706:	2301      	movs	r3, #1
 8002708:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	461a      	mov	r2, r3
 800270e:	03d2      	lsls	r2, r2, #15
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	b29b      	uxth	r3, r3
 8002716:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8002720:	88f8      	ldrh	r0, [r7, #6]
 8002722:	88ba      	ldrh	r2, [r7, #4]
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	4413      	add	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	883a      	ldrh	r2, [r7, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	f7ff fca5 	bl	800207c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8002732:	88f8      	ldrh	r0, [r7, #6]
 8002734:	88ba      	ldrh	r2, [r7, #4]
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	883a      	ldrh	r2, [r7, #0]
 800273e:	4619      	mov	r1, r3
 8002740:	f7ff fc9c 	bl	800207c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	4413      	add	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	88b9      	ldrh	r1, [r7, #4]
 800274e:	883a      	ldrh	r2, [r7, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fc93 	bl	800207c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8002756:	88fa      	ldrh	r2, [r7, #6]
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	b29b      	uxth	r3, r3
 800275e:	88b9      	ldrh	r1, [r7, #4]
 8002760:	883a      	ldrh	r2, [r7, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fc8a 	bl	800207c <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	b298      	uxth	r0, r3
 8002770:	88b9      	ldrh	r1, [r7, #4]
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	4413      	add	r3, r2
 8002778:	b29a      	uxth	r2, r3
 800277a:	88bc      	ldrh	r4, [r7, #4]
 800277c:	883b      	ldrh	r3, [r7, #0]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	4623      	mov	r3, r4
 8002782:	f7ff fd01 	bl	8002188 <ST7789_DrawLine>

	while (x < y) {
 8002786:	e079      	b.n	800287c <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 8002788:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0e      	blt.n	80027ae <ST7789_DrawFilledCircle+0xda>
			y--;
 8002790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800279c:	8a7b      	ldrh	r3, [r7, #18]
 800279e:	3302      	adds	r3, #2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80027a4:	8afa      	ldrh	r2, [r7, #22]
 80027a6:	8a7b      	ldrh	r3, [r7, #18]
 80027a8:	4413      	add	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80027ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80027ba:	8abb      	ldrh	r3, [r7, #20]
 80027bc:	3302      	adds	r3, #2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80027c2:	8afa      	ldrh	r2, [r7, #22]
 80027c4:	8abb      	ldrh	r3, [r7, #20]
 80027c6:	4413      	add	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	8a3b      	ldrh	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	b298      	uxth	r0, r3
 80027d4:	88ba      	ldrh	r2, [r7, #4]
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	4413      	add	r3, r2
 80027da:	b299      	uxth	r1, r3
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	8a3b      	ldrh	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	b29c      	uxth	r4, r3
 80027e4:	88ba      	ldrh	r2, [r7, #4]
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	4413      	add	r3, r2
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	883b      	ldrh	r3, [r7, #0]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	4622      	mov	r2, r4
 80027f4:	f7ff fcc8 	bl	8002188 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	8a3b      	ldrh	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	b298      	uxth	r0, r3
 8002800:	88ba      	ldrh	r2, [r7, #4]
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b299      	uxth	r1, r3
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	8a3b      	ldrh	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	b29c      	uxth	r4, r3
 8002810:	88ba      	ldrh	r2, [r7, #4]
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b29a      	uxth	r2, r3
 8002818:	883b      	ldrh	r3, [r7, #0]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	4622      	mov	r2, r4
 8002820:	f7ff fcb2 	bl	8002188 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	4413      	add	r3, r2
 800282a:	b298      	uxth	r0, r3
 800282c:	88ba      	ldrh	r2, [r7, #4]
 800282e:	8a3b      	ldrh	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	b299      	uxth	r1, r3
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	89fb      	ldrh	r3, [r7, #14]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	b29c      	uxth	r4, r3
 800283c:	88ba      	ldrh	r2, [r7, #4]
 800283e:	8a3b      	ldrh	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	b29a      	uxth	r2, r3
 8002844:	883b      	ldrh	r3, [r7, #0]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	4622      	mov	r2, r4
 800284c:	f7ff fc9c 	bl	8002188 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	89fb      	ldrh	r3, [r7, #14]
 8002854:	4413      	add	r3, r2
 8002856:	b298      	uxth	r0, r3
 8002858:	88ba      	ldrh	r2, [r7, #4]
 800285a:	8a3b      	ldrh	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	b299      	uxth	r1, r3
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	89fb      	ldrh	r3, [r7, #14]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	b29c      	uxth	r4, r3
 8002868:	88ba      	ldrh	r2, [r7, #4]
 800286a:	8a3b      	ldrh	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	b29a      	uxth	r2, r3
 8002870:	883b      	ldrh	r3, [r7, #0]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	4622      	mov	r2, r4
 8002878:	f7ff fc86 	bl	8002188 <ST7789_DrawLine>
	while (x < y) {
 800287c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002884:	429a      	cmp	r2, r3
 8002886:	f6ff af7f 	blt.w	8002788 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 800288a:	2201      	movs	r2, #1
 800288c:	2104      	movs	r1, #4
 800288e:	4803      	ldr	r0, [pc, #12]	@ (800289c <ST7789_DrawFilledCircle+0x1c8>)
 8002890:	f00d fb5a 	bl	800ff48 <HAL_GPIO_WritePin>
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}
 800289c:	40020400 	.word	0x40020400

080028a0 <c_FFTImplementationCallback_doH>:
static void c_FFTImplementationCallback_doH(const emxArray_real32_T *x,
                                            emxArray_creal32_T *y,
                                            int unsigned_nRows,
                                            const emxArray_real32_T *costab,
                                            const emxArray_real32_T *sintab)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	ed2d 8b02 	vpush	{d8}
 80028a6:	b0b1      	sub	sp, #196	@ 0xc4
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  int nRowsD2;
  int u0;
  int *bitrevIndex_data;
  int *wrapIndex_data;
  bool tst;
  sintab_data = sintab->data;
 80028b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  costab_data = costab->data;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  y_data = y->data;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  x_data = x->data;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  nRows = (int)((unsigned int)unsigned_nRows >> 1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  u0 = y->size[0];
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (u0 > nRows) {
 80028e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80028ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dd03      	ble.n	80028fa <c_FFTImplementationCallback_doH+0x5a>
    u0 = nRows;
 80028f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  }
  iDelta2 = nRows - 2;
 80028fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028fe:	3b02      	subs	r3, #2
 8002900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  nRowsD2 = nRows / 2;
 8002904:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002908:	0fda      	lsrs	r2, r3, #31
 800290a:	4413      	add	r3, r2
 800290c:	105b      	asrs	r3, r3, #1
 800290e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  k = nRowsD2 / 2;
 8002912:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002916:	0fda      	lsrs	r2, r3, #31
 8002918:	4413      	add	r3, r2
 800291a:	105b      	asrs	r3, r3, #1
 800291c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  hszCostab = (int)((unsigned int)costab->size[1] >> 1);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  emxInit_real32_T(&hcostab, 2);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	2102      	movs	r1, #2
 8002934:	4618      	mov	r0, r3
 8002936:	f006 fb08 	bl	8008f4a <emxInit_real32_T>
  iheight = hcostab->size[0] * hcostab->size[1];
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	6852      	ldr	r2, [r2, #4]
 8002944:	3204      	adds	r2, #4
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  hcostab->size[0] = 1;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
  hcostab->size[1] = hszCostab;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002962:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hcostab, iheight);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800296a:	4618      	mov	r0, r3
 800296c:	f006 f945 	bl	8008bfa <emxEnsureCapacity_real32_T>
  hcostab_data = hcostab->data;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  emxInit_real32_T(&hsintab, 2);
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2102      	movs	r1, #2
 800297e:	4618      	mov	r0, r3
 8002980:	f006 fae3 	bl	8008f4a <emxInit_real32_T>
  iheight = hsintab->size[0] * hsintab->size[1];
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	6852      	ldr	r2, [r2, #4]
 800298e:	3204      	adds	r2, #4
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  hsintab->size[0] = 1;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
  hsintab->size[1] = hszCostab;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80029ac:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hsintab, iheight);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f006 f920 	bl	8008bfa <emxEnsureCapacity_real32_T>
  hsintab_data = hsintab->data;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (i = 0; i < hszCostab; i++) {
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029c6:	e026      	b.n	8002a16 <c_FFTImplementationCallback_doH+0x176>
    iterVar = ((i + 1) << 1) - 2;
 80029c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029cc:	3301      	adds	r3, #1
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	3b02      	subs	r3, #2
 80029d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    hcostab_data[i] = costab_data[iterVar];
 80029d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80029e0:	441a      	add	r2, r3
 80029e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80029ec:	440b      	add	r3, r1
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	601a      	str	r2, [r3, #0]
    hsintab_data[i] = sintab_data[iterVar];
 80029f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029fc:	441a      	add	r2, r3
 80029fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a06:	440b      	add	r3, r1
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < hszCostab; i++) {
 8002a0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a10:	3301      	adds	r3, #1
 8002a12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	dbd2      	blt.n	80029c8 <c_FFTImplementationCallback_doH+0x128>
  }
  emxInit_creal32_T(&reconVar1);
 8002a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a26:	4618      	mov	r0, r3
 8002a28:	f006 fa2c 	bl	8008e84 <emxInit_creal32_T>
  iheight = reconVar1->size[0];
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  reconVar1->size[0] = nRows;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002a3e:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(reconVar1, iheight);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 f809 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  reconVar1_data = reconVar1->data;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	67bb      	str	r3, [r7, #120]	@ 0x78
  emxInit_creal32_T(&reconVar2);
 8002a52:	f107 0320 	add.w	r3, r7, #32
 8002a56:	4618      	mov	r0, r3
 8002a58:	f006 fa14 	bl	8008e84 <emxInit_creal32_T>
  iheight = reconVar2->size[0];
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  reconVar2->size[0] = nRows;
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002a6e:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(reconVar2, iheight);
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f005 fff1 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  reconVar2_data = reconVar2->data;
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	677b      	str	r3, [r7, #116]	@ 0x74
  emxInit_int32_T(&wrapIndex, 2);
 8002a82:	f107 0318 	add.w	r3, r7, #24
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f006 fa24 	bl	8008ed6 <emxInit_int32_T>
  iheight = wrapIndex->size[0] * wrapIndex->size[1];
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	6852      	ldr	r2, [r2, #4]
 8002a98:	3204      	adds	r2, #4
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  wrapIndex->size[0] = 1;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
  wrapIndex->size[1] = nRows;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002ab6:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_int32_T(wrapIndex, iheight);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f006 f834 	bl	8008b2c <emxEnsureCapacity_int32_T>
  wrapIndex_data = wrapIndex->data;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	673b      	str	r3, [r7, #112]	@ 0x70
  for (i = 0; i < nRows; i++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ad0:	e054      	b.n	8002b7c <c_FFTImplementationCallback_doH+0x2dc>
    temp2_im = sintab_data[i];
 8002ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002adc:	4413      	add	r3, r2
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	653b      	str	r3, [r7, #80]	@ 0x50
    temp2_re = costab_data[i];
 8002ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002aec:	4413      	add	r3, r2
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	657b      	str	r3, [r7, #84]	@ 0x54
    reconVar1_data[i].re = temp2_im + 1.0F;
 8002af2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002afa:	4413      	add	r3, r2
 8002afc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002b00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b08:	edc3 7a00 	vstr	s15, [r3]
    reconVar1_data[i].im = -temp2_re;
 8002b0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002b14:	4413      	add	r3, r2
 8002b16:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002b1a:	eef1 7a67 	vneg.f32	s15, s15
 8002b1e:	edc3 7a01 	vstr	s15, [r3, #4]
    reconVar2_data[i].re = 1.0F - temp2_im;
 8002b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b2a:	4413      	add	r3, r2
 8002b2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b30:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b38:	edc3 7a00 	vstr	s15, [r3]
    reconVar2_data[i].im = temp2_re;
 8002b3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b44:	4413      	add	r3, r2
 8002b46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b48:	605a      	str	r2, [r3, #4]
    if (i + 1 != 1) {
 8002b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00c      	beq.n	8002b6c <c_FFTImplementationCallback_doH+0x2cc>
      wrapIndex_data[i] = (nRows - i) + 1;
 8002b52:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b5a:	1ad2      	subs	r2, r2, r3
 8002b5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002b64:	440b      	add	r3, r1
 8002b66:	3201      	adds	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e002      	b.n	8002b72 <c_FFTImplementationCallback_doH+0x2d2>
    } else {
      wrapIndex_data[0] = 1;
 8002b6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < nRows; i++) {
 8002b72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b76:	3301      	adds	r3, #1
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dba4      	blt.n	8002ad2 <c_FFTImplementationCallback_doH+0x232>
    }
  }
  z = (double)unsigned_nRows / 2.0;
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fd fcd3 	bl	8000534 <__aeabi_i2d>
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b96:	f7fd fe61 	bl	800085c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  ju = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  hszCostab = 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  emxInit_int32_T(&bitrevIndex, 1);
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f006 f98e 	bl	8008ed6 <emxInit_int32_T>
  iterVar = (int)z;
 8002bba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bbe:	f7fd ffd3 	bl	8000b68 <__aeabi_d2iz>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  iheight = bitrevIndex->size[0];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  bitrevIndex->size[0] = (int)z;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	685c      	ldr	r4, [r3, #4]
 8002bd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bda:	f7fd ffc5 	bl	8000b68 <__aeabi_d2iz>
 8002bde:	4603      	mov	r3, r0
 8002be0:	6023      	str	r3, [r4, #0]
  emxEnsureCapacity_int32_T(bitrevIndex, iheight);
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f005 ff9f 	bl	8008b2c <emxEnsureCapacity_int32_T>
  bitrevIndex_data = bitrevIndex->data;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	667b      	str	r3, [r7, #100]	@ 0x64
  for (iheight = 0; iheight < iterVar; iheight++) {
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bfa:	e00b      	b.n	8002c14 <c_FFTImplementationCallback_doH+0x374>
    bitrevIndex_data[iheight] = 0;
 8002bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002c04:	4413      	add	r3, r2
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
  for (iheight = 0; iheight < iterVar; iheight++) {
 8002c0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	dbed      	blt.n	8002bfc <c_FFTImplementationCallback_doH+0x35c>
  }
  for (iheight = 0; iheight <= u0 - 2; iheight++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c26:	e037      	b.n	8002c98 <c_FFTImplementationCallback_doH+0x3f8>
    bitrevIndex_data[iheight] = hszCostab;
 8002c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002c30:	4413      	add	r3, r2
 8002c32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c36:	601a      	str	r2, [r3, #0]
    iterVar = (int)z;
 8002c38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c3c:	f7fd ff94 	bl	8000b68 <__aeabi_d2iz>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tst = true;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    while (tst) {
 8002c4c:	e016      	b.n	8002c7c <c_FFTImplementationCallback_doH+0x3dc>
      iterVar >>= 1;
 8002c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c52:	105b      	asrs	r3, r3, #1
 8002c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      ju ^= iterVar;
 8002c58:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c60:	4053      	eors	r3, r2
 8002c62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      tst = ((ju & iterVar) == 0);
 8002c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    while (tst) {
 8002c7c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e4      	bne.n	8002c4e <c_FFTImplementationCallback_doH+0x3ae>
    }
    hszCostab = ju + 1;
 8002c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  for (iheight = 0; iheight <= u0 - 2; iheight++) {
 8002c8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c92:	3301      	adds	r3, #1
 8002c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	dbc0      	blt.n	8002c28 <c_FFTImplementationCallback_doH+0x388>
  }
  bitrevIndex_data[u0 - 1] = hszCostab;
 8002ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002caa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002cba:	601a      	str	r2, [r3, #0]
  if ((x->size[0] & 1) == 0) {
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <c_FFTImplementationCallback_doH+0x43c>
    tst = true;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    u0 = x->size[0];
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cda:	e015      	b.n	8002d08 <c_FFTImplementationCallback_doH+0x468>
  } else if (x->size[0] >= unsigned_nRows) {
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	dc06      	bgt.n	8002cf6 <c_FFTImplementationCallback_doH+0x456>
    tst = true;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    u0 = unsigned_nRows;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cf4:	e008      	b.n	8002d08 <c_FFTImplementationCallback_doH+0x468>
  } else {
    tst = false;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    u0 = x->size[0] - 1;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  }
  if (u0 > unsigned_nRows) {
 8002d08:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dd02      	ble.n	8002d18 <c_FFTImplementationCallback_doH+0x478>
    u0 = unsigned_nRows;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  }
  d = (double)u0 / 2.0;
 8002d18:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002d1c:	f7fd fc0a 	bl	8000534 <__aeabi_i2d>
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d28:	f7fd fd98 	bl	800085c <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  iheight = (int)d;
 8002d34:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002d38:	f7fd ff16 	bl	8000b68 <__aeabi_d2iz>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  for (i = 0; i < iheight; i++) {
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d48:	e034      	b.n	8002db4 <c_FFTImplementationCallback_doH+0x514>
    hszCostab = i << 1;
 8002d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    y_data[bitrevIndex_data[i] - 1].re = x_data[hszCostab];
 8002d54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002d5e:	441a      	add	r2, r3
 8002d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002d68:	440b      	add	r3, r1
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002d70:	3b01      	subs	r3, #1
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002d78:	440b      	add	r3, r1
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	601a      	str	r2, [r3, #0]
    y_data[bitrevIndex_data[i] - 1].im = x_data[hszCostab + 1];
 8002d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d82:	3301      	adds	r3, #1
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002d8a:	441a      	add	r2, r3
 8002d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002d94:	440b      	add	r3, r1
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002da4:	440b      	add	r3, r1
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	605a      	str	r2, [r3, #4]
  for (i = 0; i < iheight; i++) {
 8002daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dae:	3301      	adds	r3, #1
 8002db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002db4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	dbc4      	blt.n	8002d4a <c_FFTImplementationCallback_doH+0x4aa>
  }
  if (!tst) {
 8002dc0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d035      	beq.n	8002e3a <c_FFTImplementationCallback_doH+0x59a>
    iheight = bitrevIndex_data[(int)d] - 1;
 8002dce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002dd2:	f7fd fec9 	bl	8000b68 <__aeabi_d2iz>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ddc:	4413      	add	r3, r2
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if ((int)d - 1 < 0) {
 8002de6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002dea:	f7fd febd 	bl	8000b68 <__aeabi_d2iz>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	dc03      	bgt.n	8002dfc <c_FFTImplementationCallback_doH+0x55c>
      u0 = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dfa:	e007      	b.n	8002e0c <c_FFTImplementationCallback_doH+0x56c>
    } else {
      u0 = (int)d << 1;
 8002dfc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002e00:	f7fd feb2 	bl	8000b68 <__aeabi_d2iz>
 8002e04:	4603      	mov	r3, r0
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }
    y_data[iheight].re = x_data[u0];
 8002e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002e16:	441a      	add	r2, r3
 8002e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002e22:	440b      	add	r3, r1
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	601a      	str	r2, [r3, #0]
    y_data[iheight].im = 0.0F;
 8002e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002e32:	4413      	add	r3, r2
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	605a      	str	r2, [r3, #4]
  }
  emxFree_int32_T(&bitrevIndex);
 8002e3a:	f107 031c 	add.w	r3, r7, #28
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f005 ff96 	bl	8008d70 <emxFree_int32_T>
  if (nRows > 1) {
 8002e44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	dd76      	ble.n	8002f3a <c_FFTImplementationCallback_doH+0x69a>
    for (i = 0; i <= iDelta2; i += 2) {
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e52:	e06c      	b.n	8002f2e <c_FFTImplementationCallback_doH+0x68e>
      temp2_re = y_data[i + 1].re;
 8002e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e58:	3301      	adds	r3, #1
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002e60:	4413      	add	r3, r2
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	657b      	str	r3, [r7, #84]	@ 0x54
      temp2_im = y_data[i + 1].im;
 8002e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002e72:	4413      	add	r3, r2
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	653b      	str	r3, [r7, #80]	@ 0x50
      temp_re = temp2_re;
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      temp_im = temp2_im;
 8002e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      re = y_data[i].re;
 8002e80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002e8a:	4413      	add	r3, r2
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	647b      	str	r3, [r7, #68]	@ 0x44
      im = y_data[i].im;
 8002e90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002e9a:	4413      	add	r3, r2
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	643b      	str	r3, [r7, #64]	@ 0x40
      temp2_re = re - temp2_re;
 8002ea0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002ea4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eac:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      temp2_im = im - temp2_im;
 8002eb0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002eb4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ebc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
      y_data[i + 1].re = temp2_re;
 8002ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002ecc:	4413      	add	r3, r2
 8002ece:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ed0:	601a      	str	r2, [r3, #0]
      y_data[i + 1].im = temp2_im;
 8002ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002ede:	4413      	add	r3, r2
 8002ee0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ee2:	605a      	str	r2, [r3, #4]
      re += temp_re;
 8002ee4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002ee8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      im += temp_im;
 8002ef4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002ef8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      y_data[i].re = re;
 8002f04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f0e:	4413      	add	r3, r2
 8002f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f12:	601a      	str	r2, [r3, #0]
      y_data[i].im = im;
 8002f14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f1e:	4413      	add	r3, r2
 8002f20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f22:	605a      	str	r2, [r3, #4]
    for (i = 0; i <= iDelta2; i += 2) {
 8002f24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f28:	3302      	adds	r3, #2
 8002f2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f36:	429a      	cmp	r2, r3
 8002f38:	dd8c      	ble.n	8002e54 <c_FFTImplementationCallback_doH+0x5b4>
    }
  }
  nRows = 2;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  iDelta2 = 4;
 8002f40:	2304      	movs	r3, #4
 8002f42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  iheight = ((k - 1) << 2) + 1;
 8002f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  while (k > 0) {
 8002f54:	e159      	b.n	800320a <c_FFTImplementationCallback_doH+0x96a>
    for (i = 0; i < iheight; i += iDelta2) {
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f5c:	e06d      	b.n	800303a <c_FFTImplementationCallback_doH+0x79a>
      iterVar = i + nRows;
 8002f5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f66:	4413      	add	r3, r2
 8002f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      temp_re = y_data[iterVar].re;
 8002f6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f76:	4413      	add	r3, r2
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      temp_im = y_data[iterVar].im;
 8002f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f86:	4413      	add	r3, r2
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      y_data[iterVar].re = y_data[i].re - temp_re;
 8002f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f96:	4413      	add	r3, r2
 8002f98:	ed93 7a00 	vldr	s14, [r3]
 8002f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002fa6:	4413      	add	r3, r2
 8002fa8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb0:	edc3 7a00 	vstr	s15, [r3]
      y_data[iterVar].im = y_data[i].im - temp_im;
 8002fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002fbe:	4413      	add	r3, r2
 8002fc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002fce:	4413      	add	r3, r2
 8002fd0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd8:	edc3 7a01 	vstr	s15, [r3, #4]
      y_data[i].re += temp_re;
 8002fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002fe6:	4413      	add	r3, r2
 8002fe8:	ed93 7a00 	vldr	s14, [r3]
 8002fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002ff6:	4413      	add	r3, r2
 8002ff8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003000:	edc3 7a00 	vstr	s15, [r3]
      y_data[i].im += temp_im;
 8003004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800300e:	4413      	add	r3, r2
 8003010:	ed93 7a01 	vldr	s14, [r3, #4]
 8003014:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800301e:	4413      	add	r3, r2
 8003020:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003028:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < iheight; i += iDelta2) {
 800302c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003030:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003034:	4413      	add	r3, r2
 8003036:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800303a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800303e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003042:	429a      	cmp	r2, r3
 8003044:	db8b      	blt.n	8002f5e <c_FFTImplementationCallback_doH+0x6be>
    }
    iterVar = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    for (hszCostab = k; hszCostab < nRowsD2; hszCostab += k) {
 800304c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003050:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003054:	e0bb      	b.n	80031ce <c_FFTImplementationCallback_doH+0x92e>
      temp2_re = hcostab_data[hszCostab];
 8003056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003060:	4413      	add	r3, r2
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	657b      	str	r3, [r7, #84]	@ 0x54
      temp2_im = hsintab_data[hszCostab];
 8003066:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800306e:	4413      	add	r3, r2
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	653b      	str	r3, [r7, #80]	@ 0x50
      i = iterVar;
 8003074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
      ju = iterVar + iheight;
 800307c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003084:	4413      	add	r3, r2
 8003086:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      while (i < ju) {
 800308a:	e08d      	b.n	80031a8 <c_FFTImplementationCallback_doH+0x908>
        u0 = i + nRows;
 800308c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003090:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003094:	4413      	add	r3, r2
 8003096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        temp_re_tmp = y_data[u0].im;
 800309a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80030a4:	4413      	add	r3, r2
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	633b      	str	r3, [r7, #48]	@ 0x30
        temp_im = y_data[u0].re;
 80030aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80030b4:	4413      	add	r3, r2
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	64bb      	str	r3, [r7, #72]	@ 0x48
        temp_re = temp2_re * temp_im - temp2_im * temp_re_tmp;
 80030ba:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80030be:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80030c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c6:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80030ca:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        temp_im = temp2_re * temp_re_tmp + temp2_im * temp_im;
 80030da:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80030de:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e6:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80030ea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80030ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        y_data[u0].re = y_data[i].re - temp_re;
 80030fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003104:	4413      	add	r3, r2
 8003106:	ed93 7a00 	vldr	s14, [r3]
 800310a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003114:	4413      	add	r3, r2
 8003116:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	edc3 7a00 	vstr	s15, [r3]
        y_data[u0].im = y_data[i].im - temp_im;
 8003122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800312c:	4413      	add	r3, r2
 800312e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003132:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800313c:	4413      	add	r3, r2
 800313e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003146:	edc3 7a01 	vstr	s15, [r3, #4]
        y_data[i].re += temp_re;
 800314a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003154:	4413      	add	r3, r2
 8003156:	ed93 7a00 	vldr	s14, [r3]
 800315a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003164:	4413      	add	r3, r2
 8003166:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800316a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316e:	edc3 7a00 	vstr	s15, [r3]
        y_data[i].im += temp_im;
 8003172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800317c:	4413      	add	r3, r2
 800317e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800318c:	4413      	add	r3, r2
 800318e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	edc3 7a01 	vstr	s15, [r3, #4]
        i += iDelta2;
 800319a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800319e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031a2:	4413      	add	r3, r2
 80031a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
      while (i < ju) {
 80031a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80031ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031b0:	429a      	cmp	r2, r3
 80031b2:	f6ff af6b 	blt.w	800308c <c_FFTImplementationCallback_doH+0x7ec>
      }
      iterVar++;
 80031b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031ba:	3301      	adds	r3, #1
 80031bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    for (hszCostab = k; hszCostab < nRowsD2; hszCostab += k) {
 80031c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80031c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031c8:	4413      	add	r3, r2
 80031ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80031ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80031d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031d6:	429a      	cmp	r2, r3
 80031d8:	f6ff af3d 	blt.w	8003056 <c_FFTImplementationCallback_doH+0x7b6>
    }
    k /= 2;
 80031dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031e0:	0fda      	lsrs	r2, r3, #31
 80031e2:	4413      	add	r3, r2
 80031e4:	105b      	asrs	r3, r3, #1
 80031e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    nRows = iDelta2;
 80031ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    iDelta2 += iDelta2;
 80031f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    iheight -= nRows;
 80031fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  while (k > 0) {
 800320a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800320e:	2b00      	cmp	r3, #0
 8003210:	f73f aea1 	bgt.w	8002f56 <c_FFTImplementationCallback_doH+0x6b6>
  }
  emxFree_real32_T(&hsintab);
 8003214:	f107 0310 	add.w	r3, r7, #16
 8003218:	4618      	mov	r0, r3
 800321a:	f005 fdd3 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&hcostab);
 800321e:	f107 0314 	add.w	r3, r7, #20
 8003222:	4618      	mov	r0, r3
 8003224:	f005 fdce 	bl	8008dc4 <emxFree_real32_T>
  iterVar = (int)((unsigned int)(int)z >> 1);
 8003228:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800322c:	f7fd fc9c 	bl	8000b68 <__aeabi_d2iz>
 8003230:	4603      	mov	r3, r0
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  temp2_im = y_data[0].re;
 8003238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	653b      	str	r3, [r7, #80]	@ 0x50
  temp_im_tmp = y_data[0].im;
 8003240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  y_re_tmp = temp2_im * reconVar1_data[0].re;
 8003248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  temp_im = temp2_im * reconVar1_data[0].im;
 800325a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800325c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003260:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  b_y_re_tmp = temp2_im * reconVar2_data[0].re;
 800326c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  re = temp2_im * reconVar2_data[0].im;
 800327e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003280:	edd3 7a01 	vldr	s15, [r3, #4]
 8003284:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  y_data[0].re = 0.5F * ((y_re_tmp - temp_im_tmp * reconVar1_data[0].im) +
 8003290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003292:	ed93 7a01 	vldr	s14, [r3, #4]
 8003296:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800329a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80032a2:	ee37 7a67 	vsub.f32	s14, s14, s15
                         (b_y_re_tmp - -temp_im_tmp * reconVar2_data[0].im));
 80032a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80032ac:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80032b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80032b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
  y_data[0].re = 0.5F * ((y_re_tmp - temp_im_tmp * reconVar1_data[0].im) +
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032cc:	edc3 7a00 	vstr	s15, [r3]
  y_data[0].im = 0.5F * ((temp_im + temp_im_tmp * reconVar1_data[0].re) +
 80032d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032d2:	ed93 7a00 	vldr	s14, [r3]
 80032d6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80032da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032de:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80032e2:	ee37 7a27 	vadd.f32	s14, s14, s15
                         (re + -temp_im_tmp * reconVar2_data[0].re));
 80032e6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80032ea:	eef1 6a67 	vneg.f32	s13, s15
 80032ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032f8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80032fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
  y_data[0].im = 0.5F * ((temp_im + temp_im_tmp * reconVar1_data[0].re) +
 8003300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003304:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800330c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003310:	edc3 7a01 	vstr	s15, [r3, #4]
  y_data[(int)z].re =
      0.5F * ((b_y_re_tmp - temp_im_tmp * reconVar2_data[0].im) +
 8003314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003316:	ed93 7a01 	vldr	s14, [r3, #4]
 800331a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003326:	ee37 7a67 	vsub.f32	s14, s14, s15
              (y_re_tmp - -temp_im_tmp * reconVar1_data[0].im));
 800332a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800332c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003330:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003334:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003338:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800333c:	ee76 7aa7 	vadd.f32	s15, s13, s15
      0.5F * ((b_y_re_tmp - temp_im_tmp * reconVar2_data[0].im) +
 8003340:	ee37 8a27 	vadd.f32	s16, s14, s15
  y_data[(int)z].re =
 8003344:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003348:	f7fd fc0e 	bl	8000b68 <__aeabi_d2iz>
 800334c:	4603      	mov	r3, r0
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003354:	4413      	add	r3, r2
      0.5F * ((b_y_re_tmp - temp_im_tmp * reconVar2_data[0].im) +
 8003356:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800335a:	ee68 7a27 	vmul.f32	s15, s16, s15
  y_data[(int)z].re =
 800335e:	edc3 7a00 	vstr	s15, [r3]
  y_data[(int)z].im = 0.5F * ((re + temp_im_tmp * reconVar2_data[0].re) +
 8003362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003364:	ed93 7a00 	vldr	s14, [r3]
 8003368:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800336c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003370:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003374:	ee37 7a27 	vadd.f32	s14, s14, s15
                              (temp_im + -temp_im_tmp * reconVar1_data[0].re));
 8003378:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800337c:	eef1 6a67 	vneg.f32	s13, s15
 8003380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800338a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800338e:	ee76 7aa7 	vadd.f32	s15, s13, s15
  y_data[(int)z].im = 0.5F * ((re + temp_im_tmp * reconVar2_data[0].re) +
 8003392:	ee37 8a27 	vadd.f32	s16, s14, s15
 8003396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800339a:	f7fd fbe5 	bl	8000b68 <__aeabi_d2iz>
 800339e:	4603      	mov	r3, r0
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80033a6:	4413      	add	r3, r2
 80033a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80033ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80033b0:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 2; i <= iterVar; i++) {
 80033b4:	2302      	movs	r3, #2
 80033b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033ba:	e205      	b.n	80037c8 <c_FFTImplementationCallback_doH+0xf28>
    temp_re_tmp = y_data[i - 1].re;
 80033bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033c0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80033c4:	3b01      	subs	r3, #1
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80033cc:	4413      	add	r3, r2
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	633b      	str	r3, [r7, #48]	@ 0x30
    temp_im_tmp = y_data[i - 1].im;
 80033d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033d6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80033da:	3b01      	subs	r3, #1
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80033e2:	4413      	add	r3, r2
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    iheight = wrapIndex_data[i - 1];
 80033e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033f0:	3b01      	subs	r3, #1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80033f6:	4413      	add	r3, r2
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    temp2_im = y_data[iheight - 1].re;
 80033fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003402:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003406:	3b01      	subs	r3, #1
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800340e:	4413      	add	r3, r2
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	653b      	str	r3, [r7, #80]	@ 0x50
    temp_re = y_data[iheight - 1].im;
 8003414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003418:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800341c:	3b01      	subs	r3, #1
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003424:	4413      	add	r3, r2
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	64fb      	str	r3, [r7, #76]	@ 0x4c
    y_re_tmp = reconVar1_data[i - 1].im;
 800342a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800342e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003432:	3b01      	subs	r3, #1
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003438:	4413      	add	r3, r2
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38
    b_y_re_tmp = reconVar1_data[i - 1].re;
 800343e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003442:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003446:	3b01      	subs	r3, #1
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800344c:	4413      	add	r3, r2
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	637b      	str	r3, [r7, #52]	@ 0x34
    c_y_re_tmp = reconVar2_data[i - 1].im;
 8003452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003456:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800345a:	3b01      	subs	r3, #1
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003460:	4413      	add	r3, r2
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    d_y_re_tmp = reconVar2_data[i - 1].re;
 8003466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800346a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800346e:	3b01      	subs	r3, #1
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003474:	4413      	add	r3, r2
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
    y_data[i - 1].re =
        0.5F * ((temp_re_tmp * b_y_re_tmp - temp_im_tmp * y_re_tmp) +
 800347a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800347e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003486:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800348a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003492:	ee37 7a67 	vsub.f32	s14, s14, s15
                (temp2_im * d_y_re_tmp - -temp_re * c_y_re_tmp));
 8003496:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800349a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800349e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034a2:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 80034a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80034aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_re_tmp * b_y_re_tmp - temp_im_tmp * y_re_tmp) +
 80034b2:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[i - 1].re =
 80034b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034ba:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80034be:	3b01      	subs	r3, #1
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80034c6:	4413      	add	r3, r2
        0.5F * ((temp_re_tmp * b_y_re_tmp - temp_im_tmp * y_re_tmp) +
 80034c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034cc:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[i - 1].re =
 80034d0:	edc3 7a00 	vstr	s15, [r3]
    y_data[i - 1].im =
        0.5F * ((temp_re_tmp * y_re_tmp + temp_im_tmp * b_y_re_tmp) +
 80034d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80034d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80034dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80034e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80034e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ec:	ee37 7a27 	vadd.f32	s14, s14, s15
                (temp2_im * c_y_re_tmp + -temp_re * d_y_re_tmp));
 80034f0:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80034f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80034f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034fc:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003500:	eeb1 6a67 	vneg.f32	s12, s15
 8003504:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003508:	ee66 7a27 	vmul.f32	s15, s12, s15
 800350c:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_re_tmp * y_re_tmp + temp_im_tmp * b_y_re_tmp) +
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[i - 1].im =
 8003514:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003518:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800351c:	3b01      	subs	r3, #1
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003524:	4413      	add	r3, r2
        0.5F * ((temp_re_tmp * y_re_tmp + temp_im_tmp * b_y_re_tmp) +
 8003526:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800352a:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[i - 1].im =
 800352e:	edc3 7a01 	vstr	s15, [r3, #4]
    hszCostab = ((int)z + i) - 1;
 8003532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003536:	f7fd fb17 	bl	8000b68 <__aeabi_d2iz>
 800353a:	4602      	mov	r2, r0
 800353c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003540:	4413      	add	r3, r2
 8003542:	3b01      	subs	r3, #1
 8003544:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    y_data[hszCostab].re =
        0.5F * ((temp_re_tmp * d_y_re_tmp - temp_im_tmp * c_y_re_tmp) +
 8003548:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800354c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003554:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8003558:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800355c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003560:	ee37 7a67 	vsub.f32	s14, s14, s15
                (temp2_im * b_y_re_tmp - -temp_re * y_re_tmp));
 8003564:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003568:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800356c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003570:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8003574:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003578:	ee66 7a27 	vmul.f32	s15, s12, s15
 800357c:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_re_tmp * d_y_re_tmp - temp_im_tmp * c_y_re_tmp) +
 8003580:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[hszCostab].re =
 8003584:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800358e:	4413      	add	r3, r2
        0.5F * ((temp_re_tmp * d_y_re_tmp - temp_im_tmp * c_y_re_tmp) +
 8003590:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003594:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[hszCostab].re =
 8003598:	edc3 7a00 	vstr	s15, [r3]
    y_data[hszCostab].im =
        0.5F * ((temp_re_tmp * c_y_re_tmp + temp_im_tmp * d_y_re_tmp) +
 800359c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80035a0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80035a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a8:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80035ac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80035b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b4:	ee37 7a27 	vadd.f32	s14, s14, s15
                (temp2_im * y_re_tmp + -temp_re * b_y_re_tmp));
 80035b8:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80035bc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80035c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035c4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80035c8:	eeb1 6a67 	vneg.f32	s12, s15
 80035cc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80035d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_re_tmp * c_y_re_tmp + temp_im_tmp * d_y_re_tmp) +
 80035d8:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[hszCostab].im =
 80035dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80035e6:	4413      	add	r3, r2
        0.5F * ((temp_re_tmp * c_y_re_tmp + temp_im_tmp * d_y_re_tmp) +
 80035e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80035ec:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[hszCostab].im =
 80035f0:	edc3 7a01 	vstr	s15, [r3, #4]
    re = reconVar1_data[iheight - 1].im;
 80035f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035f8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80035fc:	3b01      	subs	r3, #1
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003602:	4413      	add	r3, r2
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	647b      	str	r3, [r7, #68]	@ 0x44
    im = reconVar1_data[iheight - 1].re;
 8003608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800360c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003610:	3b01      	subs	r3, #1
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003616:	4413      	add	r3, r2
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	643b      	str	r3, [r7, #64]	@ 0x40
    temp_im = reconVar2_data[iheight - 1].im;
 800361c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003620:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003624:	3b01      	subs	r3, #1
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800362a:	4413      	add	r3, r2
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48
    temp2_re = reconVar2_data[iheight - 1].re;
 8003630:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003634:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003638:	3b01      	subs	r3, #1
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800363e:	4413      	add	r3, r2
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	657b      	str	r3, [r7, #84]	@ 0x54
    y_data[iheight - 1].re =
        0.5F * ((temp2_im * im - temp_re * re) +
 8003644:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003648:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800364c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003650:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003654:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	ee37 7a67 	vsub.f32	s14, s14, s15
                (temp_re_tmp * temp2_re - -temp_im_tmp * temp_im));
 8003660:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8003664:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003668:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800366c:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 8003670:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003674:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003678:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp2_im * im - temp_re * re) +
 800367c:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[iheight - 1].re =
 8003680:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003684:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003688:	3b01      	subs	r3, #1
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003690:	4413      	add	r3, r2
        0.5F * ((temp2_im * im - temp_re * re) +
 8003692:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003696:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[iheight - 1].re =
 800369a:	edc3 7a00 	vstr	s15, [r3]
    y_data[iheight - 1].im =
        0.5F * ((temp2_im * re + temp_re * im) +
 800369e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80036a2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80036a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036aa:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80036ae:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80036b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b6:	ee37 7a27 	vadd.f32	s14, s14, s15
                (temp_re_tmp * temp_im + -temp_im_tmp * temp2_re));
 80036ba:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80036be:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80036c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036c6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80036ca:	eeb1 6a67 	vneg.f32	s12, s15
 80036ce:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80036d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp2_im * re + temp_re * im) +
 80036da:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[iheight - 1].im =
 80036de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036e2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80036e6:	3b01      	subs	r3, #1
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80036ee:	4413      	add	r3, r2
        0.5F * ((temp2_im * re + temp_re * im) +
 80036f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[iheight - 1].im =
 80036f8:	edc3 7a01 	vstr	s15, [r3, #4]
    iheight = (iheight + (int)z) - 1;
 80036fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003700:	f7fd fa32 	bl	8000b68 <__aeabi_d2iz>
 8003704:	4602      	mov	r2, r0
 8003706:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800370a:	4413      	add	r3, r2
 800370c:	3b01      	subs	r3, #1
 800370e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    y_data[iheight].re = 0.5F * ((temp2_im * temp2_re - temp_re * temp_im) +
 8003712:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003716:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800371a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800371e:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003722:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800372a:	ee37 7a67 	vsub.f32	s14, s14, s15
                                 (temp_re_tmp * im - -temp_im_tmp * re));
 800372e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8003732:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003736:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800373a:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 800373e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003742:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003746:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[iheight].re = 0.5F * ((temp2_im * temp2_re - temp_re * temp_im) +
 800374a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003758:	4413      	add	r3, r2
 800375a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800375e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003762:	edc3 7a00 	vstr	s15, [r3]
    y_data[iheight].im = 0.5F * ((temp2_im * temp_im + temp_re * temp2_re) +
 8003766:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800376a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800376e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003772:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003776:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800377a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800377e:	ee37 7a27 	vadd.f32	s14, s14, s15
                                 (temp_re_tmp * re + -temp_im_tmp * im));
 8003782:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8003786:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800378a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800378e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003792:	eeb1 6a67 	vneg.f32	s12, s15
 8003796:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800379a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800379e:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[iheight].im = 0.5F * ((temp2_im * temp_im + temp_re * temp2_re) +
 80037a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80037b0:	4413      	add	r3, r2
 80037b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ba:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 2; i <= iterVar; i++) {
 80037be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80037c2:	3301      	adds	r3, #1
 80037c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037d0:	429a      	cmp	r2, r3
 80037d2:	f77f adf3 	ble.w	80033bc <c_FFTImplementationCallback_doH+0xb1c>
  }
  emxFree_int32_T(&wrapIndex);
 80037d6:	f107 0318 	add.w	r3, r7, #24
 80037da:	4618      	mov	r0, r3
 80037dc:	f005 fac8 	bl	8008d70 <emxFree_int32_T>
  if (iterVar != 0) {
 80037e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80e2 	beq.w	80039ae <c_FFTImplementationCallback_doH+0x110e>
    temp_re_tmp = y_data[iterVar].re;
 80037ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80037f4:	4413      	add	r3, r2
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	633b      	str	r3, [r7, #48]	@ 0x30
    temp_im_tmp = y_data[iterVar].im;
 80037fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003804:	4413      	add	r3, r2
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	63fb      	str	r3, [r7, #60]	@ 0x3c
    y_re_tmp = reconVar1_data[iterVar].im;
 800380a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003812:	4413      	add	r3, r2
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	63bb      	str	r3, [r7, #56]	@ 0x38
    b_y_re_tmp = reconVar1_data[iterVar].re;
 8003818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003820:	4413      	add	r3, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	637b      	str	r3, [r7, #52]	@ 0x34
    c_y_re_tmp = temp_re_tmp * b_y_re_tmp;
 8003826:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800382a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800382e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003832:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    temp_im = temp_re_tmp * y_re_tmp;
 8003836:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800383a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    d_y_re_tmp = reconVar2_data[iterVar].im;
 8003846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800384e:	4413      	add	r3, r2
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	62bb      	str	r3, [r7, #40]	@ 0x28
    im = reconVar2_data[iterVar].re;
 8003854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800385c:	4413      	add	r3, r2
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	643b      	str	r3, [r7, #64]	@ 0x40
    temp2_re = temp_re_tmp * im;
 8003862:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003866:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    re = temp_re_tmp * d_y_re_tmp;
 8003872:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003876:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    y_data[iterVar].re = 0.5F * ((c_y_re_tmp - temp_im_tmp * y_re_tmp) +
 8003882:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003886:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800388a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003892:	ee37 7a67 	vsub.f32	s14, s14, s15
                                 (temp2_re - -temp_im_tmp * d_y_re_tmp));
 8003896:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800389a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800389e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038a2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[iterVar].re = 0.5F * ((c_y_re_tmp - temp_im_tmp * y_re_tmp) +
 80038aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80038b8:	4413      	add	r3, r2
 80038ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038c2:	edc3 7a00 	vstr	s15, [r3]
    y_data[iterVar].im = 0.5F * ((temp_im + temp_im_tmp * b_y_re_tmp) +
 80038c6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80038ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80038ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80038d6:	ee37 7a27 	vadd.f32	s14, s14, s15
                                 (re + -temp_im_tmp * im));
 80038da:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80038de:	eef1 6a67 	vneg.f32	s13, s15
 80038e2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80038e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038ea:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80038ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[iterVar].im = 0.5F * ((temp_im + temp_im_tmp * b_y_re_tmp) +
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003900:	4413      	add	r3, r2
 8003902:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800390a:	edc3 7a01 	vstr	s15, [r3, #4]
    iheight = (int)z + iterVar;
 800390e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003912:	f7fd f929 	bl	8000b68 <__aeabi_d2iz>
 8003916:	4602      	mov	r2, r0
 8003918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800391c:	4413      	add	r3, r2
 800391e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    y_data[iheight].re = 0.5F * ((temp2_re - temp_im_tmp * d_y_re_tmp) +
 8003922:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003926:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003932:	ee37 7a67 	vsub.f32	s14, s14, s15
                                 (c_y_re_tmp - -temp_im_tmp * y_re_tmp));
 8003936:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800393a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800393e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003942:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[iheight].re = 0.5F * ((temp2_re - temp_im_tmp * d_y_re_tmp) +
 800394a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003958:	4413      	add	r3, r2
 800395a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800395e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003962:	edc3 7a00 	vstr	s15, [r3]
    y_data[iheight].im = 0.5F * ((re + temp_im_tmp * im) +
 8003966:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800396a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800396e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003972:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003976:	ee37 7a27 	vadd.f32	s14, s14, s15
                                 (temp_im + -temp_im_tmp * b_y_re_tmp));
 800397a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800397e:	eef1 6a67 	vneg.f32	s13, s15
 8003982:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003986:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800398a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y_data[iheight].im = 0.5F * ((re + temp_im_tmp * im) +
 8003992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003996:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80039a0:	4413      	add	r3, r2
 80039a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039aa:	edc3 7a01 	vstr	s15, [r3, #4]
  }
  emxFree_creal32_T(&reconVar2);
 80039ae:	f107 0320 	add.w	r3, r7, #32
 80039b2:	4618      	mov	r0, r3
 80039b4:	f005 f9b2 	bl	8008d1c <emxFree_creal32_T>
  emxFree_creal32_T(&reconVar1);
 80039b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039bc:	4618      	mov	r0, r3
 80039be:	f005 f9ad 	bl	8008d1c <emxFree_creal32_T>
}
 80039c2:	bf00      	nop
 80039c4:	37c4      	adds	r7, #196	@ 0xc4
 80039c6:	46bd      	mov	sp, r7
 80039c8:	ecbd 8b02 	vpop	{d8}
 80039cc:	bd90      	pop	{r4, r7, pc}
	...

080039d0 <d_FFTImplementationCallback_doH>:
static void d_FFTImplementationCallback_doH(
    const emxArray_real32_T *x, emxArray_creal32_T *y, int nrowsx, int nRows,
    int nfft, const emxArray_creal32_T *wwc, const emxArray_real32_T *costab,
    const emxArray_real32_T *sintab, const emxArray_real32_T *costabinv,
    const emxArray_real32_T *sintabinv)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	ed2d 8b02 	vpush	{d8}
 80039d6:	b0bd      	sub	sp, #244	@ 0xf4
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  int nRowsD2;
  int nd2;
  int u1;
  int *wrapIndex_data;
  bool tst;
  sintabinv_data = sintabinv->data;
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  costabinv_data = costabinv->data;
 80039ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  sintab_data = sintab->data;
 80039f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  costab_data = costab->data;
 8003a00:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  wwc_data = wwc->data;
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  y_data = y->data;
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  x_data = x->data;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  hnRows = (int)((unsigned int)nRows >> 1);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  emxInit_creal32_T(&ytmp);
 8003a2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003a30:	4618      	mov	r0, r3
 8003a32:	f005 fa27 	bl	8008e84 <emxInit_creal32_T>
  u1 = ytmp->size[0];
 8003a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  ytmp->size[0] = hnRows;
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003a48:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(ytmp, u1);
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003a50:	4618      	mov	r0, r3
 8003a52:	f005 f804 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  ytmp_data = ytmp->data;
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  if (hnRows > nrowsx) {
 8003a5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	dd34      	ble.n	8003ad2 <d_FFTImplementationCallback_doH+0x102>
    u1 = ytmp->size[0];
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    ytmp->size[0] = hnRows;
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003a7a:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(ytmp, u1);
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 ffeb 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    ytmp_data = ytmp->data;
 8003a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    for (u1 = 0; u1 < hnRows; u1++) {
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a96:	e016      	b.n	8003ac6 <d_FFTImplementationCallback_doH+0xf6>
      ytmp_data[u1].re = 0.0F;
 8003a98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
      ytmp_data[u1].im = 0.0F;
 8003aaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]
    for (u1 = 0; u1 < hnRows; u1++) {
 8003abc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ac6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	dbe2      	blt.n	8003a98 <d_FFTImplementationCallback_doH+0xc8>
    }
  }
  if ((x->size[0] & 1) == 0) {
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d108      	bne.n	8003af2 <d_FFTImplementationCallback_doH+0x122>
    tst = true;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
    ju = x->size[0];
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003af0:	e015      	b.n	8003b1e <d_FFTImplementationCallback_doH+0x14e>
  } else if (x->size[0] >= nRows) {
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	dc06      	bgt.n	8003b0c <d_FFTImplementationCallback_doH+0x13c>
    tst = true;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
    ju = nRows;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b0a:	e008      	b.n	8003b1e <d_FFTImplementationCallback_doH+0x14e>
  } else {
    tst = false;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
    ju = x->size[0] - 1;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  }
  if (ju > nRows) {
 8003b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	dd02      	ble.n	8003b2e <d_FFTImplementationCallback_doH+0x15e>
    ju = nRows;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  }
  nd2 = nRows << 1;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  temp_im = 6.28318548F / (float)nd2;
 8003b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b42:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 8003ddc <d_FFTImplementationCallback_doH+0x40c>
 8003b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
  iDelta = (int)((unsigned int)nd2 >> 1) >> 1;
 8003b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	105b      	asrs	r3, r3, #1
 8003b56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  emxInit_real32_T(&costab1q, 2);
 8003b5a:	f107 0320 	add.w	r3, r7, #32
 8003b5e:	2102      	movs	r1, #2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f005 f9f2 	bl	8008f4a <emxInit_real32_T>
  u1 = costab1q->size[0] * costab1q->size[1];
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6a3a      	ldr	r2, [r7, #32]
 8003b6e:	6852      	ldr	r2, [r2, #4]
 8003b70:	3204      	adds	r2, #4
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  costab1q->size[0] = 1;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  costab1q->size[1] = iDelta + 1;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003b8e:	3201      	adds	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(costab1q, u1);
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f005 f82e 	bl	8008bfa <emxEnsureCapacity_real32_T>
  costab1q_data = costab1q->data;
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  costab1q_data[0] = 1.0F;
 8003ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003baa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003bae:	601a      	str	r2, [r3, #0]
  nd2 = iDelta / 2 - 1;
 8003bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bb4:	0fda      	lsrs	r2, r3, #31
 8003bb6:	4413      	add	r3, r2
 8003bb8:	105b      	asrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (k = 0; k <= nd2; k++) {
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bc6:	e01e      	b.n	8003c06 <d_FFTImplementationCallback_doH+0x236>
    costab1q_data[k + 1] = cosf(temp_im * (float)(k + 1));
 8003bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bcc:	3301      	adds	r3, #1
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd6:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003be2:	3301      	adds	r3, #1
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003bea:	18d4      	adds	r4, r2, r3
 8003bec:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf0:	f015 fce8 	bl	80195c4 <cosf>
 8003bf4:	eef0 7a40 	vmov.f32	s15, s0
 8003bf8:	edc4 7a00 	vstr	s15, [r4]
  for (k = 0; k <= nd2; k++) {
 8003bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c00:	3301      	adds	r3, #1
 8003c02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	ddda      	ble.n	8003bc8 <d_FFTImplementationCallback_doH+0x1f8>
  }
  u1 = nd2 + 2;
 8003c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c16:	3302      	adds	r3, #2
 8003c18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  nd2 = iDelta - 1;
 8003c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c20:	3b01      	subs	r3, #1
 8003c22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (k = u1; k <= nd2; k++) {
 8003c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c2e:	e01f      	b.n	8003c70 <d_FFTImplementationCallback_doH+0x2a0>
    costab1q_data[k] = sinf(temp_im * (float)(iDelta - k));
 8003c30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c42:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003c54:	18d4      	adds	r4, r2, r3
 8003c56:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5a:	f015 fcf7 	bl	801964c <sinf>
 8003c5e:	eef0 7a40 	vmov.f32	s15, s0
 8003c62:	edc4 7a00 	vstr	s15, [r4]
  for (k = u1; k <= nd2; k++) {
 8003c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	ddd9      	ble.n	8003c30 <d_FFTImplementationCallback_doH+0x260>
  }
  costab1q_data[iDelta] = 0.0F;
 8003c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003c86:	4413      	add	r3, r2
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
  iDelta = costab1q->size[1] - 1;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  nd2 = (costab1q->size[1] - 1) << 1;
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  emxInit_real32_T(&b_costab, 2);
 8003cac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f005 f949 	bl	8008f4a <emxInit_real32_T>
  u1 = b_costab->size[0] * b_costab->size[1];
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cc0:	6852      	ldr	r2, [r2, #4]
 8003cc2:	3204      	adds	r2, #4
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  b_costab->size[0] = 1;
 8003cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
  b_costab->size[1] = nd2 + 1;
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ce0:	3201      	adds	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_costab, u1);
 8003ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 ff85 	bl	8008bfa <emxEnsureCapacity_real32_T>
  b_costab_data = b_costab->data;
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  emxInit_real32_T(&b_sintab, 2);
 8003cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f005 f923 	bl	8008f4a <emxInit_real32_T>
  u1 = b_sintab->size[0] * b_sintab->size[1];
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0c:	6852      	ldr	r2, [r2, #4]
 8003d0e:	3204      	adds	r2, #4
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  b_sintab->size[0] = 1;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
  b_sintab->size[1] = nd2 + 1;
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d2c:	3201      	adds	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_sintab, u1);
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003d36:	4618      	mov	r0, r3
 8003d38:	f004 ff5f 	bl	8008bfa <emxEnsureCapacity_real32_T>
  b_sintab_data = b_sintab->data;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  b_costab_data[0] = 1.0F;
 8003d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d48:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003d4c:	601a      	str	r2, [r3, #0]
  b_sintab_data[0] = 0.0F;
 8003d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
  for (k = 0; k < iDelta; k++) {
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d5e:	e02d      	b.n	8003dbc <d_FFTImplementationCallback_doH+0x3ec>
    b_costab_data[k + 1] = costab1q_data[k + 1];
 8003d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d64:	3301      	adds	r3, #1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003d6c:	441a      	add	r2, r3
 8003d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d72:	3301      	adds	r3, #1
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003d7a:	440b      	add	r3, r1
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	601a      	str	r2, [r3, #0]
    b_sintab_data[k + 1] = -costab1q_data[(iDelta - k) - 1];
 8003d80:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003d96:	4413      	add	r3, r2
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003da0:	3301      	adds	r3, #1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003da8:	4413      	add	r3, r2
 8003daa:	eef1 7a67 	vneg.f32	s15, s15
 8003dae:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < iDelta; k++) {
 8003db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003db6:	3301      	adds	r3, #1
 8003db8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	dbcb      	blt.n	8003d60 <d_FFTImplementationCallback_doH+0x390>
  }
  u1 = costab1q->size[1];
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  for (k = u1; k <= nd2; k++) {
 8003dd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dda:	e030      	b.n	8003e3e <d_FFTImplementationCallback_doH+0x46e>
 8003ddc:	40c90fdb 	.word	0x40c90fdb
    b_costab_data[k] = -costab1q_data[nd2 - k];
 8003de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003df0:	4413      	add	r3, r2
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003e00:	4413      	add	r3, r2
 8003e02:	eef1 7a67 	vneg.f32	s15, s15
 8003e06:	edc3 7a00 	vstr	s15, [r3]
    b_sintab_data[k] = -costab1q_data[k - iDelta];
 8003e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003e1a:	4413      	add	r3, r2
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003e2a:	4413      	add	r3, r2
 8003e2c:	eef1 7a67 	vneg.f32	s15, s15
 8003e30:	edc3 7a00 	vstr	s15, [r3]
  for (k = u1; k <= nd2; k++) {
 8003e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e46:	429a      	cmp	r2, r3
 8003e48:	ddca      	ble.n	8003de0 <d_FFTImplementationCallback_doH+0x410>
  }
  hszCostab = (int)((unsigned int)costab->size[1] >> 1);
 8003e4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  u1 = costab1q->size[0] * costab1q->size[1];
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	6852      	ldr	r2, [r2, #4]
 8003e64:	3204      	adds	r2, #4
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  costab1q->size[0] = 1;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
  costab1q->size[1] = hszCostab;
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e82:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(costab1q, u1);
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f004 feb5 	bl	8008bfa <emxEnsureCapacity_real32_T>
  costab1q_data = costab1q->data;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  emxInit_real32_T(&hsintab, 2);
 8003e98:	f107 0318 	add.w	r3, r7, #24
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f005 f853 	bl	8008f4a <emxInit_real32_T>
  u1 = hsintab->size[0] * hsintab->size[1];
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	6852      	ldr	r2, [r2, #4]
 8003eae:	3204      	adds	r2, #4
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  hsintab->size[0] = 1;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
  hsintab->size[1] = hszCostab;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003ecc:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hsintab, u1);
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f004 fe90 	bl	8008bfa <emxEnsureCapacity_real32_T>
  hsintab_data = hsintab->data;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  emxInit_real32_T(&hcostabinv, 2);
 8003ee2:	f107 031c 	add.w	r3, r7, #28
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f005 f82e 	bl	8008f4a <emxInit_real32_T>
  u1 = hcostabinv->size[0] * hcostabinv->size[1];
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	6852      	ldr	r2, [r2, #4]
 8003ef8:	3204      	adds	r2, #4
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  hcostabinv->size[0] = 1;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
  hcostabinv->size[1] = hszCostab;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003f16:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hcostabinv, u1);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 fe6b 	bl	8008bfa <emxEnsureCapacity_real32_T>
  hcostabinv_data = hcostabinv->data;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  emxInit_real32_T(&hsintabinv, 2);
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	2102      	movs	r1, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f005 f809 	bl	8008f4a <emxInit_real32_T>
  u1 = hsintabinv->size[0] * hsintabinv->size[1];
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	6852      	ldr	r2, [r2, #4]
 8003f42:	3204      	adds	r2, #4
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  hsintabinv->size[0] = 1;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
  hsintabinv->size[1] = hszCostab;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003f60:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(hsintabinv, u1);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fe46 	bl	8008bfa <emxEnsureCapacity_real32_T>
  hsintabinv_data = hsintabinv->data;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (i = 0; i < hszCostab; i++) {
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f7a:	e042      	b.n	8004002 <d_FFTImplementationCallback_doH+0x632>
    nd2 = ((i + 1) << 1) - 2;
 8003f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f80:	3301      	adds	r3, #1
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	3b02      	subs	r3, #2
 8003f86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    costab1q_data[i] = costab_data[nd2];
 8003f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f94:	441a      	add	r2, r3
 8003f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fa0:	440b      	add	r3, r1
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	601a      	str	r2, [r3, #0]
    hsintab_data[i] = sintab_data[nd2];
 8003fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fb0:	441a      	add	r2, r3
 8003fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8003fbc:	440b      	add	r3, r1
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
    hcostabinv_data[i] = costabinv_data[nd2];
 8003fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fcc:	441a      	add	r2, r3
 8003fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003fd8:	440b      	add	r3, r1
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	601a      	str	r2, [r3, #0]
    hsintabinv_data[i] = sintabinv_data[nd2];
 8003fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fe8:	441a      	add	r2, r3
 8003fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ff2:	440b      	add	r3, r1
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < hszCostab; i++) {
 8003ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004002:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800400a:	429a      	cmp	r2, r3
 800400c:	dbb6      	blt.n	8003f7c <d_FFTImplementationCallback_doH+0x5ac>
  }
  emxInit_creal32_T(&reconVar1);
 800400e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004012:	4618      	mov	r0, r3
 8004014:	f004 ff36 	bl	8008e84 <emxInit_creal32_T>
  u1 = reconVar1->size[0];
 8004018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  reconVar1->size[0] = hnRows;
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800402a:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(reconVar1, u1);
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8004032:	4618      	mov	r0, r3
 8004034:	f004 fd13 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  reconVar1_data = reconVar1->data;
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	67bb      	str	r3, [r7, #120]	@ 0x78
  emxInit_creal32_T(&reconVar2);
 800403e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004042:	4618      	mov	r0, r3
 8004044:	f004 ff1e 	bl	8008e84 <emxInit_creal32_T>
  u1 = reconVar2->size[0];
 8004048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  reconVar2->size[0] = hnRows;
 8004052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800405a:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(reconVar2, u1);
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8004062:	4618      	mov	r0, r3
 8004064:	f004 fcfb 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  reconVar2_data = reconVar2->data;
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	677b      	str	r3, [r7, #116]	@ 0x74
  emxInit_int32_T(&wrapIndex, 2);
 800406e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f004 ff2e 	bl	8008ed6 <emxInit_int32_T>
  u1 = wrapIndex->size[0] * wrapIndex->size[1];
 800407a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004082:	6852      	ldr	r2, [r2, #4]
 8004084:	3204      	adds	r2, #4
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	fb02 f303 	mul.w	r3, r2, r3
 800408c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  wrapIndex->size[0] = 1;
 8004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
  wrapIndex->size[1] = hnRows;
 8004098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80040a2:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_int32_T(wrapIndex, u1);
 80040a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80040aa:	4618      	mov	r0, r3
 80040ac:	f004 fd3e 	bl	8008b2c <emxEnsureCapacity_int32_T>
  wrapIndex_data = wrapIndex->data;
 80040b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	673b      	str	r3, [r7, #112]	@ 0x70
  for (i = 0; i < hnRows; i++) {
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040bc:	e05a      	b.n	8004174 <d_FFTImplementationCallback_doH+0x7a4>
    u1 = i << 1;
 80040be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    temp_im = b_sintab_data[u1];
 80040c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80040d2:	4413      	add	r3, r2
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    temp_re = b_costab_data[u1];
 80040da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80040e4:	4413      	add	r3, r2
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	667b      	str	r3, [r7, #100]	@ 0x64
    reconVar1_data[i].re = temp_im + 1.0F;
 80040ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80040f2:	4413      	add	r3, r2
 80040f4:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80040f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004100:	edc3 7a00 	vstr	s15, [r3]
    reconVar1_data[i].im = -temp_re;
 8004104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800410c:	4413      	add	r3, r2
 800410e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004112:	eef1 7a67 	vneg.f32	s15, s15
 8004116:	edc3 7a01 	vstr	s15, [r3, #4]
    reconVar2_data[i].re = 1.0F - temp_im;
 800411a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004122:	4413      	add	r3, r2
 8004124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004128:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800412c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004130:	edc3 7a00 	vstr	s15, [r3]
    reconVar2_data[i].im = temp_re;
 8004134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800413c:	4413      	add	r3, r2
 800413e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004140:	605a      	str	r2, [r3, #4]
    if (i + 1 != 1) {
 8004142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00c      	beq.n	8004164 <d_FFTImplementationCallback_doH+0x794>
      wrapIndex_data[i] = (hnRows - i) + 1;
 800414a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800414e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800415c:	440b      	add	r3, r1
 800415e:	3201      	adds	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e002      	b.n	800416a <d_FFTImplementationCallback_doH+0x79a>
    } else {
      wrapIndex_data[0] = 1;
 8004164:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]
  for (i = 0; i < hnRows; i++) {
 800416a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800416e:	3301      	adds	r3, #1
 8004170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004174:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800417c:	429a      	cmp	r2, r3
 800417e:	db9e      	blt.n	80040be <d_FFTImplementationCallback_doH+0x6ee>
    }
  }
  emxFree_real32_T(&b_sintab);
 8004180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004184:	4618      	mov	r0, r3
 8004186:	f004 fe1d 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&b_costab);
 800418a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800418e:	4618      	mov	r0, r3
 8004190:	f004 fe18 	bl	8008dc4 <emxFree_real32_T>
  z_tmp = (double)ju / 2.0;
 8004194:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8004198:	f7fc f9cc 	bl	8000534 <__aeabi_i2d>
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80041a4:	f7fc fb5a 	bl	800085c <__aeabi_ddiv>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  u1 = (int)z_tmp;
 80041b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041b4:	f7fc fcd8 	bl	8000b68 <__aeabi_d2iz>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  for (hszCostab = 0; hszCostab < u1; hszCostab++) {
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80041c4:	e063      	b.n	800428e <d_FFTImplementationCallback_doH+0x8be>
    temp_re = wwc_data[(hnRows + hszCostab) - 1].re;
 80041c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80041ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ce:	4413      	add	r3, r2
 80041d0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80041d4:	3b01      	subs	r3, #1
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80041dc:	4413      	add	r3, r2
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	667b      	str	r3, [r7, #100]	@ 0x64
    temp_im = wwc_data[(hnRows + hszCostab) - 1].im;
 80041e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80041e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ea:	4413      	add	r3, r2
 80041ec:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80041f0:	3b01      	subs	r3, #1
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80041f8:	4413      	add	r3, r2
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    nd2 = hszCostab << 1;
 8004200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    twid_re = x_data[nd2];
 800420a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8004214:	4413      	add	r3, r2
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	663b      	str	r3, [r7, #96]	@ 0x60
    twid_im = x_data[nd2 + 1];
 800421a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800421e:	3301      	adds	r3, #1
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8004226:	4413      	add	r3, r2
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	657b      	str	r3, [r7, #84]	@ 0x54
    ytmp_data[hszCostab].re = temp_re * twid_re + temp_im * twid_im;
 800422c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8004230:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004238:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 800423c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800424e:	4413      	add	r3, r2
 8004250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004254:	edc3 7a00 	vstr	s15, [r3]
    ytmp_data[hszCostab].im = temp_re * twid_im - temp_im * twid_re;
 8004258:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800425c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004264:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8004268:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800426c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800427a:	4413      	add	r3, r2
 800427c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004280:	edc3 7a01 	vstr	s15, [r3, #4]
  for (hszCostab = 0; hszCostab < u1; hszCostab++) {
 8004284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004288:	3301      	adds	r3, #1
 800428a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800428e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004292:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004296:	429a      	cmp	r2, r3
 8004298:	db95      	blt.n	80041c6 <d_FFTImplementationCallback_doH+0x7f6>
  }
  if (!tst) {
 800429a:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 800429e:	f083 0301 	eor.w	r3, r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80c3 	beq.w	8004430 <d_FFTImplementationCallback_doH+0xa60>
    temp_re = wwc_data[(hnRows + (int)z_tmp) - 1].re;
 80042aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042ae:	f7fc fc5b 	bl	8000b68 <__aeabi_d2iz>
 80042b2:	4602      	mov	r2, r0
 80042b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042b8:	4413      	add	r3, r2
 80042ba:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80042be:	3b01      	subs	r3, #1
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80042c6:	4413      	add	r3, r2
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	667b      	str	r3, [r7, #100]	@ 0x64
    temp_im = wwc_data[(hnRows + (int)z_tmp) - 1].im;
 80042cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042d0:	f7fc fc4a 	bl	8000b68 <__aeabi_d2iz>
 80042d4:	4602      	mov	r2, r0
 80042d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042da:	4413      	add	r3, r2
 80042dc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80042e0:	3b01      	subs	r3, #1
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80042e8:	4413      	add	r3, r2
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if ((int)z_tmp - 1 < 0) {
 80042f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042f4:	f7fc fc38 	bl	8000b68 <__aeabi_d2iz>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	dc03      	bgt.n	8004306 <d_FFTImplementationCallback_doH+0x936>
      iDelta = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004304:	e007      	b.n	8004316 <d_FFTImplementationCallback_doH+0x946>
    } else {
      iDelta = (int)z_tmp << 1;
 8004306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800430a:	f7fc fc2d 	bl	8000b68 <__aeabi_d2iz>
 800430e:	4603      	mov	r3, r0
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    }
    twid_re = x_data[iDelta];
 8004316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8004320:	4413      	add	r3, r2
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	663b      	str	r3, [r7, #96]	@ 0x60
    ytmp_data[(int)((double)ju / 2.0)].re = temp_re * twid_re + temp_im * 0.0F;
 8004326:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800432a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800432e:	ee67 8a27 	vmul.f32	s17, s14, s15
 8004332:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004336:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 800462c <d_FFTImplementationCallback_doH+0xc5c>
 800433a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800433e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8004342:	f7fc f8f7 	bl	8000534 <__aeabi_i2d>
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800434e:	f7fc fa85 	bl	800085c <__aeabi_ddiv>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	f7fc fc05 	bl	8000b68 <__aeabi_d2iz>
 800435e:	4603      	mov	r3, r0
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004366:	4413      	add	r3, r2
 8004368:	ee78 7a88 	vadd.f32	s15, s17, s16
 800436c:	edc3 7a00 	vstr	s15, [r3]
    ytmp_data[(int)((double)ju / 2.0)].im = temp_re * 0.0F - temp_im * twid_re;
 8004370:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004374:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 800462c <d_FFTImplementationCallback_doH+0xc5c>
 8004378:	ee67 8a87 	vmul.f32	s17, s15, s14
 800437c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004380:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004384:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004388:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800438c:	f7fc f8d2 	bl	8000534 <__aeabi_i2d>
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004398:	f7fc fa60 	bl	800085c <__aeabi_ddiv>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f7fc fbe0 	bl	8000b68 <__aeabi_d2iz>
 80043a8:	4603      	mov	r3, r0
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80043b0:	4413      	add	r3, r2
 80043b2:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80043b6:	edc3 7a01 	vstr	s15, [r3, #4]
    if ((int)z_tmp + 2 <= hnRows) {
 80043ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043be:	f7fc fbd3 	bl	8000b68 <__aeabi_d2iz>
 80043c2:	4603      	mov	r3, r0
 80043c4:	3301      	adds	r3, #1
 80043c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80043ca:	429a      	cmp	r2, r3
 80043cc:	dd69      	ble.n	80044a2 <d_FFTImplementationCallback_doH+0xad2>
      u1 = (int)z_tmp + 2;
 80043ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043d2:	f7fc fbc9 	bl	8000b68 <__aeabi_d2iz>
 80043d6:	4603      	mov	r3, r0
 80043d8:	3302      	adds	r3, #2
 80043da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      for (i = u1; i <= hnRows; i++) {
 80043de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043e6:	e01c      	b.n	8004422 <d_FFTImplementationCallback_doH+0xa52>
        ytmp_data[i - 1].re = 0.0F;
 80043e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043ec:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80043f0:	3b01      	subs	r3, #1
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80043f8:	4413      	add	r3, r2
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
        ytmp_data[i - 1].im = 0.0F;
 8004400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004404:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8004408:	3b01      	subs	r3, #1
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004410:	4413      	add	r3, r2
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	605a      	str	r2, [r3, #4]
      for (i = u1; i <= hnRows; i++) {
 8004418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800441c:	3301      	adds	r3, #1
 800441e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004422:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004426:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800442a:	429a      	cmp	r2, r3
 800442c:	dddc      	ble.n	80043e8 <d_FFTImplementationCallback_doH+0xa18>
 800442e:	e038      	b.n	80044a2 <d_FFTImplementationCallback_doH+0xad2>
      }
    }
  } else if ((int)z_tmp + 1 <= hnRows) {
 8004430:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004434:	f7fc fb98 	bl	8000b68 <__aeabi_d2iz>
 8004438:	4602      	mov	r2, r0
 800443a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800443e:	4293      	cmp	r3, r2
 8004440:	dd2f      	ble.n	80044a2 <d_FFTImplementationCallback_doH+0xad2>
    u1 = (int)z_tmp + 1;
 8004442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004446:	f7fc fb8f 	bl	8000b68 <__aeabi_d2iz>
 800444a:	4603      	mov	r3, r0
 800444c:	3301      	adds	r3, #1
 800444e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    for (i = u1; i <= hnRows; i++) {
 8004452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800445a:	e01c      	b.n	8004496 <d_FFTImplementationCallback_doH+0xac6>
      ytmp_data[i - 1].re = 0.0F;
 800445c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004460:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8004464:	3b01      	subs	r3, #1
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800446c:	4413      	add	r3, r2
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
      ytmp_data[i - 1].im = 0.0F;
 8004474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004478:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800447c:	3b01      	subs	r3, #1
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004484:	4413      	add	r3, r2
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	605a      	str	r2, [r3, #4]
    for (i = u1; i <= hnRows; i++) {
 800448c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004490:	3301      	adds	r3, #1
 8004492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004496:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800449a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800449e:	429a      	cmp	r2, r3
 80044a0:	dddc      	ble.n	800445c <d_FFTImplementationCallback_doH+0xa8c>
    }
  }
  z_tmp = (double)nfft / 2.0;
 80044a2:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80044a6:	f7fc f845 	bl	8000534 <__aeabi_i2d>
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044b2:	f7fc f9d3 	bl	800085c <__aeabi_ddiv>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  emxInit_creal32_T(&fy);
 80044be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80044c2:	4618      	mov	r0, r3
 80044c4:	f004 fcde 	bl	8008e84 <emxInit_creal32_T>
  nd2 = (int)z_tmp;
 80044c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044cc:	f7fc fb4c 	bl	8000b68 <__aeabi_d2iz>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  u1 = fy->size[0];
 80044d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  fy->size[0] = (int)z_tmp;
 80044e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e2:	685c      	ldr	r4, [r3, #4]
 80044e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044e8:	f7fc fb3e 	bl	8000b68 <__aeabi_d2iz>
 80044ec:	4603      	mov	r3, r0
 80044ee:	6023      	str	r3, [r4, #0]
  emxEnsureCapacity_creal32_T(fy, u1);
 80044f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044f2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80044f6:	4618      	mov	r0, r3
 80044f8:	f004 fab1 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  fy_data = fy->data;
 80044fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if ((int)z_tmp > ytmp->size[0]) {
 8004504:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004508:	f7fc fb2e 	bl	8000b68 <__aeabi_d2iz>
 800450c:	4602      	mov	r2, r0
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	dd37      	ble.n	8004588 <d_FFTImplementationCallback_doH+0xbb8>
    u1 = fy->size[0];
 8004518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    fy->size[0] = (int)z_tmp;
 8004522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004524:	685c      	ldr	r4, [r3, #4]
 8004526:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800452a:	f7fc fb1d 	bl	8000b68 <__aeabi_d2iz>
 800452e:	4603      	mov	r3, r0
 8004530:	6023      	str	r3, [r4, #0]
    emxEnsureCapacity_creal32_T(fy, u1);
 8004532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004534:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8004538:	4618      	mov	r0, r3
 800453a:	f004 fa90 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    fy_data = fy->data;
 800453e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    for (u1 = 0; u1 < nd2; u1++) {
 8004546:	2300      	movs	r3, #0
 8004548:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800454c:	e016      	b.n	800457c <d_FFTImplementationCallback_doH+0xbac>
      fy_data[u1].re = 0.0F;
 800454e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004558:	4413      	add	r3, r2
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
      fy_data[u1].im = 0.0F;
 8004560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800456a:	4413      	add	r3, r2
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	605a      	str	r2, [r3, #4]
    for (u1 = 0; u1 < nd2; u1++) {
 8004572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004576:	3301      	adds	r3, #1
 8004578:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800457c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8004580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004584:	429a      	cmp	r2, r3
 8004586:	dbe2      	blt.n	800454e <d_FFTImplementationCallback_doH+0xb7e>
    }
  }
  ju = ytmp->size[0];
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  u1 = (int)z_tmp;
 8004592:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004596:	f7fc fae7 	bl	8000b68 <__aeabi_d2iz>
 800459a:	4603      	mov	r3, r0
 800459c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (ju <= u1) {
 80045a0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045a8:	429a      	cmp	r2, r3
 80045aa:	dc03      	bgt.n	80045b4 <d_FFTImplementationCallback_doH+0xbe4>
    u1 = ju;
 80045ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  }
  hszCostab = (int)z_tmp - 2;
 80045b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045b8:	f7fc fad6 	bl	8000b68 <__aeabi_d2iz>
 80045bc:	4603      	mov	r3, r0
 80045be:	3b02      	subs	r3, #2
 80045c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  nRowsD2 = (int)((unsigned int)(int)z_tmp >> 1);
 80045c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045c8:	f7fc face 	bl	8000b68 <__aeabi_d2iz>
 80045cc:	4603      	mov	r3, r0
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  k = nRowsD2 / 2;
 80045d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045d4:	0fda      	lsrs	r2, r3, #31
 80045d6:	4413      	add	r3, r2
 80045d8:	105b      	asrs	r3, r3, #1
 80045da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  nd2 = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ju = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  for (i = 0; i <= u1 - 2; i++) {
 80045ea:	2300      	movs	r3, #0
 80045ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045f0:	e042      	b.n	8004678 <d_FFTImplementationCallback_doH+0xca8>
    fy_data[nd2] = ytmp_data[i];
 80045f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80045fc:	18d1      	adds	r1, r2, r3
 80045fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004608:	4413      	add	r3, r2
 800460a:	460a      	mov	r2, r1
 800460c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004610:	e883 0003 	stmia.w	r3, {r0, r1}
    iDelta = (int)z_tmp;
 8004614:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004618:	f7fc faa6 	bl	8000b68 <__aeabi_d2iz>
 800461c:	4603      	mov	r3, r0
 800461e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tst = true;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
    while (tst) {
 8004628:	e019      	b.n	800465e <d_FFTImplementationCallback_doH+0xc8e>
 800462a:	bf00      	nop
 800462c:	00000000 	.word	0x00000000
      iDelta >>= 1;
 8004630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004634:	105b      	asrs	r3, r3, #1
 8004636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      ju ^= iDelta;
 800463a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800463e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004642:	4053      	eors	r3, r2
 8004644:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      tst = ((ju & iDelta) == 0);
 8004648:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800464c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	bf0c      	ite	eq
 8004656:	2301      	moveq	r3, #1
 8004658:	2300      	movne	r3, #0
 800465a:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
    while (tst) {
 800465e:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e4      	bne.n	8004630 <d_FFTImplementationCallback_doH+0xc60>
    }
    nd2 = ju;
 8004666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800466a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (i = 0; i <= u1 - 2; i++) {
 800466e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004672:	3301      	adds	r3, #1
 8004674:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004678:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800467c:	3b01      	subs	r3, #1
 800467e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004682:	429a      	cmp	r2, r3
 8004684:	dbb5      	blt.n	80045f2 <d_FFTImplementationCallback_doH+0xc22>
  }
  if (u1 - 2 < 0) {
 8004686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800468a:	2b01      	cmp	r3, #1
 800468c:	dc03      	bgt.n	8004696 <d_FFTImplementationCallback_doH+0xcc6>
    iDelta = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004694:	e004      	b.n	80046a0 <d_FFTImplementationCallback_doH+0xcd0>
  } else {
    iDelta = u1 - 1;
 8004696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800469a:	3b01      	subs	r3, #1
 800469c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  }
  fy_data[nd2] = ytmp_data[iDelta];
 80046a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046aa:	18d1      	adds	r1, r2, r3
 80046ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80046b6:	4413      	add	r3, r2
 80046b8:	460a      	mov	r2, r1
 80046ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046be:	e883 0003 	stmia.w	r3, {r0, r1}
  if ((int)z_tmp > 1) {
 80046c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046c6:	f7fc fa4f 	bl	8000b68 <__aeabi_d2iz>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	dd6b      	ble.n	80047a8 <d_FFTImplementationCallback_doH+0xdd8>
    for (i = 0; i <= hszCostab; i += 2) {
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046d6:	e061      	b.n	800479c <d_FFTImplementationCallback_doH+0xdcc>
      temp_re_tmp = fy_data[i + 1].re;
 80046d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046dc:	3301      	adds	r3, #1
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80046e4:	4413      	add	r3, r2
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	65bb      	str	r3, [r7, #88]	@ 0x58
      temp_re = fy_data[i + 1].im;
 80046ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046ee:	3301      	adds	r3, #1
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80046f6:	4413      	add	r3, r2
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	667b      	str	r3, [r7, #100]	@ 0x64
      twid_im = fy_data[i].re;
 80046fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004706:	4413      	add	r3, r2
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	657b      	str	r3, [r7, #84]	@ 0x54
      temp_im = fy_data[i].im;
 800470c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004716:	4413      	add	r3, r2
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      fy_data[i + 1].re = twid_im - temp_re_tmp;
 800471e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004722:	3301      	adds	r3, #1
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800472a:	4413      	add	r3, r2
 800472c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8004730:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004738:	edc3 7a00 	vstr	s15, [r3]
      fy_data[i + 1].im = temp_im - temp_re;
 800473c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004740:	3301      	adds	r3, #1
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004748:	4413      	add	r3, r2
 800474a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800474e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004756:	edc3 7a01 	vstr	s15, [r3, #4]
      fy_data[i].re = twid_im + temp_re_tmp;
 800475a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004764:	4413      	add	r3, r2
 8004766:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800476a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800476e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004772:	edc3 7a00 	vstr	s15, [r3]
      fy_data[i].im = temp_im + temp_re;
 8004776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004780:	4413      	add	r3, r2
 8004782:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004786:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800478a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800478e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i <= hszCostab; i += 2) {
 8004792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004796:	3302      	adds	r3, #2
 8004798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800479c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80047a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047a4:	429a      	cmp	r2, r3
 80047a6:	dd97      	ble.n	80046d8 <d_FFTImplementationCallback_doH+0xd08>
    }
  }
  iDelta = 2;
 80047a8:	2302      	movs	r3, #2
 80047aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  iDelta2 = 4;
 80047ae:	2304      	movs	r3, #4
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  iheight = ((k - 1) << 2) + 1;
 80047b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047b8:	3b01      	subs	r3, #1
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	3301      	adds	r3, #1
 80047be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  while (k > 0) {
 80047c2:	e15b      	b.n	8004a7c <d_FFTImplementationCallback_doH+0x10ac>
    for (i = 0; i < iheight; i += iDelta2) {
 80047c4:	2300      	movs	r3, #0
 80047c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047ca:	e06e      	b.n	80048aa <d_FFTImplementationCallback_doH+0xeda>
      nd2 = i + iDelta;
 80047cc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80047d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047d4:	4413      	add	r3, r2
 80047d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      temp_re = fy_data[nd2].re;
 80047da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047e4:	4413      	add	r3, r2
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	667b      	str	r3, [r7, #100]	@ 0x64
      temp_im = fy_data[nd2].im;
 80047ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047f4:	4413      	add	r3, r2
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      fy_data[nd2].re = fy_data[i].re - temp_re;
 80047fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004806:	4413      	add	r3, r2
 8004808:	ed93 7a00 	vldr	s14, [r3]
 800480c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004816:	4413      	add	r3, r2
 8004818:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800481c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004820:	edc3 7a00 	vstr	s15, [r3]
      fy_data[nd2].im = fy_data[i].im - temp_im;
 8004824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800482e:	4413      	add	r3, r2
 8004830:	ed93 7a01 	vldr	s14, [r3, #4]
 8004834:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800483e:	4413      	add	r3, r2
 8004840:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004848:	edc3 7a01 	vstr	s15, [r3, #4]
      fy_data[i].re += temp_re;
 800484c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004856:	4413      	add	r3, r2
 8004858:	ed93 7a00 	vldr	s14, [r3]
 800485c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004866:	4413      	add	r3, r2
 8004868:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800486c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004870:	edc3 7a00 	vstr	s15, [r3]
      fy_data[i].im += temp_im;
 8004874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800487e:	4413      	add	r3, r2
 8004880:	ed93 7a01 	vldr	s14, [r3, #4]
 8004884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800488e:	4413      	add	r3, r2
 8004890:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004898:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < iheight; i += iDelta2) {
 800489c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80048a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80048a4:	4413      	add	r3, r2
 80048a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048aa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80048ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048b2:	429a      	cmp	r2, r3
 80048b4:	db8a      	blt.n	80047cc <d_FFTImplementationCallback_doH+0xdfc>
    }
    nd2 = 1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (hszCostab = k; hszCostab < nRowsD2; hszCostab += k) {
 80048bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80048c4:	e0bd      	b.n	8004a42 <d_FFTImplementationCallback_doH+0x1072>
      twid_re = costab1q_data[hszCostab];
 80048c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80048d0:	4413      	add	r3, r2
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	663b      	str	r3, [r7, #96]	@ 0x60
      twid_im = hsintab_data[hszCostab];
 80048d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80048e0:	4413      	add	r3, r2
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	657b      	str	r3, [r7, #84]	@ 0x54
      i = nd2;
 80048e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      ju = nd2 + iheight;
 80048ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80048f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048f6:	4413      	add	r3, r2
 80048f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (i < ju) {
 80048fc:	e08e      	b.n	8004a1c <d_FFTImplementationCallback_doH+0x104c>
        u1 = i + iDelta;
 80048fe:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004906:	4413      	add	r3, r2
 8004908:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        temp_re_tmp = fy_data[u1].im;
 800490c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004916:	4413      	add	r3, r2
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	65bb      	str	r3, [r7, #88]	@ 0x58
        temp_im = fy_data[u1].re;
 800491c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004926:	4413      	add	r3, r2
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
 800492e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004932:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800493a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800493e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800494a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
        temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
 800494e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004952:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800495a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800495e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800496a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
        fy_data[u1].re = fy_data[i].re - temp_re;
 800496e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004978:	4413      	add	r3, r2
 800497a:	ed93 7a00 	vldr	s14, [r3]
 800497e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004988:	4413      	add	r3, r2
 800498a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800498e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004992:	edc3 7a00 	vstr	s15, [r3]
        fy_data[u1].im = fy_data[i].im - temp_im;
 8004996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80049a0:	4413      	add	r3, r2
 80049a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80049a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80049b0:	4413      	add	r3, r2
 80049b2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80049b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ba:	edc3 7a01 	vstr	s15, [r3, #4]
        fy_data[i].re += temp_re;
 80049be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80049c8:	4413      	add	r3, r2
 80049ca:	ed93 7a00 	vldr	s14, [r3]
 80049ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80049d8:	4413      	add	r3, r2
 80049da:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80049de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049e2:	edc3 7a00 	vstr	s15, [r3]
        fy_data[i].im += temp_im;
 80049e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80049f0:	4413      	add	r3, r2
 80049f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80049f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004a00:	4413      	add	r3, r2
 8004a02:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a0a:	edc3 7a01 	vstr	s15, [r3, #4]
        i += iDelta2;
 8004a0e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a16:	4413      	add	r3, r2
 8004a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      while (i < ju) {
 8004a1c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004a20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a24:	429a      	cmp	r2, r3
 8004a26:	f6ff af6a 	blt.w	80048fe <d_FFTImplementationCallback_doH+0xf2e>
      }
      nd2++;
 8004a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (hszCostab = k; hszCostab < nRowsD2; hszCostab += k) {
 8004a34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004a42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	f6ff af3c 	blt.w	80048c6 <d_FFTImplementationCallback_doH+0xef6>
    }
    k /= 2;
 8004a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a52:	0fda      	lsrs	r2, r3, #31
 8004a54:	4413      	add	r3, r2
 8004a56:	105b      	asrs	r3, r3, #1
 8004a58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    iDelta = iDelta2;
 8004a5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    iDelta2 += iDelta2;
 8004a64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    iheight -= iDelta;
 8004a6e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  while (k > 0) {
 8004a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f73f ae9f 	bgt.w	80047c4 <d_FFTImplementationCallback_doH+0xdf4>
  }
  emxInit_creal32_T(&fv);
 8004a86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f004 f9fa 	bl	8008e84 <emxInit_creal32_T>
  d_FFTImplementationCallback_r2b(wwc, (int)z_tmp, costab1q, hsintab, fv);
 8004a90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a94:	f7fc f868 	bl	8000b68 <__aeabi_d2iz>
 8004a98:	6a3a      	ldr	r2, [r7, #32]
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8004aa8:	f001 f905 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
  fv_data = fv->data;
 8004aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	653b      	str	r3, [r7, #80]	@ 0x50
  emxFree_real32_T(&costab1q);
 8004ab2:	f107 0320 	add.w	r3, r7, #32
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 f984 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&hsintab);
 8004abc:	f107 0318 	add.w	r3, r7, #24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f004 f97f 	bl	8008dc4 <emxFree_real32_T>
  nd2 = fy->size[0];
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (u1 = 0; u1 < nd2; u1++) {
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ad6:	e04f      	b.n	8004b78 <d_FFTImplementationCallback_doH+0x11a8>
    twid_im = fy_data[u1].re;
 8004ad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004ae2:	4413      	add	r3, r2
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	657b      	str	r3, [r7, #84]	@ 0x54
    temp_im = fv_data[u1].im;
 8004ae8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004af0:	4413      	add	r3, r2
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    temp_re = fy_data[u1].im;
 8004af8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b02:	4413      	add	r3, r2
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	667b      	str	r3, [r7, #100]	@ 0x64
    twid_re = fv_data[u1].re;
 8004b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b10:	4413      	add	r3, r2
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	663b      	str	r3, [r7, #96]	@ 0x60
    fy_data[u1].re = twid_im * twid_re - temp_re * temp_im;
 8004b16:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8004b1a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b22:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8004b26:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b38:	4413      	add	r3, r2
 8004b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b3e:	edc3 7a00 	vstr	s15, [r3]
    fy_data[u1].im = twid_im * temp_im + temp_re * twid_re;
 8004b42:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8004b46:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b4e:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8004b52:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b64:	4413      	add	r3, r2
 8004b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6a:	edc3 7a01 	vstr	s15, [r3, #4]
  for (u1 = 0; u1 < nd2; u1++) {
 8004b6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b72:	3301      	adds	r3, #1
 8004b74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8004b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b80:	429a      	cmp	r2, r3
 8004b82:	dba9      	blt.n	8004ad8 <d_FFTImplementationCallback_doH+0x1108>
  }
  d_FFTImplementationCallback_r2b(fy, (int)z_tmp, hcostabinv, hsintabinv, fv);
 8004b84:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004b86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b8a:	f7fb ffed 	bl	8000b68 <__aeabi_d2iz>
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	460b      	mov	r3, r1
 8004b98:	4601      	mov	r1, r0
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f001 f88b 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
  fv_data = fv->data;
 8004ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	653b      	str	r3, [r7, #80]	@ 0x50
  emxFree_creal32_T(&fy);
 8004ba6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004baa:	4618      	mov	r0, r3
 8004bac:	f004 f8b6 	bl	8008d1c <emxFree_creal32_T>
  emxFree_real32_T(&hsintabinv);
 8004bb0:	f107 0314 	add.w	r3, r7, #20
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f004 f905 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&hcostabinv);
 8004bba:	f107 031c 	add.w	r3, r7, #28
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f004 f900 	bl	8008dc4 <emxFree_real32_T>
  if (fv->size[0] > 1) {
 8004bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	dd44      	ble.n	8004c58 <d_FFTImplementationCallback_doH+0x1288>
    temp_im = 1.0F / (float)fv->size[0];
 8004bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	ee07 3a90 	vmov	s15, r3
 8004bd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be4:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    nd2 = fv->size[0];
 8004be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (u1 = 0; u1 < nd2; u1++) {
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004bf8:	e028      	b.n	8004c4c <d_FFTImplementationCallback_doH+0x127c>
      fv_data[u1].re *= temp_im;
 8004bfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c02:	4413      	add	r3, r2
 8004c04:	ed93 7a00 	vldr	s14, [r3]
 8004c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c10:	4413      	add	r3, r2
 8004c12:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1a:	edc3 7a00 	vstr	s15, [r3]
      fv_data[u1].im *= temp_im;
 8004c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c26:	4413      	add	r3, r2
 8004c28:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c34:	4413      	add	r3, r2
 8004c36:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (u1 = 0; u1 < nd2; u1++) {
 8004c42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c46:	3301      	adds	r3, #1
 8004c48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8004c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c54:	429a      	cmp	r2, r3
 8004c56:	dbd0      	blt.n	8004bfa <d_FFTImplementationCallback_doH+0x122a>
    }
  }
  u1 = (int)(float)hnRows;
 8004c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c68:	ee17 3a90 	vmov	r3, s15
 8004c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  nd2 = wwc->size[0];
 8004c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (k = u1; k <= nd2; k++) {
 8004c7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c84:	e071      	b.n	8004d6a <d_FFTImplementationCallback_doH+0x139a>
    temp_im = wwc_data[k - 1].re;
 8004c86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c8a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004c96:	4413      	add	r3, r2
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    temp_re = fv_data[k - 1].im;
 8004c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ca2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004cac:	4413      	add	r3, r2
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	667b      	str	r3, [r7, #100]	@ 0x64
    twid_re = wwc_data[k - 1].im;
 8004cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cb6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004cc2:	4413      	add	r3, r2
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	663b      	str	r3, [r7, #96]	@ 0x60
    twid_im = fv_data[k - 1].re;
 8004cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ccc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004cd6:	4413      	add	r3, r2
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	657b      	str	r3, [r7, #84]	@ 0x54
    ytmp_data[k - (int)(float)hnRows].re =
        temp_im * twid_im + twid_re * temp_re;
 8004cdc:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004ce0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ce8:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8004cec:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    ytmp_data[k - (int)(float)hnRows].re =
 8004cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cf8:	ee06 3a90 	vmov	s13, r3
 8004cfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004d00:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8004d04:	ee16 2a90 	vmov	r2, s13
 8004d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d14:	4413      	add	r3, r2
        temp_im * twid_im + twid_re * temp_re;
 8004d16:	ee77 7a27 	vadd.f32	s15, s14, s15
    ytmp_data[k - (int)(float)hnRows].re =
 8004d1a:	edc3 7a00 	vstr	s15, [r3]
    ytmp_data[k - (int)(float)hnRows].im =
        temp_im * temp_re - twid_re * twid_im;
 8004d1e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004d22:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d2a:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8004d2e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
    ytmp_data[k - (int)(float)hnRows].im =
 8004d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d3a:	ee06 3a90 	vmov	s13, r3
 8004d3e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004d42:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8004d46:	ee16 2a90 	vmov	r2, s13
 8004d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d56:	4413      	add	r3, r2
        temp_im * temp_re - twid_re * twid_im;
 8004d58:	ee77 7a67 	vsub.f32	s15, s14, s15
    ytmp_data[k - (int)(float)hnRows].im =
 8004d5c:	edc3 7a01 	vstr	s15, [r3, #4]
  for (k = u1; k <= nd2; k++) {
 8004d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d64:	3301      	adds	r3, #1
 8004d66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d72:	429a      	cmp	r2, r3
 8004d74:	dd87      	ble.n	8004c86 <d_FFTImplementationCallback_doH+0x12b6>
  }
  emxFree_creal32_T(&fv);
 8004d76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f003 ffce 	bl	8008d1c <emxFree_creal32_T>
  for (i = 0; i < hnRows; i++) {
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d86:	e101      	b.n	8004f8c <d_FFTImplementationCallback_doH+0x15bc>
    float b_ytmp_re_tmp;
    float ytmp_im_tmp;
    float ytmp_re_tmp;
    u1 = wrapIndex_data[i];
 8004d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004d90:	4413      	add	r3, r2
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    temp_im = ytmp_data[i].re;
 8004d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004da2:	4413      	add	r3, r2
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    temp_re = reconVar1_data[i].im;
 8004daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004db2:	4413      	add	r3, r2
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	667b      	str	r3, [r7, #100]	@ 0x64
    twid_re = ytmp_data[i].im;
 8004db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004dc2:	4413      	add	r3, r2
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	663b      	str	r3, [r7, #96]	@ 0x60
    twid_im = reconVar1_data[i].re;
 8004dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004dd0:	4413      	add	r3, r2
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	657b      	str	r3, [r7, #84]	@ 0x54
    temp_re_tmp = ytmp_data[u1 - 1].re;
 8004dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004dda:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8004dde:	3b01      	subs	r3, #1
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004de6:	4413      	add	r3, r2
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	65bb      	str	r3, [r7, #88]	@ 0x58
    ytmp_im_tmp = -ytmp_data[u1 - 1].im;
 8004dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004df0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8004df4:	3b01      	subs	r3, #1
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004dfc:	4413      	add	r3, r2
 8004dfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e02:	eef1 7a67 	vneg.f32	s15, s15
 8004e06:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    ytmp_re_tmp = reconVar2_data[i].im;
 8004e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e12:	4413      	add	r3, r2
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	64bb      	str	r3, [r7, #72]	@ 0x48
    b_ytmp_re_tmp = reconVar2_data[i].re;
 8004e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e20:	4413      	add	r3, r2
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	647b      	str	r3, [r7, #68]	@ 0x44
    y_data[i].re =
        0.5F * ((temp_im * twid_im - twid_re * temp_re) +
 8004e26:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004e2a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e32:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8004e36:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e3e:	ee37 7a67 	vsub.f32	s14, s14, s15
                (temp_re_tmp * b_ytmp_re_tmp - ytmp_im_tmp * ytmp_re_tmp));
 8004e42:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8004e46:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004e4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e4e:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8004e52:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8004e56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
        0.5F * ((temp_im * twid_im - twid_re * temp_re) +
 8004e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[i].re =
 8004e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004e6c:	4413      	add	r3, r2
        0.5F * ((temp_im * twid_im - twid_re * temp_re) +
 8004e6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e72:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[i].re =
 8004e76:	edc3 7a00 	vstr	s15, [r3]
    y_data[i].im =
        0.5F * ((temp_im * temp_re + twid_re * twid_im) +
 8004e7a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004e7e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e86:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8004e8a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e92:	ee37 7a27 	vadd.f32	s14, s14, s15
                (temp_re_tmp * ytmp_re_tmp + ytmp_im_tmp * b_ytmp_re_tmp));
 8004e96:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8004e9a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8004e9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ea2:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8004ea6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004eaa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_im * temp_re + twid_re * twid_im) +
 8004eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[i].im =
 8004eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004ec0:	4413      	add	r3, r2
        0.5F * ((temp_im * temp_re + twid_re * twid_im) +
 8004ec2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[i].im =
 8004eca:	edc3 7a01 	vstr	s15, [r3, #4]
    y_data[hnRows + i].re =
        0.5F * ((temp_im * b_ytmp_re_tmp - twid_re * ytmp_re_tmp) +
 8004ece:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004ed2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004eda:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8004ede:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8004ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ee6:	ee37 7a67 	vsub.f32	s14, s14, s15
                (temp_re_tmp * twid_im - ytmp_im_tmp * temp_re));
 8004eea:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8004eee:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004ef2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ef6:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8004efa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004efe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f02:	ee76 7ae7 	vsub.f32	s15, s13, s15
        0.5F * ((temp_im * b_ytmp_re_tmp - twid_re * ytmp_re_tmp) +
 8004f06:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[hnRows + i].re =
 8004f0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f12:	4413      	add	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004f1a:	4413      	add	r3, r2
        0.5F * ((temp_im * b_ytmp_re_tmp - twid_re * ytmp_re_tmp) +
 8004f1c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f20:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[hnRows + i].re =
 8004f24:	edc3 7a00 	vstr	s15, [r3]
    y_data[hnRows + i].im =
        0.5F * ((temp_im * ytmp_re_tmp + twid_re * b_ytmp_re_tmp) +
 8004f28:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004f2c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8004f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f34:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8004f38:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f40:	ee37 7a27 	vadd.f32	s14, s14, s15
                (temp_re_tmp * temp_re + ytmp_im_tmp * twid_im));
 8004f44:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8004f48:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004f4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f50:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8004f54:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004f58:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
        0.5F * ((temp_im * ytmp_re_tmp + twid_re * b_ytmp_re_tmp) +
 8004f60:	ee77 7a27 	vadd.f32	s15, s14, s15
    y_data[hnRows + i].im =
 8004f64:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004f74:	4413      	add	r3, r2
        0.5F * ((temp_im * ytmp_re_tmp + twid_re * b_ytmp_re_tmp) +
 8004f76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
    y_data[hnRows + i].im =
 8004f7e:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < hnRows; i++) {
 8004f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f86:	3301      	adds	r3, #1
 8004f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f8c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f94:	429a      	cmp	r2, r3
 8004f96:	f6ff aef7 	blt.w	8004d88 <d_FFTImplementationCallback_doH+0x13b8>
  }
  emxFree_creal32_T(&reconVar2);
 8004f9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f003 febc 	bl	8008d1c <emxFree_creal32_T>
  emxFree_creal32_T(&reconVar1);
 8004fa4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f003 feb7 	bl	8008d1c <emxFree_creal32_T>
  emxFree_int32_T(&wrapIndex);
 8004fae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f003 fedc 	bl	8008d70 <emxFree_int32_T>
  emxFree_creal32_T(&ytmp);
 8004fb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f003 fead 	bl	8008d1c <emxFree_creal32_T>
}
 8004fc2:	bf00      	nop
 8004fc4:	37ec      	adds	r7, #236	@ 0xec
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	ecbd 8b02 	vpop	{d8}
 8004fcc:	bd90      	pop	{r4, r7, pc}
 8004fce:	bf00      	nop

08004fd0 <c_FFTImplementationCallback_dob>:
void c_FFTImplementationCallback_dob(const emxArray_real32_T *x, int n2blue,
                                     int nfft, const emxArray_real32_T *costab,
                                     const emxArray_real32_T *sintab,
                                     const emxArray_real32_T *sintabinv,
                                     emxArray_creal32_T *y)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b0a1      	sub	sp, #132	@ 0x84
 8004fd4:	af06      	add	r7, sp, #24
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  float nt_im;
  int i;
  int k;
  int minNrowsNx;
  int nInt2m1;
  x_data = x->data;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  emxInit_creal32_T(&wwc);
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f003 ff4b 	bl	8008e84 <emxInit_creal32_T>
  if ((nfft != 1) && ((nfft & 1) == 0)) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	f000 80ad 	beq.w	8005150 <c_FFTImplementationCallback_dob+0x180>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f040 80a7 	bne.w	8005150 <c_FFTImplementationCallback_dob+0x180>
    int nInt2;
    int nRows;
    int rt;
    nRows = (int)((unsigned int)nfft >> 1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	647b      	str	r3, [r7, #68]	@ 0x44
    nInt2m1 = (nRows + nRows) - 1;
 8005008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	3b01      	subs	r3, #1
 800500e:	643b      	str	r3, [r7, #64]	@ 0x40
    i = wwc->size[0];
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	65fb      	str	r3, [r7, #92]	@ 0x5c
    wwc->size[0] = nInt2m1;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501e:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(wwc, i);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8005024:	4618      	mov	r0, r3
 8005026:	f003 fd1a 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    wwc_data = wwc->data;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	667b      	str	r3, [r7, #100]	@ 0x64
    rt = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	653b      	str	r3, [r7, #80]	@ 0x50
    wwc_data[nRows - 1].re = 1.0F;
 8005034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005036:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800503a:	3b01      	subs	r3, #1
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005040:	4413      	add	r3, r2
 8005042:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005046:	601a      	str	r2, [r3, #0]
    wwc_data[nRows - 1].im = 0.0F;
 8005048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800504a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800504e:	3b01      	subs	r3, #1
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005054:	4413      	add	r3, r2
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	605a      	str	r2, [r3, #4]
    nInt2 = nRows << 1;
 800505c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (k = 0; k <= nRows - 2; k++) {
 8005062:	2300      	movs	r3, #0
 8005064:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005066:	e04e      	b.n	8005106 <c_FFTImplementationCallback_dob+0x136>
      minNrowsNx = ((k + 1) << 1) - 1;
 8005068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800506a:	3301      	adds	r3, #1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	3b01      	subs	r3, #1
 8005070:	657b      	str	r3, [r7, #84]	@ 0x54
      if (nInt2 - rt <= minNrowsNx) {
 8005072:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800507a:	429a      	cmp	r2, r3
 800507c:	db06      	blt.n	800508c <c_FFTImplementationCallback_dob+0xbc>
        rt += minNrowsNx - nInt2;
 800507e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005086:	4413      	add	r3, r2
 8005088:	653b      	str	r3, [r7, #80]	@ 0x50
 800508a:	e003      	b.n	8005094 <c_FFTImplementationCallback_dob+0xc4>
      } else {
        rt += minNrowsNx;
 800508c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800508e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005090:	4413      	add	r3, r2
 8005092:	653b      	str	r3, [r7, #80]	@ 0x50
      }
      nt_im = -3.14159274F * (float)rt / (float)nRows;
 8005094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80052ec <c_FFTImplementationCallback_dob+0x31c>
 80050a2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80050a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a8:	ee07 3a90 	vmov	s15, r3
 80050ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      wwc_data[(nRows - k) - 2].re = cosf(nt_im);
 80050b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80050c2:	3b02      	subs	r3, #2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050c8:	18d4      	adds	r4, r2, r3
 80050ca:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80050ce:	f014 fa79 	bl	80195c4 <cosf>
 80050d2:	eef0 7a40 	vmov.f32	s15, s0
 80050d6:	edc4 7a00 	vstr	s15, [r4]
      wwc_data[(nRows - k) - 2].im = -sinf(nt_im);
 80050da:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80050de:	f014 fab5 	bl	801964c <sinf>
 80050e2:	eef0 7a40 	vmov.f32	s15, s0
 80050e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80050f0:	3b02      	subs	r3, #2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050f6:	4413      	add	r3, r2
 80050f8:	eef1 7a67 	vneg.f32	s15, s15
 80050fc:	edc3 7a01 	vstr	s15, [r3, #4]
    for (k = 0; k <= nRows - 2; k++) {
 8005100:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005102:	3301      	adds	r3, #1
 8005104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005108:	3b01      	subs	r3, #1
 800510a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800510c:	429a      	cmp	r2, r3
 800510e:	dbab      	blt.n	8005068 <c_FFTImplementationCallback_dob+0x98>
    }
    i = nInt2m1 - 1;
 8005110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005112:	3b01      	subs	r3, #1
 8005114:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (k = i; k >= nRows; k--) {
 8005116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005118:	65bb      	str	r3, [r7, #88]	@ 0x58
 800511a:	e014      	b.n	8005146 <c_FFTImplementationCallback_dob+0x176>
      wwc_data[k] = wwc_data[(nInt2m1 - k) - 1];
 800511c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800511e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005126:	3b01      	subs	r3, #1
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800512c:	18d1      	adds	r1, r2, r3
 800512e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005134:	4413      	add	r3, r2
 8005136:	460a      	mov	r2, r1
 8005138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800513c:	e883 0003 	stmia.w	r3, {r0, r1}
    for (k = i; k >= nRows; k--) {
 8005140:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005142:	3b01      	subs	r3, #1
 8005144:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005146:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514a:	429a      	cmp	r2, r3
 800514c:	dae6      	bge.n	800511c <c_FFTImplementationCallback_dob+0x14c>
  if ((nfft != 1) && ((nfft & 1) == 0)) {
 800514e:	e09d      	b.n	800528c <c_FFTImplementationCallback_dob+0x2bc>
    }
  } else {
    int nInt2;
    int rt;
    nInt2m1 = (nfft + nfft) - 1;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	3b01      	subs	r3, #1
 8005156:	643b      	str	r3, [r7, #64]	@ 0x40
    i = wwc->size[0];
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    wwc->size[0] = nInt2m1;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005166:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(wwc, i);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800516c:	4618      	mov	r0, r3
 800516e:	f003 fc76 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    wwc_data = wwc->data;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	667b      	str	r3, [r7, #100]	@ 0x64
    rt = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    wwc_data[nfft - 1].re = 1.0F;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005182:	3b01      	subs	r3, #1
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005188:	4413      	add	r3, r2
 800518a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800518e:	601a      	str	r2, [r3, #0]
    wwc_data[nfft - 1].im = 0.0F;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005196:	3b01      	subs	r3, #1
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800519c:	4413      	add	r3, r2
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]
    nInt2 = nfft << 1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	637b      	str	r3, [r7, #52]	@ 0x34
    for (k = 0; k <= nfft - 2; k++) {
 80051aa:	2300      	movs	r3, #0
 80051ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051ae:	e049      	b.n	8005244 <c_FFTImplementationCallback_dob+0x274>
      minNrowsNx = ((k + 1) << 1) - 1;
 80051b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051b2:	3301      	adds	r3, #1
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	3b01      	subs	r3, #1
 80051b8:	657b      	str	r3, [r7, #84]	@ 0x54
      if (nInt2 - rt <= minNrowsNx) {
 80051ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051c2:	429a      	cmp	r2, r3
 80051c4:	db06      	blt.n	80051d4 <c_FFTImplementationCallback_dob+0x204>
        rt += minNrowsNx - nInt2;
 80051c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051ce:	4413      	add	r3, r2
 80051d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d2:	e003      	b.n	80051dc <c_FFTImplementationCallback_dob+0x20c>
      } else {
        rt += minNrowsNx;
 80051d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d8:	4413      	add	r3, r2
 80051da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      nt_im = -3.14159274F * (float)rt / (float)nfft;
 80051dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e6:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80052ec <c_FFTImplementationCallback_dob+0x31c>
 80051ea:	ee67 6a87 	vmul.f32	s13, s15, s14
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051fc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      i = (nfft - k) - 2;
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	3b02      	subs	r3, #2
 8005208:	65fb      	str	r3, [r7, #92]	@ 0x5c
      wwc_data[i].re = cosf(nt_im);
 800520a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005210:	18d4      	adds	r4, r2, r3
 8005212:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8005216:	f014 f9d5 	bl	80195c4 <cosf>
 800521a:	eef0 7a40 	vmov.f32	s15, s0
 800521e:	edc4 7a00 	vstr	s15, [r4]
      wwc_data[i].im = -sinf(nt_im);
 8005222:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8005226:	f014 fa11 	bl	801964c <sinf>
 800522a:	eef0 7a40 	vmov.f32	s15, s0
 800522e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005234:	4413      	add	r3, r2
 8005236:	eef1 7a67 	vneg.f32	s15, s15
 800523a:	edc3 7a01 	vstr	s15, [r3, #4]
    for (k = 0; k <= nfft - 2; k++) {
 800523e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005240:	3301      	adds	r3, #1
 8005242:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3b01      	subs	r3, #1
 8005248:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800524a:	429a      	cmp	r2, r3
 800524c:	dbb0      	blt.n	80051b0 <c_FFTImplementationCallback_dob+0x1e0>
    }
    i = nInt2m1 - 1;
 800524e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005250:	3b01      	subs	r3, #1
 8005252:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (k = i; k >= nfft; k--) {
 8005254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005256:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005258:	e014      	b.n	8005284 <c_FFTImplementationCallback_dob+0x2b4>
      wwc_data[k] = wwc_data[(nInt2m1 - k) - 1];
 800525a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800525c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005264:	3b01      	subs	r3, #1
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800526a:	18d1      	adds	r1, r2, r3
 800526c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005272:	4413      	add	r3, r2
 8005274:	460a      	mov	r2, r1
 8005276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800527a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (k = i; k >= nfft; k--) {
 800527e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005280:	3b01      	subs	r3, #1
 8005282:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	dae6      	bge.n	800525a <c_FFTImplementationCallback_dob+0x28a>
    }
  }
  i = y->size[0];
 800528c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	65fb      	str	r3, [r7, #92]	@ 0x5c
  y->size[0] = nfft;
 8005296:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(y, i);
 80052a0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80052a2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80052a6:	f003 fbda 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  y_data = y->data;
 80052aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (nfft > x->size[0]) {
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	dd2d      	ble.n	800531a <c_FFTImplementationCallback_dob+0x34a>
    i = y->size[0];
 80052be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    y->size[0] = nfft;
 80052c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(y, i);
 80052d2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80052d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80052d8:	f003 fbc1 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    y_data = y->data;
 80052dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	663b      	str	r3, [r7, #96]	@ 0x60
    for (i = 0; i < nfft; i++) {
 80052e4:	2300      	movs	r3, #0
 80052e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052e8:	e013      	b.n	8005312 <c_FFTImplementationCallback_dob+0x342>
 80052ea:	bf00      	nop
 80052ec:	c0490fdb 	.word	0xc0490fdb
      y_data[i].re = 0.0F;
 80052f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052f6:	4413      	add	r3, r2
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
      y_data[i].im = 0.0F;
 80052fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005304:	4413      	add	r3, r2
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	605a      	str	r2, [r3, #4]
    for (i = 0; i < nfft; i++) {
 800530c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800530e:	3301      	adds	r3, #1
 8005310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005312:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	dbea      	blt.n	80052f0 <c_FFTImplementationCallback_dob+0x320>
    }
  }
  emxInit_creal32_T(&fv);
 800531a:	f107 0318 	add.w	r3, r7, #24
 800531e:	4618      	mov	r0, r3
 8005320:	f003 fdb0 	bl	8008e84 <emxInit_creal32_T>
  emxInit_creal32_T(&b_fv);
 8005324:	f107 031c 	add.w	r3, r7, #28
 8005328:	4618      	mov	r0, r3
 800532a:	f003 fdab 	bl	8008e84 <emxInit_creal32_T>
  if ((n2blue != 1) && ((nfft & 1) == 0)) {
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d01b      	beq.n	800536c <c_FFTImplementationCallback_dob+0x39c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d116      	bne.n	800536c <c_FFTImplementationCallback_dob+0x39c>
    d_FFTImplementationCallback_doH(x, y, x->size[0], nfft, n2blue, wwc, costab,
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005348:	9205      	str	r2, [sp, #20]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	9204      	str	r2, [sp, #16]
 800534e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005350:	9203      	str	r2, [sp, #12]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	9202      	str	r2, [sp, #8]
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	460a      	mov	r2, r1
 8005360:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7fe fb33 	bl	80039d0 <d_FFTImplementationCallback_doH>
 800536a:	e192      	b.n	8005692 <c_FFTImplementationCallback_dob+0x6c2>
                                    sintab, costab, sintabinv);
  } else {
    float b_re_tmp;
    float c_re_tmp;
    float re_tmp;
    minNrowsNx = x->size[0];
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	657b      	str	r3, [r7, #84]	@ 0x54
    if (nfft <= minNrowsNx) {
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005378:	429a      	cmp	r2, r3
 800537a:	dc01      	bgt.n	8005380 <c_FFTImplementationCallback_dob+0x3b0>
      minNrowsNx = nfft;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	657b      	str	r3, [r7, #84]	@ 0x54
    }
    for (k = 0; k < minNrowsNx; k++) {
 8005380:	2300      	movs	r3, #0
 8005382:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005384:	e031      	b.n	80053ea <c_FFTImplementationCallback_dob+0x41a>
      nInt2m1 = (nfft + k) - 1;
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800538a:	4413      	add	r3, r2
 800538c:	3b01      	subs	r3, #1
 800538e:	643b      	str	r3, [r7, #64]	@ 0x40
      y_data[k].re = wwc_data[nInt2m1].re * x_data[k];
 8005390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005396:	4413      	add	r3, r2
 8005398:	ed93 7a00 	vldr	s14, [r3]
 800539c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053a2:	4413      	add	r3, r2
 80053a4:	edd3 7a00 	vldr	s15, [r3]
 80053a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053ae:	4413      	add	r3, r2
 80053b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b4:	edc3 7a00 	vstr	s15, [r3]
      y_data[k].im = wwc_data[nInt2m1].im * -x_data[k];
 80053b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053be:	4413      	add	r3, r2
 80053c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80053c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ca:	4413      	add	r3, r2
 80053cc:	edd3 7a00 	vldr	s15, [r3]
 80053d0:	eef1 7a67 	vneg.f32	s15, s15
 80053d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053da:	4413      	add	r3, r2
 80053dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e0:	edc3 7a01 	vstr	s15, [r3, #4]
    for (k = 0; k < minNrowsNx; k++) {
 80053e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053e6:	3301      	adds	r3, #1
 80053e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ee:	429a      	cmp	r2, r3
 80053f0:	dbc9      	blt.n	8005386 <c_FFTImplementationCallback_dob+0x3b6>
    }
    i = minNrowsNx + 1;
 80053f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f4:	3301      	adds	r3, #1
 80053f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (k = i; k <= nfft; k++) {
 80053f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053fc:	e016      	b.n	800542c <c_FFTImplementationCallback_dob+0x45c>
      y_data[k - 1].re = 0.0F;
 80053fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005400:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005404:	3b01      	subs	r3, #1
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800540a:	4413      	add	r3, r2
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
      y_data[k - 1].im = 0.0F;
 8005412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005414:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005418:	3b01      	subs	r3, #1
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800541e:	4413      	add	r3, r2
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	605a      	str	r2, [r3, #4]
    for (k = i; k <= nfft; k++) {
 8005426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005428:	3301      	adds	r3, #1
 800542a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800542c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	429a      	cmp	r2, r3
 8005432:	dde4      	ble.n	80053fe <c_FFTImplementationCallback_dob+0x42e>
    }
    d_FFTImplementationCallback_r2b(y, n2blue, costab, sintab, fv);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005442:	f000 fc38 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
    fv_data = fv->data;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	633b      	str	r3, [r7, #48]	@ 0x30
    d_FFTImplementationCallback_r2b(wwc, n2blue, costab, sintab, b_fv);
 800544c:	6978      	ldr	r0, [r7, #20]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	f000 fc2d 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
    i = b_fv->size[0];
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	65fb      	str	r3, [r7, #92]	@ 0x5c
    b_fv->size[0] = fv->size[0];
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(b_fv, i);
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8005474:	4618      	mov	r0, r3
 8005476:	f003 faf2 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    b_fv_data = b_fv->data;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    minNrowsNx = fv->size[0];
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0; i < minNrowsNx; i++) {
 8005488:	2300      	movs	r3, #0
 800548a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800548c:	e042      	b.n	8005514 <c_FFTImplementationCallback_dob+0x544>
      nt_im = fv_data[i].re;
 800548e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005494:	4413      	add	r3, r2
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	63bb      	str	r3, [r7, #56]	@ 0x38
      re_tmp = b_fv_data[i].im;
 800549a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a0:	4413      	add	r3, r2
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      b_re_tmp = fv_data[i].im;
 80054a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ac:	4413      	add	r3, r2
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
      c_re_tmp = b_fv_data[i].re;
 80054b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b8:	4413      	add	r3, r2
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	623b      	str	r3, [r7, #32]
      b_fv_data[i].re = nt_im * c_re_tmp - b_re_tmp * re_tmp;
 80054be:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80054c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80054c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80054ce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80054d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054dc:	4413      	add	r3, r2
 80054de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e2:	edc3 7a00 	vstr	s15, [r3]
      b_fv_data[i].im = nt_im * re_tmp + b_re_tmp * c_re_tmp;
 80054e6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80054ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80054ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054f2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80054f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80054fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005504:	4413      	add	r3, r2
 8005506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800550a:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < minNrowsNx; i++) {
 800550e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005510:	3301      	adds	r3, #1
 8005512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005514:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005518:	429a      	cmp	r2, r3
 800551a:	dbb8      	blt.n	800548e <c_FFTImplementationCallback_dob+0x4be>
    }
    d_FFTImplementationCallback_r2b(b_fv, n2blue, costab, sintabinv, fv);
 800551c:	69f8      	ldr	r0, [r7, #28]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	f000 fbc5 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
    fv_data = fv->data;
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	633b      	str	r3, [r7, #48]	@ 0x30
    if (fv->size[0] > 1) {
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	dd3a      	ble.n	80055b2 <c_FFTImplementationCallback_dob+0x5e2>
      nt_im = 1.0F / (float)fv->size[0];
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800554e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005552:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      minNrowsNx = fv->size[0];
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	657b      	str	r3, [r7, #84]	@ 0x54
      for (i = 0; i < minNrowsNx; i++) {
 800555e:	2300      	movs	r3, #0
 8005560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005562:	e022      	b.n	80055aa <c_FFTImplementationCallback_dob+0x5da>
        fv_data[i].re *= nt_im;
 8005564:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800556a:	4413      	add	r3, r2
 800556c:	ed93 7a00 	vldr	s14, [r3]
 8005570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005576:	4413      	add	r3, r2
 8005578:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800557c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005580:	edc3 7a00 	vstr	s15, [r3]
        fv_data[i].im *= nt_im;
 8005584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558a:	4413      	add	r3, r2
 800558c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005596:	4413      	add	r3, r2
 8005598:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800559c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a0:	edc3 7a01 	vstr	s15, [r3, #4]
      for (i = 0; i < minNrowsNx; i++) {
 80055a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055a6:	3301      	adds	r3, #1
 80055a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ae:	429a      	cmp	r2, r3
 80055b0:	dbd8      	blt.n	8005564 <c_FFTImplementationCallback_dob+0x594>
      }
    }
    i = (int)(float)nfft;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055c0:	ee17 3a90 	vmov	r3, s15
 80055c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    minNrowsNx = wwc->size[0];
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	657b      	str	r3, [r7, #84]	@ 0x54
    for (k = i; k <= minNrowsNx; k++) {
 80055ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055d2:	e05a      	b.n	800568a <c_FFTImplementationCallback_dob+0x6ba>
      nt_im = wwc_data[k - 1].re;
 80055d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055d6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80055da:	3b01      	subs	r3, #1
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055e0:	4413      	add	r3, r2
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      re_tmp = fv_data[k - 1].im;
 80055e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055e8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80055ec:	3b01      	subs	r3, #1
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f2:	4413      	add	r3, r2
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      b_re_tmp = wwc_data[k - 1].im;
 80055f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055fa:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80055fe:	3b01      	subs	r3, #1
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005604:	4413      	add	r3, r2
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
      c_re_tmp = fv_data[k - 1].re;
 800560a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800560c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005610:	3b01      	subs	r3, #1
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005616:	4413      	add	r3, r2
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	623b      	str	r3, [r7, #32]
      nInt2m1 = k - (int)(float)nfft;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800562a:	ee17 2a90 	vmov	r2, s15
 800562e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	643b      	str	r3, [r7, #64]	@ 0x40
      y_data[nInt2m1].re = nt_im * c_re_tmp + b_re_tmp * re_tmp;
 8005634:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005638:	edd7 7a08 	vldr	s15, [r7, #32]
 800563c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005640:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005644:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800564c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005652:	4413      	add	r3, r2
 8005654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005658:	edc3 7a00 	vstr	s15, [r3]
      y_data[nInt2m1].im = nt_im * re_tmp - b_re_tmp * c_re_tmp;
 800565c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005660:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005668:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800566c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800567a:	4413      	add	r3, r2
 800567c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005680:	edc3 7a01 	vstr	s15, [r3, #4]
    for (k = i; k <= minNrowsNx; k++) {
 8005684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005686:	3301      	adds	r3, #1
 8005688:	65bb      	str	r3, [r7, #88]	@ 0x58
 800568a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800568c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568e:	429a      	cmp	r2, r3
 8005690:	dda0      	ble.n	80055d4 <c_FFTImplementationCallback_dob+0x604>
    }
  }
  emxFree_creal32_T(&b_fv);
 8005692:	f107 031c 	add.w	r3, r7, #28
 8005696:	4618      	mov	r0, r3
 8005698:	f003 fb40 	bl	8008d1c <emxFree_creal32_T>
  emxFree_creal32_T(&fv);
 800569c:	f107 0318 	add.w	r3, r7, #24
 80056a0:	4618      	mov	r0, r3
 80056a2:	f003 fb3b 	bl	8008d1c <emxFree_creal32_T>
  emxFree_creal32_T(&wwc);
 80056a6:	f107 0314 	add.w	r3, r7, #20
 80056aa:	4618      	mov	r0, r3
 80056ac:	f003 fb36 	bl	8008d1c <emxFree_creal32_T>
}
 80056b0:	bf00      	nop
 80056b2:	376c      	adds	r7, #108	@ 0x6c
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd90      	pop	{r4, r7, pc}

080056b8 <c_FFTImplementationCallback_gen>:
 */
void c_FFTImplementationCallback_gen(int nRows, bool useRadix2,
                                     emxArray_real32_T *costab,
                                     emxArray_real32_T *sintab,
                                     emxArray_real32_T *sintabinv)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b08f      	sub	sp, #60	@ 0x3c
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	460b      	mov	r3, r1
 80056c6:	72fb      	strb	r3, [r7, #11]
  float *sintabinv_data;
  int i;
  int k;
  int n;
  int nd2;
  e = 6.28318548F / (float)nRows;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056d2:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8005924 <c_FFTImplementationCallback_gen+0x26c>
 80056d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056da:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
  n = (int)((unsigned int)nRows >> 1) >> 1;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	105b      	asrs	r3, r3, #1
 80056e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  emxInit_real32_T(&costab1q, 2);
 80056e6:	f107 0310 	add.w	r3, r7, #16
 80056ea:	2102      	movs	r1, #2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f003 fc2c 	bl	8008f4a <emxInit_real32_T>
  i = costab1q->size[0] * costab1q->size[1];
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	6852      	ldr	r2, [r2, #4]
 80056fc:	3204      	adds	r2, #4
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	fb02 f303 	mul.w	r3, r2, r3
 8005704:	62bb      	str	r3, [r7, #40]	@ 0x28
  costab1q->size[0] = 1;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
  costab1q->size[1] = n + 1;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005716:	3201      	adds	r2, #1
 8005718:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(costab1q, i);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800571e:	4618      	mov	r0, r3
 8005720:	f003 fa6b 	bl	8008bfa <emxEnsureCapacity_real32_T>
  costab1q_data = costab1q->data;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
  costab1q_data[0] = 1.0F;
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005730:	601a      	str	r2, [r3, #0]
  nd2 = n / 2 - 1;
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	0fda      	lsrs	r2, r3, #31
 8005736:	4413      	add	r3, r2
 8005738:	105b      	asrs	r3, r3, #1
 800573a:	3b01      	subs	r3, #1
 800573c:	623b      	str	r3, [r7, #32]
  for (k = 0; k <= nd2; k++) {
 800573e:	2300      	movs	r3, #0
 8005740:	637b      	str	r3, [r7, #52]	@ 0x34
 8005742:	e019      	b.n	8005778 <c_FFTImplementationCallback_gen+0xc0>
    costab1q_data[k + 1] = cosf(e * (float)(k + 1));
 8005744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005746:	3301      	adds	r3, #1
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005750:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575a:	3301      	adds	r3, #1
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005760:	18d4      	adds	r4, r2, r3
 8005762:	eeb0 0a67 	vmov.f32	s0, s15
 8005766:	f013 ff2d 	bl	80195c4 <cosf>
 800576a:	eef0 7a40 	vmov.f32	s15, s0
 800576e:	edc4 7a00 	vstr	s15, [r4]
  for (k = 0; k <= nd2; k++) {
 8005772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005774:	3301      	adds	r3, #1
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
 8005778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	429a      	cmp	r2, r3
 800577e:	dde1      	ble.n	8005744 <c_FFTImplementationCallback_gen+0x8c>
  }
  i = nd2 + 2;
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	3302      	adds	r3, #2
 8005784:	62bb      	str	r3, [r7, #40]	@ 0x28
  nd2 = n - 1;
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	3b01      	subs	r3, #1
 800578a:	623b      	str	r3, [r7, #32]
  for (k = i; k <= nd2; k++) {
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005790:	e019      	b.n	80057c6 <c_FFTImplementationCallback_gen+0x10e>
    costab1q_data[k] = sinf(e * (float)(n - k));
 8005792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	ee07 3a90 	vmov	s15, r3
 800579c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057a0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80057a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ae:	18d4      	adds	r4, r2, r3
 80057b0:	eeb0 0a67 	vmov.f32	s0, s15
 80057b4:	f013 ff4a 	bl	801964c <sinf>
 80057b8:	eef0 7a40 	vmov.f32	s15, s0
 80057bc:	edc4 7a00 	vstr	s15, [r4]
  for (k = i; k <= nd2; k++) {
 80057c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c2:	3301      	adds	r3, #1
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	dde1      	ble.n	8005792 <c_FFTImplementationCallback_gen+0xda>
  }
  costab1q_data[n] = 0.0F;
 80057ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d4:	4413      	add	r3, r2
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
  if (!useRadix2) {
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	f083 0301 	eor.w	r3, r3, #1
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80f5 	beq.w	80059d4 <c_FFTImplementationCallback_gen+0x31c>
    n = costab1q->size[1] - 1;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    nd2 = (costab1q->size[1] - 1) << 1;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3b01      	subs	r3, #1
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	623b      	str	r3, [r7, #32]
    i = costab->size[0] * costab->size[1];
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6852      	ldr	r2, [r2, #4]
 800580e:	3204      	adds	r2, #4
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	62bb      	str	r3, [r7, #40]	@ 0x28
    costab->size[0] = 1;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
    costab->size[1] = nd2 + 1;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	3304      	adds	r3, #4
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	3201      	adds	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(costab, i);
 800582c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f003 f9e3 	bl	8008bfa <emxEnsureCapacity_real32_T>
    costab_data = costab->data;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	61fb      	str	r3, [r7, #28]
    i = sintab->size[0] * sintab->size[1];
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	6852      	ldr	r2, [r2, #4]
 8005844:	3204      	adds	r2, #4
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sintab->size[0] = 1;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
    sintab->size[1] = nd2 + 1;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	3304      	adds	r3, #4
 800585c:	6a3a      	ldr	r2, [r7, #32]
 800585e:	3201      	adds	r2, #1
 8005860:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(sintab, i);
 8005862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005864:	6838      	ldr	r0, [r7, #0]
 8005866:	f003 f9c8 	bl	8008bfa <emxEnsureCapacity_real32_T>
    sintab_data = sintab->data;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	61bb      	str	r3, [r7, #24]
    costab_data[0] = 1.0F;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005876:	601a      	str	r2, [r3, #0]
    sintab_data[0] = 0.0F;
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
    i = sintabinv->size[0] * sintabinv->size[1];
 8005880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005888:	6852      	ldr	r2, [r2, #4]
 800588a:	3204      	adds	r2, #4
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	62bb      	str	r3, [r7, #40]	@ 0x28
    sintabinv->size[0] = 1;
 8005894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
    sintabinv->size[1] = nd2 + 1;
 800589c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	3304      	adds	r3, #4
 80058a2:	6a3a      	ldr	r2, [r7, #32]
 80058a4:	3201      	adds	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(sintabinv, i);
 80058a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058aa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80058ac:	f003 f9a5 	bl	8008bfa <emxEnsureCapacity_real32_T>
    sintabinv_data = sintabinv->data;
 80058b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 80058b6:	2300      	movs	r3, #0
 80058b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ba:	e012      	b.n	80058e2 <c_FFTImplementationCallback_gen+0x22a>
      sintabinv_data[k + 1] = costab1q_data[(n - k) - 1];
 80058bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058c6:	3b01      	subs	r3, #1
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058cc:	441a      	add	r2, r3
 80058ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d0:	3301      	adds	r3, #1
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	6979      	ldr	r1, [r7, #20]
 80058d6:	440b      	add	r3, r1
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	601a      	str	r2, [r3, #0]
    for (k = 0; k < n; k++) {
 80058dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058de:	3301      	adds	r3, #1
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	429a      	cmp	r2, r3
 80058e8:	dbe8      	blt.n	80058bc <c_FFTImplementationCallback_gen+0x204>
    }
    i = costab1q->size[1];
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (k = i; k <= nd2; k++) {
 80058f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f6:	e00e      	b.n	8005916 <c_FFTImplementationCallback_gen+0x25e>
      sintabinv_data[k] = costab1q_data[k - n];
 80058f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005902:	441a      	add	r2, r3
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	6979      	ldr	r1, [r7, #20]
 800590a:	440b      	add	r3, r1
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	601a      	str	r2, [r3, #0]
    for (k = i; k <= nd2; k++) {
 8005910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005912:	3301      	adds	r3, #1
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
 8005916:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	429a      	cmp	r2, r3
 800591c:	ddec      	ble.n	80058f8 <c_FFTImplementationCallback_gen+0x240>
    }
    for (k = 0; k < n; k++) {
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	@ 0x34
 8005922:	e024      	b.n	800596e <c_FFTImplementationCallback_gen+0x2b6>
 8005924:	40c90fdb 	.word	0x40c90fdb
      costab_data[k + 1] = costab1q_data[k + 1];
 8005928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592a:	3301      	adds	r3, #1
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	441a      	add	r2, r3
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005934:	3301      	adds	r3, #1
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	69f9      	ldr	r1, [r7, #28]
 800593a:	440b      	add	r3, r1
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	601a      	str	r2, [r3, #0]
      sintab_data[k + 1] = -costab1q_data[(n - k) - 1];
 8005940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800594a:	3b01      	subs	r3, #1
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005950:	4413      	add	r3, r2
 8005952:	edd3 7a00 	vldr	s15, [r3]
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	3301      	adds	r3, #1
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4413      	add	r3, r2
 8005960:	eef1 7a67 	vneg.f32	s15, s15
 8005964:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < n; k++) {
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	3301      	adds	r3, #1
 800596c:	637b      	str	r3, [r7, #52]	@ 0x34
 800596e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	429a      	cmp	r2, r3
 8005974:	dbd8      	blt.n	8005928 <c_FFTImplementationCallback_gen+0x270>
    }
    i = costab1q->size[1];
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (k = i; k <= nd2; k++) {
 800597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
 8005982:	e022      	b.n	80059ca <c_FFTImplementationCallback_gen+0x312>
      costab_data[k] = -costab1q_data[nd2 - k];
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598e:	4413      	add	r3, r2
 8005990:	edd3 7a00 	vldr	s15, [r3]
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	eef1 7a67 	vneg.f32	s15, s15
 80059a0:	edc3 7a00 	vstr	s15, [r3]
      sintab_data[k] = -costab1q_data[k - n];
 80059a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ae:	4413      	add	r3, r2
 80059b0:	edd3 7a00 	vldr	s15, [r3]
 80059b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4413      	add	r3, r2
 80059bc:	eef1 7a67 	vneg.f32	s15, s15
 80059c0:	edc3 7a00 	vstr	s15, [r3]
    for (k = i; k <= nd2; k++) {
 80059c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c6:	3301      	adds	r3, #1
 80059c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	ddd8      	ble.n	8005984 <c_FFTImplementationCallback_gen+0x2cc>
 80059d2:	e0ab      	b.n	8005b2c <c_FFTImplementationCallback_gen+0x474>
    }
  } else {
    n = costab1q->size[1] - 1;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    nd2 = (costab1q->size[1] - 1) << 1;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	623b      	str	r3, [r7, #32]
    i = costab->size[0] * costab->size[1];
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6852      	ldr	r2, [r2, #4]
 80059f8:	3204      	adds	r2, #4
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	fb02 f303 	mul.w	r3, r2, r3
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    costab->size[0] = 1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
    costab->size[1] = nd2 + 1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	3201      	adds	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(costab, i);
 8005a16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f003 f8ee 	bl	8008bfa <emxEnsureCapacity_real32_T>
    costab_data = costab->data;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	61fb      	str	r3, [r7, #28]
    i = sintab->size[0] * sintab->size[1];
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	6852      	ldr	r2, [r2, #4]
 8005a2e:	3204      	adds	r2, #4
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	fb02 f303 	mul.w	r3, r2, r3
 8005a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    sintab->size[0] = 1;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
    sintab->size[1] = nd2 + 1;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	6a3a      	ldr	r2, [r7, #32]
 8005a48:	3201      	adds	r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(sintab, i);
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4e:	6838      	ldr	r0, [r7, #0]
 8005a50:	f003 f8d3 	bl	8008bfa <emxEnsureCapacity_real32_T>
    sintab_data = sintab->data;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61bb      	str	r3, [r7, #24]
    costab_data[0] = 1.0F;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a60:	601a      	str	r2, [r3, #0]
    sintab_data[0] = 0.0F;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
    for (k = 0; k < n; k++) {
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a6e:	e022      	b.n	8005ab6 <c_FFTImplementationCallback_gen+0x3fe>
      costab_data[k + 1] = costab1q_data[k + 1];
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	3301      	adds	r3, #1
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a78:	441a      	add	r2, r3
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	69f9      	ldr	r1, [r7, #28]
 8005a82:	440b      	add	r3, r1
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	601a      	str	r2, [r3, #0]
      sintab_data[k + 1] = -costab1q_data[(n - k) - 1];
 8005a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a92:	3b01      	subs	r3, #1
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a98:	4413      	add	r3, r2
 8005a9a:	edd3 7a00 	vldr	s15, [r3]
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	eef1 7a67 	vneg.f32	s15, s15
 8005aac:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < n; k++) {
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aba:	429a      	cmp	r2, r3
 8005abc:	dbd8      	blt.n	8005a70 <c_FFTImplementationCallback_gen+0x3b8>
    }
    i = costab1q->size[1];
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (k = i; k <= nd2; k++) {
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aca:	e022      	b.n	8005b12 <c_FFTImplementationCallback_gen+0x45a>
      costab_data[k] = -costab1q_data[nd2 - k];
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad6:	4413      	add	r3, r2
 8005ad8:	edd3 7a00 	vldr	s15, [r3]
 8005adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	eef1 7a67 	vneg.f32	s15, s15
 8005ae8:	edc3 7a00 	vstr	s15, [r3]
      sintab_data[k] = -costab1q_data[k - n];
 8005aec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af6:	4413      	add	r3, r2
 8005af8:	edd3 7a00 	vldr	s15, [r3]
 8005afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4413      	add	r3, r2
 8005b04:	eef1 7a67 	vneg.f32	s15, s15
 8005b08:	edc3 7a00 	vstr	s15, [r3]
    for (k = i; k <= nd2; k++) {
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0e:	3301      	adds	r3, #1
 8005b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	ddd8      	ble.n	8005acc <c_FFTImplementationCallback_gen+0x414>
    }
    sintabinv->size[0] = 1;
 8005b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
    sintabinv->size[1] = 0;
 8005b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
  }
  emxFree_real32_T(&costab1q);
 8005b2c:	f107 0310 	add.w	r3, r7, #16
 8005b30:	4618      	mov	r0, r3
 8005b32:	f003 f947 	bl	8008dc4 <emxFree_real32_T>
}
 8005b36:	bf00      	nop
 8005b38:	373c      	adds	r7, #60	@ 0x3c
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd90      	pop	{r4, r7, pc}
 8005b3e:	bf00      	nop

08005b40 <c_FFTImplementationCallback_get>:
 *                bool useRadix2
 *                int *nRows
 * Return Type  : int
 */
int c_FFTImplementationCallback_get(int nfft, bool useRadix2, int *nRows)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b08d      	sub	sp, #52	@ 0x34
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	72fb      	strb	r3, [r7, #11]
  int n2blue;
  n2blue = 1;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (useRadix2) {
 8005b52:	7afb      	ldrb	r3, [r7, #11]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <c_FFTImplementationCallback_get+0x20>
    *nRows = nfft;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e045      	b.n	8005bec <c_FFTImplementationCallback_get+0xac>
  } else {
    if (nfft > 0) {
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	dd3f      	ble.n	8005be6 <c_FFTImplementationCallback_get+0xa6>
      int n;
      int pmax;
      n = (nfft + nfft) - 1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	61fb      	str	r3, [r7, #28]
      pmax = 31;
 8005b6e:	231f      	movs	r3, #31
 8005b70:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (n <= 1) {
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	dc02      	bgt.n	8005b7e <c_FFTImplementationCallback_get+0x3e>
        pmax = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b7c:	e02e      	b.n	8005bdc <c_FFTImplementationCallback_get+0x9c>
      } else {
        int pmin;
        bool exitg1;
        pmin = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
        exitg1 = false;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        while ((!exitg1) && (pmax - pmin > 1)) {
 8005b88:	e01c      	b.n	8005bc4 <c_FFTImplementationCallback_get+0x84>
          int k;
          int pow2p;
          k = (pmin + pmax) >> 1;
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	4413      	add	r3, r2
 8005b90:	105b      	asrs	r3, r3, #1
 8005b92:	61bb      	str	r3, [r7, #24]
          pow2p = 1 << k;
 8005b94:	2201      	movs	r2, #1
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]
          if (pow2p == n) {
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d105      	bne.n	8005bb2 <c_FFTImplementationCallback_get+0x72>
            pmax = k;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
            exitg1 = true;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb0:	e008      	b.n	8005bc4 <c_FFTImplementationCallback_get+0x84>
          } else if (pow2p > n) {
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	dd02      	ble.n	8005bc0 <c_FFTImplementationCallback_get+0x80>
            pmax = k;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bbe:	e001      	b.n	8005bc4 <c_FFTImplementationCallback_get+0x84>
          } else {
            pmin = k;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((!exitg1) && (pmax - pmin > 1)) {
 8005bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bc8:	f083 0301 	eor.w	r3, r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <c_FFTImplementationCallback_get+0x9c>
 8005bd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	dcd6      	bgt.n	8005b8a <c_FFTImplementationCallback_get+0x4a>
          }
        }
      }
      n2blue = 1 << pmax;
 8005bdc:	2201      	movs	r2, #1
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    *nRows = n2blue;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bea:	601a      	str	r2, [r3, #0]
  }
  return n2blue;
 8005bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3734      	adds	r7, #52	@ 0x34
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <c_FFTImplementationCallback_r2b>:
void c_FFTImplementationCallback_r2b(const emxArray_real32_T *x,
                                     int n1_unsigned,
                                     const emxArray_real32_T *costab,
                                     const emxArray_real32_T *sintab,
                                     emxArray_creal32_T *y)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b08a      	sub	sp, #40	@ 0x28
 8005bfe:	af02      	add	r7, sp, #8
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
  creal32_T *y_data;
  const float *x_data;
  int i;
  x_data = x->data;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	617b      	str	r3, [r7, #20]
  i = y->size[0];
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	61bb      	str	r3, [r7, #24]
  y->size[0] = n1_unsigned;
 8005c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(y, i);
 8005c1e:	69b9      	ldr	r1, [r7, #24]
 8005c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c22:	f002 ff1c 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  y_data = y->data;
 8005c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	61fb      	str	r3, [r7, #28]
  if (n1_unsigned > x->size[0]) {
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	dd26      	ble.n	8005c86 <c_FFTImplementationCallback_r2b+0x8c>
    i = y->size[0];
 8005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	61bb      	str	r3, [r7, #24]
    y->size[0] = n1_unsigned;
 8005c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(y, i);
 8005c48:	69b9      	ldr	r1, [r7, #24]
 8005c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c4c:	f002 ff07 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    y_data = y->data;
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < n1_unsigned; i++) {
 8005c56:	2300      	movs	r3, #0
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e010      	b.n	8005c7e <c_FFTImplementationCallback_r2b+0x84>
      y_data[i].re = 0.0F;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	4413      	add	r3, r2
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
      y_data[i].im = 0.0F;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n1_unsigned; i++) {
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	dbea      	blt.n	8005c5c <c_FFTImplementationCallback_r2b+0x62>
    }
  }
  if (n1_unsigned != 1) {
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d008      	beq.n	8005c9e <c_FFTImplementationCallback_r2b+0xa4>
    c_FFTImplementationCallback_doH(x, y, n1_unsigned, costab, sintab);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7fc fe02 	bl	80028a0 <c_FFTImplementationCallback_doH>
  } else {
    y_data[0].re = x_data[0];
    y_data[0].im = 0.0F;
  }
}
 8005c9c:	e007      	b.n	8005cae <c_FFTImplementationCallback_r2b+0xb4>
    y_data[0].re = x_data[0];
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	601a      	str	r2, [r3, #0]
    y_data[0].im = 0.0F;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	605a      	str	r2, [r3, #4]
}
 8005cae:	bf00      	nop
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <d_FFTImplementationCallback_r2b>:
void d_FFTImplementationCallback_r2b(const emxArray_creal32_T *x,
                                     int unsigned_nRows,
                                     const emxArray_real32_T *costab,
                                     const emxArray_real32_T *sintab,
                                     emxArray_creal32_T *y)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b098      	sub	sp, #96	@ 0x60
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	603b      	str	r3, [r7, #0]
  int iy;
  int j;
  int ju;
  int k;
  int nRowsD2;
  sintab_data = sintab->data;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	637b      	str	r3, [r7, #52]	@ 0x34
  costab_data = costab->data;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	633b      	str	r3, [r7, #48]	@ 0x30
  x_data = x->data;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iy = y->size[0];
 8005cd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  y->size[0] = unsigned_nRows;
 8005cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_creal32_T(y, iy);
 8005ce6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005ce8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005cea:	f002 feb8 	bl	8008a5e <emxEnsureCapacity_creal32_T>
  y_data = y->data;
 8005cee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (unsigned_nRows > x->size[0]) {
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	dd26      	ble.n	8005d4e <d_FFTImplementationCallback_r2b+0x98>
    iy = y->size[0];
 8005d00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	64bb      	str	r3, [r7, #72]	@ 0x48
    y->size[0] = unsigned_nRows;
 8005d08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(y, iy);
 8005d10:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d12:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005d14:	f002 fea3 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    y_data = y->data;
 8005d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (iy = 0; iy < unsigned_nRows; iy++) {
 8005d1e:	2300      	movs	r3, #0
 8005d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d22:	e010      	b.n	8005d46 <d_FFTImplementationCallback_r2b+0x90>
      y_data[iy].re = 0.0F;
 8005d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
      y_data[iy].im = 0.0F;
 8005d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d38:	4413      	add	r3, r2
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	605a      	str	r2, [r3, #4]
    for (iy = 0; iy < unsigned_nRows; iy++) {
 8005d40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d42:	3301      	adds	r3, #1
 8005d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	dbea      	blt.n	8005d24 <d_FFTImplementationCallback_r2b+0x6e>
    }
  }
  j = x->size[0];
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	647b      	str	r3, [r7, #68]	@ 0x44
  if (j > unsigned_nRows) {
 8005d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	dd01      	ble.n	8005d62 <d_FFTImplementationCallback_r2b+0xac>
    j = unsigned_nRows;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  ihi = unsigned_nRows - 2;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3b02      	subs	r3, #2
 8005d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  nRowsD2 = (int)((unsigned int)unsigned_nRows >> 1);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  k = nRowsD2 / 2;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	0fda      	lsrs	r2, r3, #31
 8005d72:	4413      	add	r3, r2
 8005d74:	105b      	asrs	r3, r3, #1
 8005d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  iy = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  ju = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  for (i = 0; i <= j - 2; i++) {
 8005d80:	2300      	movs	r3, #0
 8005d82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d84:	e02b      	b.n	8005dde <d_FFTImplementationCallback_r2b+0x128>
    bool tst;
    y_data[iy] = x_data[i];
 8005d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d8c:	18d1      	adds	r1, r2, r3
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d94:	4413      	add	r3, r2
 8005d96:	460a      	mov	r2, r1
 8005d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d9c:	e883 0003 	stmia.w	r3, {r0, r1}
    iy = unsigned_nRows;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	64bb      	str	r3, [r7, #72]	@ 0x48
    tst = true;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (tst) {
 8005daa:	e00f      	b.n	8005dcc <d_FFTImplementationCallback_r2b+0x116>
      iy >>= 1;
 8005dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dae:	105b      	asrs	r3, r3, #1
 8005db0:	64bb      	str	r3, [r7, #72]	@ 0x48
      ju ^= iy;
 8005db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db6:	4053      	eors	r3, r2
 8005db8:	643b      	str	r3, [r7, #64]	@ 0x40
      tst = ((ju & iy) == 0);
 8005dba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (tst) {
 8005dcc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1eb      	bne.n	8005dac <d_FFTImplementationCallback_r2b+0xf6>
    }
    iy = ju;
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  for (i = 0; i <= j - 2; i++) {
 8005dd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dda:	3301      	adds	r3, #1
 8005ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de0:	3b01      	subs	r3, #1
 8005de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005de4:	429a      	cmp	r2, r3
 8005de6:	dbce      	blt.n	8005d86 <d_FFTImplementationCallback_r2b+0xd0>
  }
  if (j - 2 < 0) {
 8005de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	dc02      	bgt.n	8005df4 <d_FFTImplementationCallback_r2b+0x13e>
    j = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df2:	e002      	b.n	8005dfa <d_FFTImplementationCallback_r2b+0x144>
  } else {
    j--;
 8005df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df6:	3b01      	subs	r3, #1
 8005df8:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  y_data[iy] = x_data[j];
 8005dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e00:	18d1      	adds	r1, r2, r3
 8005e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e08:	4413      	add	r3, r2
 8005e0a:	460a      	mov	r2, r1
 8005e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e10:	e883 0003 	stmia.w	r3, {r0, r1}
  if (unsigned_nRows > 1) {
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	dd55      	ble.n	8005ec6 <d_FFTImplementationCallback_r2b+0x210>
    for (i = 0; i <= ihi; i += 2) {
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e1e:	e04e      	b.n	8005ebe <d_FFTImplementationCallback_r2b+0x208>
      temp_re_tmp = y_data[i + 1].re;
 8005e20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e22:	3301      	adds	r3, #1
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e28:	4413      	add	r3, r2
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	623b      	str	r3, [r7, #32]
      temp_im = y_data[i + 1].im;
 8005e2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e30:	3301      	adds	r3, #1
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e36:	4413      	add	r3, r2
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	61fb      	str	r3, [r7, #28]
      temp_re = y_data[i].re;
 8005e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e42:	4413      	add	r3, r2
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61bb      	str	r3, [r7, #24]
      twid_re = y_data[i].im;
 8005e48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e4e:	4413      	add	r3, r2
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	617b      	str	r3, [r7, #20]
      y_data[i + 1].re = temp_re - temp_re_tmp;
 8005e54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e56:	3301      	adds	r3, #1
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e5c:	4413      	add	r3, r2
 8005e5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8005e62:	edd7 7a08 	vldr	s15, [r7, #32]
 8005e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e6a:	edc3 7a00 	vstr	s15, [r3]
      y_data[i + 1].im = twid_re - temp_im;
 8005e6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e70:	3301      	adds	r3, #1
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e76:	4413      	add	r3, r2
 8005e78:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e84:	edc3 7a01 	vstr	s15, [r3, #4]
      y_data[i].re = temp_re + temp_re_tmp;
 8005e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e8e:	4413      	add	r3, r2
 8005e90:	ed97 7a06 	vldr	s14, [r7, #24]
 8005e94:	edd7 7a08 	vldr	s15, [r7, #32]
 8005e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e9c:	edc3 7a00 	vstr	s15, [r3]
      y_data[i].im = twid_re + temp_im;
 8005ea0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ea6:	4413      	add	r3, r2
 8005ea8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005eac:	edd7 7a07 	vldr	s15, [r7, #28]
 8005eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eb4:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i <= ihi; i += 2) {
 8005eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005eba:	3302      	adds	r3, #2
 8005ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	ddac      	ble.n	8005e20 <d_FFTImplementationCallback_r2b+0x16a>
    }
  }
  iDelta = 2;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	657b      	str	r3, [r7, #84]	@ 0x54
  iDelta2 = 4;
 8005eca:	2304      	movs	r3, #4
 8005ecc:	653b      	str	r3, [r7, #80]	@ 0x50
  iheight = ((k - 1) << 2) + 1;
 8005ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (k > 0) {
 8005ed8:	e104      	b.n	80060e4 <d_FFTImplementationCallback_r2b+0x42e>
    for (i = 0; i < iheight; i += iDelta2) {
 8005eda:	2300      	movs	r3, #0
 8005edc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ede:	e053      	b.n	8005f88 <d_FFTImplementationCallback_r2b+0x2d2>
      iy = i + iDelta;
 8005ee0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ee4:	4413      	add	r3, r2
 8005ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
      temp_re = y_data[iy].re;
 8005ee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005eee:	4413      	add	r3, r2
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	61bb      	str	r3, [r7, #24]
      temp_im = y_data[iy].im;
 8005ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005efa:	4413      	add	r3, r2
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	61fb      	str	r3, [r7, #28]
      y_data[iy].re = y_data[i].re - temp_re;
 8005f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f06:	4413      	add	r3, r2
 8005f08:	ed93 7a00 	vldr	s14, [r3]
 8005f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f12:	4413      	add	r3, r2
 8005f14:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f1c:	edc3 7a00 	vstr	s15, [r3]
      y_data[iy].im = y_data[i].im - temp_im;
 8005f20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f26:	4413      	add	r3, r2
 8005f28:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f32:	4413      	add	r3, r2
 8005f34:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f3c:	edc3 7a01 	vstr	s15, [r3, #4]
      y_data[i].re += temp_re;
 8005f40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f46:	4413      	add	r3, r2
 8005f48:	ed93 7a00 	vldr	s14, [r3]
 8005f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f52:	4413      	add	r3, r2
 8005f54:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f5c:	edc3 7a00 	vstr	s15, [r3]
      y_data[i].im += temp_im;
 8005f60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f66:	4413      	add	r3, r2
 8005f68:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f72:	4413      	add	r3, r2
 8005f74:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f7c:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < iheight; i += iDelta2) {
 8005f80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f84:	4413      	add	r3, r2
 8005f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	dba7      	blt.n	8005ee0 <d_FFTImplementationCallback_r2b+0x22a>
    }
    iy = 1;
 8005f90:	2301      	movs	r3, #1
 8005f92:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (j = k; j < nRowsD2; j += k) {
 8005f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f98:	e091      	b.n	80060be <d_FFTImplementationCallback_r2b+0x408>
      float twid_im;
      twid_re = costab_data[j];
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa0:	4413      	add	r3, r2
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	617b      	str	r3, [r7, #20]
      twid_im = sintab_data[j];
 8005fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fac:	4413      	add	r3, r2
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	613b      	str	r3, [r7, #16]
      i = iy;
 8005fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb4:	65bb      	str	r3, [r7, #88]	@ 0x58
      ihi = iy + iheight;
 8005fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fba:	4413      	add	r3, r2
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (i < ihi) {
 8005fbe:	e073      	b.n	80060a8 <d_FFTImplementationCallback_r2b+0x3f2>
        ju = i + iDelta;
 8005fc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc4:	4413      	add	r3, r2
 8005fc6:	643b      	str	r3, [r7, #64]	@ 0x40
        temp_re_tmp = y_data[ju].im;
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005fce:	4413      	add	r3, r2
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	623b      	str	r3, [r7, #32]
        temp_im = y_data[ju].re;
 8005fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005fda:	4413      	add	r3, r2
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	61fb      	str	r3, [r7, #28]
        temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
 8005fe0:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fe4:	edd7 7a07 	vldr	s15, [r7, #28]
 8005fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fec:	edd7 6a04 	vldr	s13, [r7, #16]
 8005ff0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ffc:	edc7 7a06 	vstr	s15, [r7, #24]
        temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
 8006000:	ed97 7a05 	vldr	s14, [r7, #20]
 8006004:	edd7 7a08 	vldr	s15, [r7, #32]
 8006008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800600c:	edd7 6a04 	vldr	s13, [r7, #16]
 8006010:	edd7 7a07 	vldr	s15, [r7, #28]
 8006014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800601c:	edc7 7a07 	vstr	s15, [r7, #28]
        y_data[ju].re = y_data[i].re - temp_re;
 8006020:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006026:	4413      	add	r3, r2
 8006028:	ed93 7a00 	vldr	s14, [r3]
 800602c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006032:	4413      	add	r3, r2
 8006034:	edd7 7a06 	vldr	s15, [r7, #24]
 8006038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800603c:	edc3 7a00 	vstr	s15, [r3]
        y_data[ju].im = y_data[i].im - temp_im;
 8006040:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006046:	4413      	add	r3, r2
 8006048:	ed93 7a01 	vldr	s14, [r3, #4]
 800604c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006052:	4413      	add	r3, r2
 8006054:	edd7 7a07 	vldr	s15, [r7, #28]
 8006058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800605c:	edc3 7a01 	vstr	s15, [r3, #4]
        y_data[i].re += temp_re;
 8006060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006066:	4413      	add	r3, r2
 8006068:	ed93 7a00 	vldr	s14, [r3]
 800606c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006072:	4413      	add	r3, r2
 8006074:	edd7 7a06 	vldr	s15, [r7, #24]
 8006078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800607c:	edc3 7a00 	vstr	s15, [r3]
        y_data[i].im += temp_im;
 8006080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006086:	4413      	add	r3, r2
 8006088:	ed93 7a01 	vldr	s14, [r3, #4]
 800608c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006092:	4413      	add	r3, r2
 8006094:	edd7 7a07 	vldr	s15, [r7, #28]
 8006098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800609c:	edc3 7a01 	vstr	s15, [r3, #4]
        i += iDelta2;
 80060a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060a4:	4413      	add	r3, r2
 80060a6:	65bb      	str	r3, [r7, #88]	@ 0x58
      while (i < ihi) {
 80060a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ac:	429a      	cmp	r2, r3
 80060ae:	db87      	blt.n	8005fc0 <d_FFTImplementationCallback_r2b+0x30a>
      }
      iy++;
 80060b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060b2:	3301      	adds	r3, #1
 80060b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (j = k; j < nRowsD2; j += k) {
 80060b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ba:	4413      	add	r3, r2
 80060bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80060be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	429a      	cmp	r2, r3
 80060c4:	f6ff af69 	blt.w	8005f9a <d_FFTImplementationCallback_r2b+0x2e4>
    }
    k /= 2;
 80060c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ca:	0fda      	lsrs	r2, r3, #31
 80060cc:	4413      	add	r3, r2
 80060ce:	105b      	asrs	r3, r3, #1
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    iDelta = iDelta2;
 80060d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d4:	657b      	str	r3, [r7, #84]	@ 0x54
    iDelta2 += iDelta2;
 80060d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	653b      	str	r3, [r7, #80]	@ 0x50
    iheight -= iDelta;
 80060dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (k > 0) {
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f73f aef7 	bgt.w	8005eda <d_FFTImplementationCallback_r2b+0x224>
  }
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	3760      	adds	r7, #96	@ 0x60
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <eml_float_colon>:
 *                float b
 *                emxArray_real32_T *y
 * Return Type  : void
 */
void eml_float_colon(float d, float b, emxArray_real32_T *y)
{
 80060f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80060fc:	b092      	sub	sp, #72	@ 0x48
 80060fe:	af00      	add	r7, sp, #0
 8006100:	ed87 0a03 	vstr	s0, [r7, #12]
 8006104:	edc7 0a02 	vstr	s1, [r7, #8]
 8006108:	6078      	str	r0, [r7, #4]
  float b1;
  float *y_data;
  int k;
  int n;
  int nm1d2;
  ndbl = floor((double)b / d + 0.5);
 800610a:	68b8      	ldr	r0, [r7, #8]
 800610c:	f7fa fa24 	bl	8000558 <__aeabi_f2d>
 8006110:	4680      	mov	r8, r0
 8006112:	4689      	mov	r9, r1
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7fa fa1f 	bl	8000558 <__aeabi_f2d>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4640      	mov	r0, r8
 8006120:	4649      	mov	r1, r9
 8006122:	f7fa fb9b 	bl	800085c <__aeabi_ddiv>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4610      	mov	r0, r2
 800612c:	4619      	mov	r1, r3
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	4bab      	ldr	r3, [pc, #684]	@ (80063e0 <eml_float_colon+0x2e8>)
 8006134:	f7fa f8b2 	bl	800029c <__adddf3>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	ec43 2b17 	vmov	d7, r2, r3
 8006140:	eeb0 0a47 	vmov.f32	s0, s14
 8006144:	eef0 0a67 	vmov.f32	s1, s15
 8006148:	f013 fdbe 	bl	8019cc8 <floor>
 800614c:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
  apnd = ndbl * d;
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7fa fa01 	bl	8000558 <__aeabi_f2d>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800615e:	f7fa fa53 	bl	8000608 <__aeabi_dmul>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (d > 0.0F) {
 800616a:	edd7 7a03 	vldr	s15, [r7, #12]
 800616e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006176:	dd0d      	ble.n	8006194 <eml_float_colon+0x9c>
    cdiff = apnd - b;
 8006178:	68b8      	ldr	r0, [r7, #8]
 800617a:	f7fa f9ed 	bl	8000558 <__aeabi_f2d>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006186:	f7fa f887 	bl	8000298 <__aeabi_dsub>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8006192:	e00a      	b.n	80061aa <eml_float_colon+0xb2>
  } else {
    cdiff = b - apnd;
 8006194:	68b8      	ldr	r0, [r7, #8]
 8006196:	f7fa f9df 	bl	8000558 <__aeabi_f2d>
 800619a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800619e:	f7fa f87b 	bl	8000298 <__aeabi_dsub>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }
  if (fabs(cdiff) < 2.384185791015625E-7 * fmax(0.0, fabs(b))) {
 80061aa:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80061ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80061b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80061b6:	eef0 7ae7 	vabs.f32	s15, s15
 80061ba:	ee17 0a90 	vmov	r0, s15
 80061be:	f7fa f9cb 	bl	8000558 <__aeabi_f2d>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	ed9f 1b84 	vldr	d1, [pc, #528]	@ 80063d8 <eml_float_colon+0x2e0>
 80061ca:	ec43 2b10 	vmov	d0, r2, r3
 80061ce:	f013 fa8e 	bl	80196ee <fmax>
 80061d2:	ec51 0b10 	vmov	r0, r1, d0
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	4b82      	ldr	r3, [pc, #520]	@ (80063e4 <eml_float_colon+0x2ec>)
 80061dc:	f7fa fa14 	bl	8000608 <__aeabi_dmul>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4620      	mov	r0, r4
 80061e6:	4629      	mov	r1, r5
 80061e8:	f7fa fc80 	bl	8000aec <__aeabi_dcmplt>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <eml_float_colon+0x116>
    ndbl++;
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	4b7c      	ldr	r3, [pc, #496]	@ (80063e8 <eml_float_colon+0x2f0>)
 80061f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80061fc:	f7fa f84e 	bl	800029c <__adddf3>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    b1 = b;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	637b      	str	r3, [r7, #52]	@ 0x34
 800620c:	e038      	b.n	8006280 <eml_float_colon+0x188>
  } else if (cdiff > 0.0) {
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800621a:	f7fa fc85 	bl	8000b28 <__aeabi_dcmpgt>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01c      	beq.n	800625e <eml_float_colon+0x166>
    b1 = (float)((ndbl - 1.0) * d);
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	4b6f      	ldr	r3, [pc, #444]	@ (80063e8 <eml_float_colon+0x2f0>)
 800622a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800622e:	f7fa f833 	bl	8000298 <__aeabi_dsub>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4614      	mov	r4, r2
 8006238:	461d      	mov	r5, r3
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7fa f98c 	bl	8000558 <__aeabi_f2d>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7fa f9de 	bl	8000608 <__aeabi_dmul>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4610      	mov	r0, r2
 8006252:	4619      	mov	r1, r3
 8006254:	f7fa fcb0 	bl	8000bb8 <__aeabi_d2f>
 8006258:	4603      	mov	r3, r0
 800625a:	637b      	str	r3, [r7, #52]	@ 0x34
 800625c:	e010      	b.n	8006280 <eml_float_colon+0x188>
  } else {
    ndbl++;
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	4b61      	ldr	r3, [pc, #388]	@ (80063e8 <eml_float_colon+0x2f0>)
 8006264:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8006268:	f7fa f818 	bl	800029c <__adddf3>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    b1 = (float)apnd;
 8006274:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006278:	f7fa fc9e 	bl	8000bb8 <__aeabi_d2f>
 800627c:	4603      	mov	r3, r0
 800627e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  if (ndbl >= 0.0) {
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800628c:	f7fa fc42 	bl	8000b14 <__aeabi_dcmpge>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d006      	beq.n	80062a4 <eml_float_colon+0x1ac>
    n = (int)ndbl;
 8006296:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800629a:	f7fa fc65 	bl	8000b68 <__aeabi_d2iz>
 800629e:	4603      	mov	r3, r0
 80062a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062a2:	e001      	b.n	80062a8 <eml_float_colon+0x1b0>
  } else {
    n = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  nm1d2 = y->size[0] * y->size[1];
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6852      	ldr	r2, [r2, #4]
 80062b2:	3204      	adds	r2, #4
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	61fb      	str	r3, [r7, #28]
  y->size[0] = 1;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
  y->size[1] = n;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	3304      	adds	r3, #4
 80062ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062cc:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(y, nm1d2);
 80062ce:	69f9      	ldr	r1, [r7, #28]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f002 fc92 	bl	8008bfa <emxEnsureCapacity_real32_T>
  y_data = y->data;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	61bb      	str	r3, [r7, #24]
  if (n > 0) {
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	dd75      	ble.n	80063ce <eml_float_colon+0x2d6>
    y_data[0] = 0.0F;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
    if (n > 1) {
 80062ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	dd6e      	ble.n	80063ce <eml_float_colon+0x2d6>
      float kd;
      y_data[n - 1] = b1;
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062f6:	3b01      	subs	r3, #1
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	4413      	add	r3, r2
 80062fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006300:	601a      	str	r2, [r3, #0]
      nm1d2 = (n - 1) / 2;
 8006302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006304:	3b01      	subs	r3, #1
 8006306:	0fda      	lsrs	r2, r3, #31
 8006308:	4413      	add	r3, r2
 800630a:	105b      	asrs	r3, r3, #1
 800630c:	61fb      	str	r3, [r7, #28]
      for (k = 0; k <= nm1d2 - 2; k++) {
 800630e:	2300      	movs	r3, #0
 8006310:	633b      	str	r3, [r7, #48]	@ 0x30
 8006312:	e026      	b.n	8006362 <eml_float_colon+0x26a>
        kd = (float)(k + 1) * d;
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	3301      	adds	r3, #1
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006320:	ed97 7a03 	vldr	s14, [r7, #12]
 8006324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006328:	edc7 7a05 	vstr	s15, [r7, #20]
        y_data[k + 1] = kd;
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	3301      	adds	r3, #1
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4413      	add	r3, r2
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	601a      	str	r2, [r3, #0]
        y_data[(n - k) - 2] = b1 - kd;
 800633a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006344:	3b02      	subs	r3, #2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	4413      	add	r3, r2
 800634c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8006350:	edd7 7a05 	vldr	s15, [r7, #20]
 8006354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006358:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k <= nm1d2 - 2; k++) {
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	3301      	adds	r3, #1
 8006360:	633b      	str	r3, [r7, #48]	@ 0x30
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	3b01      	subs	r3, #1
 8006366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006368:	429a      	cmp	r2, r3
 800636a:	dbd3      	blt.n	8006314 <eml_float_colon+0x21c>
      }
      if (nm1d2 << 1 == n - 1) {
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	005a      	lsls	r2, r3, #1
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	3b01      	subs	r3, #1
 8006374:	429a      	cmp	r2, r3
 8006376:	d10c      	bne.n	8006392 <eml_float_colon+0x29a>
        y_data[nm1d2] = b1 / 2.0F;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4413      	add	r3, r2
 8006380:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8006384:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800638c:	edc3 7a00 	vstr	s15, [r3]
        y_data[nm1d2] = kd;
        y_data[nm1d2 + 1] = b1 - kd;
      }
    }
  }
}
 8006390:	e01d      	b.n	80063ce <eml_float_colon+0x2d6>
        kd = (float)nm1d2 * d;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800639c:	ed97 7a03 	vldr	s14, [r7, #12]
 80063a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a4:	edc7 7a05 	vstr	s15, [r7, #20]
        y_data[nm1d2] = kd;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4413      	add	r3, r2
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	601a      	str	r2, [r3, #0]
        y_data[nm1d2 + 1] = b1 - kd;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	3301      	adds	r3, #1
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80063c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80063c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ca:	edc3 7a00 	vstr	s15, [r3]
}
 80063ce:	bf00      	nop
 80063d0:	3748      	adds	r7, #72	@ 0x48
 80063d2:	46bd      	mov	sp, r7
 80063d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...
 80063e0:	3fe00000 	.word	0x3fe00000
 80063e4:	3e900000 	.word	0x3e900000
 80063e8:	3ff00000 	.word	0x3ff00000

080063ec <rt_hypotf_snf>:
 * Arguments    : float u0
 *                float u1
 * Return Type  : float
 */
static float rt_hypotf_snf(float u0, float u1)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80063f6:	edc7 0a00 	vstr	s1, [r7]
  float a;
  float b;
  float y;
  a = fabsf(u0);
 80063fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80063fe:	eef0 7ae7 	vabs.f32	s15, s15
 8006402:	edc7 7a04 	vstr	s15, [r7, #16]
  b = fabsf(u1);
 8006406:	edd7 7a00 	vldr	s15, [r7]
 800640a:	eef0 7ae7 	vabs.f32	s15, s15
 800640e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (a < b) {
 8006412:	ed97 7a04 	vldr	s14, [r7, #16]
 8006416:	edd7 7a03 	vldr	s15, [r7, #12]
 800641a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006422:	d51c      	bpl.n	800645e <rt_hypotf_snf+0x72>
    a /= b;
 8006424:	edd7 6a04 	vldr	s13, [r7, #16]
 8006428:	ed97 7a03 	vldr	s14, [r7, #12]
 800642c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006430:	edc7 7a04 	vstr	s15, [r7, #16]
    y = b * sqrtf(a * a + 1.0F);
 8006434:	edd7 7a04 	vldr	s15, [r7, #16]
 8006438:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800643c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006444:	eeb0 0a67 	vmov.f32	s0, s15
 8006448:	f013 f89e 	bl	8019588 <sqrtf>
 800644c:	eeb0 7a40 	vmov.f32	s14, s0
 8006450:	edd7 7a03 	vldr	s15, [r7, #12]
 8006454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006458:	edc7 7a05 	vstr	s15, [r7, #20]
 800645c:	e038      	b.n	80064d0 <rt_hypotf_snf+0xe4>
  } else if (a > b) {
 800645e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006462:	edd7 7a03 	vldr	s15, [r7, #12]
 8006466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646e:	dd1c      	ble.n	80064aa <rt_hypotf_snf+0xbe>
    b /= a;
 8006470:	edd7 6a03 	vldr	s13, [r7, #12]
 8006474:	ed97 7a04 	vldr	s14, [r7, #16]
 8006478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800647c:	edc7 7a03 	vstr	s15, [r7, #12]
    y = a * sqrtf(b * b + 1.0F);
 8006480:	edd7 7a03 	vldr	s15, [r7, #12]
 8006484:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006490:	eeb0 0a67 	vmov.f32	s0, s15
 8006494:	f013 f878 	bl	8019588 <sqrtf>
 8006498:	eeb0 7a40 	vmov.f32	s14, s0
 800649c:	edd7 7a04 	vldr	s15, [r7, #16]
 80064a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064a4:	edc7 7a05 	vstr	s15, [r7, #20]
 80064a8:	e012      	b.n	80064d0 <rt_hypotf_snf+0xe4>
  } else if (rtIsNaNF(b)) {
 80064aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80064ae:	f005 fc5c 	bl	800bd6a <rtIsNaNF>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <rt_hypotf_snf+0xd4>
    y = rtNaNF;
 80064b8:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <rt_hypotf_snf+0xf4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	e007      	b.n	80064d0 <rt_hypotf_snf+0xe4>
  } else {
    y = a * 1.41421354F;
 80064c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80064c4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80064e4 <rt_hypotf_snf+0xf8>
 80064c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064cc:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  return y;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	ee07 3a90 	vmov	s15, r3
}
 80064d6:	eeb0 0a67 	vmov.f32	s0, s15
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20000028 	.word	0x20000028
 80064e4:	3fb504f3 	.word	0x3fb504f3

080064e8 <envelope>:
 * Arguments    : const emxArray_real32_T *x
 *                emxArray_real32_T *upperEnv
 * Return Type  : void
 */
void envelope(const emxArray_real32_T *x, emxArray_real32_T *upperEnv)
{
 80064e8:	b5b0      	push	{r4, r5, r7, lr}
 80064ea:	b09a      	sub	sp, #104	@ 0x68
 80064ec:	af04      	add	r7, sp, #16
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  int firstBlockLength;
  int hi;
  int ib;
  int k;
  int nblocks;
  x_data = x->data;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	633b      	str	r3, [r7, #48]	@ 0x30
  emxInit_real32_T(&b_x, 1);
 80064f8:	f107 031c 	add.w	r3, r7, #28
 80064fc:	2101      	movs	r1, #1
 80064fe:	4618      	mov	r0, r3
 8006500:	f002 fd23 	bl	8008f4a <emxInit_real32_T>
  nblocks = b_x->size[0];
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	643b      	str	r3, [r7, #64]	@ 0x40
  b_x->size[0] = x->size[1];
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	6852      	ldr	r2, [r2, #4]
 8006516:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_x, nblocks);
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800651c:	4618      	mov	r0, r3
 800651e:	f002 fb6c 	bl	8008bfa <emxEnsureCapacity_real32_T>
  b_x_data = b_x->data;
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	653b      	str	r3, [r7, #80]	@ 0x50
  firstBlockLength = x->size[1];
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (nblocks = 0; nblocks < firstBlockLength; nblocks++) {
 8006530:	2300      	movs	r3, #0
 8006532:	643b      	str	r3, [r7, #64]	@ 0x40
 8006534:	e00c      	b.n	8006550 <envelope+0x68>
    b_x_data[nblocks] = x_data[nblocks];
 8006536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800653c:	441a      	add	r2, r3
 800653e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006544:	440b      	add	r3, r1
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	601a      	str	r2, [r3, #0]
  for (nblocks = 0; nblocks < firstBlockLength; nblocks++) {
 800654a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800654c:	3301      	adds	r3, #1
 800654e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006550:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006554:	429a      	cmp	r2, r3
 8006556:	dbee      	blt.n	8006536 <envelope+0x4e>
  }
  if (b_x->size[0] > 0) {
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f340 81f8 	ble.w	8006954 <envelope+0x46c>
    float xmean;
    int lastBlockLength;
    bool useRadix2;
    if (b_x->size[0] <= 1024) {
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800656e:	dc08      	bgt.n	8006582 <envelope+0x9a>
      firstBlockLength = b_x->size[0];
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	64fb      	str	r3, [r7, #76]	@ 0x4c
      lastBlockLength = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	63bb      	str	r3, [r7, #56]	@ 0x38
      nblocks = 1;
 800657c:	2301      	movs	r3, #1
 800657e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006580:	e018      	b.n	80065b4 <envelope+0xcc>
    } else {
      firstBlockLength = 1024;
 8006582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006586:	64fb      	str	r3, [r7, #76]	@ 0x4c
      nblocks = (int)((unsigned int)b_x->size[0] >> 10);
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	0a9b      	lsrs	r3, r3, #10
 8006590:	643b      	str	r3, [r7, #64]	@ 0x40
      lastBlockLength = b_x->size[0] - (nblocks << 10);
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800659a:	029b      	lsls	r3, r3, #10
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (lastBlockLength > 0) {
 80065a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dd03      	ble.n	80065ae <envelope+0xc6>
        nblocks++;
 80065a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a8:	3301      	adds	r3, #1
 80065aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ac:	e002      	b.n	80065b4 <envelope+0xcc>
      } else {
        lastBlockLength = 1024;
 80065ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      }
    }
    xmean = b_x_data[0];
 80065b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (k = 2; k <= firstBlockLength; k++) {
 80065ba:	2302      	movs	r3, #2
 80065bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065be:	e011      	b.n	80065e4 <envelope+0xfc>
      xmean += b_x_data[k - 1];
 80065c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065c6:	3b01      	subs	r3, #1
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80065cc:	4413      	add	r3, r2
 80065ce:	edd3 7a00 	vldr	s15, [r3]
 80065d2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80065d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065da:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    for (k = 2; k <= firstBlockLength; k++) {
 80065de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e0:	3301      	adds	r3, #1
 80065e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80065e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065e8:	429a      	cmp	r2, r3
 80065ea:	dde9      	ble.n	80065c0 <envelope+0xd8>
    }
    for (ib = 2; ib <= nblocks; ib++) {
 80065ec:	2302      	movs	r3, #2
 80065ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f0:	e039      	b.n	8006666 <envelope+0x17e>
      float bsum;
      firstBlockLength = (ib - 1) << 10;
 80065f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f4:	3b01      	subs	r3, #1
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      bsum = b_x_data[firstBlockLength];
 80065fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006600:	4413      	add	r3, r2
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
      if (ib == nblocks) {
 8006606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800660a:	429a      	cmp	r2, r3
 800660c:	d102      	bne.n	8006614 <envelope+0x12c>
        hi = lastBlockLength;
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e002      	b.n	800661a <envelope+0x132>
      } else {
        hi = 1024;
 8006614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006618:	60fb      	str	r3, [r7, #12]
      }
      for (k = 2; k <= hi; k++) {
 800661a:	2302      	movs	r3, #2
 800661c:	647b      	str	r3, [r7, #68]	@ 0x44
 800661e:	e013      	b.n	8006648 <envelope+0x160>
        bsum += b_x_data[(firstBlockLength + k) - 1];
 8006620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006624:	4413      	add	r3, r2
 8006626:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800662a:	3b01      	subs	r3, #1
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006630:	4413      	add	r3, r2
 8006632:	edd3 7a00 	vldr	s15, [r3]
 8006636:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800663a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800663e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      for (k = 2; k <= hi; k++) {
 8006642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006644:	3301      	adds	r3, #1
 8006646:	647b      	str	r3, [r7, #68]	@ 0x44
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800664c:	429a      	cmp	r2, r3
 800664e:	dde7      	ble.n	8006620 <envelope+0x138>
      }
      xmean += bsum;
 8006650:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8006654:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800665c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    for (ib = 2; ib <= nblocks; ib++) {
 8006660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006662:	3301      	adds	r3, #1
 8006664:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800666a:	429a      	cmp	r2, r3
 800666c:	ddc1      	ble.n	80065f2 <envelope+0x10a>
    }
    xmean /= (float)b_x->size[0];
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8006680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006684:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    firstBlockLength = b_x->size[0];
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (nblocks = 0; nblocks < firstBlockLength; nblocks++) {
 8006690:	2300      	movs	r3, #0
 8006692:	643b      	str	r3, [r7, #64]	@ 0x40
 8006694:	e012      	b.n	80066bc <envelope+0x1d4>
      b_x_data[nblocks] -= xmean;
 8006696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800669c:	4413      	add	r3, r2
 800669e:	ed93 7a00 	vldr	s14, [r3]
 80066a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80066a8:	4413      	add	r3, r2
 80066aa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80066ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066b2:	edc3 7a00 	vstr	s15, [r3]
    for (nblocks = 0; nblocks < firstBlockLength; nblocks++) {
 80066b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066b8:	3301      	adds	r3, #1
 80066ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80066bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c0:	429a      	cmp	r2, r3
 80066c2:	dbe8      	blt.n	8006696 <envelope+0x1ae>
    }
    emxInit_creal32_T(&c_x);
 80066c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066c8:	4618      	mov	r0, r3
 80066ca:	f002 fbdb 	bl	8008e84 <emxInit_creal32_T>
    useRadix2 = ((b_x->size[0] & (b_x->size[0] - 1)) == 0);
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3b01      	subs	r3, #1
 80066dc:	4013      	ands	r3, r2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    firstBlockLength =
        c_FFTImplementationCallback_get(b_x->size[0], useRadix2, &hi);
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f107 020c 	add.w	r2, r7, #12
 80066f4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fa21 	bl	8005b40 <c_FFTImplementationCallback_get>
 80066fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
    emxInit_real32_T(&costab, 2);
 8006700:	f107 0318 	add.w	r3, r7, #24
 8006704:	2102      	movs	r1, #2
 8006706:	4618      	mov	r0, r3
 8006708:	f002 fc1f 	bl	8008f4a <emxInit_real32_T>
    emxInit_real32_T(&sintab, 2);
 800670c:	f107 0314 	add.w	r3, r7, #20
 8006710:	2102      	movs	r1, #2
 8006712:	4618      	mov	r0, r3
 8006714:	f002 fc19 	bl	8008f4a <emxInit_real32_T>
    emxInit_real32_T(&sintabinv, 2);
 8006718:	f107 0310 	add.w	r3, r7, #16
 800671c:	2102      	movs	r1, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f002 fc13 	bl	8008f4a <emxInit_real32_T>
    c_FFTImplementationCallback_gen(hi, useRadix2, costab, sintab, sintabinv);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	697c      	ldr	r4, [r7, #20]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	4623      	mov	r3, r4
 8006734:	f7fe ffc0 	bl	80056b8 <c_FFTImplementationCallback_gen>
    emxInit_creal32_T(&d_x);
 8006738:	f107 0320 	add.w	r3, r7, #32
 800673c:	4618      	mov	r0, r3
 800673e:	f002 fba1 	bl	8008e84 <emxInit_creal32_T>
    if (useRadix2) {
 8006742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00e      	beq.n	8006768 <envelope+0x280>
      c_FFTImplementationCallback_r2b(b_x, b_x->size[0], costab, sintab, d_x);
 800674a:	69f8      	ldr	r0, [r7, #28]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	697c      	ldr	r4, [r7, #20]
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4623      	mov	r3, r4
 800675c:	f7ff fa4d 	bl	8005bfa <c_FFTImplementationCallback_r2b>
      c_x_data = d_x->data;
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	657b      	str	r3, [r7, #84]	@ 0x54
 8006766:	e012      	b.n	800678e <envelope+0x2a6>
    } else {
      c_FFTImplementationCallback_dob(b_x, firstBlockLength, b_x->size[0],
 8006768:	69f8      	ldr	r0, [r7, #28]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	681c      	ldr	r4, [r3, #0]
 8006770:	69bd      	ldr	r5, [r7, #24]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	6a39      	ldr	r1, [r7, #32]
 8006778:	9102      	str	r1, [sp, #8]
 800677a:	9201      	str	r2, [sp, #4]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	462b      	mov	r3, r5
 8006780:	4622      	mov	r2, r4
 8006782:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006784:	f7fe fc24 	bl	8004fd0 <c_FFTImplementationCallback_dob>
                                      costab, sintab, sintabinv, d_x);
      c_x_data = d_x->data;
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	657b      	str	r3, [r7, #84]	@ 0x54
    }
    emxFree_real32_T(&sintabinv);
 800678e:	f107 0310 	add.w	r3, r7, #16
 8006792:	4618      	mov	r0, r3
 8006794:	f002 fb16 	bl	8008dc4 <emxFree_real32_T>
    emxFree_real32_T(&sintab);
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	4618      	mov	r0, r3
 800679e:	f002 fb11 	bl	8008dc4 <emxFree_real32_T>
    emxFree_real32_T(&costab);
 80067a2:	f107 0318 	add.w	r3, r7, #24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f002 fb0c 	bl	8008dc4 <emxFree_real32_T>
    nblocks = b_x->size[0];
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	643b      	str	r3, [r7, #64]	@ 0x40
    firstBlockLength = b_x->size[0] >> 1;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	105b      	asrs	r3, r3, #1
 80067bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if ((b_x->size[0] & 1) == 0) {
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d102      	bne.n	80067d2 <envelope+0x2ea>
      lastBlockLength = firstBlockLength;
 80067cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067d0:	e002      	b.n	80067d8 <envelope+0x2f0>
    } else {
      lastBlockLength = firstBlockLength + 1;
 80067d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d4:	3301      	adds	r3, #1
 80067d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    }
    hi = firstBlockLength + 2;
 80067d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067da:	3302      	adds	r3, #2
 80067dc:	60fb      	str	r3, [r7, #12]
    for (firstBlockLength = 2; firstBlockLength <= lastBlockLength;
 80067de:	2302      	movs	r3, #2
 80067e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e2:	e02a      	b.n	800683a <envelope+0x352>
         firstBlockLength++) {
      c_x_data[firstBlockLength - 1].re *= 2.0F;
 80067e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80067ea:	3b01      	subs	r3, #1
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067f0:	4413      	add	r3, r2
 80067f2:	edd3 7a00 	vldr	s15, [r3]
 80067f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80067fc:	3b01      	subs	r3, #1
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006802:	4413      	add	r3, r2
 8006804:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006808:	edc3 7a00 	vstr	s15, [r3]
      c_x_data[firstBlockLength - 1].im *= 2.0F;
 800680c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800680e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006812:	3b01      	subs	r3, #1
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006818:	4413      	add	r3, r2
 800681a:	edd3 7a01 	vldr	s15, [r3, #4]
 800681e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006820:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006824:	3b01      	subs	r3, #1
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800682a:	4413      	add	r3, r2
 800682c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006830:	edc3 7a01 	vstr	s15, [r3, #4]
         firstBlockLength++) {
 8006834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006836:	3301      	adds	r3, #1
 8006838:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (firstBlockLength = 2; firstBlockLength <= lastBlockLength;
 800683a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	429a      	cmp	r2, r3
 8006840:	ddd0      	ble.n	80067e4 <envelope+0x2fc>
    }
    for (firstBlockLength = hi; firstBlockLength <= nblocks;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006846:	e016      	b.n	8006876 <envelope+0x38e>
         firstBlockLength++) {
      c_x_data[firstBlockLength - 1].re = 0.0F;
 8006848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800684a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800684e:	3b01      	subs	r3, #1
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006854:	4413      	add	r3, r2
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
      c_x_data[firstBlockLength - 1].im = 0.0F;
 800685c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800685e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006862:	3b01      	subs	r3, #1
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006868:	4413      	add	r3, r2
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	605a      	str	r2, [r3, #4]
         firstBlockLength++) {
 8006870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006872:	3301      	adds	r3, #1
 8006874:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (firstBlockLength = hi; firstBlockLength <= nblocks;
 8006876:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800687a:	429a      	cmp	r2, r3
 800687c:	dde4      	ble.n	8006848 <envelope+0x360>
    }
    ifft(d_x, c_x);
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006882:	4611      	mov	r1, r2
 8006884:	4618      	mov	r0, r3
 8006886:	f002 fcbd 	bl	8009204 <ifft>
    c_x_data = c_x->data;
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	657b      	str	r3, [r7, #84]	@ 0x54
    emxFree_creal32_T(&d_x);
 8006890:	f107 0320 	add.w	r3, r7, #32
 8006894:	4618      	mov	r0, r3
 8006896:	f002 fa41 	bl	8008d1c <emxFree_creal32_T>
    hi = c_x->size[0];
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]
    nblocks = b_x->size[0];
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	643b      	str	r3, [r7, #64]	@ 0x40
    b_x->size[0] = c_x->size[0];
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(b_x, nblocks);
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ba:	4618      	mov	r0, r3
 80068bc:	f002 f99d 	bl	8008bfa <emxEnsureCapacity_real32_T>
    b_x_data = b_x->data;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	653b      	str	r3, [r7, #80]	@ 0x50
    for (k = 0; k < hi; k++) {
 80068c6:	2300      	movs	r3, #0
 80068c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ca:	e01c      	b.n	8006906 <envelope+0x41e>
      b_x_data[k] = rt_hypotf_snf(c_x_data[k].re, c_x_data[k].im);
 80068cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068d2:	4413      	add	r3, r2
 80068d4:	edd3 7a00 	vldr	s15, [r3]
 80068d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068de:	4413      	add	r3, r2
 80068e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80068e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80068ea:	18d4      	adds	r4, r2, r3
 80068ec:	eef0 0a47 	vmov.f32	s1, s14
 80068f0:	eeb0 0a67 	vmov.f32	s0, s15
 80068f4:	f7ff fd7a 	bl	80063ec <rt_hypotf_snf>
 80068f8:	eef0 7a40 	vmov.f32	s15, s0
 80068fc:	edc4 7a00 	vstr	s15, [r4]
    for (k = 0; k < hi; k++) {
 8006900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006902:	3301      	adds	r3, #1
 8006904:	647b      	str	r3, [r7, #68]	@ 0x44
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800690a:	429a      	cmp	r2, r3
 800690c:	dbde      	blt.n	80068cc <envelope+0x3e4>
    }
    emxFree_creal32_T(&c_x);
 800690e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006912:	4618      	mov	r0, r3
 8006914:	f002 fa02 	bl	8008d1c <emxFree_creal32_T>
    firstBlockLength = b_x->size[0];
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (nblocks = 0; nblocks < firstBlockLength; nblocks++) {
 8006920:	2300      	movs	r3, #0
 8006922:	643b      	str	r3, [r7, #64]	@ 0x40
 8006924:	e012      	b.n	800694c <envelope+0x464>
      b_x_data[nblocks] += xmean;
 8006926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800692c:	4413      	add	r3, r2
 800692e:	ed93 7a00 	vldr	s14, [r3]
 8006932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006938:	4413      	add	r3, r2
 800693a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800693e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006942:	edc3 7a00 	vstr	s15, [r3]
    for (nblocks = 0; nblocks < firstBlockLength; nblocks++) {
 8006946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006948:	3301      	adds	r3, #1
 800694a:	643b      	str	r3, [r7, #64]	@ 0x40
 800694c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800694e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006950:	429a      	cmp	r2, r3
 8006952:	dbe8      	blt.n	8006926 <envelope+0x43e>
    }
  }
  nblocks = upperEnv->size[0] * upperEnv->size[1];
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	6852      	ldr	r2, [r2, #4]
 800695e:	3204      	adds	r2, #4
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	fb02 f303 	mul.w	r3, r2, r3
 8006966:	643b      	str	r3, [r7, #64]	@ 0x40
  upperEnv->size[0] = 1;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	601a      	str	r2, [r3, #0]
  upperEnv->size[1] = x->size[1];
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	3304      	adds	r3, #4
 800697a:	6852      	ldr	r2, [r2, #4]
 800697c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(upperEnv, nblocks);
 800697e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006980:	6838      	ldr	r0, [r7, #0]
 8006982:	f002 f93a 	bl	8008bfa <emxEnsureCapacity_real32_T>
  upperEnv_data = upperEnv->data;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	62bb      	str	r3, [r7, #40]	@ 0x28
  firstBlockLength = x->size[1];
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for (nblocks = 0; nblocks < firstBlockLength; nblocks++) {
 8006994:	2300      	movs	r3, #0
 8006996:	643b      	str	r3, [r7, #64]	@ 0x40
 8006998:	e00c      	b.n	80069b4 <envelope+0x4cc>
    upperEnv_data[nblocks] = b_x_data[nblocks];
 800699a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069a0:	441a      	add	r2, r3
 80069a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069a8:	440b      	add	r3, r1
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	601a      	str	r2, [r3, #0]
  for (nblocks = 0; nblocks < firstBlockLength; nblocks++) {
 80069ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b0:	3301      	adds	r3, #1
 80069b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80069b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069b8:	429a      	cmp	r2, r3
 80069ba:	dbee      	blt.n	800699a <envelope+0x4b2>
  }
  emxFree_real32_T(&b_x);
 80069bc:	f107 031c 	add.w	r3, r7, #28
 80069c0:	4618      	mov	r0, r3
 80069c2:	f002 f9ff 	bl	8008dc4 <emxFree_real32_T>
}
 80069c6:	bf00      	nop
 80069c8:	3758      	adds	r7, #88	@ 0x58
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080069d0 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 80069d0:	b5b0      	push	{r4, r5, r7, lr}
 80069d2:	b08c      	sub	sp, #48	@ 0x30
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80069da:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80069de:	ed97 0b04 	vldr	d0, [r7, #16]
 80069e2:	f005 f9ad 	bl	800bd40 <rtIsNaN>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <rt_powd_snf+0x2a>
 80069ec:	ed97 0b02 	vldr	d0, [r7, #8]
 80069f0:	f005 f9a6 	bl	800bd40 <rtIsNaN>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <rt_powd_snf+0x36>
    y = rtNaN;
 80069fa:	4b80      	ldr	r3, [pc, #512]	@ (8006bfc <rt_powd_snf+0x22c>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006a04:	e0ef      	b.n	8006be6 <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	ed97 7b00 	vldr	d7, [r7]
 8006a16:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8006a1a:	68bc      	ldr	r4, [r7, #8]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8006a22:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8006a26:	ed97 0b02 	vldr	d0, [r7, #8]
 8006a2a:	f005 f923 	bl	800bc74 <rtIsInf>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d049      	beq.n	8006ac8 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	4b71      	ldr	r3, [pc, #452]	@ (8006c00 <rt_powd_snf+0x230>)
 8006a3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006a3e:	f7fa f84b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <rt_powd_snf+0x84>
        y = 1.0;
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8006c00 <rt_powd_snf+0x230>)
 8006a4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006a52:	e0c8      	b.n	8006be6 <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	4b69      	ldr	r3, [pc, #420]	@ (8006c00 <rt_powd_snf+0x230>)
 8006a5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006a5e:	f7fa f863 	bl	8000b28 <__aeabi_dcmpgt>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d017      	beq.n	8006a98 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	f04f 0300 	mov.w	r3, #0
 8006a70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a74:	f7fa f858 	bl	8000b28 <__aeabi_dcmpgt>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <rt_powd_snf+0xba>
          y = rtInf;
 8006a7e:	4b61      	ldr	r3, [pc, #388]	@ (8006c04 <rt_powd_snf+0x234>)
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006a88:	e0ad      	b.n	8006be6 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006a96:	e0a6      	b.n	8006be6 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006aa4:	f7fa f840 	bl	8000b28 <__aeabi_dcmpgt>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d006      	beq.n	8006abc <rt_powd_snf+0xec>
        y = 0.0;
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006aba:	e094      	b.n	8006be6 <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 8006abc:	4b51      	ldr	r3, [pc, #324]	@ (8006c04 <rt_powd_snf+0x234>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006ac6:	e08e      	b.n	8006be6 <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ad4:	f7fa f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <rt_powd_snf+0x11a>
      y = 1.0;
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	4b47      	ldr	r3, [pc, #284]	@ (8006c00 <rt_powd_snf+0x230>)
 8006ae4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006ae8:	e07d      	b.n	8006be6 <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	4b44      	ldr	r3, [pc, #272]	@ (8006c00 <rt_powd_snf+0x230>)
 8006af0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006af4:	f7f9 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01b      	beq.n	8006b36 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b0a:	f7fa f80d 	bl	8000b28 <__aeabi_dcmpgt>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <rt_powd_snf+0x14e>
        y = u0;
 8006b14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b18:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006b1c:	e063      	b.n	8006be6 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8006b1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	4936      	ldr	r1, [pc, #216]	@ (8006c00 <rt_powd_snf+0x230>)
 8006b28:	f7f9 fe98 	bl	800085c <__aeabi_ddiv>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006b34:	e057      	b.n	8006be6 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b42:	f7f9 ffc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <rt_powd_snf+0x192>
      y = u0 * u0;
 8006b4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b54:	f7f9 fd58 	bl	8000608 <__aeabi_dmul>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006b60:	e041      	b.n	8006be6 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	4b28      	ldr	r3, [pc, #160]	@ (8006c08 <rt_powd_snf+0x238>)
 8006b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b6c:	f7f9 ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d011      	beq.n	8006b9a <rt_powd_snf+0x1ca>
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b82:	f7f9 ffc7 	bl	8000b14 <__aeabi_dcmpge>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d006      	beq.n	8006b9a <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8006b8c:	ed97 0b04 	vldr	d0, [r7, #16]
 8006b90:	f012 fcce 	bl	8019530 <sqrt>
 8006b94:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8006b98:	e025      	b.n	8006be6 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ba6:	f7f9 ffa1 	bl	8000aec <__aeabi_dcmplt>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <rt_powd_snf+0x206>
 8006bb0:	ed97 0b02 	vldr	d0, [r7, #8]
 8006bb4:	f013 f888 	bl	8019cc8 <floor>
 8006bb8:	ec53 2b10 	vmov	r2, r3, d0
 8006bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bc0:	f7f9 ffb2 	bl	8000b28 <__aeabi_dcmpgt>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <rt_powd_snf+0x206>
      y = rtNaN;
 8006bca:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <rt_powd_snf+0x22c>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006bd4:	e007      	b.n	8006be6 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8006bd6:	ed97 1b02 	vldr	d1, [r7, #8]
 8006bda:	ed97 0b04 	vldr	d0, [r7, #16]
 8006bde:	f012 fc37 	bl	8019450 <pow>
 8006be2:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    }
  }
  return y;
 8006be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bea:	ec43 2b17 	vmov	d7, r2, r3
}
 8006bee:	eeb0 0a47 	vmov.f32	s0, s14
 8006bf2:	eef0 0a67 	vmov.f32	s1, s15
 8006bf6:	3730      	adds	r7, #48	@ 0x30
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8006bfc:	20000018 	.word	0x20000018
 8006c00:	3ff00000 	.word	0x3ff00000
 8006c04:	20000020 	.word	0x20000020
 8006c08:	3fe00000 	.word	0x3fe00000
 8006c0c:	00000000 	.word	0x00000000

08006c10 <envelope_xcorr_gen>:
 *                float thrshld
 * Return Type  : float
 */
float envelope_xcorr_gen(float ms1[256], float ms2[256], float N, float fs,
                         float channels, float window, float thrshld)
{
 8006c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c14:	ed2d 8b02 	vpush	{d8}
 8006c18:	b0ba      	sub	sp, #232	@ 0xe8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	61f8      	str	r0, [r7, #28]
 8006c1e:	61b9      	str	r1, [r7, #24]
 8006c20:	ed87 0a05 	vstr	s0, [r7, #20]
 8006c24:	edc7 0a04 	vstr	s1, [r7, #16]
 8006c28:	ed87 1a03 	vstr	s2, [r7, #12]
 8006c2c:	edc7 1a02 	vstr	s3, [r7, #8]
 8006c30:	ed87 2a01 	vstr	s4, [r7, #4]
  int n;
  int nx;
  int *r2;
  bool *b_x_data;
  (void)channels;
  Ts = 1.0F / fs;
 8006c34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c38:	ed97 7a04 	vldr	s14, [r7, #16]
 8006c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c40:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
  t4_data = ms1[0];
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  for (k = 0; k < 255; k++) {
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c52:	e012      	b.n	8006c7a <envelope_xcorr_gen+0x6a>
    t4_data += ms1[k + 1];
 8006c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c58:	3301      	adds	r3, #1
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	edd3 7a00 	vldr	s15, [r3]
 8006c64:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8006c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c6c:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
  for (k = 0; k < 255; k++) {
 8006c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c74:	3301      	adds	r3, #1
 8006c76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006c80:	dde8      	ble.n	8006c54 <envelope_xcorr_gen+0x44>
  }
  t4_data /= 256.0F;
 8006c82:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8006c86:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8006f8c <envelope_xcorr_gen+0x37c>
 8006c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c8e:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
  for (i = 0; i < 256; i++) {
 8006c92:	2300      	movs	r3, #0
 8006c94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c98:	e016      	b.n	8006cc8 <envelope_xcorr_gen+0xb8>
    ms1[i] -= t4_data;
 8006c9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	ed93 7a00 	vldr	s14, [r3]
 8006ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8006cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cba:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 256; i++) {
 8006cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ccc:	2bff      	cmp	r3, #255	@ 0xff
 8006cce:	dde4      	ble.n	8006c9a <envelope_xcorr_gen+0x8a>
  }
  t4_data = ms2[0];
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  for (k = 0; k < 255; k++) {
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cde:	e012      	b.n	8006d06 <envelope_xcorr_gen+0xf6>
    t4_data += ms2[k + 1];
 8006ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	4413      	add	r3, r2
 8006cec:	edd3 7a00 	vldr	s15, [r3]
 8006cf0:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8006cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cf8:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
  for (k = 0; k < 255; k++) {
 8006cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d00:	3301      	adds	r3, #1
 8006d02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d0a:	2bfe      	cmp	r3, #254	@ 0xfe
 8006d0c:	dde8      	ble.n	8006ce0 <envelope_xcorr_gen+0xd0>
  }
  t4_data /= 256.0F;
 8006d0e:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8006d12:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8006f8c <envelope_xcorr_gen+0x37c>
 8006d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d1a:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
  for (i = 0; i < 256; i++) {
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d24:	e016      	b.n	8006d54 <envelope_xcorr_gen+0x144>
    ms2[i] -= t4_data;
 8006d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	4413      	add	r3, r2
 8006d30:	ed93 7a00 	vldr	s14, [r3]
 8006d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8006d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d46:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 256; i++) {
 8006d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d4e:	3301      	adds	r3, #1
 8006d50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d58:	2bff      	cmp	r3, #255	@ 0xff
 8006d5a:	dde4      	ble.n	8006d26 <envelope_xcorr_gen+0x116>
  }
  /* interpolace */
  t4_data = (N - 1.0F) * Ts;
 8006d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d68:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8006d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d70:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
  emxInit_real32_T(&x, 2);
 8006d74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006d78:	2102      	movs	r1, #2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f002 f8e5 	bl	8008f4a <emxInit_real32_T>
  if (rtIsNaNF(Ts) || rtIsNaNF(t4_data)) {
 8006d80:	ed97 0a37 	vldr	s0, [r7, #220]	@ 0xdc
 8006d84:	f004 fff1 	bl	800bd6a <rtIsNaNF>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <envelope_xcorr_gen+0x18c>
 8006d8e:	ed97 0a34 	vldr	s0, [r7, #208]	@ 0xd0
 8006d92:	f004 ffea 	bl	800bd6a <rtIsNaNF>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d023      	beq.n	8006de4 <envelope_xcorr_gen+0x1d4>
    i = x->size[0] * x->size[1];
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006da4:	6852      	ldr	r2, [r2, #4]
 8006da6:	3204      	adds	r2, #4
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    x->size[0] = 1;
 8006db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
    x->size[1] = 1;
 8006dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(x, i);
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f001 ff15 	bl	8008bfa <emxEnsureCapacity_real32_T>
    x_data = x->data;
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    x_data[0] = rtNaNF;
 8006dd8:	4b6d      	ldr	r3, [pc, #436]	@ (8006f90 <envelope_xcorr_gen+0x380>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	e109      	b.n	8006ff8 <envelope_xcorr_gen+0x3e8>
  } else if ((Ts == 0.0F) || ((t4_data > 0.0F) && (Ts < 0.0F)) ||
 8006de4:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8006de8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df0:	d01b      	beq.n	8006e2a <envelope_xcorr_gen+0x21a>
 8006df2:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8006df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfe:	dd06      	ble.n	8006e0e <envelope_xcorr_gen+0x1fe>
 8006e00:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8006e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0c:	d40d      	bmi.n	8006e2a <envelope_xcorr_gen+0x21a>
 8006e0e:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8006e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e1a:	d510      	bpl.n	8006e3e <envelope_xcorr_gen+0x22e>
             ((t4_data < 0.0F) && (Ts > 0.0F))) {
 8006e1c:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8006e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	dd09      	ble.n	8006e3e <envelope_xcorr_gen+0x22e>
    x->size[0] = 1;
 8006e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
    x->size[1] = 0;
 8006e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	3304      	adds	r3, #4
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e0dc      	b.n	8006ff8 <envelope_xcorr_gen+0x3e8>
  } else if (rtIsInfF(t4_data) && rtIsInfF(Ts)) {
 8006e3e:	ed97 0a34 	vldr	s0, [r7, #208]	@ 0xd0
 8006e42:	f004 ff45 	bl	800bcd0 <rtIsInfF>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d02a      	beq.n	8006ea2 <envelope_xcorr_gen+0x292>
 8006e4c:	ed97 0a37 	vldr	s0, [r7, #220]	@ 0xdc
 8006e50:	f004 ff3e 	bl	800bcd0 <rtIsInfF>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d023      	beq.n	8006ea2 <envelope_xcorr_gen+0x292>
    i = x->size[0] * x->size[1];
 8006e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e62:	6852      	ldr	r2, [r2, #4]
 8006e64:	3204      	adds	r2, #4
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	fb02 f303 	mul.w	r3, r2, r3
 8006e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    x->size[0] = 1;
 8006e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
    x->size[1] = 1;
 8006e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(x, i);
 8006e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e84:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 feb6 	bl	8008bfa <emxEnsureCapacity_real32_T>
    x_data = x->data;
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    x_data[0] = rtNaNF;
 8006e96:	4b3e      	ldr	r3, [pc, #248]	@ (8006f90 <envelope_xcorr_gen+0x380>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e0aa      	b.n	8006ff8 <envelope_xcorr_gen+0x3e8>
  } else if (rtIsInfF(Ts)) {
 8006ea2:	ed97 0a37 	vldr	s0, [r7, #220]	@ 0xdc
 8006ea6:	f004 ff13 	bl	800bcd0 <rtIsInfF>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d023      	beq.n	8006ef8 <envelope_xcorr_gen+0x2e8>
    i = x->size[0] * x->size[1];
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eb8:	6852      	ldr	r2, [r2, #4]
 8006eba:	3204      	adds	r2, #4
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    x->size[0] = 1;
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
    x->size[1] = 1;
 8006ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(x, i);
 8006ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eda:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 fe8b 	bl	8008bfa <emxEnsureCapacity_real32_T>
    x_data = x->data;
 8006ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    x_data[0] = 0.0F;
 8006eec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e07f      	b.n	8006ff8 <envelope_xcorr_gen+0x3e8>
  } else if (floorf(Ts) == Ts) {
 8006ef8:	ed97 0a37 	vldr	s0, [r7, #220]	@ 0xdc
 8006efc:	f012 ff60 	bl	8019dc0 <floorf>
 8006f00:	eeb0 7a40 	vmov.f32	s14, s0
 8006f04:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8006f08:	eef4 7a47 	vcmp.f32	s15, s14
 8006f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f10:	d16a      	bne.n	8006fe8 <envelope_xcorr_gen+0x3d8>
    i = x->size[0] * x->size[1];
 8006f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f1a:	6852      	ldr	r2, [r2, #4]
 8006f1c:	3204      	adds	r2, #4
 8006f1e:	6812      	ldr	r2, [r2, #0]
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    x->size[0] = 1;
 8006f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
    m = (int)((double)t4_data / Ts);
 8006f30:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8006f34:	f7f9 fb10 	bl	8000558 <__aeabi_f2d>
 8006f38:	4604      	mov	r4, r0
 8006f3a:	460d      	mov	r5, r1
 8006f3c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8006f40:	f7f9 fb0a 	bl	8000558 <__aeabi_f2d>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4620      	mov	r0, r4
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	f7f9 fc86 	bl	800085c <__aeabi_ddiv>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4610      	mov	r0, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	f7f9 fe06 	bl	8000b68 <__aeabi_d2iz>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    x->size[1] = m + 1;
 8006f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	3304      	adds	r3, #4
 8006f68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f6c:	3201      	adds	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(x, i);
 8006f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f72:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fe3f 	bl	8008bfa <emxEnsureCapacity_real32_T>
    x_data = x->data;
 8006f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (i = 0; i <= m; i++) {
 8006f84:	2300      	movs	r3, #0
 8006f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f8a:	e026      	b.n	8006fda <envelope_xcorr_gen+0x3ca>
 8006f8c:	43800000 	.word	0x43800000
 8006f90:	20000028 	.word	0x20000028
      x_data[i] = (float)(Ts * (double)i);
 8006f94:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8006f98:	f7f9 fade 	bl	8000558 <__aeabi_f2d>
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8006fa4:	f7f9 fac6 	bl	8000534 <__aeabi_i2d>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4620      	mov	r0, r4
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f7f9 fb2a 	bl	8000608 <__aeabi_dmul>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fc6:	18d4      	adds	r4, r2, r3
 8006fc8:	f7f9 fdf6 	bl	8000bb8 <__aeabi_d2f>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	6023      	str	r3, [r4, #0]
    for (i = 0; i <= m; i++) {
 8006fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	ddd6      	ble.n	8006f94 <envelope_xcorr_gen+0x384>
 8006fe6:	e007      	b.n	8006ff8 <envelope_xcorr_gen+0x3e8>
    }
  } else {
    eml_float_colon(Ts, t4_data, x);
 8006fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fea:	4618      	mov	r0, r3
 8006fec:	edd7 0a34 	vldr	s1, [r7, #208]	@ 0xd0
 8006ff0:	ed97 0a37 	vldr	s0, [r7, #220]	@ 0xdc
 8006ff4:	f7ff f880 	bl	80060f8 <eml_float_colon>
  }
  t1_data = Ts / 4.0F;
 8006ff8:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8006ffc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8007000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007004:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
  t4_data = N * Ts - Ts / 4.0F;
 8007008:	ed97 7a05 	vldr	s14, [r7, #20]
 800700c:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8007010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007014:	edd7 6a37 	vldr	s13, [r7, #220]	@ 0xdc
 8007018:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 800701c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007024:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
  emxInit_real32_T(&xq, 2);
 8007028:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800702c:	2102      	movs	r1, #2
 800702e:	4618      	mov	r0, r3
 8007030:	f001 ff8b 	bl	8008f4a <emxInit_real32_T>
  if (rtIsNaNF(t1_data) || rtIsNaNF(t4_data)) {
 8007034:	ed97 0a36 	vldr	s0, [r7, #216]	@ 0xd8
 8007038:	f004 fe97 	bl	800bd6a <rtIsNaNF>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <envelope_xcorr_gen+0x440>
 8007042:	ed97 0a34 	vldr	s0, [r7, #208]	@ 0xd0
 8007046:	f004 fe90 	bl	800bd6a <rtIsNaNF>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d023      	beq.n	8007098 <envelope_xcorr_gen+0x488>
    i = xq->size[0] * xq->size[1];
 8007050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007058:	6852      	ldr	r2, [r2, #4]
 800705a:	3204      	adds	r2, #4
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    xq->size[0] = 1;
 8007066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	601a      	str	r2, [r3, #0]
    xq->size[1] = 1;
 800706e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(xq, i);
 8007078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800707a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800707e:	4618      	mov	r0, r3
 8007080:	f001 fdbb 	bl	8008bfa <emxEnsureCapacity_real32_T>
    xq_data = xq->data;
 8007084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    xq_data[0] = rtNaNF;
 800708c:	4baf      	ldr	r3, [pc, #700]	@ (800734c <envelope_xcorr_gen+0x73c>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e105      	b.n	80072a4 <envelope_xcorr_gen+0x694>
  } else if ((t1_data == 0.0F) || ((t4_data > 0.0F) && (t1_data < 0.0F)) ||
 8007098:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 800709c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a4:	d01b      	beq.n	80070de <envelope_xcorr_gen+0x4ce>
 80070a6:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80070aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b2:	dd06      	ble.n	80070c2 <envelope_xcorr_gen+0x4b2>
 80070b4:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80070b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c0:	d40d      	bmi.n	80070de <envelope_xcorr_gen+0x4ce>
 80070c2:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80070c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	d510      	bpl.n	80070f2 <envelope_xcorr_gen+0x4e2>
             ((t4_data < 0.0F) && (t1_data > 0.0F))) {
 80070d0:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80070d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070dc:	dd09      	ble.n	80070f2 <envelope_xcorr_gen+0x4e2>
    xq->size[0] = 1;
 80070de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
    xq->size[1] = 0;
 80070e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e0d8      	b.n	80072a4 <envelope_xcorr_gen+0x694>
  } else if (rtIsInfF(t4_data) && rtIsInfF(t1_data)) {
 80070f2:	ed97 0a34 	vldr	s0, [r7, #208]	@ 0xd0
 80070f6:	f004 fdeb 	bl	800bcd0 <rtIsInfF>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d02a      	beq.n	8007156 <envelope_xcorr_gen+0x546>
 8007100:	ed97 0a36 	vldr	s0, [r7, #216]	@ 0xd8
 8007104:	f004 fde4 	bl	800bcd0 <rtIsInfF>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d023      	beq.n	8007156 <envelope_xcorr_gen+0x546>
    i = xq->size[0] * xq->size[1];
 800710e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007116:	6852      	ldr	r2, [r2, #4]
 8007118:	3204      	adds	r2, #4
 800711a:	6812      	ldr	r2, [r2, #0]
 800711c:	fb02 f303 	mul.w	r3, r2, r3
 8007120:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    xq->size[0] = 1;
 8007124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]
    xq->size[1] = 1;
 800712c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	3304      	adds	r3, #4
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(xq, i);
 8007136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007138:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800713c:	4618      	mov	r0, r3
 800713e:	f001 fd5c 	bl	8008bfa <emxEnsureCapacity_real32_T>
    xq_data = xq->data;
 8007142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    xq_data[0] = rtNaNF;
 800714a:	4b80      	ldr	r3, [pc, #512]	@ (800734c <envelope_xcorr_gen+0x73c>)
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	e0a6      	b.n	80072a4 <envelope_xcorr_gen+0x694>
  } else if (rtIsInfF(t1_data)) {
 8007156:	ed97 0a36 	vldr	s0, [r7, #216]	@ 0xd8
 800715a:	f004 fdb9 	bl	800bcd0 <rtIsInfF>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d023      	beq.n	80071ac <envelope_xcorr_gen+0x59c>
    i = xq->size[0] * xq->size[1];
 8007164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800716c:	6852      	ldr	r2, [r2, #4]
 800716e:	3204      	adds	r2, #4
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    xq->size[0] = 1;
 800717a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	601a      	str	r2, [r3, #0]
    xq->size[1] = 1;
 8007182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	2201      	movs	r2, #1
 800718a:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(xq, i);
 800718c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8007192:	4618      	mov	r0, r3
 8007194:	f001 fd31 	bl	8008bfa <emxEnsureCapacity_real32_T>
    xq_data = xq->data;
 8007198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    xq_data[0] = 0.0F;
 80071a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	e07b      	b.n	80072a4 <envelope_xcorr_gen+0x694>
  } else if (floorf(t1_data) == t1_data) {
 80071ac:	ed97 0a36 	vldr	s0, [r7, #216]	@ 0xd8
 80071b0:	f012 fe06 	bl	8019dc0 <floorf>
 80071b4:	eeb0 7a40 	vmov.f32	s14, s0
 80071b8:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80071bc:	eef4 7a47 	vcmp.f32	s15, s14
 80071c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c4:	d166      	bne.n	8007294 <envelope_xcorr_gen+0x684>
    i = xq->size[0] * xq->size[1];
 80071c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80071ce:	6852      	ldr	r2, [r2, #4]
 80071d0:	3204      	adds	r2, #4
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
 80071d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    xq->size[0] = 1;
 80071dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
    m = (int)((double)t4_data / t1_data);
 80071e4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80071e8:	f7f9 f9b6 	bl	8000558 <__aeabi_f2d>
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80071f4:	f7f9 f9b0 	bl	8000558 <__aeabi_f2d>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4620      	mov	r0, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	f7f9 fb2c 	bl	800085c <__aeabi_ddiv>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	f7f9 fcac 	bl	8000b68 <__aeabi_d2iz>
 8007210:	4603      	mov	r3, r0
 8007212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    xq->size[1] = m + 1;
 8007216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	3304      	adds	r3, #4
 800721c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007220:	3201      	adds	r2, #1
 8007222:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(xq, i);
 8007224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007226:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800722a:	4618      	mov	r0, r3
 800722c:	f001 fce5 	bl	8008bfa <emxEnsureCapacity_real32_T>
    xq_data = xq->data;
 8007230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    for (i = 0; i <= m; i++) {
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800723e:	e022      	b.n	8007286 <envelope_xcorr_gen+0x676>
      xq_data[i] = (float)(t1_data * (double)i);
 8007240:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8007244:	f7f9 f988 	bl	8000558 <__aeabi_f2d>
 8007248:	4604      	mov	r4, r0
 800724a:	460d      	mov	r5, r1
 800724c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8007250:	f7f9 f970 	bl	8000534 <__aeabi_i2d>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4620      	mov	r0, r4
 800725a:	4629      	mov	r1, r5
 800725c:	f7f9 f9d4 	bl	8000608 <__aeabi_dmul>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007272:	18d4      	adds	r4, r2, r3
 8007274:	f7f9 fca0 	bl	8000bb8 <__aeabi_d2f>
 8007278:	4603      	mov	r3, r0
 800727a:	6023      	str	r3, [r4, #0]
    for (i = 0; i <= m; i++) {
 800727c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007280:	3301      	adds	r3, #1
 8007282:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800728a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800728e:	429a      	cmp	r2, r3
 8007290:	ddd6      	ble.n	8007240 <envelope_xcorr_gen+0x630>
 8007292:	e007      	b.n	80072a4 <envelope_xcorr_gen+0x694>
    }
  } else {
    eml_float_colon(t1_data, t4_data, xq);
 8007294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007296:	4618      	mov	r0, r3
 8007298:	edd7 0a34 	vldr	s1, [r7, #208]	@ 0xd0
 800729c:	ed97 0a36 	vldr	s0, [r7, #216]	@ 0xd8
 80072a0:	f7fe ff2a 	bl	80060f8 <eml_float_colon>
  }
  /* filtrace  */
  emxInit_real32_T(&r, 2);
 80072a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80072a8:	2102      	movs	r1, #2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 fe4d 	bl	8008f4a <emxInit_real32_T>
  interp1(x, ms1, xq, r);
 80072b0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80072b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072b6:	69f9      	ldr	r1, [r7, #28]
 80072b8:	f002 fe00 	bl	8009ebc <interp1>
  emxInit_real32_T(&b_ms1, 2);
 80072bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80072c0:	2102      	movs	r1, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fe41 	bl	8008f4a <emxInit_real32_T>
  envelope(r, b_ms1);
 80072c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072cc:	4611      	mov	r1, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff f90a 	bl	80064e8 <envelope>
  interp1(x, ms2, xq, r);
 80072d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80072d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072da:	69b9      	ldr	r1, [r7, #24]
 80072dc:	f002 fdee 	bl	8009ebc <interp1>
  envelope(r, xq);
 80072e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff f8fe 	bl	80064e8 <envelope>
  emxFree_real32_T(&r);
 80072ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fd67 	bl	8008dc4 <emxFree_real32_T>
  t3_data = mean(b_ms1);
 80072f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f8:	4618      	mov	r0, r3
 80072fa:	f004 fc0d 	bl	800bb18 <mean>
 80072fe:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
  m = b_ms1->size[1] - 1;
 8007302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3b01      	subs	r3, #1
 800730c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  i = b_ms1->size[0] * b_ms1->size[1];
 8007310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007318:	6852      	ldr	r2, [r2, #4]
 800731a:	3204      	adds	r2, #4
 800731c:	6812      	ldr	r2, [r2, #0]
 800731e:	fb02 f303 	mul.w	r3, r2, r3
 8007322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  b_ms1->size[0] = 1;
 8007326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_ms1, i);
 800732e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007330:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8007334:	4618      	mov	r0, r3
 8007336:	f001 fc60 	bl	8008bfa <emxEnsureCapacity_real32_T>
  ms1_data = b_ms1->data;
 800733a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (i = 0; i <= m; i++) {
 8007342:	2300      	movs	r3, #0
 8007344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007348:	e01b      	b.n	8007382 <envelope_xcorr_gen+0x772>
 800734a:	bf00      	nop
 800734c:	20000028 	.word	0x20000028
    ms1_data[i] -= t3_data;
 8007350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800735a:	4413      	add	r3, r2
 800735c:	ed93 7a00 	vldr	s14, [r3]
 8007360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800736a:	4413      	add	r3, r2
 800736c:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8007370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007374:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= m; i++) {
 8007378:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800737c:	3301      	adds	r3, #1
 800737e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800738a:	429a      	cmp	r2, r3
 800738c:	dde0      	ble.n	8007350 <envelope_xcorr_gen+0x740>
  }
  t3_data = mean(xq);
 800738e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007390:	4618      	mov	r0, r3
 8007392:	f004 fbc1 	bl	800bb18 <mean>
 8007396:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
  m = xq->size[1] - 1;
 800739a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	3304      	adds	r3, #4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  i = xq->size[0] * xq->size[1];
 80073a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073b0:	6852      	ldr	r2, [r2, #4]
 80073b2:	3204      	adds	r2, #4
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  xq->size[0] = 1;
 80073be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(xq, i);
 80073c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fc14 	bl	8008bfa <emxEnsureCapacity_real32_T>
  xq_data = xq->data;
 80073d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  for (i = 0; i <= m; i++) {
 80073da:	2300      	movs	r3, #0
 80073dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073e0:	e018      	b.n	8007414 <envelope_xcorr_gen+0x804>
    xq_data[i] -= t3_data;
 80073e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073ec:	4413      	add	r3, r2
 80073ee:	ed93 7a00 	vldr	s14, [r3]
 80073f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073fc:	4413      	add	r3, r2
 80073fe:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8007402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007406:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= m; i++) {
 800740a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800740e:	3301      	adds	r3, #1
 8007410:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007414:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800741c:	429a      	cmp	r2, r3
 800741e:	dde0      	ble.n	80073e2 <envelope_xcorr_gen+0x7d2>
  }
  /* osekání signálu */
  /* thrshld = 400; */
  /* window = 200; */
  nx = b_ms1->size[1];
 8007420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
  i = x->size[0] * x->size[1];
 8007428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007430:	6852      	ldr	r2, [r2, #4]
 8007432:	3204      	adds	r2, #4
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  x->size[0] = 1;
 800743e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	601a      	str	r2, [r3, #0]
  x->size[1] = b_ms1->size[1];
 8007446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	6852      	ldr	r2, [r2, #4]
 8007452:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(x, i);
 8007454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007456:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800745a:	4618      	mov	r0, r3
 800745c:	f001 fbcd 	bl	8008bfa <emxEnsureCapacity_real32_T>
  x_data = x->data;
 8007460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  for (k = 0; k < nx; k++) {
 8007468:	2300      	movs	r3, #0
 800746a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800746e:	e016      	b.n	800749e <envelope_xcorr_gen+0x88e>
    x_data[k] = fabsf(ms1_data[k]);
 8007470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800747a:	4413      	add	r3, r2
 800747c:	edd3 7a00 	vldr	s15, [r3]
 8007480:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800748a:	4413      	add	r3, r2
 800748c:	eef0 7ae7 	vabs.f32	s15, s15
 8007490:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < nx; k++) {
 8007494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007498:	3301      	adds	r3, #1
 800749a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074a4:	429a      	cmp	r2, r3
 80074a6:	dbe3      	blt.n	8007470 <envelope_xcorr_gen+0x860>
  }
  emxInit_boolean_T(&b_x);
 80074a8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fcb3 	bl	8008e18 <emxInit_boolean_T>
  i = b_x->size[0] * b_x->size[1];
 80074b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80074ba:	6852      	ldr	r2, [r2, #4]
 80074bc:	3204      	adds	r2, #4
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	fb02 f303 	mul.w	r3, r2, r3
 80074c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  b_x->size[0] = 1;
 80074c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	601a      	str	r2, [r3, #0]
  b_x->size[1] = x->size[1];
 80074d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	6852      	ldr	r2, [r2, #4]
 80074dc:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b_x, i);
 80074de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074e0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 fa55 	bl	8008994 <emxEnsureCapacity_boolean_T>
  b_x_data = b_x->data;
 80074ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  m = x->size[1];
 80074f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (i = 0; i < m; i++) {
 80074fc:	2300      	movs	r3, #0
 80074fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007502:	e01c      	b.n	800753e <envelope_xcorr_gen+0x92e>
    b_x_data[i] = (x_data[i] > thrshld);
 8007504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800750e:	4413      	add	r3, r2
 8007510:	edd3 7a00 	vldr	s15, [r3]
 8007514:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007518:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800751c:	4413      	add	r3, r2
 800751e:	ed97 7a01 	vldr	s14, [r7, #4]
 8007522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752a:	bf4c      	ite	mi
 800752c:	2201      	movmi	r2, #1
 800752e:	2200      	movpl	r2, #0
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < m; i++) {
 8007534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007538:	3301      	adds	r3, #1
 800753a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800753e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007546:	429a      	cmp	r2, r3
 8007548:	dbdc      	blt.n	8007504 <envelope_xcorr_gen+0x8f4>
  }
  eml_find(b_x, (int *)&nx, tmp_size);
 800754a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800754c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8007550:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007554:	4618      	mov	r0, r3
 8007556:	f001 fdf7 	bl	8009148 <eml_find>
  if (tmp_size[1] - 1 >= 0) {
 800755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	dd0a      	ble.n	8007576 <envelope_xcorr_gen+0x966>
    t1_data = (float)nx + window;
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800756a:	ed97 7a02 	vldr	s14, [r7, #8]
 800756e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007572:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
  }
  t4_data = window / 4.0F;
 8007576:	ed97 7a02 	vldr	s14, [r7, #8]
 800757a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800757e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007582:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
  nx = b_ms1->size[1];
 8007586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
  i = x->size[0] * x->size[1];
 800758e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007596:	6852      	ldr	r2, [r2, #4]
 8007598:	3204      	adds	r2, #4
 800759a:	6812      	ldr	r2, [r2, #0]
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  x->size[0] = 1;
 80075a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
  x->size[1] = b_ms1->size[1];
 80075ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	6852      	ldr	r2, [r2, #4]
 80075b8:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(x, i);
 80075ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075bc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 fb1a 	bl	8008bfa <emxEnsureCapacity_real32_T>
  x_data = x->data;
 80075c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  for (k = 0; k < nx; k++) {
 80075ce:	2300      	movs	r3, #0
 80075d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075d4:	e016      	b.n	8007604 <envelope_xcorr_gen+0x9f4>
    x_data[k] = fabsf(ms1_data[k]);
 80075d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80075e0:	4413      	add	r3, r2
 80075e2:	edd3 7a00 	vldr	s15, [r3]
 80075e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80075f0:	4413      	add	r3, r2
 80075f2:	eef0 7ae7 	vabs.f32	s15, s15
 80075f6:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < nx; k++) {
 80075fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075fe:	3301      	adds	r3, #1
 8007600:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800760a:	429a      	cmp	r2, r3
 800760c:	dbe3      	blt.n	80075d6 <envelope_xcorr_gen+0x9c6>
  }
  i = b_x->size[0] * b_x->size[1];
 800760e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007616:	6852      	ldr	r2, [r2, #4]
 8007618:	3204      	adds	r2, #4
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	fb02 f303 	mul.w	r3, r2, r3
 8007620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  b_x->size[0] = 1;
 8007624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	601a      	str	r2, [r3, #0]
  b_x->size[1] = x->size[1];
 800762c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	3304      	adds	r3, #4
 8007636:	6852      	ldr	r2, [r2, #4]
 8007638:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b_x, i);
 800763a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800763c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8007640:	4618      	mov	r0, r3
 8007642:	f001 f9a7 	bl	8008994 <emxEnsureCapacity_boolean_T>
  b_x_data = b_x->data;
 8007646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  m = x->size[1];
 800764e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (i = 0; i < m; i++) {
 8007658:	2300      	movs	r3, #0
 800765a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800765e:	e01c      	b.n	800769a <envelope_xcorr_gen+0xa8a>
    b_x_data[i] = (x_data[i] > thrshld);
 8007660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800766a:	4413      	add	r3, r2
 800766c:	edd3 7a00 	vldr	s15, [r3]
 8007670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007674:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007678:	4413      	add	r3, r2
 800767a:	ed97 7a01 	vldr	s14, [r7, #4]
 800767e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007686:	bf4c      	ite	mi
 8007688:	2201      	movmi	r2, #1
 800768a:	2200      	movpl	r2, #0
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < m; i++) {
 8007690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007694:	3301      	adds	r3, #1
 8007696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800769a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800769e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076a2:	429a      	cmp	r2, r3
 80076a4:	dbdc      	blt.n	8007660 <envelope_xcorr_gen+0xa50>
  }
  eml_find(b_x, (int *)&nx, tmp_size);
 80076a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076a8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80076ac:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 fd49 	bl	8009148 <eml_find>
  if (tmp_size[1] - 1 >= 0) {
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dd0a      	ble.n	80076d2 <envelope_xcorr_gen+0xac2>
    Ts = (float)nx - t4_data;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076c6:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80076ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ce:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
  }
  nx = xq->size[1];
 80076d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
  i = x->size[0] * x->size[1];
 80076da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076e2:	6852      	ldr	r2, [r2, #4]
 80076e4:	3204      	adds	r2, #4
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	fb02 f303 	mul.w	r3, r2, r3
 80076ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  x->size[0] = 1;
 80076f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
  x->size[1] = xq->size[1];
 80076f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	3304      	adds	r3, #4
 8007702:	6852      	ldr	r2, [r2, #4]
 8007704:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(x, i);
 8007706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007708:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800770c:	4618      	mov	r0, r3
 800770e:	f001 fa74 	bl	8008bfa <emxEnsureCapacity_real32_T>
  x_data = x->data;
 8007712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  for (k = 0; k < nx; k++) {
 800771a:	2300      	movs	r3, #0
 800771c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007720:	e016      	b.n	8007750 <envelope_xcorr_gen+0xb40>
    x_data[k] = fabsf(xq_data[k]);
 8007722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800772c:	4413      	add	r3, r2
 800772e:	edd3 7a00 	vldr	s15, [r3]
 8007732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800773c:	4413      	add	r3, r2
 800773e:	eef0 7ae7 	vabs.f32	s15, s15
 8007742:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < nx; k++) {
 8007746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800774a:	3301      	adds	r3, #1
 800774c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007756:	429a      	cmp	r2, r3
 8007758:	dbe3      	blt.n	8007722 <envelope_xcorr_gen+0xb12>
  }
  i = b_x->size[0] * b_x->size[1];
 800775a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007762:	6852      	ldr	r2, [r2, #4]
 8007764:	3204      	adds	r2, #4
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	fb02 f303 	mul.w	r3, r2, r3
 800776c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  b_x->size[0] = 1;
 8007770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	601a      	str	r2, [r3, #0]
  b_x->size[1] = x->size[1];
 8007778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	3304      	adds	r3, #4
 8007782:	6852      	ldr	r2, [r2, #4]
 8007784:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b_x, i);
 8007786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007788:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800778c:	4618      	mov	r0, r3
 800778e:	f001 f901 	bl	8008994 <emxEnsureCapacity_boolean_T>
  b_x_data = b_x->data;
 8007792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  m = x->size[1];
 800779a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (i = 0; i < m; i++) {
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077aa:	e01c      	b.n	80077e6 <envelope_xcorr_gen+0xbd6>
    b_x_data[i] = (x_data[i] > thrshld);
 80077ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077b6:	4413      	add	r3, r2
 80077b8:	edd3 7a00 	vldr	s15, [r3]
 80077bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077c0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80077c4:	4413      	add	r3, r2
 80077c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80077ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d2:	bf4c      	ite	mi
 80077d4:	2201      	movmi	r2, #1
 80077d6:	2200      	movpl	r2, #0
 80077d8:	b2d2      	uxtb	r2, r2
 80077da:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < m; i++) {
 80077dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077e0:	3301      	adds	r3, #1
 80077e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077ee:	429a      	cmp	r2, r3
 80077f0:	dbdc      	blt.n	80077ac <envelope_xcorr_gen+0xb9c>
  }
  eml_find(b_x, (int *)&nx, tmp_size);
 80077f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077f4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80077f8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fca3 	bl	8009148 <eml_find>
  if (tmp_size[1] - 1 >= 0) {
 8007802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd0a      	ble.n	800781e <envelope_xcorr_gen+0xc0e>
    t3_data = (float)nx + window;
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007812:	ed97 7a02 	vldr	s14, [r7, #8]
 8007816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800781a:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
  }
  nx = xq->size[1];
 800781e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
  i = x->size[0] * x->size[1];
 8007826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800782e:	6852      	ldr	r2, [r2, #4]
 8007830:	3204      	adds	r2, #4
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	fb02 f303 	mul.w	r3, r2, r3
 8007838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  x->size[0] = 1;
 800783c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
  x->size[1] = xq->size[1];
 8007844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	3304      	adds	r3, #4
 800784e:	6852      	ldr	r2, [r2, #4]
 8007850:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(x, i);
 8007852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007854:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8007858:	4618      	mov	r0, r3
 800785a:	f001 f9ce 	bl	8008bfa <emxEnsureCapacity_real32_T>
  x_data = x->data;
 800785e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  for (k = 0; k < nx; k++) {
 8007866:	2300      	movs	r3, #0
 8007868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800786c:	e016      	b.n	800789c <envelope_xcorr_gen+0xc8c>
    x_data[k] = fabsf(xq_data[k]);
 800786e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007878:	4413      	add	r3, r2
 800787a:	edd3 7a00 	vldr	s15, [r3]
 800787e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007888:	4413      	add	r3, r2
 800788a:	eef0 7ae7 	vabs.f32	s15, s15
 800788e:	edc3 7a00 	vstr	s15, [r3]
  for (k = 0; k < nx; k++) {
 8007892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007896:	3301      	adds	r3, #1
 8007898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80078a2:	429a      	cmp	r2, r3
 80078a4:	dbe3      	blt.n	800786e <envelope_xcorr_gen+0xc5e>
  }
  i = b_x->size[0] * b_x->size[1];
 80078a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80078ae:	6852      	ldr	r2, [r2, #4]
 80078b0:	3204      	adds	r2, #4
 80078b2:	6812      	ldr	r2, [r2, #0]
 80078b4:	fb02 f303 	mul.w	r3, r2, r3
 80078b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  b_x->size[0] = 1;
 80078bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
  b_x->size[1] = x->size[1];
 80078c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	3304      	adds	r3, #4
 80078ce:	6852      	ldr	r2, [r2, #4]
 80078d0:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_boolean_T(b_x, i);
 80078d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078d4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f85b 	bl	8008994 <emxEnsureCapacity_boolean_T>
  b_x_data = b_x->data;
 80078de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  m = x->size[1];
 80078e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (i = 0; i < m; i++) {
 80078f0:	2300      	movs	r3, #0
 80078f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078f6:	e01c      	b.n	8007932 <envelope_xcorr_gen+0xd22>
    b_x_data[i] = (x_data[i] > thrshld);
 80078f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007902:	4413      	add	r3, r2
 8007904:	edd3 7a00 	vldr	s15, [r3]
 8007908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800790c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007910:	4413      	add	r3, r2
 8007912:	ed97 7a01 	vldr	s14, [r7, #4]
 8007916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	bf4c      	ite	mi
 8007920:	2201      	movmi	r2, #1
 8007922:	2200      	movpl	r2, #0
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < m; i++) {
 8007928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800792c:	3301      	adds	r3, #1
 800792e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800793a:	429a      	cmp	r2, r3
 800793c:	dbdc      	blt.n	80078f8 <envelope_xcorr_gen+0xce8>
  }
  emxFree_real32_T(&x);
 800793e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007942:	4618      	mov	r0, r3
 8007944:	f001 fa3e 	bl	8008dc4 <emxFree_real32_T>
  eml_find(b_x, (int *)&nx, tmp_size);
 8007948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800794a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800794e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007952:	4618      	mov	r0, r3
 8007954:	f001 fbf8 	bl	8009148 <eml_find>
  emxFree_boolean_T(&b_x);
 8007958:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f9b3 	bl	8008cc8 <emxFree_boolean_T>
  if (tmp_size[1] - 1 >= 0) {
 8007962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007964:	2b00      	cmp	r3, #0
 8007966:	dd0a      	ble.n	800797e <envelope_xcorr_gen+0xd6e>
    t4_data = (float)nx - t4_data;
 8007968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007972:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8007976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800797a:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
  }
  if (t1_data > b_ms1->size[1]) {
 800797e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	3304      	adds	r3, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	ee07 3a90 	vmov	s15, r3
 800798a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800798e:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8007992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799a:	dd05      	ble.n	80079a8 <envelope_xcorr_gen+0xd98>
    i = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    nx = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079a6:	e015      	b.n	80079d4 <envelope_xcorr_gen+0xdc4>
  } else {
    i = (int)t1_data - 1;
 80079a8:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80079ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079b0:	ee17 3a90 	vmov	r3, s15
 80079b4:	3b01      	subs	r3, #1
 80079b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    nx = (int)(float)b_ms1->size[1];
 80079ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	3304      	adds	r3, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079ce:	ee17 3a90 	vmov	r3, s15
 80079d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  m = nx - i;
 80079d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (nx = 0; nx < m; nx++) {
 80079e0:	2300      	movs	r3, #0
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e4:	e00d      	b.n	8007a02 <envelope_xcorr_gen+0xdf2>
    ms1_data[i + nx] = 0.0F;
 80079e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80079f4:	4413      	add	r3, r2
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
  for (nx = 0; nx < m; nx++) {
 80079fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fe:	3301      	adds	r3, #1
 8007a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	dcec      	bgt.n	80079e6 <envelope_xcorr_gen+0xdd6>
  }
  if (Ts < 1.0F) {
 8007a0c:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8007a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	d503      	bpl.n	8007a26 <envelope_xcorr_gen+0xe16>
    m = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a24:	e007      	b.n	8007a36 <envelope_xcorr_gen+0xe26>
  } else {
    m = (int)Ts;
 8007a26:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8007a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a2e:	ee17 3a90 	vmov	r3, s15
 8007a32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  }
  for (i = 0; i < m; i++) {
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a3c:	e00d      	b.n	8007a5a <envelope_xcorr_gen+0xe4a>
    ms1_data[i] = 0.0F;
 8007a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a48:	4413      	add	r3, r2
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < m; i++) {
 8007a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a54:	3301      	adds	r3, #1
 8007a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a62:	429a      	cmp	r2, r3
 8007a64:	dbeb      	blt.n	8007a3e <envelope_xcorr_gen+0xe2e>
  }
  if (t3_data > xq->size[1]) {
 8007a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a76:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8007a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a82:	dd05      	ble.n	8007a90 <envelope_xcorr_gen+0xe80>
    i = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    nx = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a8e:	e015      	b.n	8007abc <envelope_xcorr_gen+0xeac>
  } else {
    i = (int)t3_data - 1;
 8007a90:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8007a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a98:	ee17 3a90 	vmov	r3, s15
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    nx = (int)(float)xq->size[1];
 8007aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ab6:	ee17 3a90 	vmov	r3, s15
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  m = nx - i;
 8007abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (nx = 0; nx < m; nx++) {
 8007ac8:	2300      	movs	r3, #0
 8007aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007acc:	e00d      	b.n	8007aea <envelope_xcorr_gen+0xeda>
    xq_data[i + nx] = 0.0F;
 8007ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007adc:	4413      	add	r3, r2
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]
  for (nx = 0; nx < m; nx++) {
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007af0:	429a      	cmp	r2, r3
 8007af2:	dcec      	bgt.n	8007ace <envelope_xcorr_gen+0xebe>
  }
  if (t4_data < 1.0F) {
 8007af4:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8007af8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b04:	d503      	bpl.n	8007b0e <envelope_xcorr_gen+0xefe>
    m = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b0c:	e007      	b.n	8007b1e <envelope_xcorr_gen+0xf0e>
  } else {
    m = (int)t4_data;
 8007b0e:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8007b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b16:	ee17 3a90 	vmov	r3, s15
 8007b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  }
  for (i = 0; i < m; i++) {
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b24:	e00d      	b.n	8007b42 <envelope_xcorr_gen+0xf32>
    xq_data[i] = 0.0F;
 8007b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b30:	4413      	add	r3, r2
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
  for (i = 0; i < m; i++) {
 8007b38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	dbeb      	blt.n	8007b26 <envelope_xcorr_gen+0xf16>
  }
  maxval_tmp_tmp = (int)fmax(b_ms1->size[1], xq->size[1]);
 8007b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7f8 fcec 	bl	8000534 <__aeabi_i2d>
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	460d      	mov	r5, r1
 8007b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	3304      	adds	r3, #4
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7f8 fce3 	bl	8000534 <__aeabi_i2d>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	ec43 2b11 	vmov	d1, r2, r3
 8007b76:	ec45 4b10 	vmov	d0, r4, r5
 8007b7a:	f011 fdb8 	bl	80196ee <fmax>
 8007b7e:	ec53 2b10 	vmov	r2, r3, d0
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	f7f8 ffef 	bl	8000b68 <__aeabi_d2iz>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mxl = (int)fmin((double)maxval_tmp_tmp - 1.0, (double)maxval_tmp_tmp - 1.0);
 8007b90:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8007b94:	f7f8 fcce 	bl	8000534 <__aeabi_i2d>
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	4bd0      	ldr	r3, [pc, #832]	@ (8007ee0 <envelope_xcorr_gen+0x12d0>)
 8007b9e:	f7f8 fb7b 	bl	8000298 <__aeabi_dsub>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	ec43 2b18 	vmov	d8, r2, r3
 8007baa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8007bae:	f7f8 fcc1 	bl	8000534 <__aeabi_i2d>
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	4bca      	ldr	r3, [pc, #808]	@ (8007ee0 <envelope_xcorr_gen+0x12d0>)
 8007bb8:	f7f8 fb6e 	bl	8000298 <__aeabi_dsub>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	ec43 2b17 	vmov	d7, r2, r3
 8007bc4:	eeb0 1a47 	vmov.f32	s2, s14
 8007bc8:	eef0 1a67 	vmov.f32	s3, s15
 8007bcc:	eeb0 0a48 	vmov.f32	s0, s16
 8007bd0:	eef0 0a68 	vmov.f32	s1, s17
 8007bd4:	f011 fdb5 	bl	8019742 <fmin>
 8007bd8:	ec53 2b10 	vmov	r2, r3, d0
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4619      	mov	r1, r3
 8007be0:	f7f8 ffc2 	bl	8000b68 <__aeabi_d2iz>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  f_tmp = 2.0 * (double)maxval_tmp_tmp;
 8007bea:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8007bee:	f7f8 fca1 	bl	8000534 <__aeabi_i2d>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	f7f8 fb51 	bl	800029c <__adddf3>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  tdops = frexp(fabs(f_tmp - 1.0), &ceilLog2);
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	4bb6      	ldr	r3, [pc, #728]	@ (8007ee0 <envelope_xcorr_gen+0x12d0>)
 8007c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c0c:	f7f8 fb44 	bl	8000298 <__aeabi_dsub>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4690      	mov	r8, r2
 8007c16:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8007c1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007c1e:	4618      	mov	r0, r3
 8007c20:	ec49 8b10 	vmov	d0, r8, r9
 8007c24:	f00f fc68 	bl	80174f8 <frexp>
 8007c28:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
  if (tdops == 0.5) {
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	4bac      	ldr	r3, [pc, #688]	@ (8007ee4 <envelope_xcorr_gen+0x12d4>)
 8007c32:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c36:	f7f8 ff4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <envelope_xcorr_gen+0x1036>
    ceilLog2--;
 8007c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c42:	3b01      	subs	r3, #1
 8007c44:	633b      	str	r3, [r7, #48]	@ 0x30
  }
  m2 = rt_powd_snf(2.0, ceilLog2);
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7f8 fc73 	bl	8000534 <__aeabi_i2d>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	ec43 2b11 	vmov	d1, r2, r3
 8007c56:	ed9f 0ba0 	vldr	d0, [pc, #640]	@ 8007ed8 <envelope_xcorr_gen+0x12c8>
 8007c5a:	f7fe feb9 	bl	80069d0 <rt_powd_snf>
 8007c5e:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
  n = (int)fmin(b_ms1->size[1], xq->size[1]);
 8007c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	3304      	adds	r3, #4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7f8 fc62 	bl	8000534 <__aeabi_i2d>
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7f8 fc59 	bl	8000534 <__aeabi_i2d>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	ec43 2b11 	vmov	d1, r2, r3
 8007c8a:	ec45 4b10 	vmov	d0, r4, r5
 8007c8e:	f011 fd58 	bl	8019742 <fmin>
 8007c92:	ec53 2b10 	vmov	r2, r3, d0
 8007c96:	4610      	mov	r0, r2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f7f8 ff65 	bl	8000b68 <__aeabi_d2iz>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c0 = 2.0 * (double)n - 1.0;
 8007ca4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007ca8:	f7f8 fc44 	bl	8000534 <__aeabi_i2d>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	f7f8 faf4 	bl	800029c <__adddf3>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4619      	mov	r1, r3
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	4b87      	ldr	r3, [pc, #540]	@ (8007ee0 <envelope_xcorr_gen+0x12d0>)
 8007cc2:	f7f8 fae9 	bl	8000298 <__aeabi_dsub>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (mxl <= n - 1) {
 8007cce:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	f340 80b0 	ble.w	8007e3c <envelope_xcorr_gen+0x122c>
    tdops = (double)mxl * ((c0 - (double)mxl) - 1.0);
 8007cdc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8007ce0:	f7f8 fc28 	bl	8000534 <__aeabi_i2d>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8007cec:	f7f8 fc22 	bl	8000534 <__aeabi_i2d>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007cf8:	f7f8 face 	bl	8000298 <__aeabi_dsub>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4610      	mov	r0, r2
 8007d02:	4619      	mov	r1, r3
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	4b75      	ldr	r3, [pc, #468]	@ (8007ee0 <envelope_xcorr_gen+0x12d0>)
 8007d0a:	f7f8 fac5 	bl	8000298 <__aeabi_dsub>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4620      	mov	r0, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	f7f8 fc77 	bl	8000608 <__aeabi_dmul>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
    nx = maxval_tmp_tmp - n;
 8007d22:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (mxl <= nx) {
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8007d34:	429a      	cmp	r2, r3
 8007d36:	dc1a      	bgt.n	8007d6e <envelope_xcorr_gen+0x115e>
      tdops += c0 + (double)mxl * c0;
 8007d38:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8007d3c:	f7f8 fbfa 	bl	8000534 <__aeabi_i2d>
 8007d40:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007d44:	f7f8 fc60 	bl	8000608 <__aeabi_dmul>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4619      	mov	r1, r3
 8007d50:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007d54:	f7f8 faa2 	bl	800029c <__adddf3>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d60:	f7f8 fa9c 	bl	800029c <__adddf3>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
 8007d6c:	e13c      	b.n	8007fe8 <envelope_xcorr_gen+0x13d8>
    } else {
      tdops += (c0 + (double)nx * c0) +
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7f8 fbdf 	bl	8000534 <__aeabi_i2d>
 8007d76:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007d7a:	f7f8 fc45 	bl	8000608 <__aeabi_dmul>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007d8a:	f7f8 fa87 	bl	800029c <__adddf3>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4690      	mov	r8, r2
 8007d94:	4699      	mov	r9, r3
               ((double)mxl - (double)nx) *
 8007d96:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8007d9a:	f7f8 fbcb 	bl	8000534 <__aeabi_i2d>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	460d      	mov	r5, r1
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7f8 fbc5 	bl	8000534 <__aeabi_i2d>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 fa71 	bl	8000298 <__aeabi_dsub>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4692      	mov	sl, r2
 8007dbc:	469b      	mov	fp, r3
                   ((((double)maxval_tmp_tmp - (double)mxl) + (double)n) - 2.0);
 8007dbe:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8007dc2:	f7f8 fbb7 	bl	8000534 <__aeabi_i2d>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	460d      	mov	r5, r1
 8007dca:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8007dce:	f7f8 fbb1 	bl	8000534 <__aeabi_i2d>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7f8 fa5d 	bl	8000298 <__aeabi_dsub>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4614      	mov	r4, r2
 8007de4:	461d      	mov	r5, r3
 8007de6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007dea:	f7f8 fba3 	bl	8000534 <__aeabi_i2d>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 fa51 	bl	800029c <__adddf3>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4619      	mov	r1, r3
 8007e02:	f04f 0200 	mov.w	r2, #0
 8007e06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e0a:	f7f8 fa45 	bl	8000298 <__aeabi_dsub>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
               ((double)mxl - (double)nx) *
 8007e12:	4650      	mov	r0, sl
 8007e14:	4659      	mov	r1, fp
 8007e16:	f7f8 fbf7 	bl	8000608 <__aeabi_dmul>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
      tdops += (c0 + (double)nx * c0) +
 8007e1e:	4640      	mov	r0, r8
 8007e20:	4649      	mov	r1, r9
 8007e22:	f7f8 fa3b 	bl	800029c <__adddf3>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e2e:	f7f8 fa35 	bl	800029c <__adddf3>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
 8007e3a:	e0d5      	b.n	8007fe8 <envelope_xcorr_gen+0x13d8>
    }
  } else if (mxl <= maxval_tmp_tmp - 1) {
 8007e3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007e40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e44:	429a      	cmp	r2, r3
 8007e46:	f340 80ac 	ble.w	8007fa2 <envelope_xcorr_gen+0x1392>
    tdops = ((double)n - 1.0) * ((double)n - 1.0);
 8007e4a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007e4e:	f7f8 fb71 	bl	8000534 <__aeabi_i2d>
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	4b22      	ldr	r3, [pc, #136]	@ (8007ee0 <envelope_xcorr_gen+0x12d0>)
 8007e58:	f7f8 fa1e 	bl	8000298 <__aeabi_dsub>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4614      	mov	r4, r2
 8007e62:	461d      	mov	r5, r3
 8007e64:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007e68:	f7f8 fb64 	bl	8000534 <__aeabi_i2d>
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee0 <envelope_xcorr_gen+0x12d0>)
 8007e72:	f7f8 fa11 	bl	8000298 <__aeabi_dsub>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	f7f8 fbc3 	bl	8000608 <__aeabi_dmul>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
    nx = maxval_tmp_tmp - n;
 8007e8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
    if (mxl <= nx) {
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	dc23      	bgt.n	8007ee8 <envelope_xcorr_gen+0x12d8>
      tdops += c0 + (double)mxl * c0;
 8007ea0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8007ea4:	f7f8 fb46 	bl	8000534 <__aeabi_i2d>
 8007ea8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007eac:	f7f8 fbac 	bl	8000608 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007ebc:	f7f8 f9ee 	bl	800029c <__adddf3>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ec8:	f7f8 f9e8 	bl	800029c <__adddf3>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
 8007ed4:	e088      	b.n	8007fe8 <envelope_xcorr_gen+0x13d8>
 8007ed6:	bf00      	nop
 8007ed8:	00000000 	.word	0x00000000
 8007edc:	40000000 	.word	0x40000000
 8007ee0:	3ff00000 	.word	0x3ff00000
 8007ee4:	3fe00000 	.word	0x3fe00000
    } else {
      tdops += (c0 + (double)nx * c0) +
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7f8 fb22 	bl	8000534 <__aeabi_i2d>
 8007ef0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007ef4:	f7f8 fb88 	bl	8000608 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4610      	mov	r0, r2
 8007efe:	4619      	mov	r1, r3
 8007f00:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007f04:	f7f8 f9ca 	bl	800029c <__adddf3>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4690      	mov	r8, r2
 8007f0e:	4699      	mov	r9, r3
               ((double)mxl - (double)nx) *
 8007f10:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8007f14:	f7f8 fb0e 	bl	8000534 <__aeabi_i2d>
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f8 fb08 	bl	8000534 <__aeabi_i2d>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f7f8 f9b4 	bl	8000298 <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4692      	mov	sl, r2
 8007f36:	469b      	mov	fp, r3
                   (((double)(maxval_tmp_tmp - mxl) + (double)n) - 2.0);
 8007f38:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007f3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f8 faf6 	bl	8000534 <__aeabi_i2d>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007f50:	f7f8 faf0 	bl	8000534 <__aeabi_i2d>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4620      	mov	r0, r4
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	f7f8 f99e 	bl	800029c <__adddf3>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4610      	mov	r0, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f70:	f7f8 f992 	bl	8000298 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
               ((double)mxl - (double)nx) *
 8007f78:	4650      	mov	r0, sl
 8007f7a:	4659      	mov	r1, fp
 8007f7c:	f7f8 fb44 	bl	8000608 <__aeabi_dmul>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
      tdops += (c0 + (double)nx * c0) +
 8007f84:	4640      	mov	r0, r8
 8007f86:	4649      	mov	r1, r9
 8007f88:	f7f8 f988 	bl	800029c <__adddf3>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007f94:	f7f8 f982 	bl	800029c <__adddf3>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
 8007fa0:	e022      	b.n	8007fe8 <envelope_xcorr_gen+0x13d8>
    }
  } else {
    tdops = f_tmp * (double)n -
 8007fa2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007fa6:	f7f8 fac5 	bl	8000534 <__aeabi_i2d>
 8007faa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8007fae:	f7f8 fb2b 	bl	8000608 <__aeabi_dmul>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4614      	mov	r4, r2
 8007fb8:	461d      	mov	r5, r3
            ((double)((unsigned int)maxval_tmp_tmp + (unsigned int)n) - 1.0);
 8007fba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fc2:	4413      	add	r3, r2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7f8 faa5 	bl	8000514 <__aeabi_ui2d>
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	4bbc      	ldr	r3, [pc, #752]	@ (80082c0 <envelope_xcorr_gen+0x16b0>)
 8007fd0:	f7f8 f962 	bl	8000298 <__aeabi_dsub>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
    tdops = f_tmp * (double)n -
 8007fd8:	4620      	mov	r0, r4
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f7f8 f95c 	bl	8000298 <__aeabi_dsub>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
  }
  emxInit_real32_T(&c1, 1);
 8007fe8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007fec:	2101      	movs	r1, #1
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 ffab 	bl	8008f4a <emxInit_real32_T>
  emxInit_real32_T(&b_c1, 1);
 8007ff4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 ffa5 	bl	8008f4a <emxInit_real32_T>
  if (tdops < m2 * (15.0 * (double)ceilLog2 + 6.0)) {
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	4618      	mov	r0, r3
 8008004:	f7f8 fa96 	bl	8000534 <__aeabi_i2d>
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	4bad      	ldr	r3, [pc, #692]	@ (80082c4 <envelope_xcorr_gen+0x16b4>)
 800800e:	f7f8 fafb 	bl	8000608 <__aeabi_dmul>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4610      	mov	r0, r2
 8008018:	4619      	mov	r1, r3
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	4baa      	ldr	r3, [pc, #680]	@ (80082c8 <envelope_xcorr_gen+0x16b8>)
 8008020:	f7f8 f93c 	bl	800029c <__adddf3>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4610      	mov	r0, r2
 800802a:	4619      	mov	r1, r3
 800802c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8008030:	f7f8 faea 	bl	8000608 <__aeabi_dmul>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800803c:	f7f8 fd56 	bl	8000aec <__aeabi_dcmplt>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8142 	beq.w	80082cc <envelope_xcorr_gen+0x16bc>
    m = b_ms1->size[1];
 8008048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    n = xq->size[1];
 8008052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    mxl = (int)fmin(mxl, (double)maxval_tmp_tmp - 1.0);
 800805c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8008060:	f7f8 fa68 	bl	8000534 <__aeabi_i2d>
 8008064:	4604      	mov	r4, r0
 8008066:	460d      	mov	r5, r1
 8008068:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800806c:	f7f8 fa62 	bl	8000534 <__aeabi_i2d>
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	4b92      	ldr	r3, [pc, #584]	@ (80082c0 <envelope_xcorr_gen+0x16b0>)
 8008076:	f7f8 f90f 	bl	8000298 <__aeabi_dsub>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	ec43 2b17 	vmov	d7, r2, r3
 8008082:	eeb0 1a47 	vmov.f32	s2, s14
 8008086:	eef0 1a67 	vmov.f32	s3, s15
 800808a:	ec45 4b10 	vmov	d0, r4, r5
 800808e:	f011 fb58 	bl	8019742 <fmin>
 8008092:	ec53 2b10 	vmov	r2, r3, d0
 8008096:	4610      	mov	r0, r2
 8008098:	4619      	mov	r1, r3
 800809a:	f7f8 fd65 	bl	8000b68 <__aeabi_d2iz>
 800809e:	4603      	mov	r3, r0
 80080a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    nx = (int)(2.0 * (double)mxl + 1.0);
 80080a4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80080a8:	f7f8 fa44 	bl	8000534 <__aeabi_i2d>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	f7f8 f8f4 	bl	800029c <__adddf3>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4610      	mov	r0, r2
 80080ba:	4619      	mov	r1, r3
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	4b7f      	ldr	r3, [pc, #508]	@ (80082c0 <envelope_xcorr_gen+0x16b0>)
 80080c2:	f7f8 f8eb 	bl	800029c <__adddf3>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4610      	mov	r0, r2
 80080cc:	4619      	mov	r1, r3
 80080ce:	f7f8 fd4b 	bl	8000b68 <__aeabi_d2iz>
 80080d2:	4603      	mov	r3, r0
 80080d4:	627b      	str	r3, [r7, #36]	@ 0x24
    i = c1->size[0];
 80080d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    c1->size[0] = nx;
 80080e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080e6:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(c1, i);
 80080e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080ea:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fd83 	bl	8008bfa <emxEnsureCapacity_real32_T>
    c1_data = c1->data;
 80080f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    for (i = 0; i < nx; i++) {
 80080fc:	2300      	movs	r3, #0
 80080fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008102:	e00d      	b.n	8008120 <envelope_xcorr_gen+0x1510>
      c1_data[i] = 0.0F;
 8008104:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800810e:	4413      	add	r3, r2
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nx; i++) {
 8008116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800811a:	3301      	adds	r3, #1
 800811c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008126:	429a      	cmp	r2, r3
 8008128:	dbec      	blt.n	8008104 <envelope_xcorr_gen+0x14f4>
    }
    for (k = 0; k <= mxl; k++) {
 800812a:	2300      	movs	r3, #0
 800812c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008130:	e057      	b.n	80081e2 <envelope_xcorr_gen+0x15d2>
      t4_data = 0.0F;
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      i = (int)fmin(m - k, n);
 800813a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800813e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	4618      	mov	r0, r3
 8008146:	f7f8 f9f5 	bl	8000534 <__aeabi_i2d>
 800814a:	4604      	mov	r4, r0
 800814c:	460d      	mov	r5, r1
 800814e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8008152:	f7f8 f9ef 	bl	8000534 <__aeabi_i2d>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	ec43 2b11 	vmov	d1, r2, r3
 800815e:	ec45 4b10 	vmov	d0, r4, r5
 8008162:	f011 faee 	bl	8019742 <fmin>
 8008166:	ec53 2b10 	vmov	r2, r3, d0
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	f7f8 fcfb 	bl	8000b68 <__aeabi_d2iz>
 8008172:	4603      	mov	r3, r0
 8008174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      for (nx = 0; nx < i; nx++) {
 8008178:	2300      	movs	r3, #0
 800817a:	627b      	str	r3, [r7, #36]	@ 0x24
 800817c:	e01b      	b.n	80081b6 <envelope_xcorr_gen+0x15a6>
        t4_data += xq_data[nx] * ms1_data[k + nx];
 800817e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008186:	4413      	add	r3, r2
 8008188:	ed93 7a00 	vldr	s14, [r3]
 800818c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800818e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800819a:	4413      	add	r3, r2
 800819c:	edd3 7a00 	vldr	s15, [r3]
 80081a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a4:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 80081a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081ac:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
      for (nx = 0; nx < i; nx++) {
 80081b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b2:	3301      	adds	r3, #1
 80081b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80081bc:	429a      	cmp	r2, r3
 80081be:	dcde      	bgt.n	800817e <envelope_xcorr_gen+0x156e>
      }
      c1_data[mxl + k] = t4_data;
 80081c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80081c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80081d0:	4413      	add	r3, r2
 80081d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081d6:	601a      	str	r2, [r3, #0]
    for (k = 0; k <= mxl; k++) {
 80081d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081dc:	3301      	adds	r3, #1
 80081de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80081e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081ea:	429a      	cmp	r2, r3
 80081ec:	dda1      	ble.n	8008132 <envelope_xcorr_gen+0x1522>
    }
    for (k = 0; k < mxl; k++) {
 80081ee:	2300      	movs	r3, #0
 80081f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081f4:	e05c      	b.n	80082b0 <envelope_xcorr_gen+0x16a0>
      t4_data = 0.0F;
 80081f6:	f04f 0300 	mov.w	r3, #0
 80081fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      i = (int)fmin(m, (n - k) - 1);
 80081fe:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8008202:	f7f8 f997 	bl	8000534 <__aeabi_i2d>
 8008206:	4604      	mov	r4, r0
 8008208:	460d      	mov	r5, r1
 800820a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800820e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	4618      	mov	r0, r3
 8008218:	f7f8 f98c 	bl	8000534 <__aeabi_i2d>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	ec43 2b11 	vmov	d1, r2, r3
 8008224:	ec45 4b10 	vmov	d0, r4, r5
 8008228:	f011 fa8b 	bl	8019742 <fmin>
 800822c:	ec53 2b10 	vmov	r2, r3, d0
 8008230:	4610      	mov	r0, r2
 8008232:	4619      	mov	r1, r3
 8008234:	f7f8 fc98 	bl	8000b68 <__aeabi_d2iz>
 8008238:	4603      	mov	r3, r0
 800823a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      for (nx = 0; nx < i; nx++) {
 800823e:	2300      	movs	r3, #0
 8008240:	627b      	str	r3, [r7, #36]	@ 0x24
 8008242:	e01c      	b.n	800827e <envelope_xcorr_gen+0x166e>
        t4_data += xq_data[(k + nx) + 1] * ms1_data[nx];
 8008244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800824a:	4413      	add	r3, r2
 800824c:	3301      	adds	r3, #1
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008254:	4413      	add	r3, r2
 8008256:	ed93 7a00 	vldr	s14, [r3]
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008262:	4413      	add	r3, r2
 8008264:	edd3 7a00 	vldr	s15, [r3]
 8008268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826c:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8008270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008274:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
      for (nx = 0; nx < i; nx++) {
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	3301      	adds	r3, #1
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008284:	429a      	cmp	r2, r3
 8008286:	dcdd      	bgt.n	8008244 <envelope_xcorr_gen+0x1634>
      }
      c1_data[(mxl - k) - 1] = t4_data;
 8008288:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800828c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008296:	3b01      	subs	r3, #1
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800829e:	4413      	add	r3, r2
 80082a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082a4:	601a      	str	r2, [r3, #0]
    for (k = 0; k < mxl; k++) {
 80082a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082aa:	3301      	adds	r3, #1
 80082ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082b8:	429a      	cmp	r2, r3
 80082ba:	db9c      	blt.n	80081f6 <envelope_xcorr_gen+0x15e6>
 80082bc:	e1eb      	b.n	8008696 <envelope_xcorr_gen+0x1a86>
 80082be:	bf00      	nop
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	402e0000 	.word	0x402e0000
 80082c8:	40180000 	.word	0x40180000
    }
  } else {
    nx = b_ms1->size[1];
 80082cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	627b      	str	r3, [r7, #36]	@ 0x24
    c_ms1 = *b_ms1;
 80082d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d6:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80082da:	461d      	mov	r5, r3
 80082dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	6023      	str	r3, [r4, #0]
    d_ms1 = nx;
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    c_ms1.size = &d_ms1;
 80082e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80082ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    c_ms1.numDimensions = 1;
 80082ee:	2301      	movs	r3, #1
 80082f0:	663b      	str	r3, [r7, #96]	@ 0x60
    emxInit_creal32_T(&X);
 80082f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fdc4 	bl	8008e84 <emxInit_creal32_T>
    fft(&c_ms1, m2, X);
 80082fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80082fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008302:	4611      	mov	r1, r2
 8008304:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fe58 	bl	8008fbe <fft>
    X_data = X->data;
 800830e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	67fb      	str	r3, [r7, #124]	@ 0x7c
    nx = xq->size[1];
 8008314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
    c_ms1 = *xq;
 800831c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800831e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8008322:	461d      	mov	r5, r3
 8008324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	6023      	str	r3, [r4, #0]
    e_ms1 = nx;
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	62bb      	str	r3, [r7, #40]	@ 0x28
    c_ms1.size = &e_ms1;
 8008330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008334:	65bb      	str	r3, [r7, #88]	@ 0x58
    c_ms1.numDimensions = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	663b      	str	r3, [r7, #96]	@ 0x60
    emxInit_creal32_T(&Y);
 800833a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fda0 	bl	8008e84 <emxInit_creal32_T>
    fft(&c_ms1, m2, Y);
 8008344:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008346:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800834a:	4611      	mov	r1, r2
 800834c:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fe34 	bl	8008fbe <fft>
    i = Y->size[0];
 8008356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    Y->size[0] = X->size[0];
 8008360:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	6812      	ldr	r2, [r2, #0]
 800836a:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_creal32_T(Y, i);
 800836c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800836e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fb73 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    Y_data = Y->data;
 8008378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	67bb      	str	r3, [r7, #120]	@ 0x78
    m = X->size[0];
 800837e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (i = 0; i < m; i++) {
 8008388:	2300      	movs	r3, #0
 800838a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800838e:	e051      	b.n	8008434 <envelope_xcorr_gen+0x1824>
      t1_data = Y_data[i].re;
 8008390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008398:	4413      	add	r3, r2
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      t4_data = -Y_data[i].im;
 80083a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80083a8:	4413      	add	r3, r2
 80083aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80083ae:	eef1 7a67 	vneg.f32	s15, s15
 80083b2:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
      t3_data = X_data[i].re;
 80083b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80083be:	4413      	add	r3, r2
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      Ts = X_data[i].im;
 80083c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80083ce:	4413      	add	r3, r2
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
      Y_data[i].re = t3_data * t1_data - Ts * t4_data;
 80083d6:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 80083da:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80083de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083e2:	edd7 6a37 	vldr	s13, [r7, #220]	@ 0xdc
 80083e6:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80083ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80083f6:	4413      	add	r3, r2
 80083f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083fc:	edc3 7a00 	vstr	s15, [r3]
      Y_data[i].im = t3_data * t4_data + Ts * t1_data;
 8008400:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8008404:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8008408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800840c:	edd7 6a37 	vldr	s13, [r7, #220]	@ 0xdc
 8008410:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8008414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008420:	4413      	add	r3, r2
 8008422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008426:	edc3 7a01 	vstr	s15, [r3, #4]
    for (i = 0; i < m; i++) {
 800842a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800842e:	3301      	adds	r3, #1
 8008430:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008434:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800843c:	429a      	cmp	r2, r3
 800843e:	dba7      	blt.n	8008390 <envelope_xcorr_gen+0x1780>
    }
    ifft(Y, X);
 8008440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008442:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fedc 	bl	8009204 <ifft>
    X_data = X->data;
 800844c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	67fb      	str	r3, [r7, #124]	@ 0x7c
    emxFree_creal32_T(&Y);
 8008452:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fc60 	bl	8008d1c <emxFree_creal32_T>
    i = b_c1->size[0];
 800845c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    b_c1->size[0] = X->size[0];
 8008466:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(b_c1, i);
 8008472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008474:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fbbe 	bl	8008bfa <emxEnsureCapacity_real32_T>
    x_data = b_c1->data;
 800847e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    m = X->size[0];
 8008486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (i = 0; i < m; i++) {
 8008490:	2300      	movs	r3, #0
 8008492:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008496:	e011      	b.n	80084bc <envelope_xcorr_gen+0x18ac>
      x_data[i] = X_data[i].re;
 8008498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80084a0:	441a      	add	r2, r3
 80084a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80084ac:	440b      	add	r3, r1
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < m; i++) {
 80084b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084b6:	3301      	adds	r3, #1
 80084b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80084c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084c4:	429a      	cmp	r2, r3
 80084c6:	dbe7      	blt.n	8008498 <envelope_xcorr_gen+0x1888>
    }
    emxFree_creal32_T(&X);
 80084c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fc25 	bl	8008d1c <emxFree_creal32_T>
    emxInit_int32_T(&r1, 2);
 80084d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80084d6:	2102      	movs	r1, #2
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fcfc 	bl	8008ed6 <emxInit_int32_T>
    r2 = r1->data;
 80084de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (mxl < 1) {
 80084e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dc09      	bgt.n	8008502 <envelope_xcorr_gen+0x18f2>
      r1->size[0] = 1;
 80084ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	601a      	str	r2, [r3, #0]
      r1->size[1] = 0;
 80084f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	3304      	adds	r3, #4
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	e037      	b.n	8008572 <envelope_xcorr_gen+0x1962>
    } else {
      i = r1->size[0] * r1->size[1];
 8008502:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800850a:	6852      	ldr	r2, [r2, #4]
 800850c:	3204      	adds	r2, #4
 800850e:	6812      	ldr	r2, [r2, #0]
 8008510:	fb02 f303 	mul.w	r3, r2, r3
 8008514:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      r1->size[0] = 1;
 8008518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	601a      	str	r2, [r3, #0]
      r1->size[1] = mxl;
 8008520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	3304      	adds	r3, #4
 8008526:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800852a:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_int32_T(r1, i);
 800852c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800852e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fafa 	bl	8008b2c <emxEnsureCapacity_int32_T>
      r2 = r1->data;
 8008538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      for (i = 0; i < mxl; i++) {
 8008540:	2300      	movs	r3, #0
 8008542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008546:	e00e      	b.n	8008566 <envelope_xcorr_gen+0x1956>
        r2[i] = i + 1;
 8008548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008552:	4413      	add	r3, r2
 8008554:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008558:	3201      	adds	r2, #1
 800855a:	601a      	str	r2, [r3, #0]
      for (i = 0; i < mxl; i++) {
 800855c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008560:	3301      	adds	r3, #1
 8008562:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008566:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800856a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800856e:	429a      	cmp	r2, r3
 8008570:	dbea      	blt.n	8008548 <envelope_xcorr_gen+0x1938>
      }
    }
    if (mxl + 1 < 1) {
 8008572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008576:	2b00      	cmp	r3, #0
 8008578:	da04      	bge.n	8008584 <envelope_xcorr_gen+0x1974>
      m = -1;
 800857a:	f04f 33ff 	mov.w	r3, #4294967295
 800857e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008582:	e003      	b.n	800858c <envelope_xcorr_gen+0x197c>
    } else {
      m = mxl;
 8008584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008588:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    }
    m2 -= (double)mxl;
 800858c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8008590:	f7f7 ffd0 	bl	8000534 <__aeabi_i2d>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800859c:	f7f7 fe7c 	bl	8000298 <__aeabi_dsub>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    i = c1->size[0];
 80085a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    c1->size[0] = (r1->size[1] + m) + 1;
 80085b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085be:	441a      	add	r2, r3
 80085c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	3201      	adds	r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(c1, i);
 80085c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ca:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fb13 	bl	8008bfa <emxEnsureCapacity_real32_T>
    c1_data = c1->data;
 80085d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    nx = r1->size[1];
 80085dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0; i < nx; i++) {
 80085e4:	2300      	movs	r3, #0
 80085e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085ea:	e028      	b.n	800863e <envelope_xcorr_gen+0x1a2e>
      c1_data[i] = x_data[(int)(m2 + (double)r2[i]) - 1];
 80085ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80085f6:	4413      	add	r3, r2
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f7 ff9a 	bl	8000534 <__aeabi_i2d>
 8008600:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8008604:	f7f7 fe4a 	bl	800029c <__adddf3>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4610      	mov	r0, r2
 800860e:	4619      	mov	r1, r3
 8008610:	f7f8 faaa 	bl	8000b68 <__aeabi_d2iz>
 8008614:	4603      	mov	r3, r0
 8008616:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800861a:	3b01      	subs	r3, #1
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008622:	441a      	add	r2, r3
 8008624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 800862e:	440b      	add	r3, r1
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nx; i++) {
 8008634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008638:	3301      	adds	r3, #1
 800863a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800863e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008640:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008644:	429a      	cmp	r2, r3
 8008646:	dbd1      	blt.n	80085ec <envelope_xcorr_gen+0x19dc>
    }
    for (i = 0; i <= m; i++) {
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800864e:	e017      	b.n	8008680 <envelope_xcorr_gen+0x1a70>
      c1_data[i + r1->size[1]] = x_data[i];
 8008650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800865a:	441a      	add	r2, r3
 800865c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	3304      	adds	r3, #4
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008668:	440b      	add	r3, r1
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8008670:	440b      	add	r3, r1
 8008672:	6812      	ldr	r2, [r2, #0]
 8008674:	601a      	str	r2, [r3, #0]
    for (i = 0; i <= m; i++) {
 8008676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800867a:	3301      	adds	r3, #1
 800867c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008680:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008688:	429a      	cmp	r2, r3
 800868a:	dde1      	ble.n	8008650 <envelope_xcorr_gen+0x1a40>
    }
    emxFree_int32_T(&r1);
 800868c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fb6d 	bl	8008d70 <emxFree_int32_T>
  }
  emxFree_real32_T(&b_ms1);
 8008696:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800869a:	4618      	mov	r0, r3
 800869c:	f000 fb92 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&xq);
 80086a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fb8d 	bl	8008dc4 <emxFree_real32_T>
  m = (int)(2.0 * ((double)maxval_tmp_tmp - 1.0) + 1.0);
 80086aa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80086ae:	f7f7 ff41 	bl	8000534 <__aeabi_i2d>
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	4bb6      	ldr	r3, [pc, #728]	@ (8008990 <envelope_xcorr_gen+0x1d80>)
 80086b8:	f7f7 fdee 	bl	8000298 <__aeabi_dsub>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4610      	mov	r0, r2
 80086c2:	4619      	mov	r1, r3
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	f7f7 fde8 	bl	800029c <__adddf3>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4610      	mov	r0, r2
 80086d2:	4619      	mov	r1, r3
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	4bad      	ldr	r3, [pc, #692]	@ (8008990 <envelope_xcorr_gen+0x1d80>)
 80086da:	f7f7 fddf 	bl	800029c <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	f7f8 fa3f 	bl	8000b68 <__aeabi_d2iz>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  i = b_c1->size[0];
 80086f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  b_c1->size[0] = m;
 80086fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008702:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(b_c1, i);
 8008704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008706:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fa75 	bl	8008bfa <emxEnsureCapacity_real32_T>
  x_data = b_c1->data;
 8008710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  for (i = 0; i < m; i++) {
 8008718:	2300      	movs	r3, #0
 800871a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800871e:	e00d      	b.n	800873c <envelope_xcorr_gen+0x1b2c>
    x_data[i] = 0.0F;
 8008720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800872a:	4413      	add	r3, r2
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
  for (i = 0; i < m; i++) {
 8008732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008736:	3301      	adds	r3, #1
 8008738:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800873c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008744:	429a      	cmp	r2, r3
 8008746:	dbeb      	blt.n	8008720 <envelope_xcorr_gen+0x1b10>
  }
  m = c1->size[0];
 8008748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  for (i = 0; i < m; i++) {
 8008752:	2300      	movs	r3, #0
 8008754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008758:	e012      	b.n	8008780 <envelope_xcorr_gen+0x1b70>
    x_data[i] = c1_data[i];
 800875a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8008764:	441a      	add	r2, r3
 8008766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8008770:	440b      	add	r3, r1
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	601a      	str	r2, [r3, #0]
  for (i = 0; i < m; i++) {
 8008776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800877a:	3301      	adds	r3, #1
 800877c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008780:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008788:	429a      	cmp	r2, r3
 800878a:	dbe6      	blt.n	800875a <envelope_xcorr_gen+0x1b4a>
  }
  emxFree_real32_T(&c1);
 800878c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fb17 	bl	8008dc4 <emxFree_real32_T>
  nx = b_c1->size[0];
 8008796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (b_c1->size[0] <= 2) {
 800879e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	dc3f      	bgt.n	8008828 <envelope_xcorr_gen+0x1c18>
    if (b_c1->size[0] == 1) {
 80087a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d103      	bne.n	80087ba <envelope_xcorr_gen+0x1baa>
      m = 1;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087b8:	e0c5      	b.n	8008946 <envelope_xcorr_gen+0x1d36>
    } else {
      t3_data = x_data[b_c1->size[0] - 1];
 80087ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80087c4:	3b01      	subs	r3, #1
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087cc:	4413      	add	r3, r2
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((x_data[0] < t3_data) ||
 80087d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087d8:	edd3 7a00 	vldr	s15, [r3]
 80087dc:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 80087e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e8:	dc14      	bgt.n	8008814 <envelope_xcorr_gen+0x1c04>
          (rtIsNaNF(x_data[0]) && (!rtIsNaNF(t3_data)))) {
 80087ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087ee:	edd3 7a00 	vldr	s15, [r3]
 80087f2:	eeb0 0a67 	vmov.f32	s0, s15
 80087f6:	f003 fab8 	bl	800bd6a <rtIsNaNF>
 80087fa:	4603      	mov	r3, r0
      if ((x_data[0] < t3_data) ||
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00f      	beq.n	8008820 <envelope_xcorr_gen+0x1c10>
          (rtIsNaNF(x_data[0]) && (!rtIsNaNF(t3_data)))) {
 8008800:	ed97 0a35 	vldr	s0, [r7, #212]	@ 0xd4
 8008804:	f003 fab1 	bl	800bd6a <rtIsNaNF>
 8008808:	4603      	mov	r3, r0
 800880a:	f083 0301 	eor.w	r3, r3, #1
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <envelope_xcorr_gen+0x1c10>
        m = b_c1->size[0];
 8008814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800881e:	e092      	b.n	8008946 <envelope_xcorr_gen+0x1d36>
      } else {
        m = 1;
 8008820:	2301      	movs	r3, #1
 8008822:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008826:	e08e      	b.n	8008946 <envelope_xcorr_gen+0x1d36>
      }
    }
  } else {
    if (!rtIsNaNF(x_data[0])) {
 8008828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800882c:	edd3 7a00 	vldr	s15, [r3]
 8008830:	eeb0 0a67 	vmov.f32	s0, s15
 8008834:	f003 fa99 	bl	800bd6a <rtIsNaNF>
 8008838:	4603      	mov	r3, r0
 800883a:	f083 0301 	eor.w	r3, r3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <envelope_xcorr_gen+0x1c3c>
      m = 1;
 8008844:	2301      	movs	r3, #1
 8008846:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800884a:	e037      	b.n	80088bc <envelope_xcorr_gen+0x1cac>
    } else {
      bool exitg1;
      m = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      k = 2;
 8008852:	2302      	movs	r3, #2
 8008854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      exitg1 = false;
 8008858:	2300      	movs	r3, #0
 800885a:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
      while ((!exitg1) && (k <= nx)) {
 800885e:	e021      	b.n	80088a4 <envelope_xcorr_gen+0x1c94>
        if (!rtIsNaNF(x_data[k - 1])) {
 8008860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008864:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008868:	3b01      	subs	r3, #1
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008870:	4413      	add	r3, r2
 8008872:	edd3 7a00 	vldr	s15, [r3]
 8008876:	eeb0 0a67 	vmov.f32	s0, s15
 800887a:	f003 fa76 	bl	800bd6a <rtIsNaNF>
 800887e:	4603      	mov	r3, r0
 8008880:	f083 0301 	eor.w	r3, r3, #1
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <envelope_xcorr_gen+0x1c8a>
          m = k;
 800888a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800888e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
          exitg1 = true;
 8008892:	2301      	movs	r3, #1
 8008894:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
 8008898:	e004      	b.n	80088a4 <envelope_xcorr_gen+0x1c94>
        } else {
          k++;
 800889a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800889e:	3301      	adds	r3, #1
 80088a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      while ((!exitg1) && (k <= nx)) {
 80088a4:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80088a8:	f083 0301 	eor.w	r3, r3, #1
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <envelope_xcorr_gen+0x1cac>
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80088b8:	429a      	cmp	r2, r3
 80088ba:	ddd1      	ble.n	8008860 <envelope_xcorr_gen+0x1c50>
        }
      }
    }
    if (m == 0) {
 80088bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d103      	bne.n	80088cc <envelope_xcorr_gen+0x1cbc>
      m = 1;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088ca:	e03c      	b.n	8008946 <envelope_xcorr_gen+0x1d36>
    } else {
      t4_data = x_data[m - 1];
 80088cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088d4:	3b01      	subs	r3, #1
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088dc:	4413      	add	r3, r2
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      i = m + 1;
 80088e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088e8:	3301      	adds	r3, #1
 80088ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      for (k = i; k <= nx; k++) {
 80088ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088f6:	e021      	b.n	800893c <envelope_xcorr_gen+0x1d2c>
        t3_data = x_data[k - 1];
 80088f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80088fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008900:	3b01      	subs	r3, #1
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008908:	4413      	add	r3, r2
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        if (t4_data < t3_data) {
 8008910:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8008914:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8008918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800891c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008920:	d507      	bpl.n	8008932 <envelope_xcorr_gen+0x1d22>
          t4_data = t3_data;
 8008922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008926:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          m = k;
 800892a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800892e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      for (k = i; k <= nx; k++) {
 8008932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008936:	3301      	adds	r3, #1
 8008938:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008942:	429a      	cmp	r2, r3
 8008944:	ddd8      	ble.n	80088f8 <envelope_xcorr_gen+0x1ce8>
        }
      }
    }
  }
  emxFree_real32_T(&b_c1);
 8008946:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fa3a 	bl	8008dc4 <emxFree_real32_T>
  return ((float)m - N * 4.0F) / (fs * 4.0F);
 8008950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008954:	ee07 3a90 	vmov	s15, r3
 8008958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800895c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008960:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8008964:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800896c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008970:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8008974:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008978:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800897c:	eef0 7a66 	vmov.f32	s15, s13
}
 8008980:	eeb0 0a67 	vmov.f32	s0, s15
 8008984:	37e8      	adds	r7, #232	@ 0xe8
 8008986:	46bd      	mov	sp, r7
 8008988:	ecbd 8b02 	vpop	{d8}
 800898c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008990:	3ff00000 	.word	0x3ff00000

08008994 <emxEnsureCapacity_boolean_T>:
 * Arguments    : emxArray_boolean_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_boolean_T(emxArray_boolean_T *emxArray, int oldNumel)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	da01      	bge.n	80089a8 <emxEnsureCapacity_boolean_T+0x14>
    oldNumel = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 80089a8:	2301      	movs	r3, #1
 80089aa:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 80089ac:	2300      	movs	r3, #0
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	e00c      	b.n	80089cc <emxEnsureCapacity_boolean_T+0x38>
    newNumel *= emxArray->size[i];
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	fb02 f303 	mul.w	r3, r2, r3
 80089c4:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	3301      	adds	r3, #1
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	dbed      	blt.n	80089b2 <emxEnsureCapacity_boolean_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	429a      	cmp	r2, r3
 80089de:	dd3a      	ble.n	8008a56 <emxEnsureCapacity_boolean_T+0xc2>
    i = emxArray->allocatedSize;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b0f      	cmp	r3, #15
 80089ea:	dc0d      	bgt.n	8008a08 <emxEnsureCapacity_boolean_T+0x74>
      i = 16;
 80089ec:	2310      	movs	r3, #16
 80089ee:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 80089f0:	e00a      	b.n	8008a08 <emxEnsureCapacity_boolean_T+0x74>
      if (i > 1073741823) {
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f8:	db03      	blt.n	8008a02 <emxEnsureCapacity_boolean_T+0x6e>
        i = MAX_int32_T;
 80089fa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e002      	b.n	8008a08 <emxEnsureCapacity_boolean_T+0x74>
      } else {
        i *= 2;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	dbf0      	blt.n	80089f2 <emxEnsureCapacity_boolean_T+0x5e>
      }
    }
    newData = malloc((unsigned int)i * sizeof(bool));
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f00d fe96 	bl	8016744 <malloc>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00f      	beq.n	8008a44 <emxEnsureCapacity_boolean_T+0xb0>
      memcpy(newData, emxArray->data, sizeof(bool) * (unsigned int)oldNumel);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f00e fd54 	bl	80174da <memcpy>
      if (emxArray->canFreeData) {
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7c1b      	ldrb	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <emxEnsureCapacity_boolean_T+0xb0>
        free(emxArray->data);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f00d fe88 	bl	8016754 <free>
      }
    }
    emxArray->data = (bool *)newData;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	741a      	strb	r2, [r3, #16]
  }
}
 8008a56:	bf00      	nop
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <emxEnsureCapacity_creal32_T>:
 * Arguments    : emxArray_creal32_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_creal32_T(emxArray_creal32_T *emxArray, int oldNumel)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b086      	sub	sp, #24
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da01      	bge.n	8008a72 <emxEnsureCapacity_creal32_T+0x14>
    oldNumel = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8008a72:	2301      	movs	r3, #1
 8008a74:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008a76:	2300      	movs	r3, #0
 8008a78:	617b      	str	r3, [r7, #20]
 8008a7a:	e00c      	b.n	8008a96 <emxEnsureCapacity_creal32_T+0x38>
    newNumel *= emxArray->size[i];
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	fb02 f303 	mul.w	r3, r2, r3
 8008a8e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	3301      	adds	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	dbed      	blt.n	8008a7c <emxEnsureCapacity_creal32_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	dd3c      	ble.n	8008b24 <emxEnsureCapacity_creal32_T+0xc6>
    i = emxArray->allocatedSize;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2b0f      	cmp	r3, #15
 8008ab4:	dc0d      	bgt.n	8008ad2 <emxEnsureCapacity_creal32_T+0x74>
      i = 16;
 8008ab6:	2310      	movs	r3, #16
 8008ab8:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8008aba:	e00a      	b.n	8008ad2 <emxEnsureCapacity_creal32_T+0x74>
      if (i > 1073741823) {
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ac2:	db03      	blt.n	8008acc <emxEnsureCapacity_creal32_T+0x6e>
        i = MAX_int32_T;
 8008ac4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	e002      	b.n	8008ad2 <emxEnsureCapacity_creal32_T+0x74>
      } else {
        i *= 2;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	dbf0      	blt.n	8008abc <emxEnsureCapacity_creal32_T+0x5e>
      }
    }
    newData = malloc((unsigned int)i * sizeof(creal32_T));
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f00d fe30 	bl	8016744 <malloc>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d010      	beq.n	8008b12 <emxEnsureCapacity_creal32_T+0xb4>
      memcpy(newData, emxArray->data,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6819      	ldr	r1, [r3, #0]
             sizeof(creal32_T) * (unsigned int)oldNumel);
 8008af4:	683b      	ldr	r3, [r7, #0]
      memcpy(newData, emxArray->data,
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	461a      	mov	r2, r3
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f00e fced 	bl	80174da <memcpy>
      if (emxArray->canFreeData) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7c1b      	ldrb	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <emxEnsureCapacity_creal32_T+0xb4>
        free(emxArray->data);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f00d fe21 	bl	8016754 <free>
      }
    }
    emxArray->data = (creal32_T *)newData;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	741a      	strb	r2, [r3, #16]
  }
}
 8008b24:	bf00      	nop
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <emxEnsureCapacity_int32_T>:
 * Arguments    : emxArray_int32_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_int32_T(emxArray_int32_T *emxArray, int oldNumel)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da01      	bge.n	8008b40 <emxEnsureCapacity_int32_T+0x14>
    oldNumel = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008b44:	2300      	movs	r3, #0
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	e00c      	b.n	8008b64 <emxEnsureCapacity_int32_T+0x38>
    newNumel *= emxArray->size[i];
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	fb02 f303 	mul.w	r3, r2, r3
 8008b5c:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	3301      	adds	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	dbed      	blt.n	8008b4a <emxEnsureCapacity_int32_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	dd3c      	ble.n	8008bf2 <emxEnsureCapacity_int32_T+0xc6>
    i = emxArray->allocatedSize;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b0f      	cmp	r3, #15
 8008b82:	dc0d      	bgt.n	8008ba0 <emxEnsureCapacity_int32_T+0x74>
      i = 16;
 8008b84:	2310      	movs	r3, #16
 8008b86:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8008b88:	e00a      	b.n	8008ba0 <emxEnsureCapacity_int32_T+0x74>
      if (i > 1073741823) {
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b90:	db03      	blt.n	8008b9a <emxEnsureCapacity_int32_T+0x6e>
        i = MAX_int32_T;
 8008b92:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	e002      	b.n	8008ba0 <emxEnsureCapacity_int32_T+0x74>
      } else {
        i *= 2;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	dbf0      	blt.n	8008b8a <emxEnsureCapacity_int32_T+0x5e>
      }
    }
    newData = malloc((unsigned int)i * sizeof(int));
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f00d fdc9 	bl	8016744 <malloc>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d010      	beq.n	8008be0 <emxEnsureCapacity_int32_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(int) * (unsigned int)oldNumel);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f00e fc86 	bl	80174da <memcpy>
      if (emxArray->canFreeData) {
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7c1b      	ldrb	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d004      	beq.n	8008be0 <emxEnsureCapacity_int32_T+0xb4>
        free(emxArray->data);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f00d fdba 	bl	8016754 <free>
      }
    }
    emxArray->data = (int *)newData;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	741a      	strb	r2, [r3, #16]
  }
}
 8008bf2:	bf00      	nop
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <emxEnsureCapacity_real32_T>:
 * Arguments    : emxArray_real32_T *emxArray
 *                int oldNumel
 * Return Type  : void
 */
void emxEnsureCapacity_real32_T(emxArray_real32_T *emxArray, int oldNumel)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b086      	sub	sp, #24
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  int i;
  int newNumel;
  void *newData;
  if (oldNumel < 0) {
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	da01      	bge.n	8008c0e <emxEnsureCapacity_real32_T+0x14>
    oldNumel = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	603b      	str	r3, [r7, #0]
  }
  newNumel = 1;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	e00c      	b.n	8008c32 <emxEnsureCapacity_real32_T+0x38>
    newNumel *= emxArray->size[i];
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
 8008c2a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < emxArray->numDimensions; i++) {
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	dbed      	blt.n	8008c18 <emxEnsureCapacity_real32_T+0x1e>
  }
  if (newNumel > emxArray->allocatedSize) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	dd3c      	ble.n	8008cc0 <emxEnsureCapacity_real32_T+0xc6>
    i = emxArray->allocatedSize;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	617b      	str	r3, [r7, #20]
    if (i < 16) {
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b0f      	cmp	r3, #15
 8008c50:	dc0d      	bgt.n	8008c6e <emxEnsureCapacity_real32_T+0x74>
      i = 16;
 8008c52:	2310      	movs	r3, #16
 8008c54:	617b      	str	r3, [r7, #20]
    }
    while (i < newNumel) {
 8008c56:	e00a      	b.n	8008c6e <emxEnsureCapacity_real32_T+0x74>
      if (i > 1073741823) {
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5e:	db03      	blt.n	8008c68 <emxEnsureCapacity_real32_T+0x6e>
        i = MAX_int32_T;
 8008c60:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e002      	b.n	8008c6e <emxEnsureCapacity_real32_T+0x74>
      } else {
        i *= 2;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
    while (i < newNumel) {
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	dbf0      	blt.n	8008c58 <emxEnsureCapacity_real32_T+0x5e>
      }
    }
    newData = malloc((unsigned int)i * sizeof(float));
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f00d fd62 	bl	8016744 <malloc>
 8008c80:	4603      	mov	r3, r0
 8008c82:	60fb      	str	r3, [r7, #12]
    if (emxArray->data != NULL) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <emxEnsureCapacity_real32_T+0xb4>
      memcpy(newData, emxArray->data, sizeof(float) * (unsigned int)oldNumel);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	461a      	mov	r2, r3
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f00e fc1f 	bl	80174da <memcpy>
      if (emxArray->canFreeData) {
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7c1b      	ldrb	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d004      	beq.n	8008cae <emxEnsureCapacity_real32_T+0xb4>
        free(emxArray->data);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f00d fd53 	bl	8016754 <free>
      }
    }
    emxArray->data = (float *)newData;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	601a      	str	r2, [r3, #0]
    emxArray->allocatedSize = i;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	609a      	str	r2, [r3, #8]
    emxArray->canFreeData = true;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	741a      	strb	r2, [r3, #16]
  }
}
 8008cc0:	bf00      	nop
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <emxFree_boolean_T>:
/*
 * Arguments    : emxArray_boolean_T **pEmxArray
 * Return Type  : void
 */
void emxFree_boolean_T(emxArray_boolean_T **pEmxArray)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_boolean_T *)NULL) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01d      	beq.n	8008d14 <emxFree_boolean_T+0x4c>
    if (((*pEmxArray)->data != (bool *)NULL) && (*pEmxArray)->canFreeData) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <emxFree_boolean_T+0x30>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	7c1b      	ldrb	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <emxFree_boolean_T+0x30>
      free((*pEmxArray)->data);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f00d fd2e 	bl	8016754 <free>
    }
    free((*pEmxArray)->size);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f00d fd28 	bl	8016754 <free>
    free(*pEmxArray);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f00d fd23 	bl	8016754 <free>
    *pEmxArray = (emxArray_boolean_T *)NULL;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	601a      	str	r2, [r3, #0]
  }
}
 8008d14:	bf00      	nop
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <emxFree_creal32_T>:
/*
 * Arguments    : emxArray_creal32_T **pEmxArray
 * Return Type  : void
 */
void emxFree_creal32_T(emxArray_creal32_T **pEmxArray)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_creal32_T *)NULL) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01d      	beq.n	8008d68 <emxFree_creal32_T+0x4c>
    if (((*pEmxArray)->data != (creal32_T *)NULL) &&
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <emxFree_creal32_T+0x30>
        (*pEmxArray)->canFreeData) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	7c1b      	ldrb	r3, [r3, #16]
    if (((*pEmxArray)->data != (creal32_T *)NULL) &&
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <emxFree_creal32_T+0x30>
      free((*pEmxArray)->data);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f00d fd04 	bl	8016754 <free>
    }
    free((*pEmxArray)->size);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f00d fcfe 	bl	8016754 <free>
    free(*pEmxArray);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f00d fcf9 	bl	8016754 <free>
    *pEmxArray = (emxArray_creal32_T *)NULL;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	601a      	str	r2, [r3, #0]
  }
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <emxFree_int32_T>:
/*
 * Arguments    : emxArray_int32_T **pEmxArray
 * Return Type  : void
 */
void emxFree_int32_T(emxArray_int32_T **pEmxArray)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_int32_T *)NULL) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01d      	beq.n	8008dbc <emxFree_int32_T+0x4c>
    if (((*pEmxArray)->data != (int *)NULL) && (*pEmxArray)->canFreeData) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <emxFree_int32_T+0x30>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	7c1b      	ldrb	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <emxFree_int32_T+0x30>
      free((*pEmxArray)->data);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f00d fcda 	bl	8016754 <free>
    }
    free((*pEmxArray)->size);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f00d fcd4 	bl	8016754 <free>
    free(*pEmxArray);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f00d fccf 	bl	8016754 <free>
    *pEmxArray = (emxArray_int32_T *)NULL;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
  }
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <emxFree_real32_T>:
/*
 * Arguments    : emxArray_real32_T **pEmxArray
 * Return Type  : void
 */
void emxFree_real32_T(emxArray_real32_T **pEmxArray)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  if (*pEmxArray != (emxArray_real32_T *)NULL) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d01d      	beq.n	8008e10 <emxFree_real32_T+0x4c>
    if (((*pEmxArray)->data != (float *)NULL) && (*pEmxArray)->canFreeData) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <emxFree_real32_T+0x30>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	7c1b      	ldrb	r3, [r3, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <emxFree_real32_T+0x30>
      free((*pEmxArray)->data);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f00d fcb0 	bl	8016754 <free>
    }
    free((*pEmxArray)->size);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f00d fcaa 	bl	8016754 <free>
    free(*pEmxArray);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f00d fca5 	bl	8016754 <free>
    *pEmxArray = (emxArray_real32_T *)NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
  }
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <emxInit_boolean_T>:
/*
 * Arguments    : emxArray_boolean_T **pEmxArray
 * Return Type  : void
 */
void emxInit_boolean_T(emxArray_boolean_T **pEmxArray)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  emxArray_boolean_T *emxArray;
  int i;
  *pEmxArray = (emxArray_boolean_T *)malloc(sizeof(emxArray_boolean_T));
 8008e20:	2014      	movs	r0, #20
 8008e22:	f00d fc8f 	bl	8016744 <malloc>
 8008e26:	4603      	mov	r3, r0
 8008e28:	461a      	mov	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60bb      	str	r3, [r7, #8]
  emxArray->data = (bool *)NULL;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = 2;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * 2U);
 8008e40:	2008      	movs	r0, #8
 8008e42:	f00d fc7f 	bl	8016744 <malloc>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461a      	mov	r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2201      	movs	r2, #1
 8008e58:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < 2; i++) {
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	e009      	b.n	8008e74 <emxInit_boolean_T+0x5c>
    emxArray->size[i] = 0;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2; i++) {
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	ddf2      	ble.n	8008e60 <emxInit_boolean_T+0x48>
  }
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <emxInit_creal32_T>:
/*
 * Arguments    : emxArray_creal32_T **pEmxArray
 * Return Type  : void
 */
void emxInit_creal32_T(emxArray_creal32_T **pEmxArray)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  emxArray_creal32_T *emxArray;
  *pEmxArray = (emxArray_creal32_T *)malloc(sizeof(emxArray_creal32_T));
 8008e8c:	2014      	movs	r0, #20
 8008e8e:	f00d fc59 	bl	8016744 <malloc>
 8008e92:	4603      	mov	r3, r0
 8008e94:	461a      	mov	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]
  emxArray->data = (creal32_T *)NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = 1;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int));
 8008eac:	2004      	movs	r0, #4
 8008eae:	f00d fc49 	bl	8016744 <malloc>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	741a      	strb	r2, [r3, #16]
  emxArray->size[0] = 0;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <emxInit_int32_T>:
 * Arguments    : emxArray_int32_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_int32_T(emxArray_int32_T **pEmxArray, int numDimensions)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
  emxArray_int32_T *emxArray;
  int i;
  *pEmxArray = (emxArray_int32_T *)malloc(sizeof(emxArray_int32_T));
 8008ee0:	2014      	movs	r0, #20
 8008ee2:	f00d fc2f 	bl	8016744 <malloc>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	461a      	mov	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	60bb      	str	r3, [r7, #8]
  emxArray->data = (int *)NULL;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4618      	mov	r0, r3
 8008f06:	f00d fc1d 	bl	8016744 <malloc>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2200      	movs	r2, #0
 8008f16:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	e009      	b.n	8008f38 <emxInit_int32_T+0x62>
    emxArray->size[i] = 0;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3301      	adds	r3, #1
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	dbf1      	blt.n	8008f24 <emxInit_int32_T+0x4e>
  }
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <emxInit_real32_T>:
 * Arguments    : emxArray_real32_T **pEmxArray
 *                int numDimensions
 * Return Type  : void
 */
void emxInit_real32_T(emxArray_real32_T **pEmxArray, int numDimensions)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  emxArray_real32_T *emxArray;
  int i;
  *pEmxArray = (emxArray_real32_T *)malloc(sizeof(emxArray_real32_T));
 8008f54:	2014      	movs	r0, #20
 8008f56:	f00d fbf5 	bl	8016744 <malloc>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	601a      	str	r2, [r3, #0]
  emxArray = *pEmxArray;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60bb      	str	r3, [r7, #8]
  emxArray->data = (float *)NULL;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
  emxArray->numDimensions = numDimensions;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	60da      	str	r2, [r3, #12]
  emxArray->size = (int *)malloc(sizeof(int) * (unsigned int)numDimensions);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f00d fbe3 	bl	8016744 <malloc>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	461a      	mov	r2, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	605a      	str	r2, [r3, #4]
  emxArray->allocatedSize = 0;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	609a      	str	r2, [r3, #8]
  emxArray->canFreeData = true;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < numDimensions; i++) {
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	e009      	b.n	8008fac <emxInit_real32_T+0x62>
    emxArray->size[i] = 0;
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < numDimensions; i++) {
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	dbf1      	blt.n	8008f98 <emxInit_real32_T+0x4e>
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <fft>:
 *                double varargin_1
 *                emxArray_creal32_T *y
 * Return Type  : void
 */
void fft(const emxArray_real32_T *x, double varargin_1, emxArray_creal32_T *y)
{
 8008fbe:	b590      	push	{r4, r7, lr}
 8008fc0:	b091      	sub	sp, #68	@ 0x44
 8008fc2:	af04      	add	r7, sp, #16
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	ed87 0b00 	vstr	d0, [r7]
 8008fca:	60b9      	str	r1, [r7, #8]
  emxArray_real32_T *costab;
  emxArray_real32_T *sintab;
  emxArray_real32_T *sintabinv;
  creal32_T *y_data;
  int nRows;
  emxInit_real32_T(&costab, 2);
 8008fcc:	f107 031c 	add.w	r3, r7, #28
 8008fd0:	2102      	movs	r1, #2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff ffb9 	bl	8008f4a <emxInit_real32_T>
  emxInit_real32_T(&sintab, 2);
 8008fd8:	f107 0318 	add.w	r3, r7, #24
 8008fdc:	2102      	movs	r1, #2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff ffb3 	bl	8008f4a <emxInit_real32_T>
  emxInit_real32_T(&sintabinv, 2);
 8008fe4:	f107 0314 	add.w	r3, r7, #20
 8008fe8:	2102      	movs	r1, #2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff ffad 	bl	8008f4a <emxInit_real32_T>
  if ((x->size[0] == 0) || ((int)varargin_1 == 0)) {
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d006      	beq.n	8009008 <fft+0x4a>
 8008ffa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ffe:	f7f7 fdb3 	bl	8000b68 <__aeabi_d2iz>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d132      	bne.n	800906e <fft+0xb0>
    int N2blue;
    N2blue = (int)varargin_1;
 8009008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800900c:	f7f7 fdac 	bl	8000b68 <__aeabi_d2iz>
 8009010:	4603      	mov	r3, r0
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
    nRows = y->size[0];
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	613b      	str	r3, [r7, #16]
    y->size[0] = (int)varargin_1;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	685c      	ldr	r4, [r3, #4]
 8009020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009024:	f7f7 fda0 	bl	8000b68 <__aeabi_d2iz>
 8009028:	4603      	mov	r3, r0
 800902a:	6023      	str	r3, [r4, #0]
    emxEnsureCapacity_creal32_T(y, nRows);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	4619      	mov	r1, r3
 8009030:	68b8      	ldr	r0, [r7, #8]
 8009032:	f7ff fd14 	bl	8008a5e <emxEnsureCapacity_creal32_T>
    y_data = y->data;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	623b      	str	r3, [r7, #32]
    for (nRows = 0; nRows < N2blue; nRows++) {
 800903c:	2300      	movs	r3, #0
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	e010      	b.n	8009064 <fft+0xa6>
      y_data[nRows].re = 0.0F;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	6a3a      	ldr	r2, [r7, #32]
 8009048:	4413      	add	r3, r2
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
      y_data[nRows].im = 0.0F;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	6a3a      	ldr	r2, [r7, #32]
 8009056:	4413      	add	r3, r2
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	605a      	str	r2, [r3, #4]
    for (nRows = 0; nRows < N2blue; nRows++) {
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	3301      	adds	r3, #1
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009068:	429a      	cmp	r2, r3
 800906a:	dcea      	bgt.n	8009042 <fft+0x84>
  if ((x->size[0] == 0) || ((int)varargin_1 == 0)) {
 800906c:	e059      	b.n	8009122 <fft+0x164>
    }
  } else {
    int N2blue;
    bool useRadix2;
    useRadix2 = (((int)varargin_1 > 0) &&
 800906e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009072:	f7f7 fd79 	bl	8000b68 <__aeabi_d2iz>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	dd0f      	ble.n	800909c <fft+0xde>
                 (((int)varargin_1 & ((int)varargin_1 - 1)) == 0));
 800907c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009080:	f7f7 fd72 	bl	8000b68 <__aeabi_d2iz>
 8009084:	4604      	mov	r4, r0
 8009086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800908a:	f7f7 fd6d 	bl	8000b68 <__aeabi_d2iz>
 800908e:	4603      	mov	r3, r0
 8009090:	3b01      	subs	r3, #1
 8009092:	4023      	ands	r3, r4
    useRadix2 = (((int)varargin_1 > 0) &&
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <fft+0xde>
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <fft+0xe0>
 800909c:	2300      	movs	r3, #0
 800909e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80090a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    N2blue =
        c_FFTImplementationCallback_get((int)varargin_1, useRadix2, &nRows);
 80090ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090b2:	f7f7 fd59 	bl	8000b68 <__aeabi_d2iz>
 80090b6:	f107 0210 	add.w	r2, r7, #16
 80090ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090be:	4619      	mov	r1, r3
 80090c0:	f7fc fd3e 	bl	8005b40 <c_FFTImplementationCallback_get>
 80090c4:	62b8      	str	r0, [r7, #40]	@ 0x28
    c_FFTImplementationCallback_gen(nRows, useRadix2, costab, sintab,
 80090c6:	6938      	ldr	r0, [r7, #16]
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	69bc      	ldr	r4, [r7, #24]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	4623      	mov	r3, r4
 80090d6:	f7fc faef 	bl	80056b8 <c_FFTImplementationCallback_gen>
                                    sintabinv);
    if (useRadix2) {
 80090da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00d      	beq.n	80090fe <fft+0x140>
      c_FFTImplementationCallback_r2b(x, (int)varargin_1, costab, sintab, y);
 80090e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090e6:	f7f7 fd3f 	bl	8000b68 <__aeabi_d2iz>
 80090ea:	69fa      	ldr	r2, [r7, #28]
 80090ec:	69b9      	ldr	r1, [r7, #24]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	460b      	mov	r3, r1
 80090f4:	4601      	mov	r1, r0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f7fc fd7f 	bl	8005bfa <c_FFTImplementationCallback_r2b>
 80090fc:	e011      	b.n	8009122 <fft+0x164>
    } else {
      c_FFTImplementationCallback_dob(x, N2blue, (int)varargin_1, costab,
 80090fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009102:	f7f7 fd31 	bl	8000b68 <__aeabi_d2iz>
 8009106:	4604      	mov	r4, r0
 8009108:	69f8      	ldr	r0, [r7, #28]
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	9102      	str	r1, [sp, #8]
 8009112:	9201      	str	r2, [sp, #4]
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	4603      	mov	r3, r0
 8009118:	4622      	mov	r2, r4
 800911a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7fb ff57 	bl	8004fd0 <c_FFTImplementationCallback_dob>
                                      sintab, sintabinv, y);
    }
  }
  emxFree_real32_T(&sintabinv);
 8009122:	f107 0314 	add.w	r3, r7, #20
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff fe4c 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&sintab);
 800912c:	f107 0318 	add.w	r3, r7, #24
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff fe47 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&costab);
 8009136:	f107 031c 	add.w	r3, r7, #28
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff fe42 	bl	8008dc4 <emxFree_real32_T>
}
 8009140:	bf00      	nop
 8009142:	3734      	adds	r7, #52	@ 0x34
 8009144:	46bd      	mov	sp, r7
 8009146:	bd90      	pop	{r4, r7, pc}

08009148 <eml_find>:
 *                int i_data[]
 *                int i_size[2]
 * Return Type  : void
 */
void eml_find(const emxArray_boolean_T *x, int i_data[], int i_size[2])
{
 8009148:	b480      	push	{r7}
 800914a:	b08b      	sub	sp, #44	@ 0x2c
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  int idx;
  int ii;
  int k;
  const bool *x_data;
  bool exitg1;
  x_data = x->data;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	61bb      	str	r3, [r7, #24]
  k = (x->size[1] >= 1);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	bfcc      	ite	gt
 8009166:	2301      	movgt	r3, #1
 8009168:	2300      	movle	r3, #0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	617b      	str	r3, [r7, #20]
  idx = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	627b      	str	r3, [r7, #36]	@ 0x24
  i_size[0] = 1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	601a      	str	r2, [r3, #0]
  i_size[1] = k;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3304      	adds	r3, #4
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	601a      	str	r2, [r3, #0]
  ii = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	623b      	str	r3, [r7, #32]
  exitg1 = false;
 8009184:	2300      	movs	r3, #0
 8009186:	77fb      	strb	r3, [r7, #31]
  while ((!exitg1) && (ii <= x->size[1] - 1)) {
 8009188:	e011      	b.n	80091ae <eml_find+0x66>
    if (x_data[ii]) {
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	4413      	add	r3, r2
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d008      	beq.n	80091a8 <eml_find+0x60>
      idx = 1;
 8009196:	2301      	movs	r3, #1
 8009198:	627b      	str	r3, [r7, #36]	@ 0x24
      i_data[0] = ii + 1;
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	601a      	str	r2, [r3, #0]
      exitg1 = true;
 80091a2:	2301      	movs	r3, #1
 80091a4:	77fb      	strb	r3, [r7, #31]
 80091a6:	e002      	b.n	80091ae <eml_find+0x66>
    } else {
      ii++;
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	3301      	adds	r3, #1
 80091ac:	623b      	str	r3, [r7, #32]
  while ((!exitg1) && (ii <= x->size[1] - 1)) {
 80091ae:	7ffb      	ldrb	r3, [r7, #31]
 80091b0:	f083 0301 	eor.w	r3, r3, #1
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d006      	beq.n	80091c8 <eml_find+0x80>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	3304      	adds	r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6a3a      	ldr	r2, [r7, #32]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	dbe0      	blt.n	800918a <eml_find+0x42>
    }
  }
  if (k == 1) {
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d10a      	bne.n	80091e4 <eml_find+0x9c>
    if (idx == 0) {
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d110      	bne.n	80091f6 <eml_find+0xae>
      i_size[0] = 1;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
      i_size[1] = 0;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	3304      	adds	r3, #4
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
    }
  } else {
    i_size[1] = (idx >= 1);
  }
}
 80091e2:	e008      	b.n	80091f6 <eml_find+0xae>
    i_size[1] = (idx >= 1);
 80091e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	bfcc      	ite	gt
 80091ea:	2301      	movgt	r3, #1
 80091ec:	2300      	movle	r3, #0
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	601a      	str	r2, [r3, #0]
}
 80091f6:	bf00      	nop
 80091f8:	372c      	adds	r7, #44	@ 0x2c
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <ifft>:
 * Arguments    : const emxArray_creal32_T *x
 *                emxArray_creal32_T *y
 * Return Type  : void
 */
void ifft(const emxArray_creal32_T *x, emxArray_creal32_T *y)
{
 8009204:	b590      	push	{r4, r7, lr}
 8009206:	b0a5      	sub	sp, #148	@ 0x94
 8009208:	af02      	add	r7, sp, #8
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  float *sintabinv_data;
  int i;
  int k;
  int nd2;
  int nfft;
  x_data = x->data;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	67bb      	str	r3, [r7, #120]	@ 0x78
  nfft = x->size[0];
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (x->size[0] == 0) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d105      	bne.n	8009232 <ifft+0x2e>
    y->size[0] = 0;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
    }
    emxFree_real32_T(&sintabinv);
    emxFree_real32_T(&sintab);
    emxFree_real32_T(&costab);
  }
}
 800922e:	f000 be41 	b.w	8009eb4 <ifft+0xcb0>
    useRadix2 = ((x->size[0] & (x->size[0] - 1)) == 0);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3b01      	subs	r3, #1
 8009240:	4013      	ands	r3, r2
 8009242:	2b00      	cmp	r3, #0
 8009244:	bf0c      	ite	eq
 8009246:	2301      	moveq	r3, #1
 8009248:	2300      	movne	r3, #0
 800924a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    N2blue = c_FFTImplementationCallback_get(x->size[0], useRadix2, &nd2);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f107 020c 	add.w	r2, r7, #12
 8009258:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 800925c:	4618      	mov	r0, r3
 800925e:	f7fc fc6f 	bl	8005b40 <c_FFTImplementationCallback_get>
 8009262:	66f8      	str	r0, [r7, #108]	@ 0x6c
    nt_im = 6.28318548F / (float)nd2;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800926e:	eddf 6ab2 	vldr	s13, [pc, #712]	@ 8009538 <ifft+0x334>
 8009272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009276:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    nInt2 = (int)((unsigned int)nd2 >> 1) >> 1;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	105b      	asrs	r3, r3, #1
 8009280:	667b      	str	r3, [r7, #100]	@ 0x64
    emxInit_real32_T(&costab1q, 2);
 8009282:	f107 0318 	add.w	r3, r7, #24
 8009286:	2102      	movs	r1, #2
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fe5e 	bl	8008f4a <emxInit_real32_T>
    i = costab1q->size[0] * costab1q->size[1];
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	6852      	ldr	r2, [r2, #4]
 8009298:	3204      	adds	r2, #4
 800929a:	6812      	ldr	r2, [r2, #0]
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    costab1q->size[0] = 1;
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
    costab1q->size[1] = nInt2 + 1;
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	3304      	adds	r3, #4
 80092b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80092b4:	3201      	adds	r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
    emxEnsureCapacity_real32_T(costab1q, i);
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff fc9b 	bl	8008bfa <emxEnsureCapacity_real32_T>
    costab1q_data = costab1q->data;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	663b      	str	r3, [r7, #96]	@ 0x60
    costab1q_data[0] = 1.0F;
 80092ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80092d0:	601a      	str	r2, [r3, #0]
    nd2 = nInt2 / 2 - 1;
 80092d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092d4:	0fda      	lsrs	r2, r3, #31
 80092d6:	4413      	add	r3, r2
 80092d8:	105b      	asrs	r3, r3, #1
 80092da:	3b01      	subs	r3, #1
 80092dc:	60fb      	str	r3, [r7, #12]
    for (k = 0; k <= nd2; k++) {
 80092de:	2300      	movs	r3, #0
 80092e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092e4:	e01d      	b.n	8009322 <ifft+0x11e>
      costab1q_data[k + 1] = cosf(nt_im * (float)(k + 1));
 80092e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092ea:	3301      	adds	r3, #1
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092f4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80092f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009300:	3301      	adds	r3, #1
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009306:	18d4      	adds	r4, r2, r3
 8009308:	eeb0 0a67 	vmov.f32	s0, s15
 800930c:	f010 f95a 	bl	80195c4 <cosf>
 8009310:	eef0 7a40 	vmov.f32	s15, s0
 8009314:	edc4 7a00 	vstr	s15, [r4]
    for (k = 0; k <= nd2; k++) {
 8009318:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800931c:	3301      	adds	r3, #1
 800931e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009328:	429a      	cmp	r2, r3
 800932a:	dddc      	ble.n	80092e6 <ifft+0xe2>
    i = nd2 + 2;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3302      	adds	r3, #2
 8009330:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    rt = nInt2 - 1;
 8009334:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009336:	3b01      	subs	r3, #1
 8009338:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for (k = i; k <= rt; k++) {
 800933a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800933e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009342:	e01d      	b.n	8009380 <ifft+0x17c>
      costab1q_data[k] = sinf(nt_im * (float)(nInt2 - k));
 8009344:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009346:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009354:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009364:	18d4      	adds	r4, r2, r3
 8009366:	eeb0 0a67 	vmov.f32	s0, s15
 800936a:	f010 f96f 	bl	801964c <sinf>
 800936e:	eef0 7a40 	vmov.f32	s15, s0
 8009372:	edc4 7a00 	vstr	s15, [r4]
    for (k = i; k <= rt; k++) {
 8009376:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800937a:	3301      	adds	r3, #1
 800937c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009380:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009384:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009386:	429a      	cmp	r2, r3
 8009388:	dddc      	ble.n	8009344 <ifft+0x140>
    costab1q_data[nInt2] = 0.0F;
 800938a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009390:	4413      	add	r3, r2
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	601a      	str	r2, [r3, #0]
    emxInit_real32_T(&costab, 2);
 8009398:	f107 031c 	add.w	r3, r7, #28
 800939c:	2102      	movs	r1, #2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff fdd3 	bl	8008f4a <emxInit_real32_T>
    emxInit_real32_T(&sintab, 2);
 80093a4:	f107 0314 	add.w	r3, r7, #20
 80093a8:	2102      	movs	r1, #2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff fdcd 	bl	8008f4a <emxInit_real32_T>
    emxInit_real32_T(&sintabinv, 2);
 80093b0:	f107 0310 	add.w	r3, r7, #16
 80093b4:	2102      	movs	r1, #2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff fdc7 	bl	8008f4a <emxInit_real32_T>
    if (!useRadix2) {
 80093bc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80093c0:	f083 0301 	eor.w	r3, r3, #1
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 811f 	beq.w	800960a <ifft+0x406>
      nInt2 = costab1q->size[1] - 1;
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	3304      	adds	r3, #4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	667b      	str	r3, [r7, #100]	@ 0x64
      nd2 = (costab1q->size[1] - 1) << 1;
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	3304      	adds	r3, #4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]
      i = costab->size[0] * costab->size[1];
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	6852      	ldr	r2, [r2, #4]
 80093f0:	3204      	adds	r2, #4
 80093f2:	6812      	ldr	r2, [r2, #0]
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
 80093f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      costab->size[0] = 1;
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	2201      	movs	r2, #1
 8009402:	601a      	str	r2, [r3, #0]
      costab->size[1] = nd2 + 1;
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	3304      	adds	r3, #4
 800940c:	3201      	adds	r2, #1
 800940e:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(costab, i);
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff fbef 	bl	8008bfa <emxEnsureCapacity_real32_T>
      costab_data = costab->data;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	65fb      	str	r3, [r7, #92]	@ 0x5c
      i = sintab->size[0] * sintab->size[1];
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	6852      	ldr	r2, [r2, #4]
 800942c:	3204      	adds	r2, #4
 800942e:	6812      	ldr	r2, [r2, #0]
 8009430:	fb02 f303 	mul.w	r3, r2, r3
 8009434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      sintab->size[0] = 1;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	601a      	str	r2, [r3, #0]
      sintab->size[1] = nd2 + 1;
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	3304      	adds	r3, #4
 8009448:	3201      	adds	r2, #1
 800944a:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(sintab, i);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff fbd1 	bl	8008bfa <emxEnsureCapacity_real32_T>
      sintab_data = sintab->data;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	65bb      	str	r3, [r7, #88]	@ 0x58
      costab_data[0] = 1.0F;
 800945e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009460:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009464:	601a      	str	r2, [r3, #0]
      sintab_data[0] = 0.0F;
 8009466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
      i = sintabinv->size[0] * sintabinv->size[1];
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	6852      	ldr	r2, [r2, #4]
 8009478:	3204      	adds	r2, #4
 800947a:	6812      	ldr	r2, [r2, #0]
 800947c:	fb02 f303 	mul.w	r3, r2, r3
 8009480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      sintabinv->size[0] = 1;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	601a      	str	r2, [r3, #0]
      sintabinv->size[1] = nd2 + 1;
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	3304      	adds	r3, #4
 8009494:	3201      	adds	r2, #1
 8009496:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(sintabinv, i);
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff fbab 	bl	8008bfa <emxEnsureCapacity_real32_T>
      sintabinv_data = sintabinv->data;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	657b      	str	r3, [r7, #84]	@ 0x54
      for (k = 0; k < nInt2; k++) {
 80094aa:	2300      	movs	r3, #0
 80094ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094b0:	e016      	b.n	80094e0 <ifft+0x2dc>
        sintabinv_data[k + 1] = costab1q_data[(nInt2 - k) - 1];
 80094b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80094b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094be:	3b01      	subs	r3, #1
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80094c4:	441a      	add	r2, r3
 80094c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094ca:	3301      	adds	r3, #1
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094d0:	440b      	add	r3, r1
 80094d2:	6812      	ldr	r2, [r2, #0]
 80094d4:	601a      	str	r2, [r3, #0]
      for (k = 0; k < nInt2; k++) {
 80094d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094da:	3301      	adds	r3, #1
 80094dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094e6:	429a      	cmp	r2, r3
 80094e8:	dbe3      	blt.n	80094b2 <ifft+0x2ae>
      i = costab1q->size[1];
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for (k = i; k <= nd2; k++) {
 80094f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094fc:	e012      	b.n	8009524 <ifft+0x320>
        sintabinv_data[k] = costab1q_data[k - nInt2];
 80094fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800950a:	441a      	add	r2, r3
 800950c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009514:	440b      	add	r3, r1
 8009516:	6812      	ldr	r2, [r2, #0]
 8009518:	601a      	str	r2, [r3, #0]
      for (k = i; k <= nd2; k++) {
 800951a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800951e:	3301      	adds	r3, #1
 8009520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800952a:	429a      	cmp	r2, r3
 800952c:	dde7      	ble.n	80094fe <ifft+0x2fa>
      for (k = 0; k < nInt2; k++) {
 800952e:	2300      	movs	r3, #0
 8009530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009534:	e02b      	b.n	800958e <ifft+0x38a>
 8009536:	bf00      	nop
 8009538:	40c90fdb 	.word	0x40c90fdb
        costab_data[k + 1] = costab1q_data[k + 1];
 800953c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009540:	3301      	adds	r3, #1
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009546:	441a      	add	r2, r3
 8009548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800954c:	3301      	adds	r3, #1
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8009552:	440b      	add	r3, r1
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	601a      	str	r2, [r3, #0]
        sintab_data[k + 1] = -costab1q_data[(nInt2 - k) - 1];
 8009558:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800955a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009564:	3b01      	subs	r3, #1
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800956a:	4413      	add	r3, r2
 800956c:	edd3 7a00 	vldr	s15, [r3]
 8009570:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009574:	3301      	adds	r3, #1
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800957a:	4413      	add	r3, r2
 800957c:	eef1 7a67 	vneg.f32	s15, s15
 8009580:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < nInt2; k++) {
 8009584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009588:	3301      	adds	r3, #1
 800958a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800958e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009594:	429a      	cmp	r2, r3
 8009596:	dbd1      	blt.n	800953c <ifft+0x338>
      i = costab1q->size[1];
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for (k = i; k <= nd2; k++) {
 80095a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095aa:	e028      	b.n	80095fe <ifft+0x3fa>
        costab_data[k] = -costab1q_data[nd2 - k];
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095b8:	4413      	add	r3, r2
 80095ba:	edd3 7a00 	vldr	s15, [r3]
 80095be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80095c6:	4413      	add	r3, r2
 80095c8:	eef1 7a67 	vneg.f32	s15, s15
 80095cc:	edc3 7a00 	vstr	s15, [r3]
        sintab_data[k] = -costab1q_data[k - nInt2];
 80095d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095dc:	4413      	add	r3, r2
 80095de:	edd3 7a00 	vldr	s15, [r3]
 80095e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095ea:	4413      	add	r3, r2
 80095ec:	eef1 7a67 	vneg.f32	s15, s15
 80095f0:	edc3 7a00 	vstr	s15, [r3]
      for (k = i; k <= nd2; k++) {
 80095f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095f8:	3301      	adds	r3, #1
 80095fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009604:	429a      	cmp	r2, r3
 8009606:	ddd1      	ble.n	80095ac <ifft+0x3a8>
 8009608:	e0bb      	b.n	8009782 <ifft+0x57e>
      nInt2 = costab1q->size[1] - 1;
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	3304      	adds	r3, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3b01      	subs	r3, #1
 8009614:	667b      	str	r3, [r7, #100]	@ 0x64
      nd2 = (costab1q->size[1] - 1) << 1;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	3304      	adds	r3, #4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3b01      	subs	r3, #1
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
      i = costab->size[0] * costab->size[1];
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	6852      	ldr	r2, [r2, #4]
 800962e:	3204      	adds	r2, #4
 8009630:	6812      	ldr	r2, [r2, #0]
 8009632:	fb02 f303 	mul.w	r3, r2, r3
 8009636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      costab->size[0] = 1;
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	601a      	str	r2, [r3, #0]
      costab->size[1] = nd2 + 1;
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	3304      	adds	r3, #4
 800964a:	3201      	adds	r2, #1
 800964c:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(costab, i);
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff fad0 	bl	8008bfa <emxEnsureCapacity_real32_T>
      costab_data = costab->data;
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	65fb      	str	r3, [r7, #92]	@ 0x5c
      i = sintab->size[0] * sintab->size[1];
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	6852      	ldr	r2, [r2, #4]
 800966a:	3204      	adds	r2, #4
 800966c:	6812      	ldr	r2, [r2, #0]
 800966e:	fb02 f303 	mul.w	r3, r2, r3
 8009672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      sintab->size[0] = 1;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	601a      	str	r2, [r3, #0]
      sintab->size[1] = nd2 + 1;
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	3304      	adds	r3, #4
 8009686:	3201      	adds	r2, #1
 8009688:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_real32_T(sintab, i);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fab2 	bl	8008bfa <emxEnsureCapacity_real32_T>
      sintab_data = sintab->data;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	65bb      	str	r3, [r7, #88]	@ 0x58
      costab_data[0] = 1.0F;
 800969c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800969e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80096a2:	601a      	str	r2, [r3, #0]
      sintab_data[0] = 0.0F;
 80096a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096a6:	f04f 0200 	mov.w	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
      for (k = 0; k < nInt2; k++) {
 80096ac:	2300      	movs	r3, #0
 80096ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096b2:	e024      	b.n	80096fe <ifft+0x4fa>
        costab_data[k + 1] = costab1q_data[k + 1];
 80096b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096b8:	3301      	adds	r3, #1
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096be:	441a      	add	r2, r3
 80096c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096c4:	3301      	adds	r3, #1
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80096ca:	440b      	add	r3, r1
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	601a      	str	r2, [r3, #0]
        sintab_data[k + 1] = costab1q_data[(nInt2 - k) - 1];
 80096d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80096d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80096dc:	3b01      	subs	r3, #1
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096e2:	441a      	add	r2, r3
 80096e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096e8:	3301      	adds	r3, #1
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096ee:	440b      	add	r3, r1
 80096f0:	6812      	ldr	r2, [r2, #0]
 80096f2:	601a      	str	r2, [r3, #0]
      for (k = 0; k < nInt2; k++) {
 80096f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096f8:	3301      	adds	r3, #1
 80096fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009702:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009704:	429a      	cmp	r2, r3
 8009706:	dbd5      	blt.n	80096b4 <ifft+0x4b0>
      i = costab1q->size[1];
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for (k = i; k <= nd2; k++) {
 8009712:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009716:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800971a:	e024      	b.n	8009766 <ifft+0x562>
        costab_data[k] = -costab1q_data[nd2 - k];
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009728:	4413      	add	r3, r2
 800972a:	edd3 7a00 	vldr	s15, [r3]
 800972e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009736:	4413      	add	r3, r2
 8009738:	eef1 7a67 	vneg.f32	s15, s15
 800973c:	edc3 7a00 	vstr	s15, [r3]
        sintab_data[k] = costab1q_data[k - nInt2];
 8009740:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800974c:	441a      	add	r2, r3
 800974e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009756:	440b      	add	r3, r1
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	601a      	str	r2, [r3, #0]
      for (k = i; k <= nd2; k++) {
 800975c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009760:	3301      	adds	r3, #1
 8009762:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800976c:	429a      	cmp	r2, r3
 800976e:	ddd5      	ble.n	800971c <ifft+0x518>
      sintabinv->size[0] = 1;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	601a      	str	r2, [r3, #0]
      sintabinv->size[1] = 0;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	3304      	adds	r3, #4
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
    emxFree_real32_T(&costab1q);
 8009782:	f107 0318 	add.w	r3, r7, #24
 8009786:	4618      	mov	r0, r3
 8009788:	f7ff fb1c 	bl	8008dc4 <emxFree_real32_T>
    if (useRadix2) {
 800978c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009790:	2b00      	cmp	r3, #0
 8009792:	d057      	beq.n	8009844 <ifft+0x640>
      d_FFTImplementationCallback_r2b(x, x->size[0], costab, sintab, y);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	6819      	ldr	r1, [r3, #0]
 800979a:	69fa      	ldr	r2, [r7, #28]
 800979c:	6978      	ldr	r0, [r7, #20]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	4603      	mov	r3, r0
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7fc fa86 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
      y_data = y->data;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (y->size[0] > 1) {
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	f340 836d 	ble.w	8009e96 <ifft+0xc92>
        nt_im = 1.0F / (float)y->size[0];
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        nd2 = y->size[0];
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < nd2; i++) {
 80097de:	2300      	movs	r3, #0
 80097e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097e4:	e028      	b.n	8009838 <ifft+0x634>
          y_data[i].re *= nt_im;
 80097e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097ee:	4413      	add	r3, r2
 80097f0:	ed93 7a00 	vldr	s14, [r3]
 80097f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097fc:	4413      	add	r3, r2
 80097fe:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009806:	edc3 7a00 	vstr	s15, [r3]
          y_data[i].im *= nt_im;
 800980a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009812:	4413      	add	r3, r2
 8009814:	ed93 7a01 	vldr	s14, [r3, #4]
 8009818:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009820:	4413      	add	r3, r2
 8009822:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800982a:	edc3 7a01 	vstr	s15, [r3, #4]
        for (i = 0; i < nd2; i++) {
 800982e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009832:	3301      	adds	r3, #1
 8009834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800983e:	429a      	cmp	r2, r3
 8009840:	dbd1      	blt.n	80097e6 <ifft+0x5e2>
 8009842:	e328      	b.n	8009e96 <ifft+0xc92>
      nd2 = (x->size[0] + x->size[0]) - 1;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	3b01      	subs	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
      emxInit_creal32_T(&wwc);
 8009850:	f107 0320 	add.w	r3, r7, #32
 8009854:	4618      	mov	r0, r3
 8009856:	f7ff fb15 	bl	8008e84 <emxInit_creal32_T>
      i = wwc->size[0];
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      wwc->size[0] = nd2;
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_creal32_T(wwc, i);
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff f8f3 	bl	8008a5e <emxEnsureCapacity_creal32_T>
      wwc_data = wwc->data;
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	653b      	str	r3, [r7, #80]	@ 0x50
      rt = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	67fb      	str	r3, [r7, #124]	@ 0x7c
      wwc_data[x->size[0] - 1].re = 1.0F;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800988c:	3b01      	subs	r3, #1
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009892:	4413      	add	r3, r2
 8009894:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009898:	601a      	str	r2, [r3, #0]
      wwc_data[x->size[0] - 1].im = 0.0F;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80098a4:	3b01      	subs	r3, #1
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80098aa:	4413      	add	r3, r2
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	605a      	str	r2, [r3, #4]
      nInt2 = x->size[0] << 1;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	667b      	str	r3, [r7, #100]	@ 0x64
      i = x->size[0];
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for (k = 0; k <= i - 2; k++) {
 80098c6:	2300      	movs	r3, #0
 80098c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098cc:	e059      	b.n	8009982 <ifft+0x77e>
        b_y = ((k + 1) << 1) - 1;
 80098ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80098d2:	3301      	adds	r3, #1
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	3b01      	subs	r3, #1
 80098d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (nInt2 - rt <= b_y) {
 80098da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80098dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e2:	429a      	cmp	r2, r3
 80098e4:	db06      	blt.n	80098f4 <ifft+0x6f0>
          rt += b_y - nInt2;
 80098e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80098ee:	4413      	add	r3, r2
 80098f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098f2:	e003      	b.n	80098fc <ifft+0x6f8>
          rt += b_y;
 80098f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80098f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f8:	4413      	add	r3, r2
 80098fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
        nt_im = 3.14159274F * (float)rt / (float)x->size[0];
 80098fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009906:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8009b88 <ifft+0x984>
 800990a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	ee07 3a90 	vmov	s15, r3
 8009918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800991c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009920:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        wwc_data[(x->size[0] - k) - 2].re = cosf(nt_im);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009934:	3b02      	subs	r3, #2
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800993a:	18d4      	adds	r4, r2, r3
 800993c:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8009940:	f00f fe40 	bl	80195c4 <cosf>
 8009944:	eef0 7a40 	vmov.f32	s15, s0
 8009948:	edc4 7a00 	vstr	s15, [r4]
        wwc_data[(x->size[0] - k) - 2].im = -sinf(nt_im);
 800994c:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8009950:	f00f fe7c 	bl	801964c <sinf>
 8009954:	eef0 7a40 	vmov.f32	s15, s0
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009968:	3b02      	subs	r3, #2
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800996e:	4413      	add	r3, r2
 8009970:	eef1 7a67 	vneg.f32	s15, s15
 8009974:	edc3 7a01 	vstr	s15, [r3, #4]
      for (k = 0; k <= i - 2; k++) {
 8009978:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800997c:	3301      	adds	r3, #1
 800997e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009982:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009986:	3b01      	subs	r3, #1
 8009988:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800998c:	429a      	cmp	r2, r3
 800998e:	db9e      	blt.n	80098ce <ifft+0x6ca>
      i = nd2 - 1;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	3b01      	subs	r3, #1
 8009994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for (k = i; k >= nfft; k--) {
 8009998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800999c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099a0:	e018      	b.n	80099d4 <ifft+0x7d0>
        wwc_data[k] = wwc_data[(nd2 - k) - 1];
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80099ae:	3b01      	subs	r3, #1
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099b4:	18d1      	adds	r1, r2, r3
 80099b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099be:	4413      	add	r3, r2
 80099c0:	460a      	mov	r2, r1
 80099c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099c6:	e883 0003 	stmia.w	r3, {r0, r1}
      for (k = i; k >= nfft; k--) {
 80099ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099ce:	3b01      	subs	r3, #1
 80099d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80099d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099da:	429a      	cmp	r2, r3
 80099dc:	dae1      	bge.n	80099a2 <ifft+0x79e>
      i = y->size[0];
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      y->size[0] = x->size[0];
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	6812      	ldr	r2, [r2, #0]
 80099f2:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_creal32_T(y, i);
 80099f4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80099f8:	6838      	ldr	r0, [r7, #0]
 80099fa:	f7ff f830 	bl	8008a5e <emxEnsureCapacity_creal32_T>
      y_data = y->data;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      nd2 = x->size[0];
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]
      for (k = 0; k < nd2; k++) {
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a12:	e04e      	b.n	8009ab2 <ifft+0x8ae>
        rt = (nfft + k) - 1;
 8009a14:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a1a:	4413      	add	r3, r2
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        nt_re = wwc_data[rt].re;
 8009a20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a26:	4413      	add	r3, r2
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	643b      	str	r3, [r7, #64]	@ 0x40
        nt_im = wwc_data[rt].im;
 8009a2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a2e:	00db      	lsls	r3, r3, #3
 8009a30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a32:	4413      	add	r3, r2
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	66bb      	str	r3, [r7, #104]	@ 0x68
        re_tmp = x_data[k].im;
 8009a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009a40:	4413      	add	r3, r2
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        b_re_tmp = x_data[k].re;
 8009a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009a4e:	4413      	add	r3, r2
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	63bb      	str	r3, [r7, #56]	@ 0x38
        y_data[k].re = nt_re * b_re_tmp + nt_im * re_tmp;
 8009a54:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8009a58:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8009a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a60:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8009a64:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a74:	4413      	add	r3, r2
 8009a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a7a:	edc3 7a00 	vstr	s15, [r3]
        y_data[k].im = nt_re * re_tmp - nt_im * b_re_tmp;
 8009a7e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8009a82:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a8a:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8009a8e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8009a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a9e:	4413      	add	r3, r2
 8009aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009aa4:	edc3 7a01 	vstr	s15, [r3, #4]
      for (k = 0; k < nd2; k++) {
 8009aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009aac:	3301      	adds	r3, #1
 8009aae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	dbab      	blt.n	8009a14 <ifft+0x810>
      i = x->size[0] + 1;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for (k = i; k <= nfft; k++) {
 8009ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ad0:	e01a      	b.n	8009b08 <ifft+0x904>
        y_data[k - 1].re = 0.0F;
 8009ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ad6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009ada:	3b01      	subs	r3, #1
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
        y_data[k - 1].im = 0.0F;
 8009ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009aec:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009af0:	3b01      	subs	r3, #1
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009af6:	4413      	add	r3, r2
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	605a      	str	r2, [r3, #4]
      for (k = i; k <= nfft; k++) {
 8009afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b02:	3301      	adds	r3, #1
 8009b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	dddf      	ble.n	8009ad2 <ifft+0x8ce>
      emxInit_creal32_T(&fv);
 8009b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff f9b4 	bl	8008e84 <emxInit_creal32_T>
      d_FFTImplementationCallback_r2b(y, N2blue, costab, sintab, fv);
 8009b1c:	69fa      	ldr	r2, [r7, #28]
 8009b1e:	6979      	ldr	r1, [r7, #20]
 8009b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	460b      	mov	r3, r1
 8009b26:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009b28:	6838      	ldr	r0, [r7, #0]
 8009b2a:	f7fc f8c4 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
      fv_data = fv->data;
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      emxInit_creal32_T(&b_fv);
 8009b34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff f9a3 	bl	8008e84 <emxInit_creal32_T>
      d_FFTImplementationCallback_r2b(wwc, N2blue, costab, sintab, b_fv);
 8009b3e:	6a38      	ldr	r0, [r7, #32]
 8009b40:	69fa      	ldr	r2, [r7, #28]
 8009b42:	6979      	ldr	r1, [r7, #20]
 8009b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009b4c:	f7fc f8b3 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
      i = b_fv->size[0];
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      b_fv->size[0] = fv->size[0];
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	601a      	str	r2, [r3, #0]
      emxEnsureCapacity_creal32_T(b_fv, i);
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fe ff76 	bl	8008a5e <emxEnsureCapacity_creal32_T>
      b_fv_data = b_fv->data;
 8009b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	647b      	str	r3, [r7, #68]	@ 0x44
      nd2 = fv->size[0];
 8009b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]
      for (i = 0; i < nd2; i++) {
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b86:	e04c      	b.n	8009c22 <ifft+0xa1e>
 8009b88:	40490fdb 	.word	0x40490fdb
        nt_im = fv_data[i].re;
 8009b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b94:	4413      	add	r3, r2
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	66bb      	str	r3, [r7, #104]	@ 0x68
        re_tmp = b_fv_data[i].im;
 8009b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ba2:	4413      	add	r3, r2
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        b_re_tmp = fv_data[i].im;
 8009ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bac:	00db      	lsls	r3, r3, #3
 8009bae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bb0:	4413      	add	r3, r2
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
        c_re_tmp = b_fv_data[i].re;
 8009bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bba:	00db      	lsls	r3, r3, #3
 8009bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bbe:	4413      	add	r3, r2
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	637b      	str	r3, [r7, #52]	@ 0x34
        b_fv_data[i].re = nt_im * c_re_tmp - b_re_tmp * re_tmp;
 8009bc4:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8009bc8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bd0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8009bd4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009be4:	4413      	add	r3, r2
 8009be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bea:	edc3 7a00 	vstr	s15, [r3]
        b_fv_data[i].im = nt_im * re_tmp + b_re_tmp * c_re_tmp;
 8009bee:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8009bf2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bfa:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8009bfe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c0e:	4413      	add	r3, r2
 8009c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c14:	edc3 7a01 	vstr	s15, [r3, #4]
      for (i = 0; i < nd2; i++) {
 8009c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	dbaf      	blt.n	8009b8c <ifft+0x988>
      d_FFTImplementationCallback_r2b(b_fv, N2blue, costab, sintabinv, fv);
 8009c2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c2e:	69fa      	ldr	r2, [r7, #28]
 8009c30:	6939      	ldr	r1, [r7, #16]
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	460b      	mov	r3, r1
 8009c38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009c3a:	f7fc f83c 	bl	8005cb6 <d_FFTImplementationCallback_r2b>
      fv_data = fv->data;
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	64bb      	str	r3, [r7, #72]	@ 0x48
      emxFree_creal32_T(&b_fv);
 8009c44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff f867 	bl	8008d1c <emxFree_creal32_T>
      if (fv->size[0] > 1) {
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	dd42      	ble.n	8009cde <ifft+0xada>
        nt_im = 1.0F / (float)fv->size[0];
 8009c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        nd2 = fv->size[0];
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < nd2; i++) {
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c80:	e028      	b.n	8009cd4 <ifft+0xad0>
          fv_data[i].re *= nt_im;
 8009c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c8a:	4413      	add	r3, r2
 8009c8c:	ed93 7a00 	vldr	s14, [r3]
 8009c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c98:	4413      	add	r3, r2
 8009c9a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca2:	edc3 7a00 	vstr	s15, [r3]
          fv_data[i].im *= nt_im;
 8009ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cae:	4413      	add	r3, r2
 8009cb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8009cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cb8:	00db      	lsls	r3, r3, #3
 8009cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cbc:	4413      	add	r3, r2
 8009cbe:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc3 7a01 	vstr	s15, [r3, #4]
        for (i = 0; i < nd2; i++) {
 8009cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cce:	3301      	adds	r3, #1
 8009cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	dbd1      	blt.n	8009c82 <ifft+0xa7e>
      nt_re = (float)x->size[0];
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	ee07 3a90 	vmov	s15, r3
 8009ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cec:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      i = (int)(float)x->size[0];
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d02:	ee17 3a90 	vmov	r3, s15
 8009d06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      rt = wwc->size[0];
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	67fb      	str	r3, [r7, #124]	@ 0x7c
      for (k = i; k <= rt; k++) {
 8009d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d1a:	e0ac      	b.n	8009e76 <ifft+0xc72>
        nt_im = wwc_data[k - 1].re;
 8009d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d20:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009d24:	3b01      	subs	r3, #1
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d2a:	4413      	add	r3, r2
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
        re_tmp = fv_data[k - 1].im;
 8009d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d34:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	00db      	lsls	r3, r3, #3
 8009d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d3e:	4413      	add	r3, r2
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        b_re_tmp = wwc_data[k - 1].im;
 8009d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d48:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d52:	4413      	add	r3, r2
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	63bb      	str	r3, [r7, #56]	@ 0x38
        c_re_tmp = fv_data[k - 1].re;
 8009d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d5c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009d60:	3b01      	subs	r3, #1
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d66:	4413      	add	r3, r2
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        ar = nt_im * c_re_tmp + b_re_tmp * re_tmp;
 8009d6c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8009d70:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d78:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8009d7c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d88:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        nt_im = nt_im * re_tmp - b_re_tmp * c_re_tmp;
 8009d8c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8009d90:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d98:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8009d9c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009da8:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        if (nt_im == 0.0F) {
 8009dac:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009db0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db8:	d119      	bne.n	8009dee <ifft+0xbea>
          nd2 = k - i;
 8009dba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	60fb      	str	r3, [r7, #12]
          y_data[nd2].re = ar / nt_re;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	00db      	lsls	r3, r3, #3
 8009dca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009dcc:	4413      	add	r3, r2
 8009dce:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8009dd2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8009dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dda:	edc3 7a00 	vstr	s15, [r3]
          y_data[nd2].im = 0.0F;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	00db      	lsls	r3, r3, #3
 8009de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009de4:	4413      	add	r3, r2
 8009de6:	f04f 0200 	mov.w	r2, #0
 8009dea:	605a      	str	r2, [r3, #4]
 8009dec:	e03e      	b.n	8009e6c <ifft+0xc68>
        } else if (ar == 0.0F) {
 8009dee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8009df2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfa:	d119      	bne.n	8009e30 <ifft+0xc2c>
          nd2 = k - i;
 8009dfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	60fb      	str	r3, [r7, #12]
          y_data[nd2].re = 0.0F;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e0e:	4413      	add	r3, r2
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
          y_data[nd2].im = nt_im / nt_re;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e1c:	4413      	add	r3, r2
 8009e1e:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8009e22:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8009e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e2a:	edc3 7a01 	vstr	s15, [r3, #4]
 8009e2e:	e01d      	b.n	8009e6c <ifft+0xc68>
          nd2 = k - i;
 8009e30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	60fb      	str	r3, [r7, #12]
          y_data[nd2].re = ar / nt_re;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	00db      	lsls	r3, r3, #3
 8009e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e42:	4413      	add	r3, r2
 8009e44:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8009e48:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8009e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e50:	edc3 7a00 	vstr	s15, [r3]
          y_data[nd2].im = nt_im / nt_re;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e5a:	4413      	add	r3, r2
 8009e5c:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8009e60:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8009e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e68:	edc3 7a01 	vstr	s15, [r3, #4]
      for (k = i; k <= rt; k++) {
 8009e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e70:	3301      	adds	r3, #1
 8009e72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	f77f af4d 	ble.w	8009d1c <ifft+0xb18>
      emxFree_creal32_T(&fv);
 8009e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe ff48 	bl	8008d1c <emxFree_creal32_T>
      emxFree_creal32_T(&wwc);
 8009e8c:	f107 0320 	add.w	r3, r7, #32
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe ff43 	bl	8008d1c <emxFree_creal32_T>
    emxFree_real32_T(&sintabinv);
 8009e96:	f107 0310 	add.w	r3, r7, #16
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe ff92 	bl	8008dc4 <emxFree_real32_T>
    emxFree_real32_T(&sintab);
 8009ea0:	f107 0314 	add.w	r3, r7, #20
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe ff8d 	bl	8008dc4 <emxFree_real32_T>
    emxFree_real32_T(&costab);
 8009eaa:	f107 031c 	add.w	r3, r7, #28
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe ff88 	bl	8008dc4 <emxFree_real32_T>
}
 8009eb4:	bf00      	nop
 8009eb6:	378c      	adds	r7, #140	@ 0x8c
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd90      	pop	{r4, r7, pc}

08009ebc <interp1>:
 *                emxArray_real32_T *Vq
 * Return Type  : void
 */
void interp1(const emxArray_real32_T *varargin_1, const float varargin_2[256],
             const emxArray_real32_T *varargin_3, emxArray_real32_T *Vq)
{
 8009ebc:	b590      	push	{r4, r7, lr}
 8009ebe:	f5ad 5de2 	sub.w	sp, sp, #7232	@ 0x1c40
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	f607 4458 	addw	r4, r7, #3160	@ 0xc58
 8009eca:	f6a4 444c 	subw	r4, r4, #3148	@ 0xc4c
 8009ece:	6020      	str	r0, [r4, #0]
 8009ed0:	f607 4058 	addw	r0, r7, #3160	@ 0xc58
 8009ed4:	f5a0 6045 	sub.w	r0, r0, #3152	@ 0xc50
 8009ed8:	6001      	str	r1, [r0, #0]
 8009eda:	f607 4158 	addw	r1, r7, #3160	@ 0xc58
 8009ede:	f6a1 4154 	subw	r1, r1, #3156	@ 0xc54
 8009ee2:	600a      	str	r2, [r1, #0]
 8009ee4:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 8009ee8:	f6a2 4258 	subw	r2, r2, #3160	@ 0xc58
 8009eec:	6013      	str	r3, [r2, #0]
  int high_i;
  int k;
  int nxi;
  int nxm1;
  bool has_endslopes;
  varargin_3_data = varargin_3->data;
 8009eee:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8009ef2:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 8009efe:	6013      	str	r3, [r2, #0]
  varargin_1_data = varargin_1->data;
 8009f00:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8009f04:	f6a3 434c 	subw	r3, r3, #3148	@ 0xc4c
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 8009f10:	f102 021c 	add.w	r2, r2, #28
 8009f14:	6013      	str	r3, [r2, #0]
  memcpy(&y[0], &varargin_2[0], 256U * sizeof(float));
 8009f16:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8009f1a:	f5a3 6345 	sub.w	r3, r3, #3152	@ 0xc50
 8009f1e:	f507 50bf 	add.w	r0, r7, #6112	@ 0x17e0
 8009f22:	f100 001c 	add.w	r0, r0, #28
 8009f26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009f2a:	6819      	ldr	r1, [r3, #0]
 8009f2c:	f00d fad5 	bl	80174da <memcpy>
  emxInit_real32_T(&x, 2);
 8009f30:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8009f34:	f103 031c 	add.w	r3, r3, #28
 8009f38:	2102      	movs	r1, #2
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff f805 	bl	8008f4a <emxInit_real32_T>
  nxi = x->size[0] * x->size[1];
 8009f40:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8009f44:	f103 031c 	add.w	r3, r3, #28
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 8009f52:	f102 021c 	add.w	r2, r2, #28
 8009f56:	6812      	ldr	r2, [r2, #0]
 8009f58:	6852      	ldr	r2, [r2, #4]
 8009f5a:	3204      	adds	r2, #4
 8009f5c:	6812      	ldr	r2, [r2, #0]
 8009f5e:	fb02 f303 	mul.w	r3, r2, r3
 8009f62:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 8009f66:	f102 0208 	add.w	r2, r2, #8
 8009f6a:	6013      	str	r3, [r2, #0]
  x->size[0] = 1;
 8009f6c:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8009f70:	f103 031c 	add.w	r3, r3, #28
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]
  x->size[1] = varargin_1->size[1];
 8009f7c:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8009f80:	f6a3 434c 	subw	r3, r3, #3148	@ 0xc4c
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8009f8c:	f103 031c 	add.w	r3, r3, #28
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	3304      	adds	r3, #4
 8009f96:	6852      	ldr	r2, [r2, #4]
 8009f98:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(x, nxi);
 8009f9a:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8009f9e:	f103 031c 	add.w	r3, r3, #28
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 8009fa8:	f102 0208 	add.w	r2, r2, #8
 8009fac:	6811      	ldr	r1, [r2, #0]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fe23 	bl	8008bfa <emxEnsureCapacity_real32_T>
  x_data = x->data;
 8009fb4:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8009fb8:	f103 031c 	add.w	r3, r3, #28
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 8009fc4:	f102 0214 	add.w	r2, r2, #20
 8009fc8:	6013      	str	r3, [r2, #0]
  high_i = varargin_1->size[1];
 8009fca:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8009fce:	f6a3 434c 	subw	r3, r3, #3148	@ 0xc4c
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 8009fdc:	f102 0210 	add.w	r2, r2, #16
 8009fe0:	6013      	str	r3, [r2, #0]
  for (nxi = 0; nxi < high_i; nxi++) {
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 8009fe8:	f102 0208 	add.w	r2, r2, #8
 8009fec:	6013      	str	r3, [r2, #0]
 8009fee:	e024      	b.n	800a03a <interp1+0x17e>
    x_data[nxi] = varargin_1_data[nxi];
 8009ff0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 8009ff4:	f103 0308 	add.w	r3, r3, #8
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a000:	f102 021c 	add.w	r2, r2, #28
 800a004:	6812      	ldr	r2, [r2, #0]
 800a006:	441a      	add	r2, r3
 800a008:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a00c:	f103 0308 	add.w	r3, r3, #8
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	f507 51e2 	add.w	r1, r7, #7232	@ 0x1c40
 800a018:	f101 0114 	add.w	r1, r1, #20
 800a01c:	6809      	ldr	r1, [r1, #0]
 800a01e:	440b      	add	r3, r1
 800a020:	6812      	ldr	r2, [r2, #0]
 800a022:	601a      	str	r2, [r3, #0]
  for (nxi = 0; nxi < high_i; nxi++) {
 800a024:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a028:	f103 0308 	add.w	r3, r3, #8
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3301      	adds	r3, #1
 800a030:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a034:	f102 0208 	add.w	r2, r2, #8
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a03e:	f103 0308 	add.w	r3, r3, #8
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a048:	f103 0310 	add.w	r3, r3, #16
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	429a      	cmp	r2, r3
 800a050:	dbce      	blt.n	8009ff0 <interp1+0x134>
  }
  nxi = Vq->size[0] * Vq->size[1];
 800a052:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a056:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800a064:	f6a2 4258 	subw	r2, r2, #3160	@ 0xc58
 800a068:	6812      	ldr	r2, [r2, #0]
 800a06a:	6852      	ldr	r2, [r2, #4]
 800a06c:	3204      	adds	r2, #4
 800a06e:	6812      	ldr	r2, [r2, #0]
 800a070:	fb02 f303 	mul.w	r3, r2, r3
 800a074:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a078:	f102 0208 	add.w	r2, r2, #8
 800a07c:	6013      	str	r3, [r2, #0]
  Vq->size[0] = 1;
 800a07e:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a082:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	601a      	str	r2, [r3, #0]
  Vq->size[1] = varargin_3->size[1];
 800a08e:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a092:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a09e:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	6852      	ldr	r2, [r2, #4]
 800a0aa:	601a      	str	r2, [r3, #0]
  emxEnsureCapacity_real32_T(Vq, nxi);
 800a0ac:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a0b0:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 800a0b4:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a0b8:	f102 0208 	add.w	r2, r2, #8
 800a0bc:	6811      	ldr	r1, [r2, #0]
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	f7fe fd9b 	bl	8008bfa <emxEnsureCapacity_real32_T>
  Vq_data = Vq->data;
 800a0c4:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a0c8:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a0d4:	f102 0218 	add.w	r2, r2, #24
 800a0d8:	6013      	str	r3, [r2, #0]
  high_i = varargin_3->size[1];
 800a0da:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a0de:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a0ec:	f102 0210 	add.w	r2, r2, #16
 800a0f0:	6013      	str	r3, [r2, #0]
  for (nxi = 0; nxi < high_i; nxi++) {
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a0f8:	f102 0208 	add.w	r2, r2, #8
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	e019      	b.n	800a134 <interp1+0x278>
    Vq_data[nxi] = 0.0F;
 800a100:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a104:	f103 0308 	add.w	r3, r3, #8
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a110:	f102 0218 	add.w	r2, r2, #24
 800a114:	6812      	ldr	r2, [r2, #0]
 800a116:	4413      	add	r3, r2
 800a118:	f04f 0200 	mov.w	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
  for (nxi = 0; nxi < high_i; nxi++) {
 800a11e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a122:	f103 0308 	add.w	r3, r3, #8
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3301      	adds	r3, #1
 800a12a:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a12e:	f102 0208 	add.w	r2, r2, #8
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a138:	f103 0308 	add.w	r3, r3, #8
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a142:	f103 0310 	add.w	r3, r3, #16
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	429a      	cmp	r2, r3
 800a14a:	dbd9      	blt.n	800a100 <interp1+0x244>
  }
  has_endslopes = (varargin_3->size[1] == 0);
 800a14c:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a150:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	3304      	adds	r3, #4
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bf0c      	ite	eq
 800a160:	2301      	moveq	r3, #1
 800a162:	2300      	movne	r3, #0
 800a164:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a168:	f102 0217 	add.w	r2, r2, #23
 800a16c:	7013      	strb	r3, [r2, #0]
  emxInit_real32_T(&dx, 2);
 800a16e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a172:	f103 0304 	add.w	r3, r3, #4
 800a176:	2102      	movs	r1, #2
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe fee6 	bl	8008f4a <emxInit_real32_T>
  emxInit_real32_T(&md, 2);
 800a17e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a182:	2102      	movs	r1, #2
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe fee0 	bl	8008f4a <emxInit_real32_T>
  if (!has_endslopes) {
 800a18a:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a18e:	f103 0317 	add.w	r3, r3, #23
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f083 0301 	eor.w	r3, r3, #1
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f001 84a0 	beq.w	800bae0 <interp1+0x1c24>
    k = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a1a6:	f102 020c 	add.w	r2, r2, #12
 800a1aa:	6013      	str	r3, [r2, #0]
    int exitg1;
    do {
      exitg1 = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a1b2:	6013      	str	r3, [r2, #0]
      if (k < 256) {
 800a1b4:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a1b8:	f103 030c 	add.w	r3, r3, #12
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2bff      	cmp	r3, #255	@ 0xff
 800a1c0:	dc27      	bgt.n	800a212 <interp1+0x356>
        if (rtIsNaNF(varargin_1_data[k])) {
 800a1c2:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a1c6:	f103 030c 	add.w	r3, r3, #12
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a1d2:	f102 021c 	add.w	r2, r2, #28
 800a1d6:	6812      	ldr	r2, [r2, #0]
 800a1d8:	4413      	add	r3, r2
 800a1da:	edd3 7a00 	vldr	s15, [r3]
 800a1de:	eeb0 0a67 	vmov.f32	s0, s15
 800a1e2:	f001 fdc2 	bl	800bd6a <rtIsNaNF>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <interp1+0x33c>
          exitg1 = 1;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	f001 bc6e 	b.w	800bad4 <interp1+0x1c18>
        } else {
          k++;
 800a1f8:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a1fc:	f103 030c 	add.w	r3, r3, #12
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a208:	f102 020c 	add.w	r2, r2, #12
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	f001 bc61 	b.w	800bad4 <interp1+0x1c18>
        float pp_coefs_data[1020];
        float r;
        float xtmp;
        int pp_coefs_size_idx_1;
        int yoffset;
        if (varargin_1_data[1] < varargin_1_data[0]) {
 800a212:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a216:	f103 031c 	add.w	r3, r3, #28
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3304      	adds	r3, #4
 800a21e:	ed93 7a00 	vldr	s14, [r3]
 800a222:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a226:	f103 031c 	add.w	r3, r3, #28
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	edd3 7a00 	vldr	s15, [r3]
 800a230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a238:	f140 80a2 	bpl.w	800a380 <interp1+0x4c4>
          for (nxm1 = 0; nxm1 < 128; nxm1++) {
 800a23c:	2300      	movs	r3, #0
 800a23e:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a242:	f102 0204 	add.w	r2, r2, #4
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	e092      	b.n	800a370 <interp1+0x4b4>
            xtmp = x_data[nxm1];
 800a24a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a24e:	f103 0304 	add.w	r3, r3, #4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a25a:	f102 0214 	add.w	r2, r2, #20
 800a25e:	6812      	ldr	r2, [r2, #0]
 800a260:	4413      	add	r3, r2
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a268:	f102 021c 	add.w	r2, r2, #28
 800a26c:	6013      	str	r3, [r2, #0]
            x_data[nxm1] = x_data[255 - nxm1];
 800a26e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a272:	f103 0304 	add.w	r3, r3, #4
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a282:	f102 0214 	add.w	r2, r2, #20
 800a286:	6812      	ldr	r2, [r2, #0]
 800a288:	441a      	add	r2, r3
 800a28a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a28e:	f103 0304 	add.w	r3, r3, #4
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	f507 51e2 	add.w	r1, r7, #7232	@ 0x1c40
 800a29a:	f101 0114 	add.w	r1, r1, #20
 800a29e:	6809      	ldr	r1, [r1, #0]
 800a2a0:	440b      	add	r3, r1
 800a2a2:	6812      	ldr	r2, [r2, #0]
 800a2a4:	601a      	str	r2, [r3, #0]
            x_data[255 - nxm1] = xtmp;
 800a2a6:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a2aa:	f103 0304 	add.w	r3, r3, #4
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a2ba:	f102 0214 	add.w	r2, r2, #20
 800a2be:	6812      	ldr	r2, [r2, #0]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a2c6:	f102 021c 	add.w	r2, r2, #28
 800a2ca:	6812      	ldr	r2, [r2, #0]
 800a2cc:	601a      	str	r2, [r3, #0]
            xtmp = y[nxm1];
 800a2ce:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a2d2:	f103 0318 	add.w	r3, r3, #24
 800a2d6:	f2a3 425c 	subw	r2, r3, #1116	@ 0x45c
 800a2da:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a2de:	f103 0304 	add.w	r3, r3, #4
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a2ee:	f102 021c 	add.w	r2, r2, #28
 800a2f2:	6013      	str	r3, [r2, #0]
            y[nxm1] = y[255 - nxm1];
 800a2f4:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a2f8:	f103 0304 	add.w	r3, r3, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800a302:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a306:	f102 0218 	add.w	r2, r2, #24
 800a30a:	f2a2 425c 	subw	r2, r2, #1116	@ 0x45c
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a318:	f103 0318 	add.w	r3, r3, #24
 800a31c:	f2a3 415c 	subw	r1, r3, #1116	@ 0x45c
 800a320:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a324:	f103 0304 	add.w	r3, r3, #4
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	440b      	add	r3, r1
 800a32e:	601a      	str	r2, [r3, #0]
            y[255 - nxm1] = xtmp;
 800a330:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a334:	f103 0304 	add.w	r3, r3, #4
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800a33e:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a342:	f102 0218 	add.w	r2, r2, #24
 800a346:	f2a2 425c 	subw	r2, r2, #1116	@ 0x45c
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a352:	f102 021c 	add.w	r2, r2, #28
 800a356:	6812      	ldr	r2, [r2, #0]
 800a358:	601a      	str	r2, [r3, #0]
          for (nxm1 = 0; nxm1 < 128; nxm1++) {
 800a35a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a35e:	f103 0304 	add.w	r3, r3, #4
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3301      	adds	r3, #1
 800a366:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a36a:	f102 0204 	add.w	r2, r2, #4
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a374:	f103 0304 	add.w	r3, r3, #4
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a37c:	f77f af65 	ble.w	800a24a <interp1+0x38e>
          }
        }
        has_endslopes = (x->size[1] + 2 == 256);
 800a380:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a384:	f103 031c 	add.w	r3, r3, #28
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	3304      	adds	r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2bfe      	cmp	r3, #254	@ 0xfe
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a39c:	f102 0217 	add.w	r2, r2, #23
 800a3a0:	7013      	strb	r3, [r2, #0]
        if ((x->size[1] <= 2) || ((x->size[1] <= 3) && (!has_endslopes))) {
 800a3a2:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a3a6:	f103 031c 	add.w	r3, r3, #28
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	dd15      	ble.n	800a3e2 <interp1+0x526>
 800a3b6:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a3ba:	f103 031c 	add.w	r3, r3, #28
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	f300 828c 	bgt.w	800a8e4 <interp1+0xa28>
 800a3cc:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a3d0:	f103 0317 	add.w	r3, r3, #23
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	f083 0301 	eor.w	r3, r3, #1
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 8281 	beq.w	800a8e4 <interp1+0xa28>
          if (x->size[1] <= 2) {
 800a3e2:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a3e6:	f103 031c 	add.w	r3, r3, #28
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	dc06      	bgt.n	800a404 <interp1+0x548>
            pp_coefs_size_idx_1 = 2;
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a3fc:	f102 0218 	add.w	r2, r2, #24
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	e005      	b.n	800a410 <interp1+0x554>
          } else {
            pp_coefs_size_idx_1 = 3;
 800a404:	2303      	movs	r3, #3
 800a406:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a40a:	f102 0218 	add.w	r2, r2, #24
 800a40e:	6013      	str	r3, [r2, #0]
          }
          if (x->size[1] <= 2) {
 800a410:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a414:	f103 031c 	add.w	r3, r3, #28
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	3304      	adds	r3, #4
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b02      	cmp	r3, #2
 800a422:	f300 814b 	bgt.w	800a6bc <interp1+0x800>
            pp_coefs_data[0] = (y[1] - y[0]) / (x_data[1] - x_data[0]);
 800a426:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a42a:	f103 0318 	add.w	r3, r3, #24
 800a42e:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800a432:	ed93 7a01 	vldr	s14, [r3, #4]
 800a436:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a43a:	f103 0318 	add.w	r3, r3, #24
 800a43e:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800a442:	edd3 7a00 	vldr	s15, [r3]
 800a446:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a44a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a44e:	f103 0314 	add.w	r3, r3, #20
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3304      	adds	r3, #4
 800a456:	ed93 7a00 	vldr	s14, [r3]
 800a45a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a45e:	f103 0314 	add.w	r3, r3, #20
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	edd3 7a00 	vldr	s15, [r3]
 800a468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a46c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a470:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a474:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800a478:	edc3 7a00 	vstr	s15, [r3]
            pp_coefs_data[1] = y[0];
 800a47c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a480:	f103 0318 	add.w	r3, r3, #24
 800a484:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a48e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800a492:	605a      	str	r2, [r3, #4]
            nxi = dx->size[0] * dx->size[1];
 800a494:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a498:	f103 0304 	add.w	r3, r3, #4
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a4a6:	f102 0204 	add.w	r2, r2, #4
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	6852      	ldr	r2, [r2, #4]
 800a4ae:	3204      	adds	r2, #4
 800a4b0:	6812      	ldr	r2, [r2, #0]
 800a4b2:	fb02 f303 	mul.w	r3, r2, r3
 800a4b6:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a4ba:	f102 0208 	add.w	r2, r2, #8
 800a4be:	6013      	str	r3, [r2, #0]
            dx->size[0] = 1;
 800a4c0:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a4c4:	f103 0304 	add.w	r3, r3, #4
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	601a      	str	r2, [r3, #0]
            dx->size[1] = x->size[1];
 800a4d0:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a4d4:	f103 031c 	add.w	r3, r3, #28
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a4e0:	f103 0304 	add.w	r3, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	6852      	ldr	r2, [r2, #4]
 800a4ec:	601a      	str	r2, [r3, #0]
            emxEnsureCapacity_real32_T(dx, nxi);
 800a4ee:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a4f2:	f103 0304 	add.w	r3, r3, #4
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a4fc:	f102 0208 	add.w	r2, r2, #8
 800a500:	6811      	ldr	r1, [r2, #0]
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe fb79 	bl	8008bfa <emxEnsureCapacity_real32_T>
            dx_data = dx->data;
 800a508:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a50c:	f103 0304 	add.w	r3, r3, #4
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a518:	f102 0210 	add.w	r2, r2, #16
 800a51c:	6013      	str	r3, [r2, #0]
            high_i = x->size[1];
 800a51e:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a522:	f103 031c 	add.w	r3, r3, #28
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a530:	f102 0210 	add.w	r2, r2, #16
 800a534:	6013      	str	r3, [r2, #0]
            for (nxi = 0; nxi < high_i; nxi++) {
 800a536:	2300      	movs	r3, #0
 800a538:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a53c:	f102 0208 	add.w	r2, r2, #8
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	e024      	b.n	800a58e <interp1+0x6d2>
              dx_data[nxi] = x_data[nxi];
 800a544:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a548:	f103 0308 	add.w	r3, r3, #8
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a554:	f102 0214 	add.w	r2, r2, #20
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	441a      	add	r2, r3
 800a55c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a560:	f103 0308 	add.w	r3, r3, #8
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	f507 51e0 	add.w	r1, r7, #7168	@ 0x1c00
 800a56c:	f101 0110 	add.w	r1, r1, #16
 800a570:	6809      	ldr	r1, [r1, #0]
 800a572:	440b      	add	r3, r1
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	601a      	str	r2, [r3, #0]
            for (nxi = 0; nxi < high_i; nxi++) {
 800a578:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a57c:	f103 0308 	add.w	r3, r3, #8
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3301      	adds	r3, #1
 800a584:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a588:	f102 0208 	add.w	r2, r2, #8
 800a58c:	6013      	str	r3, [r2, #0]
 800a58e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a592:	f103 0308 	add.w	r3, r3, #8
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a59c:	f103 0310 	add.w	r3, r3, #16
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	dbce      	blt.n	800a544 <interp1+0x688>
            }
            nxi = x->size[0] * x->size[1];
 800a5a6:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a5aa:	f103 031c 	add.w	r3, r3, #28
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800a5b8:	f102 021c 	add.w	r2, r2, #28
 800a5bc:	6812      	ldr	r2, [r2, #0]
 800a5be:	6852      	ldr	r2, [r2, #4]
 800a5c0:	3204      	adds	r2, #4
 800a5c2:	6812      	ldr	r2, [r2, #0]
 800a5c4:	fb02 f303 	mul.w	r3, r2, r3
 800a5c8:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a5cc:	f102 0208 	add.w	r2, r2, #8
 800a5d0:	6013      	str	r3, [r2, #0]
            x->size[0] = 1;
 800a5d2:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a5d6:	f103 031c 	add.w	r3, r3, #28
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	601a      	str	r2, [r3, #0]
            x->size[1] = dx->size[1];
 800a5e2:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a5e6:	f103 0304 	add.w	r3, r3, #4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a5f2:	f103 031c 	add.w	r3, r3, #28
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	6852      	ldr	r2, [r2, #4]
 800a5fe:	601a      	str	r2, [r3, #0]
            emxEnsureCapacity_real32_T(x, nxi);
 800a600:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a604:	f103 031c 	add.w	r3, r3, #28
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a60e:	f102 0208 	add.w	r2, r2, #8
 800a612:	6811      	ldr	r1, [r2, #0]
 800a614:	4618      	mov	r0, r3
 800a616:	f7fe faf0 	bl	8008bfa <emxEnsureCapacity_real32_T>
            x_data = x->data;
 800a61a:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a61e:	f103 031c 	add.w	r3, r3, #28
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a62a:	f102 0214 	add.w	r2, r2, #20
 800a62e:	6013      	str	r3, [r2, #0]
            high_i = dx->size[1];
 800a630:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a634:	f103 0304 	add.w	r3, r3, #4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a642:	f102 0210 	add.w	r2, r2, #16
 800a646:	6013      	str	r3, [r2, #0]
            for (nxi = 0; nxi < high_i; nxi++) {
 800a648:	2300      	movs	r3, #0
 800a64a:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a64e:	f102 0208 	add.w	r2, r2, #8
 800a652:	6013      	str	r3, [r2, #0]
 800a654:	e024      	b.n	800a6a0 <interp1+0x7e4>
              x_data[nxi] = dx_data[nxi];
 800a656:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a65a:	f103 0308 	add.w	r3, r3, #8
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a666:	f102 0210 	add.w	r2, r2, #16
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	441a      	add	r2, r3
 800a66e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a672:	f103 0308 	add.w	r3, r3, #8
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	f507 51e2 	add.w	r1, r7, #7232	@ 0x1c40
 800a67e:	f101 0114 	add.w	r1, r1, #20
 800a682:	6809      	ldr	r1, [r1, #0]
 800a684:	440b      	add	r3, r1
 800a686:	6812      	ldr	r2, [r2, #0]
 800a688:	601a      	str	r2, [r3, #0]
            for (nxi = 0; nxi < high_i; nxi++) {
 800a68a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a68e:	f103 0308 	add.w	r3, r3, #8
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a69a:	f102 0208 	add.w	r2, r2, #8
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a6a4:	f103 0308 	add.w	r3, r3, #8
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a6ae:	f103 0310 	add.w	r3, r3, #16
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	dbce      	blt.n	800a656 <interp1+0x79a>
          if (x->size[1] <= 2) {
 800a6b8:	f001 b887 	b.w	800b7ca <interp1+0x190e>
            }
          } else {
            xtmp = x_data[1] - x_data[0];
 800a6bc:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a6c0:	f103 0314 	add.w	r3, r3, #20
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	ed93 7a00 	vldr	s14, [r3]
 800a6cc:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a6d0:	f103 0314 	add.w	r3, r3, #20
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	edd3 7a00 	vldr	s15, [r3]
 800a6da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6de:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a6e2:	f103 031c 	add.w	r3, r3, #28
 800a6e6:	edc3 7a00 	vstr	s15, [r3]
            r = (y[1] - y[0]) / xtmp;
 800a6ea:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a6ee:	f103 0318 	add.w	r3, r3, #24
 800a6f2:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800a6f6:	ed93 7a01 	vldr	s14, [r3, #4]
 800a6fa:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a6fe:	f103 0318 	add.w	r3, r3, #24
 800a702:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800a706:	edd3 7a00 	vldr	s15, [r3]
 800a70a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a70e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a712:	f103 031c 	add.w	r3, r3, #28
 800a716:	ed93 7a00 	vldr	s14, [r3]
 800a71a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a71e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a722:	f103 0308 	add.w	r3, r3, #8
 800a726:	edc3 7a00 	vstr	s15, [r3]
            pp_coefs_data[0] = ((y[2] - y[1]) / (x_data[2] - x_data[1]) - r) /
 800a72a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a72e:	f103 0318 	add.w	r3, r3, #24
 800a732:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800a736:	ed93 7a02 	vldr	s14, [r3, #8]
 800a73a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a73e:	f103 0318 	add.w	r3, r3, #24
 800a742:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800a746:	edd3 7a01 	vldr	s15, [r3, #4]
 800a74a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a74e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a752:	f103 0314 	add.w	r3, r3, #20
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3308      	adds	r3, #8
 800a75a:	ed93 7a00 	vldr	s14, [r3]
 800a75e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a762:	f103 0314 	add.w	r3, r3, #20
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3304      	adds	r3, #4
 800a76a:	edd3 7a00 	vldr	s15, [r3]
 800a76e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a776:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a77a:	f103 0308 	add.w	r3, r3, #8
 800a77e:	edd3 7a00 	vldr	s15, [r3]
 800a782:	ee77 6a67 	vsub.f32	s13, s14, s15
                               (x_data[2] - x_data[0]);
 800a786:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a78a:	f103 0314 	add.w	r3, r3, #20
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3308      	adds	r3, #8
 800a792:	ed93 7a00 	vldr	s14, [r3]
 800a796:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a79a:	f103 0314 	add.w	r3, r3, #20
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	edd3 7a00 	vldr	s15, [r3]
 800a7a4:	ee37 7a67 	vsub.f32	s14, s14, s15
            pp_coefs_data[0] = ((y[2] - y[1]) / (x_data[2] - x_data[1]) - r) /
 800a7a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ac:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a7b0:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800a7b4:	edc3 7a00 	vstr	s15, [r3]
            pp_coefs_data[1] = r - pp_coefs_data[0] * xtmp;
 800a7b8:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a7bc:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800a7c0:	ed93 7a00 	vldr	s14, [r3]
 800a7c4:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800a7c8:	f103 031c 	add.w	r3, r3, #28
 800a7cc:	edd3 7a00 	vldr	s15, [r3]
 800a7d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d4:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a7d8:	f103 0308 	add.w	r3, r3, #8
 800a7dc:	ed93 7a00 	vldr	s14, [r3]
 800a7e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7e4:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a7e8:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800a7ec:	edc3 7a01 	vstr	s15, [r3, #4]
            pp_coefs_data[2] = y[0];
 800a7f0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a7f4:	f103 0318 	add.w	r3, r3, #24
 800a7f8:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800a802:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800a806:	609a      	str	r2, [r3, #8]
            xtmp = x_data[0];
 800a808:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a80c:	f103 0314 	add.w	r3, r3, #20
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a818:	f102 021c 	add.w	r2, r2, #28
 800a81c:	6013      	str	r3, [r2, #0]
            r = x_data[2];
 800a81e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a822:	f103 0314 	add.w	r3, r3, #20
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a82e:	f102 0208 	add.w	r2, r2, #8
 800a832:	6013      	str	r3, [r2, #0]
            nxi = x->size[0] * x->size[1];
 800a834:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a838:	f103 031c 	add.w	r3, r3, #28
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800a846:	f102 021c 	add.w	r2, r2, #28
 800a84a:	6812      	ldr	r2, [r2, #0]
 800a84c:	6852      	ldr	r2, [r2, #4]
 800a84e:	3204      	adds	r2, #4
 800a850:	6812      	ldr	r2, [r2, #0]
 800a852:	fb02 f303 	mul.w	r3, r2, r3
 800a856:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a85a:	f102 0208 	add.w	r2, r2, #8
 800a85e:	6013      	str	r3, [r2, #0]
            x->size[0] = 1;
 800a860:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a864:	f103 031c 	add.w	r3, r3, #28
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	601a      	str	r2, [r3, #0]
            x->size[1] = 2;
 800a870:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a874:	f103 031c 	add.w	r3, r3, #28
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	3304      	adds	r3, #4
 800a87e:	2202      	movs	r2, #2
 800a880:	601a      	str	r2, [r3, #0]
            emxEnsureCapacity_real32_T(x, nxi);
 800a882:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a886:	f103 031c 	add.w	r3, r3, #28
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a890:	f102 0208 	add.w	r2, r2, #8
 800a894:	6811      	ldr	r1, [r2, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe f9af 	bl	8008bfa <emxEnsureCapacity_real32_T>
            x_data = x->data;
 800a89c:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a8a0:	f103 031c 	add.w	r3, r3, #28
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a8ac:	f102 0214 	add.w	r2, r2, #20
 800a8b0:	6013      	str	r3, [r2, #0]
            x_data[0] = xtmp;
 800a8b2:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a8b6:	f103 0314 	add.w	r3, r3, #20
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a8c0:	f102 021c 	add.w	r2, r2, #28
 800a8c4:	6812      	ldr	r2, [r2, #0]
 800a8c6:	601a      	str	r2, [r3, #0]
            x_data[1] = r;
 800a8c8:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a8cc:	f103 0314 	add.w	r3, r3, #20
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a8d8:	f102 0208 	add.w	r2, r2, #8
 800a8dc:	6812      	ldr	r2, [r2, #0]
 800a8de:	601a      	str	r2, [r3, #0]
          if (x->size[1] <= 2) {
 800a8e0:	f000 bf73 	b.w	800b7ca <interp1+0x190e>
          float s_data[256];
          float dvdf_data[255];
          float d31;
          float dnnm2;
          short szs_idx_1;
          nxm1 = x->size[1] - 1;
 800a8e4:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a8e8:	f103 031c 	add.w	r3, r3, #28
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a8fa:	f102 0204 	add.w	r2, r2, #4
 800a8fe:	6013      	str	r3, [r2, #0]
          if (has_endslopes) {
 800a900:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a904:	f103 0317 	add.w	r3, r3, #23
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00c      	beq.n	800a928 <interp1+0xa6c>
            szs_idx_1 = 254;
 800a90e:	23fe      	movs	r3, #254	@ 0xfe
 800a910:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a914:	f102 020a 	add.w	r2, r2, #10
 800a918:	8013      	strh	r3, [r2, #0]
            yoffset = 1;
 800a91a:	2301      	movs	r3, #1
 800a91c:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a920:	f102 0214 	add.w	r2, r2, #20
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	e00c      	b.n	800a942 <interp1+0xa86>
          } else {
            szs_idx_1 = 256;
 800a928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a92c:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a930:	f102 020a 	add.w	r2, r2, #10
 800a934:	8013      	strh	r3, [r2, #0]
            yoffset = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800a93c:	f102 0214 	add.w	r2, r2, #20
 800a940:	6013      	str	r3, [r2, #0]
          }
          nxi = dx->size[0] * dx->size[1];
 800a942:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a946:	f103 0304 	add.w	r3, r3, #4
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a954:	f102 0204 	add.w	r2, r2, #4
 800a958:	6812      	ldr	r2, [r2, #0]
 800a95a:	6852      	ldr	r2, [r2, #4]
 800a95c:	3204      	adds	r2, #4
 800a95e:	6812      	ldr	r2, [r2, #0]
 800a960:	fb02 f303 	mul.w	r3, r2, r3
 800a964:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a968:	f102 0208 	add.w	r2, r2, #8
 800a96c:	6013      	str	r3, [r2, #0]
          dx->size[0] = 1;
 800a96e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a972:	f103 0304 	add.w	r3, r3, #4
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	601a      	str	r2, [r3, #0]
          dx->size[1] = x->size[1] - 1;
 800a97e:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800a982:	f103 031c 	add.w	r3, r3, #28
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	3304      	adds	r3, #4
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a992:	f103 0304 	add.w	r3, r3, #4
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	3304      	adds	r3, #4
 800a99c:	3a01      	subs	r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
          emxEnsureCapacity_real32_T(dx, nxi);
 800a9a0:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a9a4:	f103 0304 	add.w	r3, r3, #4
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a9ae:	f102 0208 	add.w	r2, r2, #8
 800a9b2:	6811      	ldr	r1, [r2, #0]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe f920 	bl	8008bfa <emxEnsureCapacity_real32_T>
          dx_data = dx->data;
 800a9ba:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800a9be:	f103 0304 	add.w	r3, r3, #4
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800a9ca:	f102 0210 	add.w	r2, r2, #16
 800a9ce:	6013      	str	r3, [r2, #0]
          for (k = 0; k < nxm1; k++) {
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a9d6:	f102 020c 	add.w	r2, r2, #12
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	e087      	b.n	800aaee <interp1+0xc32>
            xtmp = x_data[k + 1] - x_data[k];
 800a9de:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800a9e2:	f103 030c 	add.w	r3, r3, #12
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800a9f0:	f102 0214 	add.w	r2, r2, #20
 800a9f4:	6812      	ldr	r2, [r2, #0]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	ed93 7a00 	vldr	s14, [r3]
 800a9fc:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aa00:	f103 030c 	add.w	r3, r3, #12
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800aa0c:	f102 0214 	add.w	r2, r2, #20
 800aa10:	6812      	ldr	r2, [r2, #0]
 800aa12:	4413      	add	r3, r2
 800aa14:	edd3 7a00 	vldr	s15, [r3]
 800aa18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa1c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aa20:	f103 031c 	add.w	r3, r3, #28
 800aa24:	edc3 7a00 	vstr	s15, [r3]
            dx_data[k] = xtmp;
 800aa28:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aa2c:	f103 030c 	add.w	r3, r3, #12
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800aa38:	f102 0210 	add.w	r2, r2, #16
 800aa3c:	6812      	ldr	r2, [r2, #0]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800aa44:	f102 021c 	add.w	r2, r2, #28
 800aa48:	6812      	ldr	r2, [r2, #0]
 800aa4a:	601a      	str	r2, [r3, #0]
            high_i = yoffset + k;
 800aa4c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aa50:	f103 0314 	add.w	r3, r3, #20
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aa5a:	f103 030c 	add.w	r3, r3, #12
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4413      	add	r3, r2
 800aa62:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800aa66:	f102 0210 	add.w	r2, r2, #16
 800aa6a:	6013      	str	r3, [r2, #0]
            dvdf_data[k] = (y[high_i + 1] - y[high_i]) / xtmp;
 800aa6c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aa70:	f103 0310 	add.w	r3, r3, #16
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800aa7c:	f102 0218 	add.w	r2, r2, #24
 800aa80:	f2a2 425c 	subw	r2, r2, #1116	@ 0x45c
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	ed93 7a00 	vldr	s14, [r3]
 800aa8c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aa90:	f103 0318 	add.w	r3, r3, #24
 800aa94:	f2a3 425c 	subw	r2, r3, #1116	@ 0x45c
 800aa98:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aa9c:	f103 0310 	add.w	r3, r3, #16
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	edd3 7a00 	vldr	s15, [r3]
 800aaaa:	ee77 6a67 	vsub.f32	s13, s14, s15
 800aaae:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800aab2:	f103 031c 	add.w	r3, r3, #28
 800aab6:	ed93 7a00 	vldr	s14, [r3]
 800aaba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aabe:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800aac2:	f6a3 4248 	subw	r2, r3, #3144	@ 0xc48
 800aac6:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aaca:	f103 030c 	add.w	r3, r3, #12
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	edc3 7a00 	vstr	s15, [r3]
          for (k = 0; k < nxm1; k++) {
 800aad8:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aadc:	f103 030c 	add.w	r3, r3, #12
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3301      	adds	r3, #1
 800aae4:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800aae8:	f102 020c 	add.w	r2, r2, #12
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aaf2:	f103 030c 	add.w	r3, r3, #12
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aafc:	f103 0304 	add.w	r3, r3, #4
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	f6ff af6b 	blt.w	800a9de <interp1+0xb22>
          }
          for (k = 2; k <= nxm1; k++) {
 800ab08:	2302      	movs	r3, #2
 800ab0a:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800ab0e:	f102 020c 	add.w	r2, r2, #12
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	e060      	b.n	800abd8 <interp1+0xd1c>
            s_data[k - 1] = 3.0F * (dx_data[k - 1] * dvdf_data[k - 2] +
 800ab16:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800ab1a:	f103 030c 	add.w	r3, r3, #12
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab24:	3b01      	subs	r3, #1
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800ab2c:	f102 0210 	add.w	r2, r2, #16
 800ab30:	6812      	ldr	r2, [r2, #0]
 800ab32:	4413      	add	r3, r2
 800ab34:	ed93 7a00 	vldr	s14, [r3]
 800ab38:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800ab3c:	f103 030c 	add.w	r3, r3, #12
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3b02      	subs	r3, #2
 800ab44:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800ab48:	f6a2 4248 	subw	r2, r2, #3144	@ 0xc48
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	edd3 7a00 	vldr	s15, [r3]
 800ab54:	ee27 7a27 	vmul.f32	s14, s14, s15
                                    dx_data[k - 2] * dvdf_data[k - 1]);
 800ab58:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800ab5c:	f103 030c 	add.w	r3, r3, #12
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab66:	3b02      	subs	r3, #2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800ab6e:	f102 0210 	add.w	r2, r2, #16
 800ab72:	6812      	ldr	r2, [r2, #0]
 800ab74:	4413      	add	r3, r2
 800ab76:	edd3 6a00 	vldr	s13, [r3]
 800ab7a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800ab7e:	f103 030c 	add.w	r3, r3, #12
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800ab8a:	f6a2 4248 	subw	r2, r2, #3144	@ 0xc48
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	edd3 7a00 	vldr	s15, [r3]
 800ab96:	ee66 7aa7 	vmul.f32	s15, s13, s15
            s_data[k - 1] = 3.0F * (dx_data[k - 1] * dvdf_data[k - 2] +
 800ab9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab9e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800aba2:	f103 030c 	add.w	r3, r3, #12
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800abae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abb2:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800abb6:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	edc3 7a00 	vstr	s15, [r3]
          for (k = 2; k <= nxm1; k++) {
 800abc2:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800abc6:	f103 030c 	add.w	r3, r3, #12
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3301      	adds	r3, #1
 800abce:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800abd2:	f102 020c 	add.w	r2, r2, #12
 800abd6:	6013      	str	r3, [r2, #0]
 800abd8:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800abdc:	f103 030c 	add.w	r3, r3, #12
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800abe6:	f103 0304 	add.w	r3, r3, #4
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	dd92      	ble.n	800ab16 <interp1+0xc5a>
          }
          if (has_endslopes) {
 800abf0:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800abf4:	f103 0317 	add.w	r3, r3, #23
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d060      	beq.n	800acc0 <interp1+0xe04>
            d31 = 0.0F;
 800abfe:	f04f 0300 	mov.w	r3, #0
 800ac02:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ac06:	f102 0210 	add.w	r2, r2, #16
 800ac0a:	6013      	str	r3, [r2, #0]
            dnnm2 = 0.0F;
 800ac0c:	f04f 0300 	mov.w	r3, #0
 800ac10:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ac14:	f102 020c 	add.w	r2, r2, #12
 800ac18:	6013      	str	r3, [r2, #0]
            s_data[0] = y[0] * dx_data[1];
 800ac1a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800ac1e:	f103 0318 	add.w	r3, r3, #24
 800ac22:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800ac26:	ed93 7a00 	vldr	s14, [r3]
 800ac2a:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800ac2e:	f103 0310 	add.w	r3, r3, #16
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3304      	adds	r3, #4
 800ac36:	edd3 7a00 	vldr	s15, [r3]
 800ac3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3e:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800ac42:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800ac46:	edc3 7a00 	vstr	s15, [r3]
            s_data[x->size[1] - 1] =
                dx_data[x->size[1] - 3] * y[x->size[1] + 1];
 800ac4a:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ac4e:	f103 031c 	add.w	r3, r3, #28
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac5e:	3b03      	subs	r3, #3
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800ac66:	f102 0210 	add.w	r2, r2, #16
 800ac6a:	6812      	ldr	r2, [r2, #0]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	ed93 7a00 	vldr	s14, [r3]
 800ac72:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ac76:	f103 031c 	add.w	r3, r3, #28
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3301      	adds	r3, #1
 800ac84:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800ac88:	f102 0218 	add.w	r2, r2, #24
 800ac8c:	f2a2 425c 	subw	r2, r2, #1116	@ 0x45c
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	edd3 7a00 	vldr	s15, [r3]
            s_data[x->size[1] - 1] =
 800ac98:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ac9c:	f103 031c 	add.w	r3, r3, #28
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	3304      	adds	r3, #4
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3b01      	subs	r3, #1
                dx_data[x->size[1] - 3] * y[x->size[1] + 1];
 800acaa:	ee67 7a27 	vmul.f32	s15, s14, s15
            s_data[x->size[1] - 1] =
 800acae:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800acb2:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4413      	add	r3, r2
 800acba:	edc3 7a00 	vstr	s15, [r3]
 800acbe:	e118      	b.n	800aef2 <interp1+0x1036>
          } else {
            d31 = x_data[2] - x_data[0];
 800acc0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800acc4:	f103 0314 	add.w	r3, r3, #20
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3308      	adds	r3, #8
 800accc:	ed93 7a00 	vldr	s14, [r3]
 800acd0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800acd4:	f103 0314 	add.w	r3, r3, #20
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	edd3 7a00 	vldr	s15, [r3]
 800acde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ace2:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ace6:	f103 0310 	add.w	r3, r3, #16
 800acea:	edc3 7a00 	vstr	s15, [r3]
            dnnm2 = x_data[x->size[1] - 1] - x_data[x->size[1] - 3];
 800acee:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800acf2:	f103 031c 	add.w	r3, r3, #28
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	3304      	adds	r3, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad02:	3b01      	subs	r3, #1
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800ad0a:	f102 0214 	add.w	r2, r2, #20
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	4413      	add	r3, r2
 800ad12:	ed93 7a00 	vldr	s14, [r3]
 800ad16:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ad1a:	f103 031c 	add.w	r3, r3, #28
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	3304      	adds	r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad2a:	3b03      	subs	r3, #3
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800ad32:	f102 0214 	add.w	r2, r2, #20
 800ad36:	6812      	ldr	r2, [r2, #0]
 800ad38:	4413      	add	r3, r2
 800ad3a:	edd3 7a00 	vldr	s15, [r3]
 800ad3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad42:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ad46:	f103 030c 	add.w	r3, r3, #12
 800ad4a:	edc3 7a00 	vstr	s15, [r3]
            s_data[0] = ((dx_data[0] + 2.0F * d31) * dx_data[1] * dvdf_data[0] +
 800ad4e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800ad52:	f103 0310 	add.w	r3, r3, #16
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	ed93 7a00 	vldr	s14, [r3]
 800ad5c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ad60:	f103 0310 	add.w	r3, r3, #16
 800ad64:	edd3 7a00 	vldr	s15, [r3]
 800ad68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ad6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad70:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800ad74:	f103 0310 	add.w	r3, r3, #16
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	edd3 7a00 	vldr	s15, [r3]
 800ad80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad84:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800ad88:	f6a3 4348 	subw	r3, r3, #3144	@ 0xc48
 800ad8c:	edd3 7a00 	vldr	s15, [r3]
 800ad90:	ee27 7a27 	vmul.f32	s14, s14, s15
                         dx_data[0] * dx_data[0] * dvdf_data[1]) /
 800ad94:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800ad98:	f103 0310 	add.w	r3, r3, #16
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	edd3 6a00 	vldr	s13, [r3]
 800ada2:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800ada6:	f103 0310 	add.w	r3, r3, #16
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	edd3 7a00 	vldr	s15, [r3]
 800adb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800adb4:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800adb8:	f6a3 4348 	subw	r3, r3, #3144	@ 0xc48
 800adbc:	edd3 7a01 	vldr	s15, [r3, #4]
 800adc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
            s_data[0] = ((dx_data[0] + 2.0F * d31) * dx_data[1] * dvdf_data[0] +
 800adc4:	ee77 6a27 	vadd.f32	s13, s14, s15
                         dx_data[0] * dx_data[0] * dvdf_data[1]) /
 800adc8:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800adcc:	f103 0310 	add.w	r3, r3, #16
 800add0:	ed93 7a00 	vldr	s14, [r3]
 800add4:	eec6 7a87 	vdiv.f32	s15, s13, s14
            s_data[0] = ((dx_data[0] + 2.0F * d31) * dx_data[1] * dvdf_data[0] +
 800add8:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800addc:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800ade0:	edc3 7a00 	vstr	s15, [r3]
                        d31;
            xtmp = dx_data[x->size[1] - 2];
 800ade4:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ade8:	f103 031c 	add.w	r3, r3, #28
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	3304      	adds	r3, #4
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adf8:	3b02      	subs	r3, #2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800ae00:	f102 0210 	add.w	r2, r2, #16
 800ae04:	6812      	ldr	r2, [r2, #0]
 800ae06:	4413      	add	r3, r2
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ae0e:	f102 021c 	add.w	r2, r2, #28
 800ae12:	6013      	str	r3, [r2, #0]
            s_data[x->size[1] - 1] =
                ((xtmp + 2.0F * dnnm2) * dx_data[x->size[1] - 3] *
 800ae14:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ae18:	f103 030c 	add.w	r3, r3, #12
 800ae1c:	edd3 7a00 	vldr	s15, [r3]
 800ae20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ae24:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ae28:	f103 031c 	add.w	r3, r3, #28
 800ae2c:	edd3 7a00 	vldr	s15, [r3]
 800ae30:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae34:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae38:	f103 031c 	add.w	r3, r3, #28
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	3304      	adds	r3, #4
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae48:	3b03      	subs	r3, #3
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800ae50:	f102 0210 	add.w	r2, r2, #16
 800ae54:	6812      	ldr	r2, [r2, #0]
 800ae56:	4413      	add	r3, r2
 800ae58:	edd3 7a00 	vldr	s15, [r3]
 800ae5c:	ee27 7a27 	vmul.f32	s14, s14, s15
                     dvdf_data[x->size[1] - 2] +
 800ae60:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae64:	f103 031c 	add.w	r3, r3, #28
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3b02      	subs	r3, #2
 800ae72:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800ae76:	f6a2 4248 	subw	r2, r2, #3144	@ 0xc48
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	edd3 7a00 	vldr	s15, [r3]
                ((xtmp + 2.0F * dnnm2) * dx_data[x->size[1] - 3] *
 800ae82:	ee27 7a27 	vmul.f32	s14, s14, s15
                 xtmp * xtmp * dvdf_data[x->size[1] - 3]) /
 800ae86:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ae8a:	f103 031c 	add.w	r3, r3, #28
 800ae8e:	edd3 7a00 	vldr	s15, [r3]
 800ae92:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ae96:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800ae9a:	f103 031c 	add.w	r3, r3, #28
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	3304      	adds	r3, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3b03      	subs	r3, #3
 800aea8:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800aeac:	f6a2 4248 	subw	r2, r2, #3144	@ 0xc48
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	edd3 7a00 	vldr	s15, [r3]
 800aeb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
                     dvdf_data[x->size[1] - 2] +
 800aebc:	ee77 6a27 	vadd.f32	s13, s14, s15
            s_data[x->size[1] - 1] =
 800aec0:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800aec4:	f103 031c 	add.w	r3, r3, #28
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	3304      	adds	r3, #4
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3b01      	subs	r3, #1
                 xtmp * xtmp * dvdf_data[x->size[1] - 3]) /
 800aed2:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800aed6:	f102 020c 	add.w	r2, r2, #12
 800aeda:	ed92 7a00 	vldr	s14, [r2]
 800aede:	eec6 7a87 	vdiv.f32	s15, s13, s14
            s_data[x->size[1] - 1] =
 800aee2:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800aee6:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	edc3 7a00 	vstr	s15, [r3]
                dnnm2;
          }
          nxi = md->size[0] * md->size[1];
 800aef2:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800af00:	6812      	ldr	r2, [r2, #0]
 800af02:	6852      	ldr	r2, [r2, #4]
 800af04:	3204      	adds	r2, #4
 800af06:	6812      	ldr	r2, [r2, #0]
 800af08:	fb02 f303 	mul.w	r3, r2, r3
 800af0c:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800af10:	f102 0208 	add.w	r2, r2, #8
 800af14:	6013      	str	r3, [r2, #0]
          md->size[0] = 1;
 800af16:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	601a      	str	r2, [r3, #0]
          md->size[1] = x->size[1];
 800af22:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800af26:	f103 031c 	add.w	r3, r3, #28
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	3304      	adds	r3, #4
 800af38:	6852      	ldr	r2, [r2, #4]
 800af3a:	601a      	str	r2, [r3, #0]
          emxEnsureCapacity_real32_T(md, nxi);
 800af3c:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800af46:	f102 0208 	add.w	r2, r2, #8
 800af4a:	6811      	ldr	r1, [r2, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fd fe54 	bl	8008bfa <emxEnsureCapacity_real32_T>
          md_data = md->data;
 800af52:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800af5e:	f102 020c 	add.w	r2, r2, #12
 800af62:	6013      	str	r3, [r2, #0]
          md_data[0] = dx_data[1];
 800af64:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af68:	f103 0310 	add.w	r3, r3, #16
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800af74:	f103 030c 	add.w	r3, r3, #12
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	601a      	str	r2, [r3, #0]
          xtmp = dx_data[x->size[1] - 3];
 800af7c:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800af80:	f103 031c 	add.w	r3, r3, #28
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	3304      	adds	r3, #4
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af90:	3b03      	subs	r3, #3
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800af98:	f102 0210 	add.w	r2, r2, #16
 800af9c:	6812      	ldr	r2, [r2, #0]
 800af9e:	4413      	add	r3, r2
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800afa6:	f102 021c 	add.w	r2, r2, #28
 800afaa:	6013      	str	r3, [r2, #0]
          md_data[x->size[1] - 1] = xtmp;
 800afac:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800afb0:	f103 031c 	add.w	r3, r3, #28
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	3304      	adds	r3, #4
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800afc0:	3b01      	subs	r3, #1
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800afc8:	f102 020c 	add.w	r2, r2, #12
 800afcc:	6812      	ldr	r2, [r2, #0]
 800afce:	4413      	add	r3, r2
 800afd0:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800afd4:	f102 021c 	add.w	r2, r2, #28
 800afd8:	6812      	ldr	r2, [r2, #0]
 800afda:	601a      	str	r2, [r3, #0]
          for (k = 2; k <= nxm1; k++) {
 800afdc:	2302      	movs	r3, #2
 800afde:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800afe2:	f102 020c 	add.w	r2, r2, #12
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	e041      	b.n	800b06e <interp1+0x11b2>
            md_data[k - 1] = 2.0F * (dx_data[k - 1] + dx_data[k - 2]);
 800afea:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800afee:	f103 030c 	add.w	r3, r3, #12
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aff8:	3b01      	subs	r3, #1
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b000:	f102 0210 	add.w	r2, r2, #16
 800b004:	6812      	ldr	r2, [r2, #0]
 800b006:	4413      	add	r3, r2
 800b008:	ed93 7a00 	vldr	s14, [r3]
 800b00c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b010:	f103 030c 	add.w	r3, r3, #12
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b01a:	3b02      	subs	r3, #2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b022:	f102 0210 	add.w	r2, r2, #16
 800b026:	6812      	ldr	r2, [r2, #0]
 800b028:	4413      	add	r3, r2
 800b02a:	edd3 7a00 	vldr	s15, [r3]
 800b02e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b032:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b036:	f103 030c 	add.w	r3, r3, #12
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b040:	3b01      	subs	r3, #1
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b048:	f102 020c 	add.w	r2, r2, #12
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	4413      	add	r3, r2
 800b050:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b054:	edc3 7a00 	vstr	s15, [r3]
          for (k = 2; k <= nxm1; k++) {
 800b058:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b05c:	f103 030c 	add.w	r3, r3, #12
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b068:	f102 020c 	add.w	r2, r2, #12
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b072:	f103 030c 	add.w	r3, r3, #12
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b07c:	f103 0304 	add.w	r3, r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	429a      	cmp	r2, r3
 800b084:	ddb1      	ble.n	800afea <interp1+0x112e>
          }
          r = dx_data[1] / md_data[0];
 800b086:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b08a:	f103 0310 	add.w	r3, r3, #16
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3304      	adds	r3, #4
 800b092:	edd3 6a00 	vldr	s13, [r3]
 800b096:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b09a:	f103 030c 	add.w	r3, r3, #12
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	ed93 7a00 	vldr	s14, [r3]
 800b0a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0a8:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b0ac:	f103 0308 	add.w	r3, r3, #8
 800b0b0:	edc3 7a00 	vstr	s15, [r3]
          md_data[1] -= r * d31;
 800b0b4:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b0b8:	f103 030c 	add.w	r3, r3, #12
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	ed93 7a00 	vldr	s14, [r3]
 800b0c4:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b0c8:	f103 0308 	add.w	r3, r3, #8
 800b0cc:	edd3 6a00 	vldr	s13, [r3]
 800b0d0:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b0d4:	f103 0310 	add.w	r3, r3, #16
 800b0d8:	edd3 7a00 	vldr	s15, [r3]
 800b0dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0e0:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b0e4:	f103 030c 	add.w	r3, r3, #12
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0f0:	edc3 7a00 	vstr	s15, [r3]
          s_data[1] -= r * s_data[0];
 800b0f4:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b0f8:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800b0fc:	ed93 7a01 	vldr	s14, [r3, #4]
 800b100:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b104:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800b108:	edd3 6a00 	vldr	s13, [r3]
 800b10c:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b110:	f103 0308 	add.w	r3, r3, #8
 800b114:	edd3 7a00 	vldr	s15, [r3]
 800b118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b11c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b120:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b124:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800b128:	edc3 7a01 	vstr	s15, [r3, #4]
          for (k = 3; k <= nxm1; k++) {
 800b12c:	2303      	movs	r3, #3
 800b12e:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b132:	f102 020c 	add.w	r2, r2, #12
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	e0a5      	b.n	800b286 <interp1+0x13ca>
            r = dx_data[k - 1] / md_data[k - 2];
 800b13a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b13e:	f103 030c 	add.w	r3, r3, #12
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b148:	3b01      	subs	r3, #1
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b150:	f102 0210 	add.w	r2, r2, #16
 800b154:	6812      	ldr	r2, [r2, #0]
 800b156:	4413      	add	r3, r2
 800b158:	edd3 6a00 	vldr	s13, [r3]
 800b15c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b160:	f103 030c 	add.w	r3, r3, #12
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b16a:	3b02      	subs	r3, #2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b172:	f102 020c 	add.w	r2, r2, #12
 800b176:	6812      	ldr	r2, [r2, #0]
 800b178:	4413      	add	r3, r2
 800b17a:	ed93 7a00 	vldr	s14, [r3]
 800b17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b182:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b186:	f103 0308 	add.w	r3, r3, #8
 800b18a:	edc3 7a00 	vstr	s15, [r3]
            md_data[k - 1] -= r * dx_data[k - 3];
 800b18e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b192:	f103 030c 	add.w	r3, r3, #12
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b19c:	3b01      	subs	r3, #1
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b1a4:	f102 020c 	add.w	r2, r2, #12
 800b1a8:	6812      	ldr	r2, [r2, #0]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	ed93 7a00 	vldr	s14, [r3]
 800b1b0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b1b4:	f103 030c 	add.w	r3, r3, #12
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1be:	3b03      	subs	r3, #3
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b1c6:	f102 0210 	add.w	r2, r2, #16
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	edd3 6a00 	vldr	s13, [r3]
 800b1d2:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b1d6:	f103 0308 	add.w	r3, r3, #8
 800b1da:	edd3 7a00 	vldr	s15, [r3]
 800b1de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1e2:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b1e6:	f103 030c 	add.w	r3, r3, #12
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b1f8:	f102 020c 	add.w	r2, r2, #12
 800b1fc:	6812      	ldr	r2, [r2, #0]
 800b1fe:	4413      	add	r3, r2
 800b200:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b204:	edc3 7a00 	vstr	s15, [r3]
            s_data[k - 1] -= r * s_data[k - 2];
 800b208:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b20c:	f103 030c 	add.w	r3, r3, #12
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3b01      	subs	r3, #1
 800b214:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b218:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	ed93 7a00 	vldr	s14, [r3]
 800b224:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b228:	f103 030c 	add.w	r3, r3, #12
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3b02      	subs	r3, #2
 800b230:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b234:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	edd3 6a00 	vldr	s13, [r3]
 800b240:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b244:	f103 0308 	add.w	r3, r3, #8
 800b248:	edd3 7a00 	vldr	s15, [r3]
 800b24c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b250:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b254:	f103 030c 	add.w	r3, r3, #12
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b260:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b264:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	4413      	add	r3, r2
 800b26c:	edc3 7a00 	vstr	s15, [r3]
          for (k = 3; k <= nxm1; k++) {
 800b270:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b274:	f103 030c 	add.w	r3, r3, #12
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3301      	adds	r3, #1
 800b27c:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b280:	f102 020c 	add.w	r2, r2, #12
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b28a:	f103 030c 	add.w	r3, r3, #12
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b294:	f103 0304 	add.w	r3, r3, #4
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	f77f af4d 	ble.w	800b13a <interp1+0x127e>
          }
          r = dnnm2 / md_data[x->size[1] - 2];
 800b2a0:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b2a4:	f103 031c 	add.w	r3, r3, #28
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b2b4:	3b02      	subs	r3, #2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b2bc:	f102 020c 	add.w	r2, r2, #12
 800b2c0:	6812      	ldr	r2, [r2, #0]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	ed93 7a00 	vldr	s14, [r3]
 800b2c8:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b2cc:	f103 030c 	add.w	r3, r3, #12
 800b2d0:	edd3 6a00 	vldr	s13, [r3]
 800b2d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2d8:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b2dc:	f103 0308 	add.w	r3, r3, #8
 800b2e0:	edc3 7a00 	vstr	s15, [r3]
          md_data[x->size[1] - 1] -= r * xtmp;
 800b2e4:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b2e8:	f103 031c 	add.w	r3, r3, #28
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b300:	f102 020c 	add.w	r2, r2, #12
 800b304:	6812      	ldr	r2, [r2, #0]
 800b306:	4413      	add	r3, r2
 800b308:	ed93 7a00 	vldr	s14, [r3]
 800b30c:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b310:	f103 0308 	add.w	r3, r3, #8
 800b314:	edd3 6a00 	vldr	s13, [r3]
 800b318:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b31c:	f103 031c 	add.w	r3, r3, #28
 800b320:	edd3 7a00 	vldr	s15, [r3]
 800b324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b328:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b32c:	f103 031c 	add.w	r3, r3, #28
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	3304      	adds	r3, #4
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b33c:	3b01      	subs	r3, #1
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b344:	f102 020c 	add.w	r2, r2, #12
 800b348:	6812      	ldr	r2, [r2, #0]
 800b34a:	4413      	add	r3, r2
 800b34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b350:	edc3 7a00 	vstr	s15, [r3]
          s_data[x->size[1] - 1] -= r * s_data[x->size[1] - 2];
 800b354:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b358:	f103 031c 	add.w	r3, r3, #28
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	3304      	adds	r3, #4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3b01      	subs	r3, #1
 800b366:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b36a:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	ed93 7a00 	vldr	s14, [r3]
 800b376:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b37a:	f103 031c 	add.w	r3, r3, #28
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	3304      	adds	r3, #4
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3b02      	subs	r3, #2
 800b388:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b38c:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	edd3 6a00 	vldr	s13, [r3]
 800b398:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b39c:	f103 0308 	add.w	r3, r3, #8
 800b3a0:	edd3 7a00 	vldr	s15, [r3]
 800b3a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3a8:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b3ac:	f103 031c 	add.w	r3, r3, #28
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3be:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b3c2:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	edc3 7a00 	vstr	s15, [r3]
          s_data[x->size[1] - 1] /= md_data[x->size[1] - 1];
 800b3ce:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b3d2:	f103 031c 	add.w	r3, r3, #28
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b3e4:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	edd3 6a00 	vldr	s13, [r3]
 800b3f0:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b3f4:	f103 031c 	add.w	r3, r3, #28
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b404:	3b01      	subs	r3, #1
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b40c:	f102 020c 	add.w	r2, r2, #12
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	4413      	add	r3, r2
 800b414:	ed93 7a00 	vldr	s14, [r3]
 800b418:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b41c:	f103 031c 	add.w	r3, r3, #28
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	3304      	adds	r3, #4
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3b01      	subs	r3, #1
 800b42a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b42e:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b432:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4413      	add	r3, r2
 800b43a:	edc3 7a00 	vstr	s15, [r3]
          for (k = nxm1; k >= 2; k--) {
 800b43e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b442:	f103 0304 	add.w	r3, r3, #4
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b44c:	f102 020c 	add.w	r2, r2, #12
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	e05b      	b.n	800b50c <interp1+0x1650>
            s_data[k - 1] =
                (s_data[k - 1] - dx_data[k - 2] * s_data[k]) / md_data[k - 1];
 800b454:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b458:	f103 030c 	add.w	r3, r3, #12
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3b01      	subs	r3, #1
 800b460:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b464:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	ed93 7a00 	vldr	s14, [r3]
 800b470:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b474:	f103 030c 	add.w	r3, r3, #12
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b47e:	3b02      	subs	r3, #2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b486:	f102 0210 	add.w	r2, r2, #16
 800b48a:	6812      	ldr	r2, [r2, #0]
 800b48c:	4413      	add	r3, r2
 800b48e:	edd3 6a00 	vldr	s13, [r3]
 800b492:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b496:	f6a3 024c 	subw	r2, r3, #2124	@ 0x84c
 800b49a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b49e:	f103 030c 	add.w	r3, r3, #12
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	edd3 7a00 	vldr	s15, [r3]
 800b4ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b4b4:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b4b8:	f103 030c 	add.w	r3, r3, #12
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b4ca:	f102 020c 	add.w	r2, r2, #12
 800b4ce:	6812      	ldr	r2, [r2, #0]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	ed93 7a00 	vldr	s14, [r3]
            s_data[k - 1] =
 800b4d6:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b4da:	f103 030c 	add.w	r3, r3, #12
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3b01      	subs	r3, #1
                (s_data[k - 1] - dx_data[k - 2] * s_data[k]) / md_data[k - 1];
 800b4e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
            s_data[k - 1] =
 800b4e6:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b4ea:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	edc3 7a00 	vstr	s15, [r3]
          for (k = nxm1; k >= 2; k--) {
 800b4f6:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b4fa:	f103 030c 	add.w	r3, r3, #12
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3b01      	subs	r3, #1
 800b502:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b506:	f102 020c 	add.w	r2, r2, #12
 800b50a:	6013      	str	r3, [r2, #0]
 800b50c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b510:	f103 030c 	add.w	r3, r3, #12
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b01      	cmp	r3, #1
 800b518:	dc9c      	bgt.n	800b454 <interp1+0x1598>
          }
          s_data[0] = (s_data[0] - d31 * s_data[1]) / md_data[0];
 800b51a:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b51e:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800b522:	ed93 7a00 	vldr	s14, [r3]
 800b526:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b52a:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800b52e:	edd3 6a01 	vldr	s13, [r3, #4]
 800b532:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b536:	f103 0310 	add.w	r3, r3, #16
 800b53a:	edd3 7a00 	vldr	s15, [r3]
 800b53e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b542:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b546:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b54a:	f103 030c 	add.w	r3, r3, #12
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	ed93 7a00 	vldr	s14, [r3]
 800b554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b558:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b55c:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800b560:	edc3 7a00 	vstr	s15, [r3]
          nxm1 = x->size[1];
 800b564:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b568:	f103 031c 	add.w	r3, r3, #28
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b576:	f102 0204 	add.w	r2, r2, #4
 800b57a:	6013      	str	r3, [r2, #0]
          pp_coefs_size_idx_1 = 4;
 800b57c:	2304      	movs	r3, #4
 800b57e:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b582:	f102 0218 	add.w	r2, r2, #24
 800b586:	6013      	str	r3, [r2, #0]
          for (high_i = 0; high_i <= nxm1 - 2; high_i++) {
 800b588:	2300      	movs	r3, #0
 800b58a:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b58e:	f102 0210 	add.w	r2, r2, #16
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	e10b      	b.n	800b7ae <interp1+0x18f2>
            xtmp = dvdf_data[high_i];
 800b596:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b59a:	f6a3 4248 	subw	r2, r3, #3144	@ 0xc48
 800b59e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b5a2:	f103 0310 	add.w	r3, r3, #16
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b5b2:	f102 021c 	add.w	r2, r2, #28
 800b5b6:	6013      	str	r3, [r2, #0]
            r = s_data[high_i];
 800b5b8:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b5bc:	f6a3 024c 	subw	r2, r3, #2124	@ 0x84c
 800b5c0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b5c4:	f103 0310 	add.w	r3, r3, #16
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b5d4:	f102 0208 	add.w	r2, r2, #8
 800b5d8:	6013      	str	r3, [r2, #0]
            d31 = dx_data[high_i];
 800b5da:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b5de:	f103 0310 	add.w	r3, r3, #16
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b5ea:	f102 0210 	add.w	r2, r2, #16
 800b5ee:	6812      	ldr	r2, [r2, #0]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b5f8:	f102 0210 	add.w	r2, r2, #16
 800b5fc:	6013      	str	r3, [r2, #0]
            dnnm2 = (xtmp - r) / d31;
 800b5fe:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b602:	f103 031c 	add.w	r3, r3, #28
 800b606:	ed93 7a00 	vldr	s14, [r3]
 800b60a:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b60e:	f103 0308 	add.w	r3, r3, #8
 800b612:	edd3 7a00 	vldr	s15, [r3]
 800b616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b61a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b61e:	f103 0310 	add.w	r3, r3, #16
 800b622:	ed93 7a00 	vldr	s14, [r3]
 800b626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b62a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b62e:	f103 030c 	add.w	r3, r3, #12
 800b632:	edc3 7a00 	vstr	s15, [r3]
            xtmp = (s_data[high_i + 1] - xtmp) / d31;
 800b636:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b63a:	f103 0310 	add.w	r3, r3, #16
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3301      	adds	r3, #1
 800b642:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b646:	f6a2 024c 	subw	r2, r2, #2124	@ 0x84c
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	ed93 7a00 	vldr	s14, [r3]
 800b652:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b656:	f103 031c 	add.w	r3, r3, #28
 800b65a:	edd3 7a00 	vldr	s15, [r3]
 800b65e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b662:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b666:	f103 0310 	add.w	r3, r3, #16
 800b66a:	ed93 7a00 	vldr	s14, [r3]
 800b66e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b672:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b676:	f103 031c 	add.w	r3, r3, #28
 800b67a:	edc3 7a00 	vstr	s15, [r3]
            pp_coefs_data[high_i] = (xtmp - dnnm2) / d31;
 800b67e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b682:	f103 031c 	add.w	r3, r3, #28
 800b686:	ed93 7a00 	vldr	s14, [r3]
 800b68a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b68e:	f103 030c 	add.w	r3, r3, #12
 800b692:	edd3 7a00 	vldr	s15, [r3]
 800b696:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b69a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b69e:	f103 0310 	add.w	r3, r3, #16
 800b6a2:	ed93 7a00 	vldr	s14, [r3]
 800b6a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6aa:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b6ae:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 800b6b2:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b6b6:	f103 0310 	add.w	r3, r3, #16
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	edc3 7a00 	vstr	s15, [r3]
            pp_coefs_data[(szs_idx_1 + high_i) - 1] = 2.0F * dnnm2 - xtmp;
 800b6c4:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b6c8:	f103 030c 	add.w	r3, r3, #12
 800b6cc:	edd3 7a00 	vldr	s15, [r3]
 800b6d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b6d4:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b6d8:	f103 030a 	add.w	r3, r3, #10
 800b6dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b6e0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b6e4:	f103 0310 	add.w	r3, r3, #16
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b6f2:	f102 021c 	add.w	r2, r2, #28
 800b6f6:	edd2 7a00 	vldr	s15, [r2]
 800b6fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6fe:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b702:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	edc3 7a00 	vstr	s15, [r3]
            pp_coefs_data[((szs_idx_1 - 1) << 1) + high_i] = r;
 800b70e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b712:	f103 030a 	add.w	r3, r3, #10
 800b716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	005a      	lsls	r2, r3, #1
 800b71e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b722:	f103 0310 	add.w	r3, r3, #16
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4413      	add	r3, r2
 800b72a:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b72e:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b73a:	f102 0208 	add.w	r2, r2, #8
 800b73e:	6812      	ldr	r2, [r2, #0]
 800b740:	601a      	str	r2, [r3, #0]
            pp_coefs_data[3 * (szs_idx_1 - 1) + high_i] = y[yoffset + high_i];
 800b742:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b746:	f103 0314 	add.w	r3, r3, #20
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b750:	f103 0310 	add.w	r3, r3, #16
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	18d0      	adds	r0, r2, r3
 800b758:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b75c:	f103 030a 	add.w	r3, r3, #10
 800b760:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b764:	1e5a      	subs	r2, r3, #1
 800b766:	4613      	mov	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	441a      	add	r2, r3
 800b76c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b770:	f103 0310 	add.w	r3, r3, #16
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4413      	add	r3, r2
 800b778:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b77c:	f102 0218 	add.w	r2, r2, #24
 800b780:	f2a2 415c 	subw	r1, r2, #1116	@ 0x45c
 800b784:	0082      	lsls	r2, r0, #2
 800b786:	440a      	add	r2, r1
 800b788:	6812      	ldr	r2, [r2, #0]
 800b78a:	f607 4158 	addw	r1, r7, #3160	@ 0xc58
 800b78e:	f2a1 414c 	subw	r1, r1, #1100	@ 0x44c
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	440b      	add	r3, r1
 800b796:	601a      	str	r2, [r3, #0]
          for (high_i = 0; high_i <= nxm1 - 2; high_i++) {
 800b798:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b79c:	f103 0310 	add.w	r3, r3, #16
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b7a8:	f102 0210 	add.w	r2, r2, #16
 800b7ac:	6013      	str	r3, [r2, #0]
 800b7ae:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b7b2:	f103 0304 	add.w	r3, r3, #4
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b7be:	f102 0210 	add.w	r2, r2, #16
 800b7c2:	6812      	ldr	r2, [r2, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	f6ff aee6 	blt.w	800b596 <interp1+0x16da>
          }
        }
        nxi = varargin_3->size[1];
 800b7ca:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 800b7ce:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b7dc:	f102 0208 	add.w	r2, r2, #8
 800b7e0:	6013      	str	r3, [r2, #0]
        for (k = 0; k < nxi; k++) {
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b7e8:	f102 020c 	add.w	r2, r2, #12
 800b7ec:	6013      	str	r3, [r2, #0]
 800b7ee:	e160      	b.n	800bab2 <interp1+0x1bf6>
          if (rtIsNaNF(varargin_3_data[k])) {
 800b7f0:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b7f4:	f103 030c 	add.w	r3, r3, #12
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b800:	6812      	ldr	r2, [r2, #0]
 800b802:	4413      	add	r3, r2
 800b804:	edd3 7a00 	vldr	s15, [r3]
 800b808:	eeb0 0a67 	vmov.f32	s0, s15
 800b80c:	f000 faad 	bl	800bd6a <rtIsNaNF>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00f      	beq.n	800b836 <interp1+0x197a>
            Vq_data[k] = rtNaNF;
 800b816:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b81a:	f103 030c 	add.w	r3, r3, #12
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800b826:	f102 0218 	add.w	r2, r2, #24
 800b82a:	6812      	ldr	r2, [r2, #0]
 800b82c:	4413      	add	r3, r2
 800b82e:	4ab9      	ldr	r2, [pc, #740]	@ (800bb14 <interp1+0x1c58>)
 800b830:	6812      	ldr	r2, [r2, #0]
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	e132      	b.n	800ba9c <interp1+0x1be0>
          } else {
            int low_i;
            high_i = x->size[1];
 800b836:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800b83a:	f103 031c 	add.w	r3, r3, #28
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b848:	f102 0210 	add.w	r2, r2, #16
 800b84c:	6013      	str	r3, [r2, #0]
            low_i = 1;
 800b84e:	2301      	movs	r3, #1
 800b850:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b854:	f102 0204 	add.w	r2, r2, #4
 800b858:	6013      	str	r3, [r2, #0]
            nxm1 = 2;
 800b85a:	2302      	movs	r3, #2
 800b85c:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b860:	f102 0204 	add.w	r2, r2, #4
 800b864:	6013      	str	r3, [r2, #0]
            while (high_i > nxm1) {
 800b866:	e070      	b.n	800b94a <interp1+0x1a8e>
              yoffset = (low_i >> 1) + (high_i >> 1);
 800b868:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b86c:	f103 0304 	add.w	r3, r3, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	105a      	asrs	r2, r3, #1
 800b874:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b878:	f103 0310 	add.w	r3, r3, #16
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	105b      	asrs	r3, r3, #1
 800b880:	4413      	add	r3, r2
 800b882:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b886:	f102 0214 	add.w	r2, r2, #20
 800b88a:	6013      	str	r3, [r2, #0]
              if (((low_i & 1) == 1) && ((high_i & 1) == 1)) {
 800b88c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b890:	f103 0304 	add.w	r3, r3, #4
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d013      	beq.n	800b8c6 <interp1+0x1a0a>
 800b89e:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b8a2:	f103 0310 	add.w	r3, r3, #16
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00a      	beq.n	800b8c6 <interp1+0x1a0a>
                yoffset++;
 800b8b0:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b8b4:	f103 0314 	add.w	r3, r3, #20
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b8c0:	f102 0214 	add.w	r2, r2, #20
 800b8c4:	6013      	str	r3, [r2, #0]
              }
              if (varargin_3_data[k] >= x_data[yoffset - 1]) {
 800b8c6:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b8ca:	f103 030c 	add.w	r3, r3, #12
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b8d6:	6812      	ldr	r2, [r2, #0]
 800b8d8:	4413      	add	r3, r2
 800b8da:	ed93 7a00 	vldr	s14, [r3]
 800b8de:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b8e2:	f103 0314 	add.w	r3, r3, #20
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b8f4:	f102 0214 	add.w	r2, r2, #20
 800b8f8:	6812      	ldr	r2, [r2, #0]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	edd3 7a00 	vldr	s15, [r3]
 800b900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b908:	db15      	blt.n	800b936 <interp1+0x1a7a>
                low_i = yoffset;
 800b90a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b90e:	f103 0314 	add.w	r3, r3, #20
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b918:	f102 0204 	add.w	r2, r2, #4
 800b91c:	6013      	str	r3, [r2, #0]
                nxm1 = yoffset + 1;
 800b91e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b922:	f103 0314 	add.w	r3, r3, #20
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3301      	adds	r3, #1
 800b92a:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b92e:	f102 0204 	add.w	r2, r2, #4
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	e009      	b.n	800b94a <interp1+0x1a8e>
              } else {
                high_i = yoffset;
 800b936:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b93a:	f103 0314 	add.w	r3, r3, #20
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b944:	f102 0210 	add.w	r2, r2, #16
 800b948:	6013      	str	r3, [r2, #0]
            while (high_i > nxm1) {
 800b94a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b94e:	f103 0310 	add.w	r3, r3, #16
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b958:	f103 0304 	add.w	r3, r3, #4
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	429a      	cmp	r2, r3
 800b960:	dc82      	bgt.n	800b868 <interp1+0x19ac>
              }
            }
            r = varargin_3_data[k] - x_data[low_i - 1];
 800b962:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b966:	f103 030c 	add.w	r3, r3, #12
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b972:	6812      	ldr	r2, [r2, #0]
 800b974:	4413      	add	r3, r2
 800b976:	ed93 7a00 	vldr	s14, [r3]
 800b97a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b97e:	f103 0304 	add.w	r3, r3, #4
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b988:	3b01      	subs	r3, #1
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b990:	f102 0214 	add.w	r2, r2, #20
 800b994:	6812      	ldr	r2, [r2, #0]
 800b996:	4413      	add	r3, r2
 800b998:	edd3 7a00 	vldr	s15, [r3]
 800b99c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9a0:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b9a4:	f103 0308 	add.w	r3, r3, #8
 800b9a8:	edc3 7a00 	vstr	s15, [r3]
            xtmp = pp_coefs_data[low_i - 1];
 800b9ac:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b9b0:	f103 0304 	add.w	r3, r3, #4
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800b9bc:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800b9ca:	f102 021c 	add.w	r2, r2, #28
 800b9ce:	6013      	str	r3, [r2, #0]
            for (nxm1 = 2; nxm1 <= pp_coefs_size_idx_1; nxm1++) {
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800b9d6:	f102 0204 	add.w	r2, r2, #4
 800b9da:	6013      	str	r3, [r2, #0]
 800b9dc:	e040      	b.n	800ba60 <interp1+0x1ba4>
              xtmp = r * xtmp +
 800b9de:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800b9e2:	f103 0308 	add.w	r3, r3, #8
 800b9e6:	ed93 7a00 	vldr	s14, [r3]
 800b9ea:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800b9ee:	f103 031c 	add.w	r3, r3, #28
 800b9f2:	edd3 7a00 	vldr	s15, [r3]
 800b9f6:	ee27 7a27 	vmul.f32	s14, s14, s15
                     pp_coefs_data[(low_i + (nxm1 - 1) * (x->size[1] - 1)) - 1];
 800b9fa:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800b9fe:	f103 0304 	add.w	r3, r3, #4
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 800ba0a:	f102 021c 	add.w	r2, r2, #28
 800ba0e:	6812      	ldr	r2, [r2, #0]
 800ba10:	6852      	ldr	r2, [r2, #4]
 800ba12:	3204      	adds	r2, #4
 800ba14:	6812      	ldr	r2, [r2, #0]
 800ba16:	3a01      	subs	r2, #1
 800ba18:	fb03 f202 	mul.w	r2, r3, r2
 800ba1c:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ba20:	f103 0304 	add.w	r3, r3, #4
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4413      	add	r3, r2
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	f607 4258 	addw	r2, r7, #3160	@ 0xc58
 800ba2e:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	edd3 7a00 	vldr	s15, [r3]
              xtmp = r * xtmp +
 800ba3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba3e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ba42:	f103 031c 	add.w	r3, r3, #28
 800ba46:	edc3 7a00 	vstr	s15, [r3]
            for (nxm1 = 2; nxm1 <= pp_coefs_size_idx_1; nxm1++) {
 800ba4a:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800ba4e:	f103 0304 	add.w	r3, r3, #4
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3301      	adds	r3, #1
 800ba56:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800ba5a:	f102 0204 	add.w	r2, r2, #4
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800ba64:	f103 0304 	add.w	r3, r3, #4
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800ba6e:	f103 0318 	add.w	r3, r3, #24
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	ddb2      	ble.n	800b9de <interp1+0x1b22>
            }
            Vq_data[k] = xtmp;
 800ba78:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800ba7c:	f103 030c 	add.w	r3, r3, #12
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 800ba88:	f102 0218 	add.w	r2, r2, #24
 800ba8c:	6812      	ldr	r2, [r2, #0]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800ba94:	f102 021c 	add.w	r2, r2, #28
 800ba98:	6812      	ldr	r2, [r2, #0]
 800ba9a:	601a      	str	r2, [r3, #0]
        for (k = 0; k < nxi; k++) {
 800ba9c:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800baa0:	f103 030c 	add.w	r3, r3, #12
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3301      	adds	r3, #1
 800baa8:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800baac:	f102 020c 	add.w	r2, r2, #12
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800bab6:	f103 030c 	add.w	r3, r3, #12
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800bac0:	f103 0308 	add.w	r3, r3, #8
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	f6ff ae92 	blt.w	800b7f0 <interp1+0x1934>
          }
        }
        exitg1 = 1;
 800bacc:	2301      	movs	r3, #1
 800bace:	f507 52e2 	add.w	r2, r7, #7232	@ 0x1c40
 800bad2:	6013      	str	r3, [r2, #0]
      }
    } while (exitg1 == 0);
 800bad4:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	f43e ab66 	beq.w	800a1ac <interp1+0x2f0>
  }
  emxFree_real32_T(&md);
 800bae0:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fd f96d 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&dx);
 800baea:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800baee:	f103 0304 	add.w	r3, r3, #4
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fd f966 	bl	8008dc4 <emxFree_real32_T>
  emxFree_real32_T(&x);
 800baf8:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 800bafc:	f103 031c 	add.w	r3, r3, #28
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fd f95f 	bl	8008dc4 <emxFree_real32_T>
}
 800bb06:	bf00      	nop
 800bb08:	f507 57e2 	add.w	r7, r7, #7232	@ 0x1c40
 800bb0c:	371c      	adds	r7, #28
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd90      	pop	{r4, r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000028 	.word	0x20000028

0800bb18 <mean>:
/*
 * Arguments    : const emxArray_real32_T *x
 * Return Type  : float
 */
float mean(const emxArray_real32_T *x)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b08d      	sub	sp, #52	@ 0x34
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  const float *x_data;
  float b_x;
  int ib;
  int k;
  x_data = x->data;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	60fb      	str	r3, [r7, #12]
  if (x->size[1] == 0) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d103      	bne.n	800bb3a <mean+0x22>
    b_x = 0.0F;
 800bb32:	f04f 0300 	mov.w	r3, #0
 800bb36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb38:	e087      	b.n	800bc4a <mean+0x132>
  } else {
    int firstBlockLength;
    int lastBlockLength;
    int nblocks;
    if (x->size[1] <= 1024) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	3304      	adds	r3, #4
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb46:	dc08      	bgt.n	800bb5a <mean+0x42>
      firstBlockLength = x->size[1];
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	623b      	str	r3, [r7, #32]
      lastBlockLength = 0;
 800bb50:	2300      	movs	r3, #0
 800bb52:	61fb      	str	r3, [r7, #28]
      nblocks = 1;
 800bb54:	2301      	movs	r3, #1
 800bb56:	61bb      	str	r3, [r7, #24]
 800bb58:	e01a      	b.n	800bb90 <mean+0x78>
    } else {
      firstBlockLength = 1024;
 800bb5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb5e:	623b      	str	r3, [r7, #32]
      nblocks = (int)((unsigned int)x->size[1] >> 10);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	3304      	adds	r3, #4
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	0a9b      	lsrs	r3, r3, #10
 800bb6a:	61bb      	str	r3, [r7, #24]
      lastBlockLength = x->size[1] - (nblocks << 10);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	3304      	adds	r3, #4
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	029b      	lsls	r3, r3, #10
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	61fb      	str	r3, [r7, #28]
      if (lastBlockLength > 0) {
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	dd03      	ble.n	800bb8a <mean+0x72>
        nblocks++;
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	3301      	adds	r3, #1
 800bb86:	61bb      	str	r3, [r7, #24]
 800bb88:	e002      	b.n	800bb90 <mean+0x78>
      } else {
        lastBlockLength = 1024;
 800bb8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb8e:	61fb      	str	r3, [r7, #28]
      }
    }
    b_x = x_data[0];
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (k = 2; k <= firstBlockLength; k++) {
 800bb96:	2302      	movs	r3, #2
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb9a:	e011      	b.n	800bbc0 <mean+0xa8>
      b_x += x_data[k - 1];
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bba2:	3b01      	subs	r3, #1
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	edd3 7a00 	vldr	s15, [r3]
 800bbae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800bbb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbb6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (k = 2; k <= firstBlockLength; k++) {
 800bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	dde9      	ble.n	800bb9c <mean+0x84>
    }
    for (ib = 2; ib <= nblocks; ib++) {
 800bbc8:	2302      	movs	r3, #2
 800bbca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbcc:	e039      	b.n	800bc42 <mean+0x12a>
      float bsum;
      int hi;
      firstBlockLength = (ib - 1) << 10;
 800bbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	029b      	lsls	r3, r3, #10
 800bbd4:	623b      	str	r3, [r7, #32]
      bsum = x_data[firstBlockLength];
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	4413      	add	r3, r2
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	617b      	str	r3, [r7, #20]
      if (ib == nblocks) {
 800bbe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d102      	bne.n	800bbf0 <mean+0xd8>
        hi = lastBlockLength;
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	613b      	str	r3, [r7, #16]
 800bbee:	e002      	b.n	800bbf6 <mean+0xde>
      } else {
        hi = 1024;
 800bbf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbf4:	613b      	str	r3, [r7, #16]
      }
      for (k = 2; k <= hi; k++) {
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbfa:	e013      	b.n	800bc24 <mean+0x10c>
        bsum += x_data[(firstBlockLength + k) - 1];
 800bbfc:	6a3a      	ldr	r2, [r7, #32]
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	4413      	add	r3, r2
 800bc02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc06:	3b01      	subs	r3, #1
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	edd3 7a00 	vldr	s15, [r3]
 800bc12:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc1a:	edc7 7a05 	vstr	s15, [r7, #20]
      for (k = 2; k <= hi; k++) {
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	3301      	adds	r3, #1
 800bc22:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	dde7      	ble.n	800bbfc <mean+0xe4>
      }
      b_x += bsum;
 800bc2c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800bc30:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc38:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (ib = 2; ib <= nblocks; ib++) {
 800bc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3e:	3301      	adds	r3, #1
 800bc40:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	ddc1      	ble.n	800bbce <mean+0xb6>
    }
  }
  return b_x / (float)x->size[1];
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	ee07 3a90 	vmov	s15, r3
 800bc56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc5a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800bc5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bc62:	eef0 7a66 	vmov.f32	s15, s13
}
 800bc66:	eeb0 0a67 	vmov.f32	s0, s15
 800bc6a:	3734      	adds	r7, #52	@ 0x34
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 800bc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 800bc7e:	683c      	ldr	r4, [r7, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800bc86:	2301      	movs	r3, #1
 800bc88:	461e      	mov	r6, r3
 800bc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8e:	4b0f      	ldr	r3, [pc, #60]	@ (800bccc <rtIsInf+0x58>)
 800bc90:	4620      	mov	r0, r4
 800bc92:	4629      	mov	r1, r5
 800bc94:	f7f4 ff52 	bl	8000b3c <__aeabi_dcmpun>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10b      	bne.n	800bcb6 <rtIsInf+0x42>
 800bc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bca2:	4b0a      	ldr	r3, [pc, #40]	@ (800bccc <rtIsInf+0x58>)
 800bca4:	4620      	mov	r0, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f4 ff2a 	bl	8000b00 <__aeabi_dcmple>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <rtIsInf+0x42>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	461e      	mov	r6, r3
 800bcb6:	b2f3      	uxtb	r3, r6
 800bcb8:	f083 0301 	eor.w	r3, r3, #1
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	b2db      	uxtb	r3, r3
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bccc:	7fefffff 	.word	0x7fefffff

0800bcd0 <rtIsInfF>:
 * Function: rtIsInfF =================================================
 *  Abstract:
 *  Test if single-precision value is infinite
 */
boolean_T rtIsInfF(real32_T value)
{
 800bcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	ed87 0a01 	vstr	s0, [r7, #4]
  return (isinf((real_T)value) != 0U);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7f4 fc3c 	bl	8000558 <__aeabi_f2d>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4614      	mov	r4, r2
 800bce6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800bcea:	2301      	movs	r3, #1
 800bcec:	461e      	mov	r6, r3
 800bcee:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf2:	4b12      	ldr	r3, [pc, #72]	@ (800bd3c <rtIsInfF+0x6c>)
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	f7f4 ff20 	bl	8000b3c <__aeabi_dcmpun>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10b      	bne.n	800bd1a <rtIsInfF+0x4a>
 800bd02:	f04f 32ff 	mov.w	r2, #4294967295
 800bd06:	4b0d      	ldr	r3, [pc, #52]	@ (800bd3c <rtIsInfF+0x6c>)
 800bd08:	4620      	mov	r0, r4
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	f7f4 fef8 	bl	8000b00 <__aeabi_dcmple>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <rtIsInfF+0x4a>
 800bd16:	2300      	movs	r3, #0
 800bd18:	461e      	mov	r6, r3
 800bd1a:	b2f3      	uxtb	r3, r6
 800bd1c:	f083 0301 	eor.w	r3, r3, #1
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	f003 0301 	and.w	r3, r3, #1
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <rtIsInfF+0x60>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <rtIsInfF+0x62>
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	7fefffff 	.word	0x7fefffff

0800bd40 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 800bd4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd52:	f7f4 fef3 	bl	8000b3c <__aeabi_dcmpun>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <rtIsNaN+0x20>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e000      	b.n	800bd62 <rtIsNaN+0x22>
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <rtIsNaNF>:
 * Function: rtIsNaNF =================================================
 *  Abstract:
 *  Test if single-precision value is not a number
 */
boolean_T rtIsNaNF(real32_T value)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b082      	sub	sp, #8
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	ed87 0a01 	vstr	s0, [r7, #4]
  return (isnan((real_T)value) != 0U);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7f4 fbef 	bl	8000558 <__aeabi_f2d>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	f7f4 fedd 	bl	8000b3c <__aeabi_dcmpun>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d001      	beq.n	800bd8c <rtIsNaNF+0x22>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e000      	b.n	800bd8e <rtIsNaNF+0x24>
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bd98:	b590      	push	{r4, r7, lr}
 800bd9a:	b089      	sub	sp, #36	@ 0x24
 800bd9c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bd9e:	f002 fc69 	bl	800e674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bda2:	f000 fa9d 	bl	800c2e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bda6:	f000 fd09 	bl	800c7bc <MX_GPIO_Init>
  MX_DMA_Init();
 800bdaa:	f000 fce7 	bl	800c77c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800bdae:	f009 ffb9 	bl	8015d24 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800bdb2:	f000 faff 	bl	800c3b4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800bdb6:	f000 fbd3 	bl	800c560 <MX_TIM2_Init>
  MX_TIM3_Init();
 800bdba:	f000 fc43 	bl	800c644 <MX_TIM3_Init>
  MX_SPI1_Init();
 800bdbe:	f000 fb99 	bl	800c4f4 <MX_SPI1_Init>
  MX_TIM5_Init();
 800bdc2:	f000 fc8d 	bl	800c6e0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 800bdc6:	f7f6 f87d 	bl	8001ec4 <ST7789_Init>
  ST7789_InvertColors(0);
 800bdca:	2000      	movs	r0, #0
 800bdcc:	f7f6 fb92 	bl	80024f4 <ST7789_InvertColors>
  HAL_ADC_Start_DMA(&hadc1, &data1, SAMPLE_N);
 800bdd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bdd4:	49b4      	ldr	r1, [pc, #720]	@ (800c0a8 <main+0x310>)
 800bdd6:	48b5      	ldr	r0, [pc, #724]	@ (800c0ac <main+0x314>)
 800bdd8:	f002 fe66 	bl	800eaa8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim5);
 800bddc:	48b4      	ldr	r0, [pc, #720]	@ (800c0b0 <main+0x318>)
 800bdde:	f006 f95f 	bl	80120a0 <HAL_TIM_Base_Start>
  ADC1->CR1 &= ~ADC_CR1_AWDEN;
 800bde2:	4bb4      	ldr	r3, [pc, #720]	@ (800c0b4 <main+0x31c>)
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	4ab3      	ldr	r2, [pc, #716]	@ (800c0b4 <main+0x31c>)
 800bde8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bdec:	6053      	str	r3, [r2, #4]
  ADC1->CR1 &= ~ADC_CR1_AWDIE;
 800bdee:	4bb1      	ldr	r3, [pc, #708]	@ (800c0b4 <main+0x31c>)
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	4ab0      	ldr	r2, [pc, #704]	@ (800c0b4 <main+0x31c>)
 800bdf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdf8:	6053      	str	r3, [r2, #4]


  HAL_TIM_Base_Start(&htim2);
 800bdfa:	48af      	ldr	r0, [pc, #700]	@ (800c0b8 <main+0x320>)
 800bdfc:	f006 f950 	bl	80120a0 <HAL_TIM_Base_Start>
  HAL_Delay(500);
 800be00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800be04:	f002 fca8 	bl	800e758 <HAL_Delay>
  ADC1->SR &= ~ADC_SR_AWD;
 800be08:	4baa      	ldr	r3, [pc, #680]	@ (800c0b4 <main+0x31c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4aa9      	ldr	r2, [pc, #676]	@ (800c0b4 <main+0x31c>)
 800be0e:	f023 0301 	bic.w	r3, r3, #1
 800be12:	6013      	str	r3, [r2, #0]
  ADC1->CR1 |= ADC_CR1_AWDEN;
 800be14:	4ba7      	ldr	r3, [pc, #668]	@ (800c0b4 <main+0x31c>)
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	4aa6      	ldr	r2, [pc, #664]	@ (800c0b4 <main+0x31c>)
 800be1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800be1e:	6053      	str	r3, [r2, #4]
  ADC1->CR1 |= ADC_CR1_AWDIE;
 800be20:	4ba4      	ldr	r3, [pc, #656]	@ (800c0b4 <main+0x31c>)
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	4aa3      	ldr	r2, [pc, #652]	@ (800c0b4 <main+0x31c>)
 800be26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be2a:	6053      	str	r3, [r2, #4]
  TIM3->CR1 &= ~TIM_CR1_CEN;
 800be2c:	4ba3      	ldr	r3, [pc, #652]	@ (800c0bc <main+0x324>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4aa2      	ldr	r2, [pc, #648]	@ (800c0bc <main+0x324>)
 800be32:	f023 0301 	bic.w	r3, r3, #1
 800be36:	6013      	str	r3, [r2, #0]

  TIM3->DIER |= TIM_DIER_UIE;
 800be38:	4ba0      	ldr	r3, [pc, #640]	@ (800c0bc <main+0x324>)
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	4a9f      	ldr	r2, [pc, #636]	@ (800c0bc <main+0x324>)
 800be3e:	f043 0301 	orr.w	r3, r3, #1
 800be42:	60d3      	str	r3, [r2, #12]
  GPIOC->ODR |= GPIO_ODR_OD13;
 800be44:	4b9e      	ldr	r3, [pc, #632]	@ (800c0c0 <main+0x328>)
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	4a9d      	ldr	r2, [pc, #628]	@ (800c0c0 <main+0x328>)
 800be4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800be4e:	6153      	str	r3, [r2, #20]
  {
	  res_pos++;
	  score_res[i] = i;
  }
*/
  if(set.debug == 0)
 800be50:	4b9c      	ldr	r3, [pc, #624]	@ (800c0c4 <main+0x32c>)
 800be52:	7c1b      	ldrb	r3, [r3, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <main+0xc4>
  {
	  Draw_All();
 800be58:	f001 fc04 	bl	800d664 <Draw_All>
	  HAL_Delay(2000);

#endif

#ifndef TEST_VER
	  switch(state)
 800be5c:	4b9a      	ldr	r3, [pc, #616]	@ (800c0c8 <main+0x330>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	f040 81fc 	bne.w	800c25e <main+0x4c6>
	  {
	  	  case 1:							//aktivace TIM3 interruptu
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800be66:	2200      	movs	r2, #0
 800be68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800be6c:	4894      	ldr	r0, [pc, #592]	@ (800c0c0 <main+0x328>)
 800be6e:	f004 f86b 	bl	800ff48 <HAL_GPIO_WritePin>
	  		HAL_Delay(500);
 800be72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800be76:	f002 fc6f 	bl	800e758 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800be7a:	2201      	movs	r2, #1
 800be7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800be80:	488f      	ldr	r0, [pc, #572]	@ (800c0c0 <main+0x328>)
 800be82:	f004 f861 	bl	800ff48 <HAL_GPIO_WritePin>
	  		HAL_Delay(500);
 800be86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800be8a:	f002 fc65 	bl	800e758 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800be8e:	2200      	movs	r2, #0
 800be90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800be94:	488a      	ldr	r0, [pc, #552]	@ (800c0c0 <main+0x328>)
 800be96:	f004 f857 	bl	800ff48 <HAL_GPIO_WritePin>
	  		tik = TIM5->CNT;
 800be9a:	4b8c      	ldr	r3, [pc, #560]	@ (800c0cc <main+0x334>)
 800be9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9e:	4a8c      	ldr	r2, [pc, #560]	@ (800c0d0 <main+0x338>)
 800bea0:	6013      	str	r3, [r2, #0]
	  		Read_channel((uint16_t*) data1, s1, SAMPLE_N, SAMPLE_N/4, ((pos-pos%4)-SAMPLE_N/8)%SAMPLE_N, 0);
 800bea2:	4b8c      	ldr	r3, [pc, #560]	@ (800c0d4 <main+0x33c>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f023 0303 	bic.w	r3, r3, #3
 800beaa:	3b80      	subs	r3, #128	@ 0x80
 800beac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800beb0:	2200      	movs	r2, #0
 800beb2:	9201      	str	r2, [sp, #4]
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800beba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bebe:	4986      	ldr	r1, [pc, #536]	@ (800c0d8 <main+0x340>)
 800bec0:	4879      	ldr	r0, [pc, #484]	@ (800c0a8 <main+0x310>)
 800bec2:	f000 fe05 	bl	800cad0 <Read_channel>
	  		Read_channel((uint16_t*) data1, s2, SAMPLE_N, SAMPLE_N/4, ((pos-pos%4)-SAMPLE_N/8)%SAMPLE_N, 1);
 800bec6:	4b83      	ldr	r3, [pc, #524]	@ (800c0d4 <main+0x33c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f023 0303 	bic.w	r3, r3, #3
 800bece:	3b80      	subs	r3, #128	@ 0x80
 800bed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bed4:	2201      	movs	r2, #1
 800bed6:	9201      	str	r2, [sp, #4]
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bee2:	497e      	ldr	r1, [pc, #504]	@ (800c0dc <main+0x344>)
 800bee4:	4870      	ldr	r0, [pc, #448]	@ (800c0a8 <main+0x310>)
 800bee6:	f000 fdf3 	bl	800cad0 <Read_channel>
	  		if(set.normalize)
 800beea:	4b76      	ldr	r3, [pc, #472]	@ (800c0c4 <main+0x32c>)
 800beec:	7c9b      	ldrb	r3, [r3, #18]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d017      	beq.n	800bf22 <main+0x18a>
	  		{
	  			Offset_remove(s1, SAMPLE_N/4);
 800bef2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bef6:	4878      	ldr	r0, [pc, #480]	@ (800c0d8 <main+0x340>)
 800bef8:	f001 fa6c 	bl	800d3d4 <Offset_remove>
	  			Offset_remove(s2, SAMPLE_N/4);
 800befc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bf00:	4876      	ldr	r0, [pc, #472]	@ (800c0dc <main+0x344>)
 800bf02:	f001 fa67 	bl	800d3d4 <Offset_remove>
	  			Abs_maxScale(s1, SAMPLE_N/4, 2000);
 800bf06:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bf0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bf0e:	4872      	ldr	r0, [pc, #456]	@ (800c0d8 <main+0x340>)
 800bf10:	f001 f9fc 	bl	800d30c <Abs_maxScale>
	  			Abs_maxScale(s2, SAMPLE_N/4, 2000);
 800bf14:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bf18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bf1c:	486f      	ldr	r0, [pc, #444]	@ (800c0dc <main+0x344>)
 800bf1e:	f001 f9f5 	bl	800d30c <Abs_maxScale>
	  		}
	  		delta1 = envelope_xcorr_gen(s1, s2, SAMPLE_N/4, 400000, 4, 200, 400);
 800bf22:	ed9f 2a6f 	vldr	s4, [pc, #444]	@ 800c0e0 <main+0x348>
 800bf26:	eddf 1a6f 	vldr	s3, [pc, #444]	@ 800c0e4 <main+0x34c>
 800bf2a:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800bf2e:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 800c0e8 <main+0x350>
 800bf32:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 800c0ec <main+0x354>
 800bf36:	4969      	ldr	r1, [pc, #420]	@ (800c0dc <main+0x344>)
 800bf38:	4867      	ldr	r0, [pc, #412]	@ (800c0d8 <main+0x340>)
 800bf3a:	f7fa fe69 	bl	8006c10 <envelope_xcorr_gen>
 800bf3e:	ee10 3a10 	vmov	r3, s0
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7f4 fb08 	bl	8000558 <__aeabi_f2d>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4968      	ldr	r1, [pc, #416]	@ (800c0f0 <main+0x358>)
 800bf4e:	e9c1 2300 	strd	r2, r3, [r1]
	  		Read_channel((uint16_t*) data1, s1, SAMPLE_N, SAMPLE_N/4, ((pos-pos%4)-SAMPLE_N/8)%SAMPLE_N, 2);
 800bf52:	4b60      	ldr	r3, [pc, #384]	@ (800c0d4 <main+0x33c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f023 0303 	bic.w	r3, r3, #3
 800bf5a:	3b80      	subs	r3, #128	@ 0x80
 800bf5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf60:	2202      	movs	r2, #2
 800bf62:	9201      	str	r2, [sp, #4]
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bf6e:	495a      	ldr	r1, [pc, #360]	@ (800c0d8 <main+0x340>)
 800bf70:	484d      	ldr	r0, [pc, #308]	@ (800c0a8 <main+0x310>)
 800bf72:	f000 fdad 	bl	800cad0 <Read_channel>
	  		Read_channel((uint16_t*) data1, s2, SAMPLE_N, SAMPLE_N/4, ((pos-pos%4)-SAMPLE_N/8)%SAMPLE_N, 3);
 800bf76:	4b57      	ldr	r3, [pc, #348]	@ (800c0d4 <main+0x33c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f023 0303 	bic.w	r3, r3, #3
 800bf7e:	3b80      	subs	r3, #128	@ 0x80
 800bf80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf84:	2203      	movs	r2, #3
 800bf86:	9201      	str	r2, [sp, #4]
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bf92:	4952      	ldr	r1, [pc, #328]	@ (800c0dc <main+0x344>)
 800bf94:	4844      	ldr	r0, [pc, #272]	@ (800c0a8 <main+0x310>)
 800bf96:	f000 fd9b 	bl	800cad0 <Read_channel>
	  		if(set.normalize)
 800bf9a:	4b4a      	ldr	r3, [pc, #296]	@ (800c0c4 <main+0x32c>)
 800bf9c:	7c9b      	ldrb	r3, [r3, #18]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d017      	beq.n	800bfd2 <main+0x23a>
	  		{
	  			Offset_remove(s1, SAMPLE_N/4);
 800bfa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bfa6:	484c      	ldr	r0, [pc, #304]	@ (800c0d8 <main+0x340>)
 800bfa8:	f001 fa14 	bl	800d3d4 <Offset_remove>
	  			Offset_remove(s2, SAMPLE_N/4);
 800bfac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bfb0:	484a      	ldr	r0, [pc, #296]	@ (800c0dc <main+0x344>)
 800bfb2:	f001 fa0f 	bl	800d3d4 <Offset_remove>
	  			Abs_maxScale(s1, SAMPLE_N/4, 2000);
 800bfb6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bfba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bfbe:	4846      	ldr	r0, [pc, #280]	@ (800c0d8 <main+0x340>)
 800bfc0:	f001 f9a4 	bl	800d30c <Abs_maxScale>
	  			Abs_maxScale(s2, SAMPLE_N/4, 2000);
 800bfc4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bfc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bfcc:	4843      	ldr	r0, [pc, #268]	@ (800c0dc <main+0x344>)
 800bfce:	f001 f99d 	bl	800d30c <Abs_maxScale>
	  		}
	  		delta2 = envelope_xcorr_gen(s1, s2, SAMPLE_N/4, 400000, 4, 200, 400);
 800bfd2:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 800c0e0 <main+0x348>
 800bfd6:	eddf 1a43 	vldr	s3, [pc, #268]	@ 800c0e4 <main+0x34c>
 800bfda:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800bfde:	eddf 0a42 	vldr	s1, [pc, #264]	@ 800c0e8 <main+0x350>
 800bfe2:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 800c0ec <main+0x354>
 800bfe6:	493d      	ldr	r1, [pc, #244]	@ (800c0dc <main+0x344>)
 800bfe8:	483b      	ldr	r0, [pc, #236]	@ (800c0d8 <main+0x340>)
 800bfea:	f7fa fe11 	bl	8006c10 <envelope_xcorr_gen>
 800bfee:	ee10 3a10 	vmov	r3, s0
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7f4 fab0 	bl	8000558 <__aeabi_f2d>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	493d      	ldr	r1, [pc, #244]	@ (800c0f4 <main+0x35c>)
 800bffe:	e9c1 2300 	strd	r2, r3, [r1]
	  		tok = TIM5->CNT;
 800c002:	4b32      	ldr	r3, [pc, #200]	@ (800c0cc <main+0x334>)
 800c004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c006:	4a3c      	ldr	r2, [pc, #240]	@ (800c0f8 <main+0x360>)
 800c008:	6013      	str	r3, [r2, #0]
	  		tmp = ConvertCoordinates(hit, delta1, delta2, set.speedx, set.offsetx,set. offsety, 0.385);
 800c00a:	4b39      	ldr	r3, [pc, #228]	@ (800c0f0 <main+0x358>)
 800c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c010:	4610      	mov	r0, r2
 800c012:	4619      	mov	r1, r3
 800c014:	f7f4 fdd0 	bl	8000bb8 <__aeabi_d2f>
 800c018:	4604      	mov	r4, r0
 800c01a:	4b36      	ldr	r3, [pc, #216]	@ (800c0f4 <main+0x35c>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	4610      	mov	r0, r2
 800c022:	4619      	mov	r1, r3
 800c024:	f7f4 fdc8 	bl	8000bb8 <__aeabi_d2f>
 800c028:	4602      	mov	r2, r0
 800c02a:	4b26      	ldr	r3, [pc, #152]	@ (800c0c4 <main+0x32c>)
 800c02c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c030:	4b24      	ldr	r3, [pc, #144]	@ (800c0c4 <main+0x32c>)
 800c032:	ed93 7a00 	vldr	s14, [r3]
 800c036:	4b23      	ldr	r3, [pc, #140]	@ (800c0c4 <main+0x32c>)
 800c038:	edd3 6a01 	vldr	s13, [r3, #4]
 800c03c:	eddf 2a2f 	vldr	s5, [pc, #188]	@ 800c0fc <main+0x364>
 800c040:	eeb0 2a66 	vmov.f32	s4, s13
 800c044:	eef0 1a47 	vmov.f32	s3, s14
 800c048:	eeb0 1a67 	vmov.f32	s2, s15
 800c04c:	ee00 2a90 	vmov	s1, r2
 800c050:	ee00 4a10 	vmov	s0, r4
 800c054:	482a      	ldr	r0, [pc, #168]	@ (800c100 <main+0x368>)
 800c056:	f000 fd77 	bl	800cb48 <ConvertCoordinates>
 800c05a:	4603      	mov	r3, r0
 800c05c:	461a      	mov	r2, r3
 800c05e:	4b29      	ldr	r3, [pc, #164]	@ (800c104 <main+0x36c>)
 800c060:	601a      	str	r2, [r3, #0]
	  		if(tmp == 1)
 800c062:	4b28      	ldr	r3, [pc, #160]	@ (800c104 <main+0x36c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d14e      	bne.n	800c108 <main+0x370>
	  		{
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800c06a:	2200      	movs	r2, #0
 800c06c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c070:	4813      	ldr	r0, [pc, #76]	@ (800c0c0 <main+0x328>)
 800c072:	f003 ff69 	bl	800ff48 <HAL_GPIO_WritePin>
	  			HAL_Delay(2000);
 800c076:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800c07a:	f002 fb6d 	bl	800e758 <HAL_Delay>
	  			Reset_ADC();
 800c07e:	f001 fcc9 	bl	800da14 <Reset_ADC>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800c082:	2201      	movs	r2, #1
 800c084:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c088:	480d      	ldr	r0, [pc, #52]	@ (800c0c0 <main+0x328>)
 800c08a:	f003 ff5d 	bl	800ff48 <HAL_GPIO_WritePin>
	  			TIM2->CR1 |= TIM_CR1_CEN;
 800c08e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c098:	f043 0301 	orr.w	r3, r3, #1
 800c09c:	6013      	str	r3, [r2, #0]
	  			state = 0;
 800c09e:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c8 <main+0x330>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	601a      	str	r2, [r3, #0]
	  			break;
 800c0a4:	e0dc      	b.n	800c260 <main+0x4c8>
 800c0a6:	bf00      	nop
 800c0a8:	20000e10 	.word	0x20000e10
 800c0ac:	200003c4 	.word	0x200003c4
 800c0b0:	20000554 	.word	0x20000554
 800c0b4:	40012000 	.word	0x40012000
 800c0b8:	200004c4 	.word	0x200004c4
 800c0bc:	40000400 	.word	0x40000400
 800c0c0:	40020800 	.word	0x40020800
 800c0c4:	2000002c 	.word	0x2000002c
 800c0c8:	200005ac 	.word	0x200005ac
 800c0cc:	40000c00 	.word	0x40000c00
 800c0d0:	200005a0 	.word	0x200005a0
 800c0d4:	2000059c 	.word	0x2000059c
 800c0d8:	200005f4 	.word	0x200005f4
 800c0dc:	200009f4 	.word	0x200009f4
 800c0e0:	43c80000 	.word	0x43c80000
 800c0e4:	43480000 	.word	0x43480000
 800c0e8:	48c35000 	.word	0x48c35000
 800c0ec:	43800000 	.word	0x43800000
 800c0f0:	20000e00 	.word	0x20000e00
 800c0f4:	20000e08 	.word	0x20000e08
 800c0f8:	200005a4 	.word	0x200005a4
 800c0fc:	3ec51eb8 	.word	0x3ec51eb8
 800c100:	20000df4 	.word	0x20000df4
 800c104:	200005b0 	.word	0x200005b0
	  		}
	  		results_x[res_pos] = hit[0];
 800c108:	4b6a      	ldr	r3, [pc, #424]	@ (800c2b4 <main+0x51c>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	4618      	mov	r0, r3
 800c10e:	4b6a      	ldr	r3, [pc, #424]	@ (800c2b8 <main+0x520>)
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	496a      	ldr	r1, [pc, #424]	@ (800c2bc <main+0x524>)
 800c114:	0083      	lsls	r3, r0, #2
 800c116:	440b      	add	r3, r1
 800c118:	601a      	str	r2, [r3, #0]
	  		results_y[res_pos] = hit[1];
 800c11a:	4b66      	ldr	r3, [pc, #408]	@ (800c2b4 <main+0x51c>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	4618      	mov	r0, r3
 800c120:	4b65      	ldr	r3, [pc, #404]	@ (800c2b8 <main+0x520>)
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	4966      	ldr	r1, [pc, #408]	@ (800c2c0 <main+0x528>)
 800c126:	0083      	lsls	r3, r0, #2
 800c128:	440b      	add	r3, r1
 800c12a:	601a      	str	r2, [r3, #0]
	  		score_res[res_pos] = Convert_to_score(hit[0], hit[1], 3, tg1);
 800c12c:	4b62      	ldr	r3, [pc, #392]	@ (800c2b8 <main+0x520>)
 800c12e:	edd3 7a00 	vldr	s15, [r3]
 800c132:	4b61      	ldr	r3, [pc, #388]	@ (800c2b8 <main+0x520>)
 800c134:	ed93 7a01 	vldr	s14, [r3, #4]
 800c138:	4b5e      	ldr	r3, [pc, #376]	@ (800c2b4 <main+0x51c>)
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	461c      	mov	r4, r3
 800c13e:	4b61      	ldr	r3, [pc, #388]	@ (800c2c4 <main+0x52c>)
 800c140:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c144:	eeb0 1a08 	vmov.f32	s2, #8	@ 0x40400000  3.0
 800c148:	eef0 0a47 	vmov.f32	s1, s14
 800c14c:	eeb0 0a67 	vmov.f32	s0, s15
 800c150:	f001 fbd2 	bl	800d8f8 <Convert_to_score>
 800c154:	4603      	mov	r3, r0
 800c156:	461a      	mov	r2, r3
 800c158:	4b5b      	ldr	r3, [pc, #364]	@ (800c2c8 <main+0x530>)
 800c15a:	551a      	strb	r2, [r3, r4]

	  		if(res_pos < part_res*RESULT_BUFFER_SEGMENT || res_pos > (part_res+1)*RESULT_BUFFER_SEGMENT)
 800c15c:	4b55      	ldr	r3, [pc, #340]	@ (800c2b4 <main+0x51c>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	4619      	mov	r1, r3
 800c162:	4b5a      	ldr	r3, [pc, #360]	@ (800c2cc <main+0x534>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	4299      	cmp	r1, r3
 800c172:	db0b      	blt.n	800c18c <main+0x3f4>
 800c174:	4b4f      	ldr	r3, [pc, #316]	@ (800c2b4 <main+0x51c>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	4619      	mov	r1, r3
 800c17a:	4b54      	ldr	r3, [pc, #336]	@ (800c2cc <main+0x534>)
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	4613      	mov	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	4299      	cmp	r1, r3
 800c18a:	dd08      	ble.n	800c19e <main+0x406>
	  		{
	  			part_res = res_pos/RESULT_BUFFER_SEGMENT;
 800c18c:	4b49      	ldr	r3, [pc, #292]	@ (800c2b4 <main+0x51c>)
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	4a4f      	ldr	r2, [pc, #316]	@ (800c2d0 <main+0x538>)
 800c192:	fba2 2303 	umull	r2, r3, r2, r3
 800c196:	08db      	lsrs	r3, r3, #3
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	4b4c      	ldr	r3, [pc, #304]	@ (800c2cc <main+0x534>)
 800c19c:	701a      	strb	r2, [r3, #0]
	  		}
	  		if(res_pos >= RESULT_BUFFER_LEN)
 800c19e:	4b45      	ldr	r3, [pc, #276]	@ (800c2b4 <main+0x51c>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	2b63      	cmp	r3, #99	@ 0x63
 800c1a4:	d91e      	bls.n	800c1e4 <main+0x44c>
	  		{
	  			for(int i = 0; i<RESULT_BUFFER_LEN;i++)
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	607b      	str	r3, [r7, #4]
 800c1aa:	e018      	b.n	800c1de <main+0x446>
	  			{
	  				results_x[i] = 0;
 800c1ac:	4a43      	ldr	r2, [pc, #268]	@ (800c2bc <main+0x524>)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f04f 0200 	mov.w	r2, #0
 800c1b8:	601a      	str	r2, [r3, #0]
	  				results_x[i] = 0;
 800c1ba:	4a40      	ldr	r2, [pc, #256]	@ (800c2bc <main+0x524>)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f04f 0200 	mov.w	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]
	  				score_res[i] = 0;
 800c1c8:	4a3f      	ldr	r2, [pc, #252]	@ (800c2c8 <main+0x530>)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	701a      	strb	r2, [r3, #0]
	  				part_res = 0;
 800c1d2:	4b3e      	ldr	r3, [pc, #248]	@ (800c2cc <main+0x534>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	701a      	strb	r2, [r3, #0]
	  			for(int i = 0; i<RESULT_BUFFER_LEN;i++)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	607b      	str	r3, [r7, #4]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b63      	cmp	r3, #99	@ 0x63
 800c1e2:	dde3      	ble.n	800c1ac <main+0x414>

	  			}
	  		}
	  		//Draw_targetElement(10, 20, 200, WHITE,RED, BLACK,1,hit[0]/0.15,hit[1]/0.15);
	  		Draw_def_targetElement(10, 20, 200,  WHITE,RED, BLACK, tg1);
 800c1e4:	4a37      	ldr	r2, [pc, #220]	@ (800c2c4 <main+0x52c>)
 800c1e6:	ab02      	add	r3, sp, #8
 800c1e8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c1ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c1fc:	22c8      	movs	r2, #200	@ 0xc8
 800c1fe:	2114      	movs	r1, #20
 800c200:	200a      	movs	r0, #10
 800c202:	f001 fee3 	bl	800dfcc <Draw_def_targetElement>
	  		res_pos++;
 800c206:	4b2b      	ldr	r3, [pc, #172]	@ (800c2b4 <main+0x51c>)
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	3301      	adds	r3, #1
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	4b29      	ldr	r3, [pc, #164]	@ (800c2b4 <main+0x51c>)
 800c210:	701a      	strb	r2, [r3, #0]
	  		if(set.debug)
 800c212:	4b30      	ldr	r3, [pc, #192]	@ (800c2d4 <main+0x53c>)
 800c214:	7c1b      	ldrb	r3, [r3, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <main+0x488>
	  		{
	  			Debug_screen();
 800c21a:	f001 f925 	bl	800d468 <Debug_screen>
 800c21e:	e001      	b.n	800c224 <main+0x48c>
			}
	  		else
			{
	  			Draw_All();
 800c220:	f001 fa20 	bl	800d664 <Draw_All>
			}

	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800c224:	2200      	movs	r2, #0
 800c226:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c22a:	482b      	ldr	r0, [pc, #172]	@ (800c2d8 <main+0x540>)
 800c22c:	f003 fe8c 	bl	800ff48 <HAL_GPIO_WritePin>
	  		HAL_Delay(1000);
 800c230:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c234:	f002 fa90 	bl	800e758 <HAL_Delay>
	  		Reset_ADC();
 800c238:	f001 fbec 	bl	800da14 <Reset_ADC>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800c23c:	2201      	movs	r2, #1
 800c23e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c242:	4825      	ldr	r0, [pc, #148]	@ (800c2d8 <main+0x540>)
 800c244:	f003 fe80 	bl	800ff48 <HAL_GPIO_WritePin>
	  		TIM2->CR1 |= TIM_CR1_CEN;												//Timer 2 enabled, sampling continues
 800c248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	6013      	str	r3, [r2, #0]
	  		state = 0;
 800c258:	4b20      	ldr	r3, [pc, #128]	@ (800c2dc <main+0x544>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
	  	  default:
	  		  break;
 800c25e:	bf00      	nop
	  }
	  if(Check_buttons()==B_UP)
 800c260:	f001 fb04 	bl	800d86c <Check_buttons>
 800c264:	4603      	mov	r3, r0
 800c266:	2b01      	cmp	r3, #1
 800c268:	d10e      	bne.n	800c288 <main+0x4f0>
	  {
		  part_res=(part_res+1);
 800c26a:	4b18      	ldr	r3, [pc, #96]	@ (800c2cc <main+0x534>)
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	3301      	adds	r3, #1
 800c270:	b2da      	uxtb	r2, r3
 800c272:	4b16      	ldr	r3, [pc, #88]	@ (800c2cc <main+0x534>)
 800c274:	701a      	strb	r2, [r3, #0]
		  if(part_res > 10){part_res = 0;}
 800c276:	4b15      	ldr	r3, [pc, #84]	@ (800c2cc <main+0x534>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b0a      	cmp	r3, #10
 800c27c:	d902      	bls.n	800c284 <main+0x4ec>
 800c27e:	4b13      	ldr	r3, [pc, #76]	@ (800c2cc <main+0x534>)
 800c280:	2200      	movs	r2, #0
 800c282:	701a      	strb	r2, [r3, #0]
		  Draw_All();
 800c284:	f001 f9ee 	bl	800d664 <Draw_All>
	  }
	  if(Check_buttons()==B_DOWN)
 800c288:	f001 faf0 	bl	800d86c <Check_buttons>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b02      	cmp	r3, #2
 800c290:	f47f ade4 	bne.w	800be5c <main+0xc4>
	  {
		  part_res=(part_res-1);
 800c294:	4b0d      	ldr	r3, [pc, #52]	@ (800c2cc <main+0x534>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	3b01      	subs	r3, #1
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	4b0b      	ldr	r3, [pc, #44]	@ (800c2cc <main+0x534>)
 800c29e:	701a      	strb	r2, [r3, #0]
		  if(part_res > 10){part_res = 10;}
 800c2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c2cc <main+0x534>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b0a      	cmp	r3, #10
 800c2a6:	d902      	bls.n	800c2ae <main+0x516>
 800c2a8:	4b08      	ldr	r3, [pc, #32]	@ (800c2cc <main+0x534>)
 800c2aa:	220a      	movs	r2, #10
 800c2ac:	701a      	strb	r2, [r3, #0]
		  Draw_All();
 800c2ae:	f001 f9d9 	bl	800d664 <Draw_All>
	  switch(state)
 800c2b2:	e5d3      	b.n	800be5c <main+0xc4>
 800c2b4:	2000167e 	.word	0x2000167e
 800c2b8:	20000df4 	.word	0x20000df4
 800c2bc:	20001680 	.word	0x20001680
 800c2c0:	20001838 	.word	0x20001838
 800c2c4:	20000040 	.word	0x20000040
 800c2c8:	20001610 	.word	0x20001610
 800c2cc:	2000167f 	.word	0x2000167f
 800c2d0:	cccccccd 	.word	0xcccccccd
 800c2d4:	2000002c 	.word	0x2000002c
 800c2d8:	40020800 	.word	0x40020800
 800c2dc:	200005ac 	.word	0x200005ac

0800c2e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b094      	sub	sp, #80	@ 0x50
 800c2e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c2e6:	f107 0320 	add.w	r3, r7, #32
 800c2ea:	2230      	movs	r2, #48	@ 0x30
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f00b f863 	bl	80173ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c2f4:	f107 030c 	add.w	r3, r7, #12
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	601a      	str	r2, [r3, #0]
 800c2fc:	605a      	str	r2, [r3, #4]
 800c2fe:	609a      	str	r2, [r3, #8]
 800c300:	60da      	str	r2, [r3, #12]
 800c302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c304:	2300      	movs	r3, #0
 800c306:	60bb      	str	r3, [r7, #8]
 800c308:	4b28      	ldr	r3, [pc, #160]	@ (800c3ac <SystemClock_Config+0xcc>)
 800c30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c30c:	4a27      	ldr	r2, [pc, #156]	@ (800c3ac <SystemClock_Config+0xcc>)
 800c30e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c312:	6413      	str	r3, [r2, #64]	@ 0x40
 800c314:	4b25      	ldr	r3, [pc, #148]	@ (800c3ac <SystemClock_Config+0xcc>)
 800c316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c31c:	60bb      	str	r3, [r7, #8]
 800c31e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c320:	2300      	movs	r3, #0
 800c322:	607b      	str	r3, [r7, #4]
 800c324:	4b22      	ldr	r3, [pc, #136]	@ (800c3b0 <SystemClock_Config+0xd0>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a21      	ldr	r2, [pc, #132]	@ (800c3b0 <SystemClock_Config+0xd0>)
 800c32a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	4b1f      	ldr	r3, [pc, #124]	@ (800c3b0 <SystemClock_Config+0xd0>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c338:	607b      	str	r3, [r7, #4]
 800c33a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c33c:	2301      	movs	r3, #1
 800c33e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c344:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c346:	2302      	movs	r3, #2
 800c348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c34a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800c350:	2319      	movs	r3, #25
 800c352:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 800c354:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800c358:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800c35a:	2304      	movs	r3, #4
 800c35c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800c35e:	2308      	movs	r3, #8
 800c360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c362:	f107 0320 	add.w	r3, r7, #32
 800c366:	4618      	mov	r0, r3
 800c368:	f004 ff8a 	bl	8011280 <HAL_RCC_OscConfig>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800c372:	f001 fb9f 	bl	800dab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c376:	230f      	movs	r3, #15
 800c378:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c37a:	2302      	movs	r3, #2
 800c37c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c37e:	2300      	movs	r3, #0
 800c380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c382:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c388:	2300      	movs	r3, #0
 800c38a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800c38c:	f107 030c 	add.w	r3, r7, #12
 800c390:	2103      	movs	r1, #3
 800c392:	4618      	mov	r0, r3
 800c394:	f005 f9ec 	bl	8011770 <HAL_RCC_ClockConfig>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800c39e:	f001 fb89 	bl	800dab4 <Error_Handler>
  }
}
 800c3a2:	bf00      	nop
 800c3a4:	3750      	adds	r7, #80	@ 0x50
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	40023800 	.word	0x40023800
 800c3b0:	40007000 	.word	0x40007000

0800c3b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08a      	sub	sp, #40	@ 0x28
 800c3b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800c3ba:	f107 0310 	add.w	r3, r7, #16
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	605a      	str	r2, [r3, #4]
 800c3c4:	609a      	str	r2, [r3, #8]
 800c3c6:	60da      	str	r2, [r3, #12]
 800c3c8:	611a      	str	r2, [r3, #16]
 800c3ca:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c3cc:	463b      	mov	r3, r7
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	605a      	str	r2, [r3, #4]
 800c3d4:	609a      	str	r2, [r3, #8]
 800c3d6:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800c3d8:	4b44      	ldr	r3, [pc, #272]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c3da:	4a45      	ldr	r2, [pc, #276]	@ (800c4f0 <MX_ADC1_Init+0x13c>)
 800c3dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c3de:	4b43      	ldr	r3, [pc, #268]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c3e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c3e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c3e6:	4b41      	ldr	r3, [pc, #260]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800c3ec:	4b3f      	ldr	r3, [pc, #252]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c3f2:	4b3e      	ldr	r3, [pc, #248]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800c3f8:	4b3c      	ldr	r3, [pc, #240]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800c400:	4b3a      	ldr	r3, [pc, #232]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c402:	2201      	movs	r2, #1
 800c404:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800c406:	4b39      	ldr	r3, [pc, #228]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c40c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800c40e:	4b37      	ldr	r3, [pc, #220]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c410:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800c414:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c416:	4b35      	ldr	r3, [pc, #212]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c418:	2200      	movs	r2, #0
 800c41a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800c41c:	4b33      	ldr	r3, [pc, #204]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c41e:	2204      	movs	r2, #4
 800c420:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800c422:	4b32      	ldr	r3, [pc, #200]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c42a:	4b30      	ldr	r3, [pc, #192]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c42c:	2201      	movs	r2, #1
 800c42e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c430:	482e      	ldr	r0, [pc, #184]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c432:	f002 f9b5 	bl	800e7a0 <HAL_ADC_Init>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800c43c:	f001 fb3a 	bl	800dab4 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 800c440:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c444:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2048+THRESHOLD;
 800c446:	f44f 6319 	mov.w	r3, #2448	@ 0x990
 800c44a:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 2048-THRESHOLD;
 800c44c:	f44f 63ce 	mov.w	r3, #1648	@ 0x670
 800c450:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.ITMode = ENABLE;
 800c452:	2301      	movs	r3, #1
 800c454:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800c458:	f107 0310 	add.w	r3, r7, #16
 800c45c:	4619      	mov	r1, r3
 800c45e:	4823      	ldr	r0, [pc, #140]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c460:	f002 fd6c 	bl	800ef3c <HAL_ADC_AnalogWDGConfig>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d001      	beq.n	800c46e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800c46a:	f001 fb23 	bl	800dab4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800c46e:	2300      	movs	r3, #0
 800c470:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800c472:	2301      	movs	r3, #1
 800c474:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c476:	2300      	movs	r3, #0
 800c478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c47a:	463b      	mov	r3, r7
 800c47c:	4619      	mov	r1, r3
 800c47e:	481b      	ldr	r0, [pc, #108]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c480:	f002 fc2a 	bl	800ecd8 <HAL_ADC_ConfigChannel>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800c48a:	f001 fb13 	bl	800dab4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800c48e:	2301      	movs	r3, #1
 800c490:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800c492:	2302      	movs	r3, #2
 800c494:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c496:	463b      	mov	r3, r7
 800c498:	4619      	mov	r1, r3
 800c49a:	4814      	ldr	r0, [pc, #80]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c49c:	f002 fc1c 	bl	800ecd8 <HAL_ADC_ConfigChannel>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800c4a6:	f001 fb05 	bl	800dab4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c4b2:	463b      	mov	r3, r7
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	480d      	ldr	r0, [pc, #52]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c4b8:	f002 fc0e 	bl	800ecd8 <HAL_ADC_ConfigChannel>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800c4c2:	f001 faf7 	bl	800dab4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800c4ca:	2304      	movs	r3, #4
 800c4cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c4ce:	463b      	mov	r3, r7
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	4806      	ldr	r0, [pc, #24]	@ (800c4ec <MX_ADC1_Init+0x138>)
 800c4d4:	f002 fc00 	bl	800ecd8 <HAL_ADC_ConfigChannel>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 800c4de:	f001 fae9 	bl	800dab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c4e2:	bf00      	nop
 800c4e4:	3728      	adds	r7, #40	@ 0x28
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	200003c4 	.word	0x200003c4
 800c4f0:	40012000 	.word	0x40012000

0800c4f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c4f8:	4b17      	ldr	r3, [pc, #92]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c4fa:	4a18      	ldr	r2, [pc, #96]	@ (800c55c <MX_SPI1_Init+0x68>)
 800c4fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c4fe:	4b16      	ldr	r3, [pc, #88]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c500:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c506:	4b14      	ldr	r3, [pc, #80]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c508:	2200      	movs	r2, #0
 800c50a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c50c:	4b12      	ldr	r3, [pc, #72]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c50e:	2200      	movs	r2, #0
 800c510:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c512:	4b11      	ldr	r3, [pc, #68]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c514:	2200      	movs	r2, #0
 800c516:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c518:	4b0f      	ldr	r3, [pc, #60]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c51e:	4b0e      	ldr	r3, [pc, #56]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c524:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800c526:	4b0c      	ldr	r3, [pc, #48]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c528:	2208      	movs	r2, #8
 800c52a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c52c:	4b0a      	ldr	r3, [pc, #40]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c52e:	2200      	movs	r2, #0
 800c530:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c532:	4b09      	ldr	r3, [pc, #36]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c534:	2200      	movs	r2, #0
 800c536:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c538:	4b07      	ldr	r3, [pc, #28]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c53a:	2200      	movs	r2, #0
 800c53c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c53e:	4b06      	ldr	r3, [pc, #24]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c540:	220a      	movs	r2, #10
 800c542:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c544:	4804      	ldr	r0, [pc, #16]	@ (800c558 <MX_SPI1_Init+0x64>)
 800c546:	f005 facb 	bl	8011ae0 <HAL_SPI_Init>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800c550:	f001 fab0 	bl	800dab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c554:	bf00      	nop
 800c556:	bd80      	pop	{r7, pc}
 800c558:	2000046c 	.word	0x2000046c
 800c55c:	40013000 	.word	0x40013000

0800c560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08e      	sub	sp, #56	@ 0x38
 800c564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c566:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	605a      	str	r2, [r3, #4]
 800c570:	609a      	str	r2, [r3, #8]
 800c572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c574:	f107 0320 	add.w	r3, r7, #32
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c57e:	1d3b      	adds	r3, r7, #4
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	605a      	str	r2, [r3, #4]
 800c586:	609a      	str	r2, [r3, #8]
 800c588:	60da      	str	r2, [r3, #12]
 800c58a:	611a      	str	r2, [r3, #16]
 800c58c:	615a      	str	r2, [r3, #20]
 800c58e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c590:	4b2b      	ldr	r3, [pc, #172]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c592:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c598:	4b29      	ldr	r3, [pc, #164]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c59e:	4b28      	ldr	r3, [pc, #160]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = SAMPLE_PERIOD-1;
 800c5a4:	4b26      	ldr	r3, [pc, #152]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c5a6:	223b      	movs	r2, #59	@ 0x3b
 800c5a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c5aa:	4b25      	ldr	r3, [pc, #148]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c5b0:	4b23      	ldr	r3, [pc, #140]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c5b6:	4822      	ldr	r0, [pc, #136]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c5b8:	f005 fd22 	bl	8012000 <HAL_TIM_Base_Init>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800c5c2:	f001 fa77 	bl	800dab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c5c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c5cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	481b      	ldr	r0, [pc, #108]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c5d4:	f005 ff7c 	bl	80124d0 <HAL_TIM_ConfigClockSource>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800c5de:	f001 fa69 	bl	800dab4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800c5e2:	4817      	ldr	r0, [pc, #92]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c5e4:	f005 fdb6 	bl	8012154 <HAL_TIM_OC_Init>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800c5ee:	f001 fa61 	bl	800dab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c5fa:	f107 0320 	add.w	r3, r7, #32
 800c5fe:	4619      	mov	r1, r3
 800c600:	480f      	ldr	r0, [pc, #60]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c602:	f006 fb05 	bl	8012c10 <HAL_TIMEx_MasterConfigSynchronization>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800c60c:	f001 fa52 	bl	800dab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800c610:	2300      	movs	r3, #0
 800c612:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c614:	2300      	movs	r3, #0
 800c616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c618:	2300      	movs	r3, #0
 800c61a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c61c:	2300      	movs	r3, #0
 800c61e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c620:	1d3b      	adds	r3, r7, #4
 800c622:	2200      	movs	r2, #0
 800c624:	4619      	mov	r1, r3
 800c626:	4806      	ldr	r0, [pc, #24]	@ (800c640 <MX_TIM2_Init+0xe0>)
 800c628:	f005 fef6 	bl	8012418 <HAL_TIM_OC_ConfigChannel>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800c632:	f001 fa3f 	bl	800dab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800c636:	bf00      	nop
 800c638:	3738      	adds	r7, #56	@ 0x38
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	200004c4 	.word	0x200004c4

0800c644 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c64a:	f107 0308 	add.w	r3, r7, #8
 800c64e:	2200      	movs	r2, #0
 800c650:	601a      	str	r2, [r3, #0]
 800c652:	605a      	str	r2, [r3, #4]
 800c654:	609a      	str	r2, [r3, #8]
 800c656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c658:	463b      	mov	r3, r7
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c660:	4b1d      	ldr	r3, [pc, #116]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c662:	4a1e      	ldr	r2, [pc, #120]	@ (800c6dc <MX_TIM3_Init+0x98>)
 800c664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = SAMPLE_PERIOD-1;
 800c666:	4b1c      	ldr	r3, [pc, #112]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c668:	223b      	movs	r2, #59	@ 0x3b
 800c66a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c66c:	4b1a      	ldr	r3, [pc, #104]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c66e:	2200      	movs	r2, #0
 800c670:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = SAMPLE_N/2;
 800c672:	4b19      	ldr	r3, [pc, #100]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c678:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c67a:	4b17      	ldr	r3, [pc, #92]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c680:	4b15      	ldr	r3, [pc, #84]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c682:	2200      	movs	r2, #0
 800c684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c686:	4814      	ldr	r0, [pc, #80]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c688:	f005 fcba 	bl	8012000 <HAL_TIM_Base_Init>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800c692:	f001 fa0f 	bl	800dab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c69a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c69c:	f107 0308 	add.w	r3, r7, #8
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	480d      	ldr	r0, [pc, #52]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c6a4:	f005 ff14 	bl	80124d0 <HAL_TIM_ConfigClockSource>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800c6ae:	f001 fa01 	bl	800dab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c6b2:	2320      	movs	r3, #32
 800c6b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c6ba:	463b      	mov	r3, r7
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4806      	ldr	r0, [pc, #24]	@ (800c6d8 <MX_TIM3_Init+0x94>)
 800c6c0:	f006 faa6 	bl	8012c10 <HAL_TIMEx_MasterConfigSynchronization>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800c6ca:	f001 f9f3 	bl	800dab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800c6ce:	bf00      	nop
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	2000050c 	.word	0x2000050c
 800c6dc:	40000400 	.word	0x40000400

0800c6e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c6e6:	f107 0308 	add.w	r3, r7, #8
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	605a      	str	r2, [r3, #4]
 800c6f0:	609a      	str	r2, [r3, #8]
 800c6f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c6f4:	463b      	mov	r3, r7
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800c6fc:	4b1d      	ldr	r3, [pc, #116]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c6fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c778 <MX_TIM5_Init+0x98>)
 800c700:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 800c702:	4b1c      	ldr	r3, [pc, #112]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c704:	225f      	movs	r2, #95	@ 0x5f
 800c706:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c708:	4b1a      	ldr	r3, [pc, #104]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800c70e:	4b19      	ldr	r3, [pc, #100]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c710:	f04f 32ff 	mov.w	r2, #4294967295
 800c714:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c716:	4b17      	ldr	r3, [pc, #92]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c718:	2200      	movs	r2, #0
 800c71a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c71c:	4b15      	ldr	r3, [pc, #84]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c71e:	2200      	movs	r2, #0
 800c720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c722:	4814      	ldr	r0, [pc, #80]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c724:	f005 fc6c 	bl	8012000 <HAL_TIM_Base_Init>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800c72e:	f001 f9c1 	bl	800dab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c736:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c738:	f107 0308 	add.w	r3, r7, #8
 800c73c:	4619      	mov	r1, r3
 800c73e:	480d      	ldr	r0, [pc, #52]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c740:	f005 fec6 	bl	80124d0 <HAL_TIM_ConfigClockSource>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800c74a:	f001 f9b3 	bl	800dab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c74e:	2300      	movs	r3, #0
 800c750:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c752:	2300      	movs	r3, #0
 800c754:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c756:	463b      	mov	r3, r7
 800c758:	4619      	mov	r1, r3
 800c75a:	4806      	ldr	r0, [pc, #24]	@ (800c774 <MX_TIM5_Init+0x94>)
 800c75c:	f006 fa58 	bl	8012c10 <HAL_TIMEx_MasterConfigSynchronization>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800c766:	f001 f9a5 	bl	800dab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800c76a:	bf00      	nop
 800c76c:	3718      	adds	r7, #24
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20000554 	.word	0x20000554
 800c778:	40000c00 	.word	0x40000c00

0800c77c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c782:	2300      	movs	r3, #0
 800c784:	607b      	str	r3, [r7, #4]
 800c786:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b8 <MX_DMA_Init+0x3c>)
 800c788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c78a:	4a0b      	ldr	r2, [pc, #44]	@ (800c7b8 <MX_DMA_Init+0x3c>)
 800c78c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c790:	6313      	str	r3, [r2, #48]	@ 0x30
 800c792:	4b09      	ldr	r3, [pc, #36]	@ (800c7b8 <MX_DMA_Init+0x3c>)
 800c794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c79a:	607b      	str	r3, [r7, #4]
 800c79c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	2038      	movs	r0, #56	@ 0x38
 800c7a4:	f002 fe8d 	bl	800f4c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c7a8:	2038      	movs	r0, #56	@ 0x38
 800c7aa:	f002 fea6 	bl	800f4fa <HAL_NVIC_EnableIRQ>

}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	40023800 	.word	0x40023800

0800c7bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08a      	sub	sp, #40	@ 0x28
 800c7c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7c2:	f107 0314 	add.w	r3, r7, #20
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	601a      	str	r2, [r3, #0]
 800c7ca:	605a      	str	r2, [r3, #4]
 800c7cc:	609a      	str	r2, [r3, #8]
 800c7ce:	60da      	str	r2, [r3, #12]
 800c7d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	613b      	str	r3, [r7, #16]
 800c7d6:	4b3e      	ldr	r3, [pc, #248]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7da:	4a3d      	ldr	r2, [pc, #244]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c7dc:	f043 0304 	orr.w	r3, r3, #4
 800c7e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7e2:	4b3b      	ldr	r3, [pc, #236]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7e6:	f003 0304 	and.w	r3, r3, #4
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	4b37      	ldr	r3, [pc, #220]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7f6:	4a36      	ldr	r2, [pc, #216]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c7f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7fe:	4b34      	ldr	r3, [pc, #208]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c80a:	2300      	movs	r3, #0
 800c80c:	60bb      	str	r3, [r7, #8]
 800c80e:	4b30      	ldr	r3, [pc, #192]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c812:	4a2f      	ldr	r2, [pc, #188]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c814:	f043 0301 	orr.w	r3, r3, #1
 800c818:	6313      	str	r3, [r2, #48]	@ 0x30
 800c81a:	4b2d      	ldr	r3, [pc, #180]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	60bb      	str	r3, [r7, #8]
 800c824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c826:	2300      	movs	r3, #0
 800c828:	607b      	str	r3, [r7, #4]
 800c82a:	4b29      	ldr	r3, [pc, #164]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c82c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c82e:	4a28      	ldr	r2, [pc, #160]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c830:	f043 0302 	orr.w	r3, r3, #2
 800c834:	6313      	str	r3, [r2, #48]	@ 0x30
 800c836:	4b26      	ldr	r3, [pc, #152]	@ (800c8d0 <MX_GPIO_Init+0x114>)
 800c838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	607b      	str	r3, [r7, #4]
 800c840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800c842:	2200      	movs	r2, #0
 800c844:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c848:	4822      	ldr	r0, [pc, #136]	@ (800c8d4 <MX_GPIO_Init+0x118>)
 800c84a:	f003 fb7d 	bl	800ff48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800c84e:	2201      	movs	r2, #1
 800c850:	2107      	movs	r1, #7
 800c852:	4821      	ldr	r0, [pc, #132]	@ (800c8d8 <MX_GPIO_Init+0x11c>)
 800c854:	f003 fb78 	bl	800ff48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c858:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c85c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c85e:	2301      	movs	r3, #1
 800c860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c862:	2300      	movs	r3, #0
 800c864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c866:	2300      	movs	r3, #0
 800c868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c86a:	f107 0314 	add.w	r3, r7, #20
 800c86e:	4619      	mov	r1, r3
 800c870:	4818      	ldr	r0, [pc, #96]	@ (800c8d4 <MX_GPIO_Init+0x118>)
 800c872:	f003 f9cd 	bl	800fc10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800c876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c87a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c87c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800c880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c882:	2300      	movs	r3, #0
 800c884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c886:	f107 0314 	add.w	r3, r7, #20
 800c88a:	4619      	mov	r1, r3
 800c88c:	4811      	ldr	r0, [pc, #68]	@ (800c8d4 <MX_GPIO_Init+0x118>)
 800c88e:	f003 f9bf 	bl	800fc10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800c892:	2307      	movs	r3, #7
 800c894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c896:	2301      	movs	r3, #1
 800c898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c89a:	2301      	movs	r3, #1
 800c89c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8a2:	f107 0314 	add.w	r3, r7, #20
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	480b      	ldr	r0, [pc, #44]	@ (800c8d8 <MX_GPIO_Init+0x11c>)
 800c8aa:	f003 f9b1 	bl	800fc10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800c8ae:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800c8b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8bc:	f107 0314 	add.w	r3, r7, #20
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4805      	ldr	r0, [pc, #20]	@ (800c8d8 <MX_GPIO_Init+0x11c>)
 800c8c4:	f003 f9a4 	bl	800fc10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c8c8:	bf00      	nop
 800c8ca:	3728      	adds	r7, #40	@ 0x28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	40023800 	.word	0x40023800
 800c8d4:	40020800 	.word	0x40020800
 800c8d8:	40020400 	.word	0x40020400

0800c8dc <print_array>:

/* USER CODE BEGIN 4 */
void print_array(uint16_t *arr1,uint16_t size,uint32_t start_pos, uint8_t type){
 800c8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8de:	b099      	sub	sp, #100	@ 0x64
 800c8e0:	af02      	add	r7, sp, #8
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	607a      	str	r2, [r7, #4]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	817b      	strh	r3, [r7, #10]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	727b      	strb	r3, [r7, #9]
	uint8_t xd;
	uint16_t i;
	char print_buffer[50];
	uint32_t buffer[4];

	if(type == 0)
 800c8f0:	7a7b      	ldrb	r3, [r7, #9]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f040 8088 	bne.w	800ca08 <print_array+0x12c>
	{
	xd = sprintf(print_buffer,"start:\n\n\r");
 800c8f8:	f107 0320 	add.w	r3, r7, #32
 800c8fc:	4971      	ldr	r1, [pc, #452]	@ (800cac4 <print_array+0x1e8>)
 800c8fe:	4618      	mov	r0, r3
 800c900:	f00a fcf8 	bl	80172f4 <siprintf>
 800c904:	4603      	mov	r3, r0
 800c906:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	CDC_Transmit_FS((uint8_t*)print_buffer,xd);
 800c90a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c90e:	b29a      	uxth	r2, r3
 800c910:	f107 0320 	add.w	r3, r7, #32
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f009 fac2 	bl	8015ea0 <CDC_Transmit_FS>

	for(i = 0;i < size;i+=4){
 800c91c:	2300      	movs	r3, #0
 800c91e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c922:	e05a      	b.n	800c9da <print_array+0xfe>
		xd = sprintf(print_buffer,"%04d %04d %04d %04d; ",arr1[(start_pos+i)%size],arr1[(start_pos+i+1)%size],arr1[(start_pos+i+2)%size],arr1[(start_pos+i+3)%size]);     	//saving data to buffer in format: 0123 0123 0123 0123; 0123 ...
 800c924:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4413      	add	r3, r2
 800c92c:	897a      	ldrh	r2, [r7, #10]
 800c92e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c932:	fb01 f202 	mul.w	r2, r1, r2
 800c936:	1a9b      	subs	r3, r3, r2
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	4413      	add	r3, r2
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	461d      	mov	r5, r3
 800c942:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4413      	add	r3, r2
 800c94a:	3301      	adds	r3, #1
 800c94c:	897a      	ldrh	r2, [r7, #10]
 800c94e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c952:	fb01 f202 	mul.w	r2, r1, r2
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	4413      	add	r3, r2
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	461e      	mov	r6, r3
 800c962:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4413      	add	r3, r2
 800c96a:	3302      	adds	r3, #2
 800c96c:	897a      	ldrh	r2, [r7, #10]
 800c96e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c972:	fb01 f202 	mul.w	r2, r1, r2
 800c976:	1a9b      	subs	r3, r3, r2
 800c978:	005b      	lsls	r3, r3, #1
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	4413      	add	r3, r2
 800c97e:	881b      	ldrh	r3, [r3, #0]
 800c980:	461c      	mov	r4, r3
 800c982:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4413      	add	r3, r2
 800c98a:	3303      	adds	r3, #3
 800c98c:	897a      	ldrh	r2, [r7, #10]
 800c98e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c992:	fb01 f202 	mul.w	r2, r1, r2
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	f107 0020 	add.w	r0, r7, #32
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	9400      	str	r4, [sp, #0]
 800c9a8:	4633      	mov	r3, r6
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	4946      	ldr	r1, [pc, #280]	@ (800cac8 <print_array+0x1ec>)
 800c9ae:	f00a fca1 	bl	80172f4 <siprintf>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		CDC_Transmit_FS((uint8_t*)print_buffer,xd);																															//sending buffer
 800c9b8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	f107 0320 	add.w	r3, r7, #32
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f009 fa6b 	bl	8015ea0 <CDC_Transmit_FS>
		HAL_Delay(1);
 800c9ca:	2001      	movs	r0, #1
 800c9cc:	f001 fec4 	bl	800e758 <HAL_Delay>
	for(i = 0;i < size;i+=4){
 800c9d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c9da:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800c9de:	897b      	ldrh	r3, [r7, #10]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d39f      	bcc.n	800c924 <print_array+0x48>
			xd = sprintf(uart_buffer,"%d ",arr2[(i+var)%size]);
			CDC_Transmit_FS((uint8_t*)uart_buffer,xd);
			HAL_Delay(1);
		}
	*/
	xd = sprintf(print_buffer,"\n end\n\r");
 800c9e4:	f107 0320 	add.w	r3, r7, #32
 800c9e8:	4938      	ldr	r1, [pc, #224]	@ (800cacc <print_array+0x1f0>)
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f00a fc82 	bl	80172f4 <siprintf>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	CDC_Transmit_FS((uint8_t*)print_buffer,xd);
 800c9f6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	f107 0320 	add.w	r3, r7, #32
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f009 fa4c 	bl	8015ea0 <CDC_Transmit_FS>
	}
	if(type == 1)
 800ca08:	7a7b      	ldrb	r3, [r7, #9]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d156      	bne.n	800cabc <print_array+0x1e0>
	{
	for(i = 0;i < size;i+=4)
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ca14:	e04c      	b.n	800cab0 <print_array+0x1d4>
		{

		buffer[0] = arr1[(start_pos+i)%size];
 800ca16:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	897a      	ldrh	r2, [r7, #10]
 800ca20:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca24:	fb01 f202 	mul.w	r2, r1, r2
 800ca28:	1a9b      	subs	r3, r3, r2
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	4413      	add	r3, r2
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	613b      	str	r3, [r7, #16]
		buffer[1] = arr1[(start_pos+i+1)%size];
 800ca34:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	897a      	ldrh	r2, [r7, #10]
 800ca40:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca44:	fb01 f202 	mul.w	r2, r1, r2
 800ca48:	1a9b      	subs	r3, r3, r2
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	4413      	add	r3, r2
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	617b      	str	r3, [r7, #20]
		buffer[2] = arr1[(start_pos+i+2)%size];
 800ca54:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	3302      	adds	r3, #2
 800ca5e:	897a      	ldrh	r2, [r7, #10]
 800ca60:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca64:	fb01 f202 	mul.w	r2, r1, r2
 800ca68:	1a9b      	subs	r3, r3, r2
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	4413      	add	r3, r2
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	61bb      	str	r3, [r7, #24]
		buffer[3] = arr1[(start_pos+i+3)%size];
 800ca74:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	3303      	adds	r3, #3
 800ca7e:	897a      	ldrh	r2, [r7, #10]
 800ca80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca84:	fb01 f202 	mul.w	r2, r1, r2
 800ca88:	1a9b      	subs	r3, r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	4413      	add	r3, r2
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	61fb      	str	r3, [r7, #28]
		CDC_Transmit_FS((uint8_t*)buffer,16);																															//sending buffer
 800ca94:	f107 0310 	add.w	r3, r7, #16
 800ca98:	2110      	movs	r1, #16
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f009 fa00 	bl	8015ea0 <CDC_Transmit_FS>
		HAL_Delay(1);
 800caa0:	2001      	movs	r0, #1
 800caa2:	f001 fe59 	bl	800e758 <HAL_Delay>
	for(i = 0;i < size;i+=4)
 800caa6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800caaa:	3304      	adds	r3, #4
 800caac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cab0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800cab4:	897b      	ldrh	r3, [r7, #10]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d3ad      	bcc.n	800ca16 <print_array+0x13a>
		}
	}
	return;
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
}
 800cabe:	375c      	adds	r7, #92	@ 0x5c
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac4:	0801b760 	.word	0x0801b760
 800cac8:	0801b76c 	.word	0x0801b76c
 800cacc:	0801b784 	.word	0x0801b784

0800cad0 <Read_channel>:
void Read_channel(uint16_t *source, float *target, uint32_t source_size, uint32_t target_size, uint32_t start_pos, uint32_t channel)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b087      	sub	sp, #28
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
 800cadc:	603b      	str	r3, [r7, #0]
	uint32_t chnl_cnt = source_size/target_size;
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cae6:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<target_size; i++)
 800cae8:	2300      	movs	r3, #0
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	e01f      	b.n	800cb2e <Read_channel+0x5e>
	{
		target[i] = source[(start_pos+i*chnl_cnt+channel)%source_size];
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	fb03 f202 	mul.w	r2, r3, r2
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	441a      	add	r2, r3
 800cafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafc:	4413      	add	r3, r2
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	fb01 f202 	mul.w	r2, r1, r2
 800cb0a:	1a9b      	subs	r3, r3, r2
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	4413      	add	r3, r2
 800cb12:	8819      	ldrh	r1, [r3, #0]
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	ee07 1a90 	vmov	s15, r1
 800cb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb24:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i<target_size; i++)
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	617b      	str	r3, [r7, #20]
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d8db      	bhi.n	800caee <Read_channel+0x1e>
	}
}
 800cb36:	bf00      	nop
 800cb38:	bf00      	nop
 800cb3a:	371c      	adds	r7, #28
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	0000      	movs	r0, r0
	...

0800cb48 <ConvertCoordinates>:

uint8_t ConvertCoordinates(float* coords, float diffx, float diffy, float speed, float xoffset, float yoffset, float target_size)
{
 800cb48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb4c:	ed2d 8b06 	vpush	{d8-d10}
 800cb50:	b0a6      	sub	sp, #152	@ 0x98
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb56:	ed87 0a08 	vstr	s0, [r7, #32]
 800cb5a:	edc7 0a07 	vstr	s1, [r7, #28]
 800cb5e:	ed87 1a06 	vstr	s2, [r7, #24]
 800cb62:	edc7 1a05 	vstr	s3, [r7, #20]
 800cb66:	ed87 2a04 	vstr	s4, [r7, #16]
 800cb6a:	edc7 2a03 	vstr	s5, [r7, #12]
	//normalization to -2 to 2 scale and conversion to complex float
	double _Complex dx = ((diffx*speed+xoffset)*4)/target_size;
 800cb6e:	ed97 7a08 	vldr	s14, [r7, #32]
 800cb72:	edd7 7a06 	vldr	s15, [r7, #24]
 800cb76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb7a:	edd7 7a05 	vldr	s15, [r7, #20]
 800cb7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb82:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800cb86:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cb8a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cb92:	ee16 0a90 	vmov	r0, s13
 800cb96:	f7f3 fcdf 	bl	8000558 <__aeabi_f2d>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800cba2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800cba6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 800cbaa:	f04f 0200 	mov.w	r2, #0
 800cbae:	f04f 0300 	mov.w	r3, #0
 800cbb2:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double _Complex dy = ((diffy*speed+yoffset)*4)/target_size;
 800cbb6:	ed97 7a07 	vldr	s14, [r7, #28]
 800cbba:	edd7 7a06 	vldr	s15, [r7, #24]
 800cbbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbc2:	edd7 7a04 	vldr	s15, [r7, #16]
 800cbc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbca:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800cbce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cbd2:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cbda:	ee16 0a90 	vmov	r0, s13
 800cbde:	f7f3 fcbb 	bl	8000558 <__aeabi_f2d>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800cbea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800cbee:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	f04f 0300 	mov.w	r3, #0
 800cbfa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	if(fabsf(diffx*speed+xoffset) > target_size || fabsf(diffy*speed+yoffset) > target_size)
 800cbfe:	ed97 7a08 	vldr	s14, [r7, #32]
 800cc02:	edd7 7a06 	vldr	s15, [r7, #24]
 800cc06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc0a:	edd7 7a05 	vldr	s15, [r7, #20]
 800cc0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc12:	eef0 7ae7 	vabs.f32	s15, s15
 800cc16:	ed97 7a03 	vldr	s14, [r7, #12]
 800cc1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc22:	d412      	bmi.n	800cc4a <ConvertCoordinates+0x102>
 800cc24:	ed97 7a07 	vldr	s14, [r7, #28]
 800cc28:	edd7 7a06 	vldr	s15, [r7, #24]
 800cc2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc30:	edd7 7a04 	vldr	s15, [r7, #16]
 800cc34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc38:	eef0 7ae7 	vabs.f32	s15, s15
 800cc3c:	ed97 7a03 	vldr	s14, [r7, #12]
 800cc40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc48:	d501      	bpl.n	800cc4e <ConvertCoordinates+0x106>
	{
		return 1;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e346      	b.n	800d2dc <ConvertCoordinates+0x794>
	}

	double _Complex x = -1*_Complex_I*(dx*csqrt(dy*dy-4)*csqrt(dx*dx-dy*dy-4))/(4*csqrt(dx*dx+dy*dy-4));
 800cc4e:	ed9f 3bf2 	vldr	d3, [pc, #968]	@ 800d018 <ConvertCoordinates+0x4d0>
 800cc52:	ed97 2b22 	vldr	d2, [r7, #136]	@ 0x88
 800cc56:	ed9f 1bf0 	vldr	d1, [pc, #960]	@ 800d018 <ConvertCoordinates+0x4d0>
 800cc5a:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800cc5e:	f7f4 f813 	bl	8000c88 <__muldc3>
 800cc62:	eeb0 6a40 	vmov.f32	s12, s0
 800cc66:	eef0 6a60 	vmov.f32	s13, s1
 800cc6a:	eeb0 7a41 	vmov.f32	s14, s2
 800cc6e:	eef0 7a61 	vmov.f32	s15, s3
 800cc72:	ec51 0b16 	vmov	r0, r1, d6
 800cc76:	ec59 8b17 	vmov	r8, r9, d7
 800cc7a:	f04f 0200 	mov.w	r2, #0
 800cc7e:	4bec      	ldr	r3, [pc, #944]	@ (800d030 <ConvertCoordinates+0x4e8>)
 800cc80:	f7f3 fb0a 	bl	8000298 <__aeabi_dsub>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4610      	mov	r0, r2
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4642      	mov	r2, r8
 800cc8e:	464b      	mov	r3, r9
 800cc90:	ec41 0b16 	vmov	d6, r0, r1
 800cc94:	ec43 2b17 	vmov	d7, r2, r3
 800cc98:	eeb0 0a46 	vmov.f32	s0, s12
 800cc9c:	eef0 0a66 	vmov.f32	s1, s13
 800cca0:	eeb0 1a47 	vmov.f32	s2, s14
 800cca4:	eef0 1a67 	vmov.f32	s3, s15
 800cca8:	f00c fda0 	bl	80197ec <csqrt>
 800ccac:	eeb0 7a40 	vmov.f32	s14, s0
 800ccb0:	eef0 7a60 	vmov.f32	s15, s1
 800ccb4:	eeb0 6a41 	vmov.f32	s12, s2
 800ccb8:	eef0 6a61 	vmov.f32	s13, s3
 800ccbc:	eeb0 3a46 	vmov.f32	s6, s12
 800ccc0:	eef0 3a66 	vmov.f32	s7, s13
 800ccc4:	eeb0 2a47 	vmov.f32	s4, s14
 800ccc8:	eef0 2a67 	vmov.f32	s5, s15
 800cccc:	ed9f 1bd2 	vldr	d1, [pc, #840]	@ 800d018 <ConvertCoordinates+0x4d0>
 800ccd0:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800ccd4:	f7f3 ffd8 	bl	8000c88 <__muldc3>
 800ccd8:	eeb0 6a40 	vmov.f32	s12, s0
 800ccdc:	eef0 6a60 	vmov.f32	s13, s1
 800cce0:	eeb0 7a41 	vmov.f32	s14, s2
 800cce4:	eef0 7a61 	vmov.f32	s15, s3
 800cce8:	eeb0 8a46 	vmov.f32	s16, s12
 800ccec:	eef0 8a66 	vmov.f32	s17, s13
 800ccf0:	eeb0 9a47 	vmov.f32	s18, s14
 800ccf4:	eef0 9a67 	vmov.f32	s19, s15
 800ccf8:	ed9f 3bc7 	vldr	d3, [pc, #796]	@ 800d018 <ConvertCoordinates+0x4d0>
 800ccfc:	ed97 2b24 	vldr	d2, [r7, #144]	@ 0x90
 800cd00:	ed9f 1bc5 	vldr	d1, [pc, #788]	@ 800d018 <ConvertCoordinates+0x4d0>
 800cd04:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800cd08:	f7f3 ffbe 	bl	8000c88 <__muldc3>
 800cd0c:	eeb0 6a40 	vmov.f32	s12, s0
 800cd10:	eef0 6a60 	vmov.f32	s13, s1
 800cd14:	eeb0 7a41 	vmov.f32	s14, s2
 800cd18:	eef0 7a61 	vmov.f32	s15, s3
 800cd1c:	ec59 8b16 	vmov	r8, r9, d6
 800cd20:	ec5b ab17 	vmov	sl, fp, d7
 800cd24:	ed9f 3bbc 	vldr	d3, [pc, #752]	@ 800d018 <ConvertCoordinates+0x4d0>
 800cd28:	ed97 2b22 	vldr	d2, [r7, #136]	@ 0x88
 800cd2c:	ed9f 1bba 	vldr	d1, [pc, #744]	@ 800d018 <ConvertCoordinates+0x4d0>
 800cd30:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800cd34:	f7f3 ffa8 	bl	8000c88 <__muldc3>
 800cd38:	eeb0 6a40 	vmov.f32	s12, s0
 800cd3c:	eef0 6a60 	vmov.f32	s13, s1
 800cd40:	eeb0 7a41 	vmov.f32	s14, s2
 800cd44:	eef0 7a61 	vmov.f32	s15, s3
 800cd48:	ec53 2b16 	vmov	r2, r3, d6
 800cd4c:	ed87 7b00 	vstr	d7, [r7]
 800cd50:	4640      	mov	r0, r8
 800cd52:	4649      	mov	r1, r9
 800cd54:	f7f3 faa0 	bl	8000298 <__aeabi_dsub>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	4690      	mov	r8, r2
 800cd5e:	4699      	mov	r9, r3
 800cd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd64:	4650      	mov	r0, sl
 800cd66:	4659      	mov	r1, fp
 800cd68:	f7f3 fa96 	bl	8000298 <__aeabi_dsub>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	4692      	mov	sl, r2
 800cd72:	469b      	mov	fp, r3
 800cd74:	f04f 0200 	mov.w	r2, #0
 800cd78:	4bad      	ldr	r3, [pc, #692]	@ (800d030 <ConvertCoordinates+0x4e8>)
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	f7f3 fa8b 	bl	8000298 <__aeabi_dsub>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	4610      	mov	r0, r2
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4652      	mov	r2, sl
 800cd8c:	465b      	mov	r3, fp
 800cd8e:	ec41 0b16 	vmov	d6, r0, r1
 800cd92:	ec43 2b17 	vmov	d7, r2, r3
 800cd96:	eeb0 0a46 	vmov.f32	s0, s12
 800cd9a:	eef0 0a66 	vmov.f32	s1, s13
 800cd9e:	eeb0 1a47 	vmov.f32	s2, s14
 800cda2:	eef0 1a67 	vmov.f32	s3, s15
 800cda6:	f00c fd21 	bl	80197ec <csqrt>
 800cdaa:	eeb0 7a40 	vmov.f32	s14, s0
 800cdae:	eef0 7a60 	vmov.f32	s15, s1
 800cdb2:	eeb0 6a41 	vmov.f32	s12, s2
 800cdb6:	eef0 6a61 	vmov.f32	s13, s3
 800cdba:	eeb0 3a46 	vmov.f32	s6, s12
 800cdbe:	eef0 3a66 	vmov.f32	s7, s13
 800cdc2:	eeb0 2a47 	vmov.f32	s4, s14
 800cdc6:	eef0 2a67 	vmov.f32	s5, s15
 800cdca:	eeb0 1a49 	vmov.f32	s2, s18
 800cdce:	eef0 1a69 	vmov.f32	s3, s19
 800cdd2:	eeb0 0a48 	vmov.f32	s0, s16
 800cdd6:	eef0 0a68 	vmov.f32	s1, s17
 800cdda:	f7f3 ff55 	bl	8000c88 <__muldc3>
 800cdde:	eeb0 7a40 	vmov.f32	s14, s0
 800cde2:	eef0 7a60 	vmov.f32	s15, s1
 800cde6:	eeb0 6a41 	vmov.f32	s12, s2
 800cdea:	eef0 6a61 	vmov.f32	s13, s3
 800cdee:	ed9f 3b8c 	vldr	d3, [pc, #560]	@ 800d020 <ConvertCoordinates+0x4d8>
 800cdf2:	ed9f 2b8d 	vldr	d2, [pc, #564]	@ 800d028 <ConvertCoordinates+0x4e0>
 800cdf6:	eeb0 1a46 	vmov.f32	s2, s12
 800cdfa:	eef0 1a66 	vmov.f32	s3, s13
 800cdfe:	eeb0 0a47 	vmov.f32	s0, s14
 800ce02:	eef0 0a67 	vmov.f32	s1, s15
 800ce06:	f7f3 ff3f 	bl	8000c88 <__muldc3>
 800ce0a:	eeb0 6a40 	vmov.f32	s12, s0
 800ce0e:	eef0 6a60 	vmov.f32	s13, s1
 800ce12:	eeb0 7a41 	vmov.f32	s14, s2
 800ce16:	eef0 7a61 	vmov.f32	s15, s3
 800ce1a:	eeb0 8a46 	vmov.f32	s16, s12
 800ce1e:	eef0 8a66 	vmov.f32	s17, s13
 800ce22:	eeb0 9a47 	vmov.f32	s18, s14
 800ce26:	eef0 9a67 	vmov.f32	s19, s15
 800ce2a:	ed9f 3b7b 	vldr	d3, [pc, #492]	@ 800d018 <ConvertCoordinates+0x4d0>
 800ce2e:	ed97 2b24 	vldr	d2, [r7, #144]	@ 0x90
 800ce32:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 800d018 <ConvertCoordinates+0x4d0>
 800ce36:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800ce3a:	f7f3 ff25 	bl	8000c88 <__muldc3>
 800ce3e:	eeb0 6a40 	vmov.f32	s12, s0
 800ce42:	eef0 6a60 	vmov.f32	s13, s1
 800ce46:	eeb0 7a41 	vmov.f32	s14, s2
 800ce4a:	eef0 7a61 	vmov.f32	s15, s3
 800ce4e:	ec59 8b16 	vmov	r8, r9, d6
 800ce52:	ec5b ab17 	vmov	sl, fp, d7
 800ce56:	ed9f 3b70 	vldr	d3, [pc, #448]	@ 800d018 <ConvertCoordinates+0x4d0>
 800ce5a:	ed97 2b22 	vldr	d2, [r7, #136]	@ 0x88
 800ce5e:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 800d018 <ConvertCoordinates+0x4d0>
 800ce62:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800ce66:	f7f3 ff0f 	bl	8000c88 <__muldc3>
 800ce6a:	eeb0 6a40 	vmov.f32	s12, s0
 800ce6e:	eef0 6a60 	vmov.f32	s13, s1
 800ce72:	eeb0 7a41 	vmov.f32	s14, s2
 800ce76:	eef0 7a61 	vmov.f32	s15, s3
 800ce7a:	ec53 2b16 	vmov	r2, r3, d6
 800ce7e:	ed87 7b00 	vstr	d7, [r7]
 800ce82:	4640      	mov	r0, r8
 800ce84:	4649      	mov	r1, r9
 800ce86:	f7f3 fa09 	bl	800029c <__adddf3>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	4690      	mov	r8, r2
 800ce90:	4699      	mov	r9, r3
 800ce92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce96:	4650      	mov	r0, sl
 800ce98:	4659      	mov	r1, fp
 800ce9a:	f7f3 f9ff 	bl	800029c <__adddf3>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4692      	mov	sl, r2
 800cea4:	469b      	mov	fp, r3
 800cea6:	f04f 0200 	mov.w	r2, #0
 800ceaa:	4b61      	ldr	r3, [pc, #388]	@ (800d030 <ConvertCoordinates+0x4e8>)
 800ceac:	4640      	mov	r0, r8
 800ceae:	4649      	mov	r1, r9
 800ceb0:	f7f3 f9f2 	bl	8000298 <__aeabi_dsub>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	4610      	mov	r0, r2
 800ceba:	4619      	mov	r1, r3
 800cebc:	4652      	mov	r2, sl
 800cebe:	465b      	mov	r3, fp
 800cec0:	ec41 0b16 	vmov	d6, r0, r1
 800cec4:	ec43 2b17 	vmov	d7, r2, r3
 800cec8:	eeb0 0a46 	vmov.f32	s0, s12
 800cecc:	eef0 0a66 	vmov.f32	s1, s13
 800ced0:	eeb0 1a47 	vmov.f32	s2, s14
 800ced4:	eef0 1a67 	vmov.f32	s3, s15
 800ced8:	f00c fc88 	bl	80197ec <csqrt>
 800cedc:	eeb0 6a40 	vmov.f32	s12, s0
 800cee0:	eef0 6a60 	vmov.f32	s13, s1
 800cee4:	eeb0 7a41 	vmov.f32	s14, s2
 800cee8:	eef0 7a61 	vmov.f32	s15, s3
 800ceec:	ec51 0b16 	vmov	r0, r1, d6
 800cef0:	ec59 8b17 	vmov	r8, r9, d7
 800cef4:	f04f 0200 	mov.w	r2, #0
 800cef8:	4b4d      	ldr	r3, [pc, #308]	@ (800d030 <ConvertCoordinates+0x4e8>)
 800cefa:	f7f3 fb85 	bl	8000608 <__aeabi_dmul>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	ec43 2b1a 	vmov	d10, r2, r3
 800cf06:	f04f 0200 	mov.w	r2, #0
 800cf0a:	4b49      	ldr	r3, [pc, #292]	@ (800d030 <ConvertCoordinates+0x4e8>)
 800cf0c:	4640      	mov	r0, r8
 800cf0e:	4649      	mov	r1, r9
 800cf10:	f7f3 fb7a 	bl	8000608 <__aeabi_dmul>
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	ec43 2b17 	vmov	d7, r2, r3
 800cf1c:	eeb0 3a47 	vmov.f32	s6, s14
 800cf20:	eef0 3a67 	vmov.f32	s7, s15
 800cf24:	eeb0 2a4a 	vmov.f32	s4, s20
 800cf28:	eef0 2a6a 	vmov.f32	s5, s21
 800cf2c:	eeb0 1a49 	vmov.f32	s2, s18
 800cf30:	eef0 1a69 	vmov.f32	s3, s19
 800cf34:	eeb0 0a48 	vmov.f32	s0, s16
 800cf38:	eef0 0a68 	vmov.f32	s1, s17
 800cf3c:	f7f4 f936 	bl	80011ac <__divdc3>
 800cf40:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
 800cf44:	ed87 1b18 	vstr	d1, [r7, #96]	@ 0x60
 800cf48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cf4c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800cf50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800cf54:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double _Complex y = -1*_Complex_I*(dy*csqrt(dx*dx-4)*csqrt(-dx*dx+dy*dy-4))/(4*csqrt(dx*dx+dy*dy-4));
 800cf58:	ed9f 3b2f 	vldr	d3, [pc, #188]	@ 800d018 <ConvertCoordinates+0x4d0>
 800cf5c:	ed97 2b24 	vldr	d2, [r7, #144]	@ 0x90
 800cf60:	ed9f 1b2d 	vldr	d1, [pc, #180]	@ 800d018 <ConvertCoordinates+0x4d0>
 800cf64:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800cf68:	f7f3 fe8e 	bl	8000c88 <__muldc3>
 800cf6c:	eeb0 6a40 	vmov.f32	s12, s0
 800cf70:	eef0 6a60 	vmov.f32	s13, s1
 800cf74:	eeb0 7a41 	vmov.f32	s14, s2
 800cf78:	eef0 7a61 	vmov.f32	s15, s3
 800cf7c:	ec51 0b16 	vmov	r0, r1, d6
 800cf80:	ec59 8b17 	vmov	r8, r9, d7
 800cf84:	f04f 0200 	mov.w	r2, #0
 800cf88:	4b29      	ldr	r3, [pc, #164]	@ (800d030 <ConvertCoordinates+0x4e8>)
 800cf8a:	f7f3 f985 	bl	8000298 <__aeabi_dsub>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	4610      	mov	r0, r2
 800cf94:	4619      	mov	r1, r3
 800cf96:	4642      	mov	r2, r8
 800cf98:	464b      	mov	r3, r9
 800cf9a:	ec41 0b16 	vmov	d6, r0, r1
 800cf9e:	ec43 2b17 	vmov	d7, r2, r3
 800cfa2:	eeb0 0a46 	vmov.f32	s0, s12
 800cfa6:	eef0 0a66 	vmov.f32	s1, s13
 800cfaa:	eeb0 1a47 	vmov.f32	s2, s14
 800cfae:	eef0 1a67 	vmov.f32	s3, s15
 800cfb2:	f00c fc1b 	bl	80197ec <csqrt>
 800cfb6:	eeb0 7a40 	vmov.f32	s14, s0
 800cfba:	eef0 7a60 	vmov.f32	s15, s1
 800cfbe:	eeb0 6a41 	vmov.f32	s12, s2
 800cfc2:	eef0 6a61 	vmov.f32	s13, s3
 800cfc6:	eeb0 3a46 	vmov.f32	s6, s12
 800cfca:	eef0 3a66 	vmov.f32	s7, s13
 800cfce:	eeb0 2a47 	vmov.f32	s4, s14
 800cfd2:	eef0 2a67 	vmov.f32	s5, s15
 800cfd6:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 800d018 <ConvertCoordinates+0x4d0>
 800cfda:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800cfde:	f7f3 fe53 	bl	8000c88 <__muldc3>
 800cfe2:	eeb0 6a40 	vmov.f32	s12, s0
 800cfe6:	eef0 6a60 	vmov.f32	s13, s1
 800cfea:	eeb0 7a41 	vmov.f32	s14, s2
 800cfee:	eef0 7a61 	vmov.f32	s15, s3
 800cff2:	eeb0 8a46 	vmov.f32	s16, s12
 800cff6:	eef0 8a66 	vmov.f32	s17, s13
 800cffa:	eeb0 9a47 	vmov.f32	s18, s14
 800cffe:	eef0 9a67 	vmov.f32	s19, s15
 800d002:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800d006:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d00a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800d00e:	ed9f 3b06 	vldr	d3, [pc, #24]	@ 800d028 <ConvertCoordinates+0x4e0>
 800d012:	ec45 4b12 	vmov	d2, r4, r5
 800d016:	e00d      	b.n	800d034 <ConvertCoordinates+0x4ec>
	...
 800d024:	bff00000 	.word	0xbff00000
 800d028:	00000000 	.word	0x00000000
 800d02c:	80000000 	.word	0x80000000
 800d030:	40100000 	.word	0x40100000
 800d034:	ed9f 1bae 	vldr	d1, [pc, #696]	@ 800d2f0 <ConvertCoordinates+0x7a8>
 800d038:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800d03c:	f7f3 fe24 	bl	8000c88 <__muldc3>
 800d040:	eeb0 6a40 	vmov.f32	s12, s0
 800d044:	eef0 6a60 	vmov.f32	s13, s1
 800d048:	eeb0 7a41 	vmov.f32	s14, s2
 800d04c:	eef0 7a61 	vmov.f32	s15, s3
 800d050:	ec55 4b16 	vmov	r4, r5, d6
 800d054:	ec59 8b17 	vmov	r8, r9, d7
 800d058:	ed9f 3ba5 	vldr	d3, [pc, #660]	@ 800d2f0 <ConvertCoordinates+0x7a8>
 800d05c:	ed97 2b22 	vldr	d2, [r7, #136]	@ 0x88
 800d060:	ed9f 1ba3 	vldr	d1, [pc, #652]	@ 800d2f0 <ConvertCoordinates+0x7a8>
 800d064:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800d068:	f7f3 fe0e 	bl	8000c88 <__muldc3>
 800d06c:	eeb0 6a40 	vmov.f32	s12, s0
 800d070:	eef0 6a60 	vmov.f32	s13, s1
 800d074:	eeb0 7a41 	vmov.f32	s14, s2
 800d078:	eef0 7a61 	vmov.f32	s15, s3
 800d07c:	ec53 2b16 	vmov	r2, r3, d6
 800d080:	ec5b ab17 	vmov	sl, fp, d7
 800d084:	4620      	mov	r0, r4
 800d086:	4629      	mov	r1, r5
 800d088:	f7f3 f908 	bl	800029c <__adddf3>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	4614      	mov	r4, r2
 800d092:	461d      	mov	r5, r3
 800d094:	4652      	mov	r2, sl
 800d096:	465b      	mov	r3, fp
 800d098:	4640      	mov	r0, r8
 800d09a:	4649      	mov	r1, r9
 800d09c:	f7f3 f8fe 	bl	800029c <__adddf3>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4690      	mov	r8, r2
 800d0a6:	4699      	mov	r9, r3
 800d0a8:	f04f 0200 	mov.w	r2, #0
 800d0ac:	4b96      	ldr	r3, [pc, #600]	@ (800d308 <ConvertCoordinates+0x7c0>)
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	f7f3 f8f1 	bl	8000298 <__aeabi_dsub>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	4610      	mov	r0, r2
 800d0bc:	4619      	mov	r1, r3
 800d0be:	4642      	mov	r2, r8
 800d0c0:	464b      	mov	r3, r9
 800d0c2:	ec41 0b16 	vmov	d6, r0, r1
 800d0c6:	ec43 2b17 	vmov	d7, r2, r3
 800d0ca:	eeb0 0a46 	vmov.f32	s0, s12
 800d0ce:	eef0 0a66 	vmov.f32	s1, s13
 800d0d2:	eeb0 1a47 	vmov.f32	s2, s14
 800d0d6:	eef0 1a67 	vmov.f32	s3, s15
 800d0da:	f00c fb87 	bl	80197ec <csqrt>
 800d0de:	eeb0 7a40 	vmov.f32	s14, s0
 800d0e2:	eef0 7a60 	vmov.f32	s15, s1
 800d0e6:	eeb0 6a41 	vmov.f32	s12, s2
 800d0ea:	eef0 6a61 	vmov.f32	s13, s3
 800d0ee:	eeb0 3a46 	vmov.f32	s6, s12
 800d0f2:	eef0 3a66 	vmov.f32	s7, s13
 800d0f6:	eeb0 2a47 	vmov.f32	s4, s14
 800d0fa:	eef0 2a67 	vmov.f32	s5, s15
 800d0fe:	eeb0 1a49 	vmov.f32	s2, s18
 800d102:	eef0 1a69 	vmov.f32	s3, s19
 800d106:	eeb0 0a48 	vmov.f32	s0, s16
 800d10a:	eef0 0a68 	vmov.f32	s1, s17
 800d10e:	f7f3 fdbb 	bl	8000c88 <__muldc3>
 800d112:	eeb0 7a40 	vmov.f32	s14, s0
 800d116:	eef0 7a60 	vmov.f32	s15, s1
 800d11a:	eeb0 6a41 	vmov.f32	s12, s2
 800d11e:	eef0 6a61 	vmov.f32	s13, s3
 800d122:	ed9f 3b75 	vldr	d3, [pc, #468]	@ 800d2f8 <ConvertCoordinates+0x7b0>
 800d126:	ed9f 2b76 	vldr	d2, [pc, #472]	@ 800d300 <ConvertCoordinates+0x7b8>
 800d12a:	eeb0 1a46 	vmov.f32	s2, s12
 800d12e:	eef0 1a66 	vmov.f32	s3, s13
 800d132:	eeb0 0a47 	vmov.f32	s0, s14
 800d136:	eef0 0a67 	vmov.f32	s1, s15
 800d13a:	f7f3 fda5 	bl	8000c88 <__muldc3>
 800d13e:	eeb0 6a40 	vmov.f32	s12, s0
 800d142:	eef0 6a60 	vmov.f32	s13, s1
 800d146:	eeb0 7a41 	vmov.f32	s14, s2
 800d14a:	eef0 7a61 	vmov.f32	s15, s3
 800d14e:	eeb0 8a46 	vmov.f32	s16, s12
 800d152:	eef0 8a66 	vmov.f32	s17, s13
 800d156:	eeb0 9a47 	vmov.f32	s18, s14
 800d15a:	eef0 9a67 	vmov.f32	s19, s15
 800d15e:	ed9f 3b64 	vldr	d3, [pc, #400]	@ 800d2f0 <ConvertCoordinates+0x7a8>
 800d162:	ed97 2b24 	vldr	d2, [r7, #144]	@ 0x90
 800d166:	ed9f 1b62 	vldr	d1, [pc, #392]	@ 800d2f0 <ConvertCoordinates+0x7a8>
 800d16a:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800d16e:	f7f3 fd8b 	bl	8000c88 <__muldc3>
 800d172:	eeb0 6a40 	vmov.f32	s12, s0
 800d176:	eef0 6a60 	vmov.f32	s13, s1
 800d17a:	eeb0 7a41 	vmov.f32	s14, s2
 800d17e:	eef0 7a61 	vmov.f32	s15, s3
 800d182:	ec55 4b16 	vmov	r4, r5, d6
 800d186:	ec59 8b17 	vmov	r8, r9, d7
 800d18a:	ed9f 3b59 	vldr	d3, [pc, #356]	@ 800d2f0 <ConvertCoordinates+0x7a8>
 800d18e:	ed97 2b22 	vldr	d2, [r7, #136]	@ 0x88
 800d192:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 800d2f0 <ConvertCoordinates+0x7a8>
 800d196:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800d19a:	f7f3 fd75 	bl	8000c88 <__muldc3>
 800d19e:	eeb0 6a40 	vmov.f32	s12, s0
 800d1a2:	eef0 6a60 	vmov.f32	s13, s1
 800d1a6:	eeb0 7a41 	vmov.f32	s14, s2
 800d1aa:	eef0 7a61 	vmov.f32	s15, s3
 800d1ae:	ec53 2b16 	vmov	r2, r3, d6
 800d1b2:	ec5b ab17 	vmov	sl, fp, d7
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 f86f 	bl	800029c <__adddf3>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	4614      	mov	r4, r2
 800d1c4:	461d      	mov	r5, r3
 800d1c6:	4652      	mov	r2, sl
 800d1c8:	465b      	mov	r3, fp
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	f7f3 f865 	bl	800029c <__adddf3>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	4690      	mov	r8, r2
 800d1d8:	4699      	mov	r9, r3
 800d1da:	f04f 0200 	mov.w	r2, #0
 800d1de:	4b4a      	ldr	r3, [pc, #296]	@ (800d308 <ConvertCoordinates+0x7c0>)
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7f3 f858 	bl	8000298 <__aeabi_dsub>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4642      	mov	r2, r8
 800d1f2:	464b      	mov	r3, r9
 800d1f4:	ec41 0b16 	vmov	d6, r0, r1
 800d1f8:	ec43 2b17 	vmov	d7, r2, r3
 800d1fc:	eeb0 0a46 	vmov.f32	s0, s12
 800d200:	eef0 0a66 	vmov.f32	s1, s13
 800d204:	eeb0 1a47 	vmov.f32	s2, s14
 800d208:	eef0 1a67 	vmov.f32	s3, s15
 800d20c:	f00c faee 	bl	80197ec <csqrt>
 800d210:	eeb0 6a40 	vmov.f32	s12, s0
 800d214:	eef0 6a60 	vmov.f32	s13, s1
 800d218:	eeb0 7a41 	vmov.f32	s14, s2
 800d21c:	eef0 7a61 	vmov.f32	s15, s3
 800d220:	ec51 0b16 	vmov	r0, r1, d6
 800d224:	ec55 4b17 	vmov	r4, r5, d7
 800d228:	f04f 0200 	mov.w	r2, #0
 800d22c:	4b36      	ldr	r3, [pc, #216]	@ (800d308 <ConvertCoordinates+0x7c0>)
 800d22e:	f7f3 f9eb 	bl	8000608 <__aeabi_dmul>
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	ec43 2b1a 	vmov	d10, r2, r3
 800d23a:	f04f 0200 	mov.w	r2, #0
 800d23e:	4b32      	ldr	r3, [pc, #200]	@ (800d308 <ConvertCoordinates+0x7c0>)
 800d240:	4620      	mov	r0, r4
 800d242:	4629      	mov	r1, r5
 800d244:	f7f3 f9e0 	bl	8000608 <__aeabi_dmul>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	ec43 2b17 	vmov	d7, r2, r3
 800d250:	eeb0 3a47 	vmov.f32	s6, s14
 800d254:	eef0 3a67 	vmov.f32	s7, s15
 800d258:	eeb0 2a4a 	vmov.f32	s4, s20
 800d25c:	eef0 2a6a 	vmov.f32	s5, s21
 800d260:	eeb0 1a49 	vmov.f32	s2, s18
 800d264:	eef0 1a69 	vmov.f32	s3, s19
 800d268:	eeb0 0a48 	vmov.f32	s0, s16
 800d26c:	eef0 0a68 	vmov.f32	s1, s17
 800d270:	f7f3 ff9c 	bl	80011ac <__divdc3>
 800d274:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
 800d278:	ed87 1b14 	vstr	d1, [r7, #80]	@ 0x50
 800d27c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d280:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800d284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d288:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	coords[0] = (float)creal(x)*target_size/2;
 800d28c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d290:	4610      	mov	r0, r2
 800d292:	4619      	mov	r1, r3
 800d294:	f7f3 fc90 	bl	8000bb8 <__aeabi_d2f>
 800d298:	ee07 0a10 	vmov	s14, r0
 800d29c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d2a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ae:	edc3 7a00 	vstr	s15, [r3]
	coords[1] = (float)creal(y)*target_size/2;
 800d2b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	f7f3 fc7d 	bl	8000bb8 <__aeabi_d2f>
 800d2be:	ee07 0a10 	vmov	s14, r0
 800d2c2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d2d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2d6:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 800d2da:	2300      	movs	r3, #0

}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3798      	adds	r7, #152	@ 0x98
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	ecbd 8b06 	vpop	{d8-d10}
 800d2e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2ea:	bf00      	nop
 800d2ec:	f3af 8000 	nop.w
	...
 800d2fc:	bff00000 	.word	0xbff00000
 800d300:	00000000 	.word	0x00000000
 800d304:	80000000 	.word	0x80000000
 800d308:	40100000 	.word	0x40100000

0800d30c <Abs_maxScale>:
void Abs_maxScale(float* target,uint32_t size, uint32_t new_max)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b089      	sub	sp, #36	@ 0x24
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
	uint32_t i;
	float max = 0;
 800d318:	f04f 0300 	mov.w	r3, #0
 800d31c:	61bb      	str	r3, [r7, #24]
	float scale_factor;
	for(i = 0; i < size; i++)
 800d31e:	2300      	movs	r3, #0
 800d320:	61fb      	str	r3, [r7, #28]
 800d322:	e01b      	b.n	800d35c <Abs_maxScale+0x50>
	{
		if(max < fabsf(target[i]))
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	4413      	add	r3, r2
 800d32c:	edd3 7a00 	vldr	s15, [r3]
 800d330:	eef0 7ae7 	vabs.f32	s15, s15
 800d334:	ed97 7a06 	vldr	s14, [r7, #24]
 800d338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d340:	d509      	bpl.n	800d356 <Abs_maxScale+0x4a>
		{
			max = fabsf(target[i]);
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	4413      	add	r3, r2
 800d34a:	edd3 7a00 	vldr	s15, [r3]
 800d34e:	eef0 7ae7 	vabs.f32	s15, s15
 800d352:	edc7 7a06 	vstr	s15, [r7, #24]
	for(i = 0; i < size; i++)
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	3301      	adds	r3, #1
 800d35a:	61fb      	str	r3, [r7, #28]
 800d35c:	69fa      	ldr	r2, [r7, #28]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	429a      	cmp	r2, r3
 800d362:	d3df      	bcc.n	800d324 <Abs_maxScale+0x18>
		}
	}
	if(max < new_max)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	ee07 3a90 	vmov	s15, r3
 800d36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36e:	ed97 7a06 	vldr	s14, [r7, #24]
 800d372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d37a:	d400      	bmi.n	800d37e <Abs_maxScale+0x72>
		{
			target[i] = target[i]*scale_factor;
		}
	}

}
 800d37c:	e024      	b.n	800d3c8 <Abs_maxScale+0xbc>
		scale_factor = (float)new_max/max;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	ee07 3a90 	vmov	s15, r3
 800d384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d388:	ed97 7a06 	vldr	s14, [r7, #24]
 800d38c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d390:	edc7 7a05 	vstr	s15, [r7, #20]
		for(i = 0; i < size; i++)
 800d394:	2300      	movs	r3, #0
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	e012      	b.n	800d3c0 <Abs_maxScale+0xb4>
			target[i] = target[i]*scale_factor;
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	68fa      	ldr	r2, [r7, #12]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	ed93 7a00 	vldr	s14, [r3]
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800d3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3b6:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < size; i++)
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	61fb      	str	r3, [r7, #28]
 800d3c0:	69fa      	ldr	r2, [r7, #28]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d3e8      	bcc.n	800d39a <Abs_maxScale+0x8e>
}
 800d3c8:	bf00      	nop
 800d3ca:	3724      	adds	r7, #36	@ 0x24
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <Offset_remove>:

void Offset_remove(float* target,uint32_t size)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
	uint32_t i;
	float sum;
	float mean;
	for(i = 0; i < size; i++)
 800d3de:	2300      	movs	r3, #0
 800d3e0:	617b      	str	r3, [r7, #20]
 800d3e2:	e00e      	b.n	800d402 <Offset_remove+0x2e>
	{
		sum += target[i];
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	edd3 7a00 	vldr	s15, [r3]
 800d3f0:	ed97 7a04 	vldr	s14, [r7, #16]
 800d3f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3f8:	edc7 7a04 	vstr	s15, [r7, #16]
	for(i = 0; i < size; i++)
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	3301      	adds	r3, #1
 800d400:	617b      	str	r3, [r7, #20]
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	429a      	cmp	r2, r3
 800d408:	d3ec      	bcc.n	800d3e4 <Offset_remove+0x10>
	}
	mean = sum/(float)size;
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	ee07 3a90 	vmov	s15, r3
 800d410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d414:	edd7 6a04 	vldr	s13, [r7, #16]
 800d418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d41c:	edc7 7a03 	vstr	s15, [r7, #12]
	for(i = 0; i < size; i++)
 800d420:	2300      	movs	r3, #0
 800d422:	617b      	str	r3, [r7, #20]
 800d424:	e012      	b.n	800d44c <Offset_remove+0x78>
	{
		target[i] = target[i]-mean;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	4413      	add	r3, r2
 800d42e:	ed93 7a00 	vldr	s14, [r3]
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	4413      	add	r3, r2
 800d43a:	edd7 7a03 	vldr	s15, [r7, #12]
 800d43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d442:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < size; i++)
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	3301      	adds	r3, #1
 800d44a:	617b      	str	r3, [r7, #20]
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	429a      	cmp	r2, r3
 800d452:	d3e8      	bcc.n	800d426 <Offset_remove+0x52>
	}
}
 800d454:	bf00      	nop
 800d456:	bf00      	nop
 800d458:	371c      	adds	r7, #28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
 800d462:	0000      	movs	r0, r0
 800d464:	0000      	movs	r0, r0
	...

0800d468 <Debug_screen>:
void Debug_screen()
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b086      	sub	sp, #24
 800d46c:	af06      	add	r7, sp, #24
	Draw_def_targetElement(10, 20, 200,  WHITE,RED, BLACK, tg1);
 800d46e:	4a6c      	ldr	r2, [pc, #432]	@ (800d620 <Debug_screen+0x1b8>)
 800d470:	ab02      	add	r3, sp, #8
 800d472:	ca07      	ldmia	r2, {r0, r1, r2}
 800d474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d478:	2300      	movs	r3, #0
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d486:	22c8      	movs	r2, #200	@ 0xc8
 800d488:	2114      	movs	r1, #20
 800d48a:	200a      	movs	r0, #10
 800d48c:	f000 fd9e 	bl	800dfcc <Draw_def_targetElement>
	Draw_hit(10, 20, 200, WHITE ,RED, hit[0]*1000, hit[1]*1000, tg1);
 800d490:	4b64      	ldr	r3, [pc, #400]	@ (800d624 <Debug_screen+0x1bc>)
 800d492:	edd3 7a00 	vldr	s15, [r3]
 800d496:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800d628 <Debug_screen+0x1c0>
 800d49a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d49e:	4b61      	ldr	r3, [pc, #388]	@ (800d624 <Debug_screen+0x1bc>)
 800d4a0:	edd3 7a01 	vldr	s15, [r3, #4]
 800d4a4:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800d628 <Debug_screen+0x1c0>
 800d4a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d4ac:	4a5c      	ldr	r2, [pc, #368]	@ (800d620 <Debug_screen+0x1b8>)
 800d4ae:	ab01      	add	r3, sp, #4
 800d4b0:	ca07      	ldmia	r2, {r0, r1, r2}
 800d4b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d4b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	eef0 0a67 	vmov.f32	s1, s15
 800d4c0:	eeb0 0a47 	vmov.f32	s0, s14
 800d4c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d4c8:	22c8      	movs	r2, #200	@ 0xc8
 800d4ca:	2114      	movs	r1, #20
 800d4cc:	200a      	movs	r0, #10
 800d4ce:	f000 fe4c 	bl	800e16a <Draw_hit>
	sprintf(text_buffer,"d1: %.2f us",delta1*1000000);
 800d4d2:	4b56      	ldr	r3, [pc, #344]	@ (800d62c <Debug_screen+0x1c4>)
 800d4d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4d8:	a34f      	add	r3, pc, #316	@ (adr r3, 800d618 <Debug_screen+0x1b0>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	f7f3 f893 	bl	8000608 <__aeabi_dmul>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4952      	ldr	r1, [pc, #328]	@ (800d630 <Debug_screen+0x1c8>)
 800d4e8:	4852      	ldr	r0, [pc, #328]	@ (800d634 <Debug_screen+0x1cc>)
 800d4ea:	f009 ff03 	bl	80172f4 <siprintf>
	ST7789_WriteString(220, 20, text_buffer, Font_7x10, WHITE, BLACK);
 800d4ee:	4b52      	ldr	r3, [pc, #328]	@ (800d638 <Debug_screen+0x1d0>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	9202      	str	r2, [sp, #8]
 800d4f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4f8:	9201      	str	r2, [sp, #4]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	9200      	str	r2, [sp, #0]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a4c      	ldr	r2, [pc, #304]	@ (800d634 <Debug_screen+0x1cc>)
 800d502:	2114      	movs	r1, #20
 800d504:	20dc      	movs	r0, #220	@ 0xdc
 800d506:	f7f5 f891 	bl	800262c <ST7789_WriteString>
	sprintf(text_buffer,"d2: %.2f us",delta2*1000000);
 800d50a:	4b4c      	ldr	r3, [pc, #304]	@ (800d63c <Debug_screen+0x1d4>)
 800d50c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d510:	a341      	add	r3, pc, #260	@ (adr r3, 800d618 <Debug_screen+0x1b0>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f7f3 f877 	bl	8000608 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4948      	ldr	r1, [pc, #288]	@ (800d640 <Debug_screen+0x1d8>)
 800d520:	4844      	ldr	r0, [pc, #272]	@ (800d634 <Debug_screen+0x1cc>)
 800d522:	f009 fee7 	bl	80172f4 <siprintf>
	ST7789_WriteString(220, 30, text_buffer, Font_7x10, WHITE, BLACK);
 800d526:	4b44      	ldr	r3, [pc, #272]	@ (800d638 <Debug_screen+0x1d0>)
 800d528:	2200      	movs	r2, #0
 800d52a:	9202      	str	r2, [sp, #8]
 800d52c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d530:	9201      	str	r2, [sp, #4]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	9200      	str	r2, [sp, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a3e      	ldr	r2, [pc, #248]	@ (800d634 <Debug_screen+0x1cc>)
 800d53a:	211e      	movs	r1, #30
 800d53c:	20dc      	movs	r0, #220	@ 0xdc
 800d53e:	f7f5 f875 	bl	800262c <ST7789_WriteString>
	sprintf(text_buffer,"time: %03ld ms",(tok-tik)/1000);
 800d542:	4b40      	ldr	r3, [pc, #256]	@ (800d644 <Debug_screen+0x1dc>)
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	4b40      	ldr	r3, [pc, #256]	@ (800d648 <Debug_screen+0x1e0>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	4a3f      	ldr	r2, [pc, #252]	@ (800d64c <Debug_screen+0x1e4>)
 800d54e:	fba2 2303 	umull	r2, r3, r2, r3
 800d552:	099b      	lsrs	r3, r3, #6
 800d554:	461a      	mov	r2, r3
 800d556:	493e      	ldr	r1, [pc, #248]	@ (800d650 <Debug_screen+0x1e8>)
 800d558:	4836      	ldr	r0, [pc, #216]	@ (800d634 <Debug_screen+0x1cc>)
 800d55a:	f009 fecb 	bl	80172f4 <siprintf>
	ST7789_WriteString(220, 40, text_buffer, Font_7x10, WHITE, BLACK);
 800d55e:	4b36      	ldr	r3, [pc, #216]	@ (800d638 <Debug_screen+0x1d0>)
 800d560:	2200      	movs	r2, #0
 800d562:	9202      	str	r2, [sp, #8]
 800d564:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d568:	9201      	str	r2, [sp, #4]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	9200      	str	r2, [sp, #0]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a30      	ldr	r2, [pc, #192]	@ (800d634 <Debug_screen+0x1cc>)
 800d572:	2128      	movs	r1, #40	@ 0x28
 800d574:	20dc      	movs	r0, #220	@ 0xdc
 800d576:	f7f5 f859 	bl	800262c <ST7789_WriteString>
	sprintf(text_buffer,"x=: %.1f mm",hit[0]*1000);
 800d57a:	4b2a      	ldr	r3, [pc, #168]	@ (800d624 <Debug_screen+0x1bc>)
 800d57c:	edd3 7a00 	vldr	s15, [r3]
 800d580:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800d628 <Debug_screen+0x1c0>
 800d584:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d588:	ee17 0a90 	vmov	r0, s15
 800d58c:	f7f2 ffe4 	bl	8000558 <__aeabi_f2d>
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	492f      	ldr	r1, [pc, #188]	@ (800d654 <Debug_screen+0x1ec>)
 800d596:	4827      	ldr	r0, [pc, #156]	@ (800d634 <Debug_screen+0x1cc>)
 800d598:	f009 feac 	bl	80172f4 <siprintf>
	ST7789_WriteString(220, 50, text_buffer, Font_7x10, WHITE, BLACK);
 800d59c:	4b26      	ldr	r3, [pc, #152]	@ (800d638 <Debug_screen+0x1d0>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	9202      	str	r2, [sp, #8]
 800d5a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d5a6:	9201      	str	r2, [sp, #4]
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	9200      	str	r2, [sp, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a21      	ldr	r2, [pc, #132]	@ (800d634 <Debug_screen+0x1cc>)
 800d5b0:	2132      	movs	r1, #50	@ 0x32
 800d5b2:	20dc      	movs	r0, #220	@ 0xdc
 800d5b4:	f7f5 f83a 	bl	800262c <ST7789_WriteString>
	sprintf(text_buffer,"y=: %.1f mm",hit[1]*1000);
 800d5b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d624 <Debug_screen+0x1bc>)
 800d5ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800d5be:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800d628 <Debug_screen+0x1c0>
 800d5c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5c6:	ee17 0a90 	vmov	r0, s15
 800d5ca:	f7f2 ffc5 	bl	8000558 <__aeabi_f2d>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	4921      	ldr	r1, [pc, #132]	@ (800d658 <Debug_screen+0x1f0>)
 800d5d4:	4817      	ldr	r0, [pc, #92]	@ (800d634 <Debug_screen+0x1cc>)
 800d5d6:	f009 fe8d 	bl	80172f4 <siprintf>
	ST7789_WriteString(220, 60, text_buffer, Font_7x10, WHITE, BLACK);
 800d5da:	4b17      	ldr	r3, [pc, #92]	@ (800d638 <Debug_screen+0x1d0>)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	9202      	str	r2, [sp, #8]
 800d5e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d5e4:	9201      	str	r2, [sp, #4]
 800d5e6:	685a      	ldr	r2, [r3, #4]
 800d5e8:	9200      	str	r2, [sp, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a11      	ldr	r2, [pc, #68]	@ (800d634 <Debug_screen+0x1cc>)
 800d5ee:	213c      	movs	r1, #60	@ 0x3c
 800d5f0:	20dc      	movs	r0, #220	@ 0xdc
 800d5f2:	f7f5 f81b 	bl	800262c <ST7789_WriteString>
	print_array((uint16_t*) data1,SAMPLE_N,((pos-pos%4)-SAMPLE_N/8)%SAMPLE_N,1);						//Print out whole ADC buffer to console pos - pos%4
 800d5f6:	4b19      	ldr	r3, [pc, #100]	@ (800d65c <Debug_screen+0x1f4>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f023 0303 	bic.w	r3, r3, #3
 800d5fe:	3b80      	subs	r3, #128	@ 0x80
 800d600:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d604:	2301      	movs	r3, #1
 800d606:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d60a:	4815      	ldr	r0, [pc, #84]	@ (800d660 <Debug_screen+0x1f8>)
 800d60c:	f7ff f966 	bl	800c8dc <print_array>
}
 800d610:	bf00      	nop
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	00000000 	.word	0x00000000
 800d61c:	412e8480 	.word	0x412e8480
 800d620:	20000040 	.word	0x20000040
 800d624:	20000df4 	.word	0x20000df4
 800d628:	447a0000 	.word	0x447a0000
 800d62c:	20000e00 	.word	0x20000e00
 800d630:	0801b78c 	.word	0x0801b78c
 800d634:	200005b4 	.word	0x200005b4
 800d638:	20000000 	.word	0x20000000
 800d63c:	20000e08 	.word	0x20000e08
 800d640:	0801b798 	.word	0x0801b798
 800d644:	200005a4 	.word	0x200005a4
 800d648:	200005a0 	.word	0x200005a0
 800d64c:	10624dd3 	.word	0x10624dd3
 800d650:	0801b7a4 	.word	0x0801b7a4
 800d654:	0801b7b4 	.word	0x0801b7b4
 800d658:	0801b7c0 	.word	0x0801b7c0
 800d65c:	2000059c 	.word	0x2000059c
 800d660:	20000e10 	.word	0x20000e10

0800d664 <Draw_All>:

void Draw_All()
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08a      	sub	sp, #40	@ 0x28
 800d668:	af06      	add	r7, sp, #24
	Draw_def_targetElement(10, 20, 200,  WHITE,RED, BLACK, tg1);
 800d66a:	4a78      	ldr	r2, [pc, #480]	@ (800d84c <Draw_All+0x1e8>)
 800d66c:	ab02      	add	r3, sp, #8
 800d66e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d674:	2300      	movs	r3, #0
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d682:	22c8      	movs	r2, #200	@ 0xc8
 800d684:	2114      	movs	r1, #20
 800d686:	200a      	movs	r0, #10
 800d688:	f000 fca0 	bl	800dfcc <Draw_def_targetElement>
	Draw_resultTable(220, 10, 10, score_res, part_res, WHITE, BLACK);
 800d68c:	4b70      	ldr	r3, [pc, #448]	@ (800d850 <Draw_All+0x1ec>)
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	461a      	mov	r2, r3
 800d692:	2300      	movs	r3, #0
 800d694:	9302      	str	r3, [sp, #8]
 800d696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d69a:	9301      	str	r3, [sp, #4]
 800d69c:	9200      	str	r2, [sp, #0]
 800d69e:	4b6d      	ldr	r3, [pc, #436]	@ (800d854 <Draw_All+0x1f0>)
 800d6a0:	220a      	movs	r2, #10
 800d6a2:	210a      	movs	r1, #10
 800d6a4:	20dc      	movs	r0, #220	@ 0xdc
 800d6a6:	f000 fdc7 	bl	800e238 <Draw_resultTable>

	if(startup == 1){
 800d6aa:	4b6b      	ldr	r3, [pc, #428]	@ (800d858 <Draw_All+0x1f4>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d105      	bne.n	800d6be <Draw_All+0x5a>
		startup++;
 800d6b2:	4b69      	ldr	r3, [pc, #420]	@ (800d858 <Draw_All+0x1f4>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	4a67      	ldr	r2, [pc, #412]	@ (800d858 <Draw_All+0x1f4>)
 800d6ba:	6013      	str	r3, [r2, #0]
			{
				Draw_hit(10, 20, 200, WHITE ,RED, results_x[i]*1000, results_y[i]*1000, tg1);
			}
		}
	}
}
 800d6bc:	e0c1      	b.n	800d842 <Draw_All+0x1de>
		if(res_pos < RESULT_BUFFER_SEGMENT*(part_res+1))
 800d6be:	4b67      	ldr	r3, [pc, #412]	@ (800d85c <Draw_All+0x1f8>)
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	4b62      	ldr	r3, [pc, #392]	@ (800d850 <Draw_All+0x1ec>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	1c5a      	adds	r2, r3, #1
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4299      	cmp	r1, r3
 800d6d4:	da77      	bge.n	800d7c6 <Draw_All+0x162>
			if(part_res == 0)
 800d6d6:	4b5e      	ldr	r3, [pc, #376]	@ (800d850 <Draw_All+0x1ec>)
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d139      	bne.n	800d752 <Draw_All+0xee>
				for(int i = RESULT_BUFFER_SEGMENT*(part_res);i<res_pos;i++)
 800d6de:	4b5c      	ldr	r3, [pc, #368]	@ (800d850 <Draw_All+0x1ec>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	005b      	lsls	r3, r3, #1
 800d6ec:	60fb      	str	r3, [r7, #12]
 800d6ee:	e029      	b.n	800d744 <Draw_All+0xe0>
					Draw_hit(10, 20, 200, WHITE ,RED, results_x[i]*1000, results_y[i]*1000, tg1);
 800d6f0:	4a5b      	ldr	r2, [pc, #364]	@ (800d860 <Draw_All+0x1fc>)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	4413      	add	r3, r2
 800d6f8:	edd3 7a00 	vldr	s15, [r3]
 800d6fc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800d864 <Draw_All+0x200>
 800d700:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d704:	4a58      	ldr	r2, [pc, #352]	@ (800d868 <Draw_All+0x204>)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	edd3 7a00 	vldr	s15, [r3]
 800d710:	eddf 6a54 	vldr	s13, [pc, #336]	@ 800d864 <Draw_All+0x200>
 800d714:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d718:	4a4c      	ldr	r2, [pc, #304]	@ (800d84c <Draw_All+0x1e8>)
 800d71a:	ab01      	add	r3, sp, #4
 800d71c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d71e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d722:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	eef0 0a67 	vmov.f32	s1, s15
 800d72c:	eeb0 0a47 	vmov.f32	s0, s14
 800d730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d734:	22c8      	movs	r2, #200	@ 0xc8
 800d736:	2114      	movs	r1, #20
 800d738:	200a      	movs	r0, #10
 800d73a:	f000 fd16 	bl	800e16a <Draw_hit>
				for(int i = RESULT_BUFFER_SEGMENT*(part_res);i<res_pos;i++)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3301      	adds	r3, #1
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	4b45      	ldr	r3, [pc, #276]	@ (800d85c <Draw_All+0x1f8>)
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	461a      	mov	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	4293      	cmp	r3, r2
 800d74e:	dbcf      	blt.n	800d6f0 <Draw_All+0x8c>
}
 800d750:	e077      	b.n	800d842 <Draw_All+0x1de>
				for(int i = RESULT_BUFFER_SEGMENT*(part_res);i<=res_pos;i++)
 800d752:	4b3f      	ldr	r3, [pc, #252]	@ (800d850 <Draw_All+0x1ec>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	4613      	mov	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	4413      	add	r3, r2
 800d75e:	005b      	lsls	r3, r3, #1
 800d760:	60bb      	str	r3, [r7, #8]
 800d762:	e029      	b.n	800d7b8 <Draw_All+0x154>
					Draw_hit(10, 20, 200, WHITE ,RED, results_x[i]*1000, results_y[i]*1000, tg1);
 800d764:	4a3e      	ldr	r2, [pc, #248]	@ (800d860 <Draw_All+0x1fc>)
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	4413      	add	r3, r2
 800d76c:	edd3 7a00 	vldr	s15, [r3]
 800d770:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800d864 <Draw_All+0x200>
 800d774:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d778:	4a3b      	ldr	r2, [pc, #236]	@ (800d868 <Draw_All+0x204>)
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4413      	add	r3, r2
 800d780:	edd3 7a00 	vldr	s15, [r3]
 800d784:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d864 <Draw_All+0x200>
 800d788:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d78c:	4a2f      	ldr	r2, [pc, #188]	@ (800d84c <Draw_All+0x1e8>)
 800d78e:	ab01      	add	r3, sp, #4
 800d790:	ca07      	ldmia	r2, {r0, r1, r2}
 800d792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d796:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	eef0 0a67 	vmov.f32	s1, s15
 800d7a0:	eeb0 0a47 	vmov.f32	s0, s14
 800d7a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7a8:	22c8      	movs	r2, #200	@ 0xc8
 800d7aa:	2114      	movs	r1, #20
 800d7ac:	200a      	movs	r0, #10
 800d7ae:	f000 fcdc 	bl	800e16a <Draw_hit>
				for(int i = RESULT_BUFFER_SEGMENT*(part_res);i<=res_pos;i++)
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	60bb      	str	r3, [r7, #8]
 800d7b8:	4b28      	ldr	r3, [pc, #160]	@ (800d85c <Draw_All+0x1f8>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	ddcf      	ble.n	800d764 <Draw_All+0x100>
}
 800d7c4:	e03d      	b.n	800d842 <Draw_All+0x1de>
			for(int i = RESULT_BUFFER_SEGMENT*part_res;i<RESULT_BUFFER_SEGMENT*(part_res+1);i++)
 800d7c6:	4b22      	ldr	r3, [pc, #136]	@ (800d850 <Draw_All+0x1ec>)
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	607b      	str	r3, [r7, #4]
 800d7d6:	e029      	b.n	800d82c <Draw_All+0x1c8>
				Draw_hit(10, 20, 200, WHITE ,RED, results_x[i]*1000, results_y[i]*1000, tg1);
 800d7d8:	4a21      	ldr	r2, [pc, #132]	@ (800d860 <Draw_All+0x1fc>)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4413      	add	r3, r2
 800d7e0:	edd3 7a00 	vldr	s15, [r3]
 800d7e4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800d864 <Draw_All+0x200>
 800d7e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d7ec:	4a1e      	ldr	r2, [pc, #120]	@ (800d868 <Draw_All+0x204>)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	edd3 7a00 	vldr	s15, [r3]
 800d7f8:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800d864 <Draw_All+0x200>
 800d7fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d800:	4a12      	ldr	r2, [pc, #72]	@ (800d84c <Draw_All+0x1e8>)
 800d802:	ab01      	add	r3, sp, #4
 800d804:	ca07      	ldmia	r2, {r0, r1, r2}
 800d806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d80a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	eef0 0a67 	vmov.f32	s1, s15
 800d814:	eeb0 0a47 	vmov.f32	s0, s14
 800d818:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d81c:	22c8      	movs	r2, #200	@ 0xc8
 800d81e:	2114      	movs	r1, #20
 800d820:	200a      	movs	r0, #10
 800d822:	f000 fca2 	bl	800e16a <Draw_hit>
			for(int i = RESULT_BUFFER_SEGMENT*part_res;i<RESULT_BUFFER_SEGMENT*(part_res+1);i++)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	3301      	adds	r3, #1
 800d82a:	607b      	str	r3, [r7, #4]
 800d82c:	4b08      	ldr	r3, [pc, #32]	@ (800d850 <Draw_All+0x1ec>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	1c5a      	adds	r2, r3, #1
 800d832:	4613      	mov	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4413      	add	r3, r2
 800d838:	005b      	lsls	r3, r3, #1
 800d83a:	461a      	mov	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4293      	cmp	r3, r2
 800d840:	dbca      	blt.n	800d7d8 <Draw_All+0x174>
}
 800d842:	bf00      	nop
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	20000040 	.word	0x20000040
 800d850:	2000167f 	.word	0x2000167f
 800d854:	20001610 	.word	0x20001610
 800d858:	200005a8 	.word	0x200005a8
 800d85c:	2000167e 	.word	0x2000167e
 800d860:	20001680 	.word	0x20001680
 800d864:	447a0000 	.word	0x447a0000
 800d868:	20001838 	.word	0x20001838

0800d86c <Check_buttons>:
uint8_t Check_buttons()
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
	uint8_t on = GPIO_PIN_RESET;
 800d872:	2300      	movs	r3, #0
 800d874:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == on){return 1;}
 800d876:	2120      	movs	r1, #32
 800d878:	481e      	ldr	r0, [pc, #120]	@ (800d8f4 <Check_buttons+0x88>)
 800d87a:	f002 fb4d 	bl	800ff18 <HAL_GPIO_ReadPin>
 800d87e:	4603      	mov	r3, r0
 800d880:	461a      	mov	r2, r3
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	4293      	cmp	r3, r2
 800d886:	d101      	bne.n	800d88c <Check_buttons+0x20>
 800d888:	2301      	movs	r3, #1
 800d88a:	e02e      	b.n	800d8ea <Check_buttons+0x7e>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == on){return 2;}
 800d88c:	2140      	movs	r1, #64	@ 0x40
 800d88e:	4819      	ldr	r0, [pc, #100]	@ (800d8f4 <Check_buttons+0x88>)
 800d890:	f002 fb42 	bl	800ff18 <HAL_GPIO_ReadPin>
 800d894:	4603      	mov	r3, r0
 800d896:	461a      	mov	r2, r3
 800d898:	79fb      	ldrb	r3, [r7, #7]
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d101      	bne.n	800d8a2 <Check_buttons+0x36>
 800d89e:	2302      	movs	r3, #2
 800d8a0:	e023      	b.n	800d8ea <Check_buttons+0x7e>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == on){return 3;}
 800d8a2:	2180      	movs	r1, #128	@ 0x80
 800d8a4:	4813      	ldr	r0, [pc, #76]	@ (800d8f4 <Check_buttons+0x88>)
 800d8a6:	f002 fb37 	bl	800ff18 <HAL_GPIO_ReadPin>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	79fb      	ldrb	r3, [r7, #7]
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d101      	bne.n	800d8b8 <Check_buttons+0x4c>
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	e018      	b.n	800d8ea <Check_buttons+0x7e>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == on){return 4;}
 800d8b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d8bc:	480d      	ldr	r0, [pc, #52]	@ (800d8f4 <Check_buttons+0x88>)
 800d8be:	f002 fb2b 	bl	800ff18 <HAL_GPIO_ReadPin>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	79fb      	ldrb	r3, [r7, #7]
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d101      	bne.n	800d8d0 <Check_buttons+0x64>
 800d8cc:	2304      	movs	r3, #4
 800d8ce:	e00c      	b.n	800d8ea <Check_buttons+0x7e>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == on){return 5;}
 800d8d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d8d4:	4807      	ldr	r0, [pc, #28]	@ (800d8f4 <Check_buttons+0x88>)
 800d8d6:	f002 fb1f 	bl	800ff18 <HAL_GPIO_ReadPin>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	461a      	mov	r2, r3
 800d8de:	79fb      	ldrb	r3, [r7, #7]
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d101      	bne.n	800d8e8 <Check_buttons+0x7c>
 800d8e4:	2305      	movs	r3, #5
 800d8e6:	e000      	b.n	800d8ea <Check_buttons+0x7e>
	return 0;
 800d8e8:	2300      	movs	r3, #0

}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	40020400 	.word	0x40020400

0800d8f8 <Convert_to_score>:

uint8_t Convert_to_score(float hitx, float hity, float proj_diammeter, target_def tg)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b088      	sub	sp, #32
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	ed87 0a05 	vstr	s0, [r7, #20]
 800d902:	edc7 0a04 	vstr	s1, [r7, #16]
 800d906:	ed87 1a03 	vstr	s2, [r7, #12]
 800d90a:	463b      	mov	r3, r7
 800d90c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float r = sqrtf(hitx*hitx+hity*hity)*1000;
 800d910:	edd7 7a05 	vldr	s15, [r7, #20]
 800d914:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d918:	edd7 7a04 	vldr	s15, [r7, #16]
 800d91c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d920:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d924:	eeb0 0a67 	vmov.f32	s0, s15
 800d928:	f00b fe2e 	bl	8019588 <sqrtf>
 800d92c:	eef0 7a40 	vmov.f32	s15, s0
 800d930:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800d9c0 <Convert_to_score+0xc8>
 800d934:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d938:	edc7 7a06 	vstr	s15, [r7, #24]
	if(r*2<tg.inner_circle_mm+proj_diammeter){return 10;}
 800d93c:	edd7 7a06 	vldr	s15, [r7, #24]
 800d940:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d944:	edd7 6a00 	vldr	s13, [r7]
 800d948:	edd7 7a03 	vldr	s15, [r7, #12]
 800d94c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d958:	d501      	bpl.n	800d95e <Convert_to_score+0x66>
 800d95a:	230a      	movs	r3, #10
 800d95c:	e02b      	b.n	800d9b6 <Convert_to_score+0xbe>
	for(uint16_t i = 1;i < tg.circle_count-1;i++)
 800d95e:	2301      	movs	r3, #1
 800d960:	83fb      	strh	r3, [r7, #30]
 800d962:	e022      	b.n	800d9aa <Convert_to_score+0xb2>
	{
		if(r*2<tg.inner_circle_mm+tg.circle_distance_mm*i+proj_diammeter)
 800d964:	edd7 7a06 	vldr	s15, [r7, #24]
 800d968:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d96c:	edd7 6a00 	vldr	s13, [r7]
 800d970:	ed97 6a01 	vldr	s12, [r7, #4]
 800d974:	8bfb      	ldrh	r3, [r7, #30]
 800d976:	ee07 3a90 	vmov	s15, r3
 800d97a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d97e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d982:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d986:	edd7 7a03 	vldr	s15, [r7, #12]
 800d98a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d98e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d996:	d505      	bpl.n	800d9a4 <Convert_to_score+0xac>
		{
			return 10-i;
 800d998:	8bfb      	ldrh	r3, [r7, #30]
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	f1c3 030a 	rsb	r3, r3, #10
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	e008      	b.n	800d9b6 <Convert_to_score+0xbe>
	for(uint16_t i = 1;i < tg.circle_count-1;i++)
 800d9a4:	8bfb      	ldrh	r3, [r7, #30]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	83fb      	strh	r3, [r7, #30]
 800d9aa:	8bfa      	ldrh	r2, [r7, #30]
 800d9ac:	7a3b      	ldrb	r3, [r7, #8]
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	dbd7      	blt.n	800d964 <Convert_to_score+0x6c>
		}
	}
	return 0;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3720      	adds	r7, #32
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	447a0000 	.word	0x447a0000

0800d9c4 <AWD_Interrupt>:

void AWD_Interrupt()
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	af00      	add	r7, sp, #0

	pos = SAMPLE_N - DMA2_Stream0->NDTR;									//saving current ADC buffer position
 800d9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800da04 <AWD_Interrupt+0x40>)
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800d9d0:	4a0d      	ldr	r2, [pc, #52]	@ (800da08 <AWD_Interrupt+0x44>)
 800d9d2:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= TIM_CR1_CEN;												//enabling Timer 3, which will wait for SAMPLE_N/2 of samples to be measured before calling interrupt
 800d9d4:	4b0d      	ldr	r3, [pc, #52]	@ (800da0c <AWD_Interrupt+0x48>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a0c      	ldr	r2, [pc, #48]	@ (800da0c <AWD_Interrupt+0x48>)
 800d9da:	f043 0301 	orr.w	r3, r3, #1
 800d9de:	6013      	str	r3, [r2, #0]
	ADC1->CR1 &= ~ADC_CR1_AWDEN;
 800d9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800da10 <AWD_Interrupt+0x4c>)
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	4a0a      	ldr	r2, [pc, #40]	@ (800da10 <AWD_Interrupt+0x4c>)
 800d9e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d9ea:	6053      	str	r3, [r2, #4]
	ADC1->CR1 &= ~ADC_CR1_AWDIE;											//disable AWD interrupt mode !!!enable later!!!
 800d9ec:	4b08      	ldr	r3, [pc, #32]	@ (800da10 <AWD_Interrupt+0x4c>)
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	4a07      	ldr	r2, [pc, #28]	@ (800da10 <AWD_Interrupt+0x4c>)
 800d9f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9f6:	6053      	str	r3, [r2, #4]
	return;
 800d9f8:	bf00      	nop
}
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	40026410 	.word	0x40026410
 800da08:	2000059c 	.word	0x2000059c
 800da0c:	40000400 	.word	0x40000400
 800da10:	40012000 	.word	0x40012000

0800da14 <Reset_ADC>:
void Reset_ADC()
{
 800da14:	b480      	push	{r7}
 800da16:	af00      	add	r7, sp, #0

	TIM2->CR1 &= ~TIM_CR1_CEN;												//Timer 2 is disabled.
 800da18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800da22:	f023 0301 	bic.w	r3, r3, #1
 800da26:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~TIM_CR1_CEN;												//Timer 3 is disabled.
 800da28:	4b12      	ldr	r3, [pc, #72]	@ (800da74 <Reset_ADC+0x60>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a11      	ldr	r2, [pc, #68]	@ (800da74 <Reset_ADC+0x60>)
 800da2e:	f023 0301 	bic.w	r3, r3, #1
 800da32:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0;															//Resetting Timer 3 counter
 800da34:	4b0f      	ldr	r3, [pc, #60]	@ (800da74 <Reset_ADC+0x60>)
 800da36:	2200      	movs	r2, #0
 800da38:	625a      	str	r2, [r3, #36]	@ 0x24
	//TIM2->CR1 |= TIM_CR1_CEN;												//Timer 2 is enabled.
	//HAL_Delay(100);
	//TIM2->CR1 &= ~TIM_CR1_CEN;												//Timer 2 is disabled.
	ADC1->SR &= ~ADC_SR_AWD;
 800da3a:	4b0f      	ldr	r3, [pc, #60]	@ (800da78 <Reset_ADC+0x64>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a0e      	ldr	r2, [pc, #56]	@ (800da78 <Reset_ADC+0x64>)
 800da40:	f023 0301 	bic.w	r3, r3, #1
 800da44:	6013      	str	r3, [r2, #0]
	ADC1->CR1 |= ADC_CR1_AWDEN;
 800da46:	4b0c      	ldr	r3, [pc, #48]	@ (800da78 <Reset_ADC+0x64>)
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	4a0b      	ldr	r2, [pc, #44]	@ (800da78 <Reset_ADC+0x64>)
 800da4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800da50:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= ADC_CR1_AWDIE;											//enabling AWD interrupt mode !! MUST be done twice !!
 800da52:	4b09      	ldr	r3, [pc, #36]	@ (800da78 <Reset_ADC+0x64>)
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	4a08      	ldr	r2, [pc, #32]	@ (800da78 <Reset_ADC+0x64>)
 800da58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da5c:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= ADC_CR1_AWDIE;
 800da5e:	4b06      	ldr	r3, [pc, #24]	@ (800da78 <Reset_ADC+0x64>)
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	4a05      	ldr	r2, [pc, #20]	@ (800da78 <Reset_ADC+0x64>)
 800da64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da68:	6053      	str	r3, [r2, #4]
	return;
 800da6a:	bf00      	nop
}
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	40000400 	.word	0x40000400
 800da78:	40012000 	.word	0x40012000

0800da7c <TIM3_interrupt>:

void TIM3_interrupt()
{
 800da7c:	b480      	push	{r7}
 800da7e:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~TIM_CR1_CEN;												//Timer 2 is disabled sampling stops
 800da80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800da8a:	f023 0301 	bic.w	r3, r3, #1
 800da8e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~TIM_CR1_CEN;
 800da90:	4b06      	ldr	r3, [pc, #24]	@ (800daac <TIM3_interrupt+0x30>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a05      	ldr	r2, [pc, #20]	@ (800daac <TIM3_interrupt+0x30>)
 800da96:	f023 0301 	bic.w	r3, r3, #1
 800da9a:	6013      	str	r3, [r2, #0]
	state = 1;
 800da9c:	4b04      	ldr	r3, [pc, #16]	@ (800dab0 <TIM3_interrupt+0x34>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	601a      	str	r2, [r3, #0]
	return;
 800daa2:	bf00      	nop
}
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr
 800daac:	40000400 	.word	0x40000400
 800dab0:	200005ac 	.word	0x200005ac

0800dab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dab4:	b480      	push	{r7}
 800dab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800dab8:	b672      	cpsid	i
}
 800daba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800dabc:	bf00      	nop
 800dabe:	e7fd      	b.n	800dabc <Error_Handler+0x8>

0800dac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dac6:	2300      	movs	r3, #0
 800dac8:	607b      	str	r3, [r7, #4]
 800daca:	4b10      	ldr	r3, [pc, #64]	@ (800db0c <HAL_MspInit+0x4c>)
 800dacc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dace:	4a0f      	ldr	r2, [pc, #60]	@ (800db0c <HAL_MspInit+0x4c>)
 800dad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dad4:	6453      	str	r3, [r2, #68]	@ 0x44
 800dad6:	4b0d      	ldr	r3, [pc, #52]	@ (800db0c <HAL_MspInit+0x4c>)
 800dad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dade:	607b      	str	r3, [r7, #4]
 800dae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dae2:	2300      	movs	r3, #0
 800dae4:	603b      	str	r3, [r7, #0]
 800dae6:	4b09      	ldr	r3, [pc, #36]	@ (800db0c <HAL_MspInit+0x4c>)
 800dae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daea:	4a08      	ldr	r2, [pc, #32]	@ (800db0c <HAL_MspInit+0x4c>)
 800daec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800daf0:	6413      	str	r3, [r2, #64]	@ 0x40
 800daf2:	4b06      	ldr	r3, [pc, #24]	@ (800db0c <HAL_MspInit+0x4c>)
 800daf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dafa:	603b      	str	r3, [r7, #0]
 800dafc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dafe:	bf00      	nop
 800db00:	370c      	adds	r7, #12
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	40023800 	.word	0x40023800

0800db10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b08a      	sub	sp, #40	@ 0x28
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db18:	f107 0314 	add.w	r3, r7, #20
 800db1c:	2200      	movs	r2, #0
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	605a      	str	r2, [r3, #4]
 800db22:	609a      	str	r2, [r3, #8]
 800db24:	60da      	str	r2, [r3, #12]
 800db26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a33      	ldr	r2, [pc, #204]	@ (800dbfc <HAL_ADC_MspInit+0xec>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d160      	bne.n	800dbf4 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800db32:	2300      	movs	r3, #0
 800db34:	613b      	str	r3, [r7, #16]
 800db36:	4b32      	ldr	r3, [pc, #200]	@ (800dc00 <HAL_ADC_MspInit+0xf0>)
 800db38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db3a:	4a31      	ldr	r2, [pc, #196]	@ (800dc00 <HAL_ADC_MspInit+0xf0>)
 800db3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db40:	6453      	str	r3, [r2, #68]	@ 0x44
 800db42:	4b2f      	ldr	r3, [pc, #188]	@ (800dc00 <HAL_ADC_MspInit+0xf0>)
 800db44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db4a:	613b      	str	r3, [r7, #16]
 800db4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db4e:	2300      	movs	r3, #0
 800db50:	60fb      	str	r3, [r7, #12]
 800db52:	4b2b      	ldr	r3, [pc, #172]	@ (800dc00 <HAL_ADC_MspInit+0xf0>)
 800db54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db56:	4a2a      	ldr	r2, [pc, #168]	@ (800dc00 <HAL_ADC_MspInit+0xf0>)
 800db58:	f043 0301 	orr.w	r3, r3, #1
 800db5c:	6313      	str	r3, [r2, #48]	@ 0x30
 800db5e:	4b28      	ldr	r3, [pc, #160]	@ (800dc00 <HAL_ADC_MspInit+0xf0>)
 800db60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	60fb      	str	r3, [r7, #12]
 800db68:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800db6a:	230f      	movs	r3, #15
 800db6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800db6e:	2303      	movs	r3, #3
 800db70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db72:	2300      	movs	r3, #0
 800db74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db76:	f107 0314 	add.w	r3, r7, #20
 800db7a:	4619      	mov	r1, r3
 800db7c:	4821      	ldr	r0, [pc, #132]	@ (800dc04 <HAL_ADC_MspInit+0xf4>)
 800db7e:	f002 f847 	bl	800fc10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800db82:	4b21      	ldr	r3, [pc, #132]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800db84:	4a21      	ldr	r2, [pc, #132]	@ (800dc0c <HAL_ADC_MspInit+0xfc>)
 800db86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800db88:	4b1f      	ldr	r3, [pc, #124]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800db8e:	4b1e      	ldr	r3, [pc, #120]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800db90:	2200      	movs	r2, #0
 800db92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800db94:	4b1c      	ldr	r3, [pc, #112]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800db96:	2200      	movs	r2, #0
 800db98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800db9a:	4b1b      	ldr	r3, [pc, #108]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800db9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dba0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dba2:	4b19      	ldr	r3, [pc, #100]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800dba4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dba8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dbaa:	4b17      	ldr	r3, [pc, #92]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800dbac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800dbb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800dbb2:	4b15      	ldr	r3, [pc, #84]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800dbb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dbb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800dbba:	4b13      	ldr	r3, [pc, #76]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800dbbc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800dbc0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800dbc2:	4b11      	ldr	r3, [pc, #68]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800dbc8:	480f      	ldr	r0, [pc, #60]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800dbca:	f001 fcb1 	bl	800f530 <HAL_DMA_Init>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800dbd4:	f7ff ff6e 	bl	800dab4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a0b      	ldr	r2, [pc, #44]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800dbdc:	639a      	str	r2, [r3, #56]	@ 0x38
 800dbde:	4a0a      	ldr	r2, [pc, #40]	@ (800dc08 <HAL_ADC_MspInit+0xf8>)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	2012      	movs	r0, #18
 800dbea:	f001 fc6a 	bl	800f4c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800dbee:	2012      	movs	r0, #18
 800dbf0:	f001 fc83 	bl	800f4fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800dbf4:	bf00      	nop
 800dbf6:	3728      	adds	r7, #40	@ 0x28
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	40012000 	.word	0x40012000
 800dc00:	40023800 	.word	0x40023800
 800dc04:	40020000 	.word	0x40020000
 800dc08:	2000040c 	.word	0x2000040c
 800dc0c:	40026410 	.word	0x40026410

0800dc10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	@ 0x28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc18:	f107 0314 	add.w	r3, r7, #20
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	605a      	str	r2, [r3, #4]
 800dc22:	609a      	str	r2, [r3, #8]
 800dc24:	60da      	str	r2, [r3, #12]
 800dc26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a21      	ldr	r2, [pc, #132]	@ (800dcb4 <HAL_SPI_MspInit+0xa4>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d13b      	bne.n	800dcaa <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800dc32:	2300      	movs	r3, #0
 800dc34:	613b      	str	r3, [r7, #16]
 800dc36:	4b20      	ldr	r3, [pc, #128]	@ (800dcb8 <HAL_SPI_MspInit+0xa8>)
 800dc38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc3a:	4a1f      	ldr	r2, [pc, #124]	@ (800dcb8 <HAL_SPI_MspInit+0xa8>)
 800dc3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dc40:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc42:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb8 <HAL_SPI_MspInit+0xa8>)
 800dc44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dc4a:	613b      	str	r3, [r7, #16]
 800dc4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc4e:	2300      	movs	r3, #0
 800dc50:	60fb      	str	r3, [r7, #12]
 800dc52:	4b19      	ldr	r3, [pc, #100]	@ (800dcb8 <HAL_SPI_MspInit+0xa8>)
 800dc54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc56:	4a18      	ldr	r2, [pc, #96]	@ (800dcb8 <HAL_SPI_MspInit+0xa8>)
 800dc58:	f043 0301 	orr.w	r3, r3, #1
 800dc5c:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc5e:	4b16      	ldr	r3, [pc, #88]	@ (800dcb8 <HAL_SPI_MspInit+0xa8>)
 800dc60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dc6a:	2320      	movs	r3, #32
 800dc6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc6e:	2302      	movs	r3, #2
 800dc70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dc72:	2302      	movs	r3, #2
 800dc74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc76:	2303      	movs	r3, #3
 800dc78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800dc7a:	2305      	movs	r3, #5
 800dc7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc7e:	f107 0314 	add.w	r3, r7, #20
 800dc82:	4619      	mov	r1, r3
 800dc84:	480d      	ldr	r0, [pc, #52]	@ (800dcbc <HAL_SPI_MspInit+0xac>)
 800dc86:	f001 ffc3 	bl	800fc10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800dc8a:	2380      	movs	r3, #128	@ 0x80
 800dc8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc8e:	2302      	movs	r3, #2
 800dc90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc92:	2300      	movs	r3, #0
 800dc94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc96:	2303      	movs	r3, #3
 800dc98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800dc9a:	2305      	movs	r3, #5
 800dc9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc9e:	f107 0314 	add.w	r3, r7, #20
 800dca2:	4619      	mov	r1, r3
 800dca4:	4805      	ldr	r0, [pc, #20]	@ (800dcbc <HAL_SPI_MspInit+0xac>)
 800dca6:	f001 ffb3 	bl	800fc10 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800dcaa:	bf00      	nop
 800dcac:	3728      	adds	r7, #40	@ 0x28
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	40013000 	.word	0x40013000
 800dcb8:	40023800 	.word	0x40023800
 800dcbc:	40020000 	.word	0x40020000

0800dcc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcd0:	d10e      	bne.n	800dcf0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	617b      	str	r3, [r7, #20]
 800dcd6:	4b20      	ldr	r3, [pc, #128]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dcd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcda:	4a1f      	ldr	r2, [pc, #124]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dcdc:	f043 0301 	orr.w	r3, r3, #1
 800dce0:	6413      	str	r3, [r2, #64]	@ 0x40
 800dce2:	4b1d      	ldr	r3, [pc, #116]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dce6:	f003 0301 	and.w	r3, r3, #1
 800dcea:	617b      	str	r3, [r7, #20]
 800dcec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800dcee:	e02e      	b.n	800dd4e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a19      	ldr	r2, [pc, #100]	@ (800dd5c <HAL_TIM_Base_MspInit+0x9c>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d116      	bne.n	800dd28 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	613b      	str	r3, [r7, #16]
 800dcfe:	4b16      	ldr	r3, [pc, #88]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dd00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd02:	4a15      	ldr	r2, [pc, #84]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dd04:	f043 0302 	orr.w	r3, r3, #2
 800dd08:	6413      	str	r3, [r2, #64]	@ 0x40
 800dd0a:	4b13      	ldr	r3, [pc, #76]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dd0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd0e:	f003 0302 	and.w	r3, r3, #2
 800dd12:	613b      	str	r3, [r7, #16]
 800dd14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800dd16:	2200      	movs	r2, #0
 800dd18:	2100      	movs	r1, #0
 800dd1a:	201d      	movs	r0, #29
 800dd1c:	f001 fbd1 	bl	800f4c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800dd20:	201d      	movs	r0, #29
 800dd22:	f001 fbea 	bl	800f4fa <HAL_NVIC_EnableIRQ>
}
 800dd26:	e012      	b.n	800dd4e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a0c      	ldr	r2, [pc, #48]	@ (800dd60 <HAL_TIM_Base_MspInit+0xa0>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d10d      	bne.n	800dd4e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800dd32:	2300      	movs	r3, #0
 800dd34:	60fb      	str	r3, [r7, #12]
 800dd36:	4b08      	ldr	r3, [pc, #32]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dd38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd3a:	4a07      	ldr	r2, [pc, #28]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dd3c:	f043 0308 	orr.w	r3, r3, #8
 800dd40:	6413      	str	r3, [r2, #64]	@ 0x40
 800dd42:	4b05      	ldr	r3, [pc, #20]	@ (800dd58 <HAL_TIM_Base_MspInit+0x98>)
 800dd44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd46:	f003 0308 	and.w	r3, r3, #8
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
}
 800dd4e:	bf00      	nop
 800dd50:	3718      	adds	r7, #24
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	40023800 	.word	0x40023800
 800dd5c:	40000400 	.word	0x40000400
 800dd60:	40000c00 	.word	0x40000c00

0800dd64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dd64:	b480      	push	{r7}
 800dd66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800dd68:	bf00      	nop
 800dd6a:	e7fd      	b.n	800dd68 <NMI_Handler+0x4>

0800dd6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dd70:	bf00      	nop
 800dd72:	e7fd      	b.n	800dd70 <HardFault_Handler+0x4>

0800dd74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dd74:	b480      	push	{r7}
 800dd76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dd78:	bf00      	nop
 800dd7a:	e7fd      	b.n	800dd78 <MemManage_Handler+0x4>

0800dd7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dd80:	bf00      	nop
 800dd82:	e7fd      	b.n	800dd80 <BusFault_Handler+0x4>

0800dd84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dd84:	b480      	push	{r7}
 800dd86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dd88:	bf00      	nop
 800dd8a:	e7fd      	b.n	800dd88 <UsageFault_Handler+0x4>

0800dd8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dd90:	bf00      	nop
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dd9e:	bf00      	nop
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ddac:	bf00      	nop
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ddba:	f000 fcad 	bl	800e718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ddbe:	bf00      	nop
 800ddc0:	bd80      	pop	{r7, pc}
	...

0800ddc4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ddc8:	4803      	ldr	r0, [pc, #12]	@ (800ddd8 <ADC_IRQHandler+0x14>)
 800ddca:	f000 fd2c 	bl	800e826 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  AWD_Interrupt();
 800ddce:	f7ff fdf9 	bl	800d9c4 <AWD_Interrupt>




  /* USER CODE END ADC_IRQn 1 */
}
 800ddd2:	bf00      	nop
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	200003c4 	.word	0x200003c4

0800dddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800dde0:	4803      	ldr	r0, [pc, #12]	@ (800ddf0 <TIM3_IRQHandler+0x14>)
 800dde2:	f004 fa10 	bl	8012206 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  TIM3_interrupt();
 800dde6:	f7ff fe49 	bl	800da7c <TIM3_interrupt>
  //GPIOC->ODR ^= GPIO_ODR_OD13;
  /* USER CODE END TIM3_IRQn 1 */
}
 800ddea:	bf00      	nop
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	2000050c 	.word	0x2000050c

0800ddf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ddf8:	4802      	ldr	r0, [pc, #8]	@ (800de04 <DMA2_Stream0_IRQHandler+0x10>)
 800ddfa:	f001 fc9f 	bl	800f73c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800ddfe:	bf00      	nop
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	2000040c 	.word	0x2000040c

0800de08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800de0c:	4802      	ldr	r0, [pc, #8]	@ (800de18 <OTG_FS_IRQHandler+0x10>)
 800de0e:	f002 fa04 	bl	801021a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800de12:	bf00      	nop
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	20002ecc 	.word	0x20002ecc

0800de1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800de1c:	b480      	push	{r7}
 800de1e:	af00      	add	r7, sp, #0
  return 1;
 800de20:	2301      	movs	r3, #1
}
 800de22:	4618      	mov	r0, r3
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <_kill>:

int _kill(int pid, int sig)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800de36:	f009 fb23 	bl	8017480 <__errno>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2216      	movs	r2, #22
 800de3e:	601a      	str	r2, [r3, #0]
  return -1;
 800de40:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <_exit>:

void _exit (int status)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800de54:	f04f 31ff 	mov.w	r1, #4294967295
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ffe7 	bl	800de2c <_kill>
  while (1) {}    /* Make sure we hang here */
 800de5e:	bf00      	nop
 800de60:	e7fd      	b.n	800de5e <_exit+0x12>

0800de62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b086      	sub	sp, #24
 800de66:	af00      	add	r7, sp, #0
 800de68:	60f8      	str	r0, [r7, #12]
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800de6e:	2300      	movs	r3, #0
 800de70:	617b      	str	r3, [r7, #20]
 800de72:	e00a      	b.n	800de8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800de74:	f3af 8000 	nop.w
 800de78:	4601      	mov	r1, r0
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	1c5a      	adds	r2, r3, #1
 800de7e:	60ba      	str	r2, [r7, #8]
 800de80:	b2ca      	uxtb	r2, r1
 800de82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	3301      	adds	r3, #1
 800de88:	617b      	str	r3, [r7, #20]
 800de8a:	697a      	ldr	r2, [r7, #20]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	429a      	cmp	r2, r3
 800de90:	dbf0      	blt.n	800de74 <_read+0x12>
  }

  return len;
 800de92:	687b      	ldr	r3, [r7, #4]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dea8:	2300      	movs	r3, #0
 800deaa:	617b      	str	r3, [r7, #20]
 800deac:	e009      	b.n	800dec2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	1c5a      	adds	r2, r3, #1
 800deb2:	60ba      	str	r2, [r7, #8]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	3301      	adds	r3, #1
 800dec0:	617b      	str	r3, [r7, #20]
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	dbf1      	blt.n	800deae <_write+0x12>
  }
  return len;
 800deca:	687b      	ldr	r3, [r7, #4]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <_close>:

int _close(int file)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800dedc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <_fstat>:


int _fstat(int file, struct stat *st)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800defc:	605a      	str	r2, [r3, #4]
  return 0;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <_isatty>:

int _isatty(int file)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800df14:	2301      	movs	r3, #1
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800df22:	b480      	push	{r7}
 800df24:	b085      	sub	sp, #20
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	60b9      	str	r1, [r7, #8]
 800df2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3714      	adds	r7, #20
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800df44:	4a14      	ldr	r2, [pc, #80]	@ (800df98 <_sbrk+0x5c>)
 800df46:	4b15      	ldr	r3, [pc, #84]	@ (800df9c <_sbrk+0x60>)
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800df50:	4b13      	ldr	r3, [pc, #76]	@ (800dfa0 <_sbrk+0x64>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d102      	bne.n	800df5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800df58:	4b11      	ldr	r3, [pc, #68]	@ (800dfa0 <_sbrk+0x64>)
 800df5a:	4a12      	ldr	r2, [pc, #72]	@ (800dfa4 <_sbrk+0x68>)
 800df5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800df5e:	4b10      	ldr	r3, [pc, #64]	@ (800dfa0 <_sbrk+0x64>)
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4413      	add	r3, r2
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d207      	bcs.n	800df7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800df6c:	f009 fa88 	bl	8017480 <__errno>
 800df70:	4603      	mov	r3, r0
 800df72:	220c      	movs	r2, #12
 800df74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800df76:	f04f 33ff 	mov.w	r3, #4294967295
 800df7a:	e009      	b.n	800df90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800df7c:	4b08      	ldr	r3, [pc, #32]	@ (800dfa0 <_sbrk+0x64>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800df82:	4b07      	ldr	r3, [pc, #28]	@ (800dfa0 <_sbrk+0x64>)
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4413      	add	r3, r2
 800df8a:	4a05      	ldr	r2, [pc, #20]	@ (800dfa0 <_sbrk+0x64>)
 800df8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800df8e:	68fb      	ldr	r3, [r7, #12]
}
 800df90:	4618      	mov	r0, r3
 800df92:	3718      	adds	r7, #24
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	20020000 	.word	0x20020000
 800df9c:	00000400 	.word	0x00000400
 800dfa0:	200019f0 	.word	0x200019f0
 800dfa4:	20003640 	.word	0x20003640

0800dfa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dfac:	4b06      	ldr	r3, [pc, #24]	@ (800dfc8 <SystemInit+0x20>)
 800dfae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfb2:	4a05      	ldr	r2, [pc, #20]	@ (800dfc8 <SystemInit+0x20>)
 800dfb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dfb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dfbc:	bf00      	nop
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	e000ed00 	.word	0xe000ed00

0800dfcc <Draw_def_targetElement>:
		ST7789_DrawFilledCircle(x+(int)(size*(hitx+1)/2), y+(int)(size*(hity+1)/2), 2, hitcolor);
	}
}

void Draw_def_targetElement(uint16_t x, uint16_t y, uint16_t size, uint16_t color, uint16_t hitcolor, uint16_t bgcolor, target_def target)
{
 800dfcc:	b590      	push	{r4, r7, lr}
 800dfce:	b08b      	sub	sp, #44	@ 0x2c
 800dfd0:	af02      	add	r7, sp, #8
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	4608      	mov	r0, r1
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4623      	mov	r3, r4
 800dfdc:	81fb      	strh	r3, [r7, #14]
 800dfde:	4603      	mov	r3, r0
 800dfe0:	81bb      	strh	r3, [r7, #12]
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	817b      	strh	r3, [r7, #10]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	813b      	strh	r3, [r7, #8]
	float outer_diameter = target.inner_circle_mm + target.circle_distance_mm*(target.circle_count-1);
 800dfea:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800dfee:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800dff2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800dff6:	3b01      	subs	r3, #1
 800dff8:	ee07 3a90 	vmov	s15, r3
 800dffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e004:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e008:	edc7 7a06 	vstr	s15, [r7, #24]
	float scale = size/outer_diameter/2;
 800e00c:	897b      	ldrh	r3, [r7, #10]
 800e00e:	ee07 3a90 	vmov	s15, r3
 800e012:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e016:	edd7 7a06 	vldr	s15, [r7, #24]
 800e01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e01e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e026:	edc7 7a05 	vstr	s15, [r7, #20]
	ST7789_Fill(x, y, x+size, y+size, bgcolor);
 800e02a:	89fa      	ldrh	r2, [r7, #14]
 800e02c:	897b      	ldrh	r3, [r7, #10]
 800e02e:	4413      	add	r3, r2
 800e030:	b29c      	uxth	r4, r3
 800e032:	89ba      	ldrh	r2, [r7, #12]
 800e034:	897b      	ldrh	r3, [r7, #10]
 800e036:	4413      	add	r3, r2
 800e038:	b29a      	uxth	r2, r3
 800e03a:	89b9      	ldrh	r1, [r7, #12]
 800e03c:	89f8      	ldrh	r0, [r7, #14]
 800e03e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	4613      	mov	r3, r2
 800e044:	4622      	mov	r2, r4
 800e046:	f7f4 f84f 	bl	80020e8 <ST7789_Fill>
	ST7789_DrawLine(x, y+size/2, x+size, y+size/2, color);
 800e04a:	897b      	ldrh	r3, [r7, #10]
 800e04c:	085b      	lsrs	r3, r3, #1
 800e04e:	b29a      	uxth	r2, r3
 800e050:	89bb      	ldrh	r3, [r7, #12]
 800e052:	4413      	add	r3, r2
 800e054:	b299      	uxth	r1, r3
 800e056:	89fa      	ldrh	r2, [r7, #14]
 800e058:	897b      	ldrh	r3, [r7, #10]
 800e05a:	4413      	add	r3, r2
 800e05c:	b29c      	uxth	r4, r3
 800e05e:	897b      	ldrh	r3, [r7, #10]
 800e060:	085b      	lsrs	r3, r3, #1
 800e062:	b29a      	uxth	r2, r3
 800e064:	89bb      	ldrh	r3, [r7, #12]
 800e066:	4413      	add	r3, r2
 800e068:	b29a      	uxth	r2, r3
 800e06a:	89f8      	ldrh	r0, [r7, #14]
 800e06c:	893b      	ldrh	r3, [r7, #8]
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	4613      	mov	r3, r2
 800e072:	4622      	mov	r2, r4
 800e074:	f7f4 f888 	bl	8002188 <ST7789_DrawLine>
	ST7789_DrawLine(x+size/2, y, x+size/2, y+size, color);
 800e078:	897b      	ldrh	r3, [r7, #10]
 800e07a:	085b      	lsrs	r3, r3, #1
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	89fb      	ldrh	r3, [r7, #14]
 800e080:	4413      	add	r3, r2
 800e082:	b298      	uxth	r0, r3
 800e084:	897b      	ldrh	r3, [r7, #10]
 800e086:	085b      	lsrs	r3, r3, #1
 800e088:	b29a      	uxth	r2, r3
 800e08a:	89fb      	ldrh	r3, [r7, #14]
 800e08c:	4413      	add	r3, r2
 800e08e:	b29c      	uxth	r4, r3
 800e090:	89ba      	ldrh	r2, [r7, #12]
 800e092:	897b      	ldrh	r3, [r7, #10]
 800e094:	4413      	add	r3, r2
 800e096:	b29a      	uxth	r2, r3
 800e098:	89b9      	ldrh	r1, [r7, #12]
 800e09a:	893b      	ldrh	r3, [r7, #8]
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	4622      	mov	r2, r4
 800e0a2:	f7f4 f871 	bl	8002188 <ST7789_DrawLine>
	ST7789_DrawPixel(x+size/2, y+size/2, color);
 800e0a6:	897b      	ldrh	r3, [r7, #10]
 800e0a8:	085b      	lsrs	r3, r3, #1
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	89fb      	ldrh	r3, [r7, #14]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	b298      	uxth	r0, r3
 800e0b2:	897b      	ldrh	r3, [r7, #10]
 800e0b4:	085b      	lsrs	r3, r3, #1
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	89bb      	ldrh	r3, [r7, #12]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	893a      	ldrh	r2, [r7, #8]
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	f7f3 ffdb 	bl	800207c <ST7789_DrawPixel>
	ST7789_DrawCircle(x+size/2, y+size/2, scale*target.inner_circle_mm, color);
 800e0c6:	897b      	ldrh	r3, [r7, #10]
 800e0c8:	085b      	lsrs	r3, r3, #1
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	89fb      	ldrh	r3, [r7, #14]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	b298      	uxth	r0, r3
 800e0d2:	897b      	ldrh	r3, [r7, #10]
 800e0d4:	085b      	lsrs	r3, r3, #1
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	89bb      	ldrh	r3, [r7, #12]
 800e0da:	4413      	add	r3, r2
 800e0dc:	b299      	uxth	r1, r3
 800e0de:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800e0e2:	edd7 7a05 	vldr	s15, [r7, #20]
 800e0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0ee:	edc7 7a01 	vstr	s15, [r7, #4]
 800e0f2:	793b      	ldrb	r3, [r7, #4]
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	893b      	ldrh	r3, [r7, #8]
 800e0f8:	f7f4 f916 	bl	8002328 <ST7789_DrawCircle>
	for(uint16_t i = 1; i<target.circle_count ;i++)
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	83fb      	strh	r3, [r7, #30]
 800e100:	e028      	b.n	800e154 <Draw_def_targetElement+0x188>
		{
			ST7789_DrawCircle(x+size/2, y+size/2, scale*(target.inner_circle_mm+target.circle_distance_mm*i), color);
 800e102:	897b      	ldrh	r3, [r7, #10]
 800e104:	085b      	lsrs	r3, r3, #1
 800e106:	b29a      	uxth	r2, r3
 800e108:	89fb      	ldrh	r3, [r7, #14]
 800e10a:	4413      	add	r3, r2
 800e10c:	b298      	uxth	r0, r3
 800e10e:	897b      	ldrh	r3, [r7, #10]
 800e110:	085b      	lsrs	r3, r3, #1
 800e112:	b29a      	uxth	r2, r3
 800e114:	89bb      	ldrh	r3, [r7, #12]
 800e116:	4413      	add	r3, r2
 800e118:	b299      	uxth	r1, r3
 800e11a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800e11e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800e122:	8bfb      	ldrh	r3, [r7, #30]
 800e124:	ee07 3a90 	vmov	s15, r3
 800e128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e12c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e130:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e134:	edd7 7a05 	vldr	s15, [r7, #20]
 800e138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e13c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e140:	edc7 7a01 	vstr	s15, [r7, #4]
 800e144:	793b      	ldrb	r3, [r7, #4]
 800e146:	b2da      	uxtb	r2, r3
 800e148:	893b      	ldrh	r3, [r7, #8]
 800e14a:	f7f4 f8ed 	bl	8002328 <ST7789_DrawCircle>
	for(uint16_t i = 1; i<target.circle_count ;i++)
 800e14e:	8bfb      	ldrh	r3, [r7, #30]
 800e150:	3301      	adds	r3, #1
 800e152:	83fb      	strh	r3, [r7, #30]
 800e154:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e158:	461a      	mov	r2, r3
 800e15a:	8bfb      	ldrh	r3, [r7, #30]
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d3d0      	bcc.n	800e102 <Draw_def_targetElement+0x136>
		}
}
 800e160:	bf00      	nop
 800e162:	bf00      	nop
 800e164:	3724      	adds	r7, #36	@ 0x24
 800e166:	46bd      	mov	sp, r7
 800e168:	bd90      	pop	{r4, r7, pc}

0800e16a <Draw_hit>:

void Draw_hit(uint16_t x, uint16_t y, uint16_t size, uint16_t color, uint16_t hitcolor, float hitx, float hity, target_def target)
{
 800e16a:	b590      	push	{r4, r7, lr}
 800e16c:	b087      	sub	sp, #28
 800e16e:	af00      	add	r7, sp, #0
 800e170:	4604      	mov	r4, r0
 800e172:	4608      	mov	r0, r1
 800e174:	4611      	mov	r1, r2
 800e176:	461a      	mov	r2, r3
 800e178:	ed87 0a01 	vstr	s0, [r7, #4]
 800e17c:	edc7 0a00 	vstr	s1, [r7]
 800e180:	4623      	mov	r3, r4
 800e182:	81fb      	strh	r3, [r7, #14]
 800e184:	4603      	mov	r3, r0
 800e186:	81bb      	strh	r3, [r7, #12]
 800e188:	460b      	mov	r3, r1
 800e18a:	817b      	strh	r3, [r7, #10]
 800e18c:	4613      	mov	r3, r2
 800e18e:	813b      	strh	r3, [r7, #8]
	float outer_diameter = target.inner_circle_mm + target.circle_distance_mm*(target.circle_count-1);
 800e190:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e194:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800e198:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800e19c:	3b01      	subs	r3, #1
 800e19e:	ee07 3a90 	vmov	s15, r3
 800e1a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1ae:	edc7 7a05 	vstr	s15, [r7, #20]
	float scale = size/outer_diameter/2;
 800e1b2:	897b      	ldrh	r3, [r7, #10]
 800e1b4:	ee07 3a90 	vmov	s15, r3
 800e1b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e1bc:	edd7 7a05 	vldr	s15, [r7, #20]
 800e1c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1c4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e1c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1cc:	edc7 7a04 	vstr	s15, [r7, #16]

	ST7789_DrawFilledCircle(x+size/2+(int)(scale*hitx*2), y+size/2-(int)(scale*hity*2), 3, hitcolor);
 800e1d0:	897b      	ldrh	r3, [r7, #10]
 800e1d2:	085b      	lsrs	r3, r3, #1
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	89fb      	ldrh	r3, [r7, #14]
 800e1d8:	4413      	add	r3, r2
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	ed97 7a04 	vldr	s14, [r7, #16]
 800e1e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e1ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1f0:	ee17 3a90 	vmov	r3, s15
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	4413      	add	r3, r2
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	b218      	sxth	r0, r3
 800e1fc:	897b      	ldrh	r3, [r7, #10]
 800e1fe:	085b      	lsrs	r3, r3, #1
 800e200:	b29a      	uxth	r2, r3
 800e202:	89bb      	ldrh	r3, [r7, #12]
 800e204:	4413      	add	r3, r2
 800e206:	b29a      	uxth	r2, r3
 800e208:	ed97 7a04 	vldr	s14, [r7, #16]
 800e20c:	edd7 7a00 	vldr	s15, [r7]
 800e210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e214:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e21c:	ee17 3a90 	vmov	r3, s15
 800e220:	b29b      	uxth	r3, r3
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	b29b      	uxth	r3, r3
 800e226:	b219      	sxth	r1, r3
 800e228:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e22a:	2203      	movs	r2, #3
 800e22c:	f7f4 fa52 	bl	80026d4 <ST7789_DrawFilledCircle>
}
 800e230:	bf00      	nop
 800e232:	371c      	adds	r7, #28
 800e234:	46bd      	mov	sp, r7
 800e236:	bd90      	pop	{r4, r7, pc}

0800e238 <Draw_resultTable>:

void Draw_resultTable(uint16_t x, uint16_t y, uint16_t rows, uint8_t* score, uint16_t index, uint16_t color, uint16_t bgcolor)
{
 800e238:	b590      	push	{r4, r7, lr}
 800e23a:	b08d      	sub	sp, #52	@ 0x34
 800e23c:	af04      	add	r7, sp, #16
 800e23e:	607b      	str	r3, [r7, #4]
 800e240:	4603      	mov	r3, r0
 800e242:	81fb      	strh	r3, [r7, #14]
 800e244:	460b      	mov	r3, r1
 800e246:	81bb      	strh	r3, [r7, #12]
 800e248:	4613      	mov	r3, r2
 800e24a:	817b      	strh	r3, [r7, #10]
	uint16_t sum = 0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	83fb      	strh	r3, [r7, #30]
	uint8_t row_size = 20, width = 80;
 800e250:	2314      	movs	r3, #20
 800e252:	76fb      	strb	r3, [r7, #27]
 800e254:	2350      	movs	r3, #80	@ 0x50
 800e256:	76bb      	strb	r3, [r7, #26]
	char text_buffer[3];
	index = index*rows;
 800e258:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800e25a:	897b      	ldrh	r3, [r7, #10]
 800e25c:	fb12 f303 	smulbb	r3, r2, r3
 800e260:	863b      	strh	r3, [r7, #48]	@ 0x30
	ST7789_WriteString(x, y, "SCORE:", Font_16x26, color, bgcolor);
 800e262:	4b4f      	ldr	r3, [pc, #316]	@ (800e3a0 <Draw_resultTable+0x168>)
 800e264:	89b9      	ldrh	r1, [r7, #12]
 800e266:	89f8      	ldrh	r0, [r7, #14]
 800e268:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e26a:	9202      	str	r2, [sp, #8]
 800e26c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e26e:	9201      	str	r2, [sp, #4]
 800e270:	685a      	ldr	r2, [r3, #4]
 800e272:	9200      	str	r2, [sp, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a4b      	ldr	r2, [pc, #300]	@ (800e3a4 <Draw_resultTable+0x16c>)
 800e278:	f7f4 f9d8 	bl	800262c <ST7789_WriteString>
	y = y+28;
 800e27c:	89bb      	ldrh	r3, [r7, #12]
 800e27e:	331c      	adds	r3, #28
 800e280:	81bb      	strh	r3, [r7, #12]
	ST7789_Fill(x, y, x+width, y+row_size*(rows+1), bgcolor);
 800e282:	7ebb      	ldrb	r3, [r7, #26]
 800e284:	b29a      	uxth	r2, r3
 800e286:	89fb      	ldrh	r3, [r7, #14]
 800e288:	4413      	add	r3, r2
 800e28a:	b29c      	uxth	r4, r3
 800e28c:	7efb      	ldrb	r3, [r7, #27]
 800e28e:	b29a      	uxth	r2, r3
 800e290:	897b      	ldrh	r3, [r7, #10]
 800e292:	3301      	adds	r3, #1
 800e294:	b29b      	uxth	r3, r3
 800e296:	fb12 f303 	smulbb	r3, r2, r3
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	89bb      	ldrh	r3, [r7, #12]
 800e29e:	4413      	add	r3, r2
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	89b9      	ldrh	r1, [r7, #12]
 800e2a4:	89f8      	ldrh	r0, [r7, #14]
 800e2a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e2a8:	9300      	str	r3, [sp, #0]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	f7f3 ff1b 	bl	80020e8 <ST7789_Fill>
	ST7789_DrawRectangle(x, y, x+width, y+row_size*(rows/2), color);
 800e2b2:	7ebb      	ldrb	r3, [r7, #26]
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	89fb      	ldrh	r3, [r7, #14]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	b29c      	uxth	r4, r3
 800e2bc:	7efb      	ldrb	r3, [r7, #27]
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	897b      	ldrh	r3, [r7, #10]
 800e2c2:	085b      	lsrs	r3, r3, #1
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	fb12 f303 	smulbb	r3, r2, r3
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	89bb      	ldrh	r3, [r7, #12]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	89b9      	ldrh	r1, [r7, #12]
 800e2d4:	89f8      	ldrh	r0, [r7, #14]
 800e2d6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	4622      	mov	r2, r4
 800e2de:	f7f3 ffdf 	bl	80022a0 <ST7789_DrawRectangle>
	ST7789_DrawLine(x+width/2, y, x+width/2, y+rows/2*row_size, color);
 800e2e2:	7ebb      	ldrb	r3, [r7, #26]
 800e2e4:	085b      	lsrs	r3, r3, #1
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	89fb      	ldrh	r3, [r7, #14]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	b298      	uxth	r0, r3
 800e2f0:	7ebb      	ldrb	r3, [r7, #26]
 800e2f2:	085b      	lsrs	r3, r3, #1
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	89fb      	ldrh	r3, [r7, #14]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	b29c      	uxth	r4, r3
 800e2fe:	897b      	ldrh	r3, [r7, #10]
 800e300:	085b      	lsrs	r3, r3, #1
 800e302:	b29a      	uxth	r2, r3
 800e304:	7efb      	ldrb	r3, [r7, #27]
 800e306:	b29b      	uxth	r3, r3
 800e308:	fb12 f303 	smulbb	r3, r2, r3
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	89bb      	ldrh	r3, [r7, #12]
 800e310:	4413      	add	r3, r2
 800e312:	b29a      	uxth	r2, r3
 800e314:	89b9      	ldrh	r1, [r7, #12]
 800e316:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	4613      	mov	r3, r2
 800e31c:	4622      	mov	r2, r4
 800e31e:	f7f3 ff33 	bl	8002188 <ST7789_DrawLine>
	for(uint16_t i = 0; i<rows ;i++)
 800e322:	2300      	movs	r3, #0
 800e324:	83bb      	strh	r3, [r7, #28]
 800e326:	e0af      	b.n	800e488 <Draw_resultTable+0x250>
	{
		if(i < rows/2)
 800e328:	897b      	ldrh	r3, [r7, #10]
 800e32a:	085b      	lsrs	r3, r3, #1
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	8bba      	ldrh	r2, [r7, #28]
 800e330:	429a      	cmp	r2, r3
 800e332:	d23d      	bcs.n	800e3b0 <Draw_resultTable+0x178>
		{
			sum = sum + score[index+i];
 800e334:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800e336:	8bbb      	ldrh	r3, [r7, #28]
 800e338:	4413      	add	r3, r2
 800e33a:	461a      	mov	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4413      	add	r3, r2
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	8bfb      	ldrh	r3, [r7, #30]
 800e346:	4413      	add	r3, r2
 800e348:	83fb      	strh	r3, [r7, #30]
			sprintf(text_buffer,"%2d",score[index+i]);
 800e34a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800e34c:	8bbb      	ldrh	r3, [r7, #28]
 800e34e:	4413      	add	r3, r2
 800e350:	461a      	mov	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4413      	add	r3, r2
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	461a      	mov	r2, r3
 800e35a:	f107 0314 	add.w	r3, r7, #20
 800e35e:	4912      	ldr	r1, [pc, #72]	@ (800e3a8 <Draw_resultTable+0x170>)
 800e360:	4618      	mov	r0, r3
 800e362:	f008 ffc7 	bl	80172f4 <siprintf>
			ST7789_WriteString(x+2, y+row_size*(i)+2, text_buffer, Font_11x18, color, bgcolor);
 800e366:	89fb      	ldrh	r3, [r7, #14]
 800e368:	3302      	adds	r3, #2
 800e36a:	b298      	uxth	r0, r3
 800e36c:	7efb      	ldrb	r3, [r7, #27]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	8bba      	ldrh	r2, [r7, #28]
 800e372:	fb12 f303 	smulbb	r3, r2, r3
 800e376:	b29a      	uxth	r2, r3
 800e378:	89bb      	ldrh	r3, [r7, #12]
 800e37a:	4413      	add	r3, r2
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3302      	adds	r3, #2
 800e380:	b299      	uxth	r1, r3
 800e382:	4b0a      	ldr	r3, [pc, #40]	@ (800e3ac <Draw_resultTable+0x174>)
 800e384:	f107 0414 	add.w	r4, r7, #20
 800e388:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e38a:	9202      	str	r2, [sp, #8]
 800e38c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e38e:	9201      	str	r2, [sp, #4]
 800e390:	685a      	ldr	r2, [r3, #4]
 800e392:	9200      	str	r2, [sp, #0]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4622      	mov	r2, r4
 800e398:	f7f4 f948 	bl	800262c <ST7789_WriteString>
 800e39c:	e071      	b.n	800e482 <Draw_resultTable+0x24a>
 800e39e:	bf00      	nop
 800e3a0:	20000010 	.word	0x20000010
 800e3a4:	0801b7cc 	.word	0x0801b7cc
 800e3a8:	0801b7d4 	.word	0x0801b7d4
 800e3ac:	20000008 	.word	0x20000008
		}
		else
		{
			sum = sum + score[index+i];
 800e3b0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800e3b2:	8bbb      	ldrh	r3, [r7, #28]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	8bfb      	ldrh	r3, [r7, #30]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	83fb      	strh	r3, [r7, #30]
			sprintf(text_buffer,"%2d",score[index+i]);
 800e3c6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800e3c8:	8bbb      	ldrh	r3, [r7, #28]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	f107 0314 	add.w	r3, r7, #20
 800e3da:	498a      	ldr	r1, [pc, #552]	@ (800e604 <Draw_resultTable+0x3cc>)
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f008 ff89 	bl	80172f4 <siprintf>
			ST7789_WriteString(x+2+width/2, y+row_size*(i-rows/2)+2, text_buffer, Font_11x18, color, bgcolor);
 800e3e2:	7ebb      	ldrb	r3, [r7, #26]
 800e3e4:	085b      	lsrs	r3, r3, #1
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	89fb      	ldrh	r3, [r7, #14]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	3302      	adds	r3, #2
 800e3f2:	b298      	uxth	r0, r3
 800e3f4:	7efb      	ldrb	r3, [r7, #27]
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	897b      	ldrh	r3, [r7, #10]
 800e3fa:	085b      	lsrs	r3, r3, #1
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	8bb9      	ldrh	r1, [r7, #28]
 800e400:	1acb      	subs	r3, r1, r3
 800e402:	b29b      	uxth	r3, r3
 800e404:	fb12 f303 	smulbb	r3, r2, r3
 800e408:	b29a      	uxth	r2, r3
 800e40a:	89bb      	ldrh	r3, [r7, #12]
 800e40c:	4413      	add	r3, r2
 800e40e:	b29b      	uxth	r3, r3
 800e410:	3302      	adds	r3, #2
 800e412:	b299      	uxth	r1, r3
 800e414:	4b7c      	ldr	r3, [pc, #496]	@ (800e608 <Draw_resultTable+0x3d0>)
 800e416:	f107 0414 	add.w	r4, r7, #20
 800e41a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e41c:	9202      	str	r2, [sp, #8]
 800e41e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e420:	9201      	str	r2, [sp, #4]
 800e422:	685a      	ldr	r2, [r3, #4]
 800e424:	9200      	str	r2, [sp, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4622      	mov	r2, r4
 800e42a:	f7f4 f8ff 	bl	800262c <ST7789_WriteString>
			ST7789_DrawLine(x, y+(i+1-rows/2)*row_size, x+width, y+(i+1-rows/2)*row_size, color);
 800e42e:	8bbb      	ldrh	r3, [r7, #28]
 800e430:	3301      	adds	r3, #1
 800e432:	897a      	ldrh	r2, [r7, #10]
 800e434:	0852      	lsrs	r2, r2, #1
 800e436:	b292      	uxth	r2, r2
 800e438:	1a9b      	subs	r3, r3, r2
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	7efb      	ldrb	r3, [r7, #27]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	fb12 f303 	smulbb	r3, r2, r3
 800e444:	b29a      	uxth	r2, r3
 800e446:	89bb      	ldrh	r3, [r7, #12]
 800e448:	4413      	add	r3, r2
 800e44a:	b299      	uxth	r1, r3
 800e44c:	7ebb      	ldrb	r3, [r7, #26]
 800e44e:	b29a      	uxth	r2, r3
 800e450:	89fb      	ldrh	r3, [r7, #14]
 800e452:	4413      	add	r3, r2
 800e454:	b29c      	uxth	r4, r3
 800e456:	8bbb      	ldrh	r3, [r7, #28]
 800e458:	3301      	adds	r3, #1
 800e45a:	897a      	ldrh	r2, [r7, #10]
 800e45c:	0852      	lsrs	r2, r2, #1
 800e45e:	b292      	uxth	r2, r2
 800e460:	1a9b      	subs	r3, r3, r2
 800e462:	b29a      	uxth	r2, r3
 800e464:	7efb      	ldrb	r3, [r7, #27]
 800e466:	b29b      	uxth	r3, r3
 800e468:	fb12 f303 	smulbb	r3, r2, r3
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	89bb      	ldrh	r3, [r7, #12]
 800e470:	4413      	add	r3, r2
 800e472:	b29a      	uxth	r2, r3
 800e474:	89f8      	ldrh	r0, [r7, #14]
 800e476:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e478:	9300      	str	r3, [sp, #0]
 800e47a:	4613      	mov	r3, r2
 800e47c:	4622      	mov	r2, r4
 800e47e:	f7f3 fe83 	bl	8002188 <ST7789_DrawLine>
	for(uint16_t i = 0; i<rows ;i++)
 800e482:	8bbb      	ldrh	r3, [r7, #28]
 800e484:	3301      	adds	r3, #1
 800e486:	83bb      	strh	r3, [r7, #28]
 800e488:	8bba      	ldrh	r2, [r7, #28]
 800e48a:	897b      	ldrh	r3, [r7, #10]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	f4ff af4b 	bcc.w	800e328 <Draw_resultTable+0xf0>
		}
	}
	sprintf(text_buffer,"%2d",sum);
 800e492:	8bfa      	ldrh	r2, [r7, #30]
 800e494:	f107 0314 	add.w	r3, r7, #20
 800e498:	495a      	ldr	r1, [pc, #360]	@ (800e604 <Draw_resultTable+0x3cc>)
 800e49a:	4618      	mov	r0, r3
 800e49c:	f008 ff2a 	bl	80172f4 <siprintf>
	ST7789_WriteString(x, y+row_size*(rows/2)+4, "TOTAL:", Font_16x26, color, bgcolor);
 800e4a0:	7efb      	ldrb	r3, [r7, #27]
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	897b      	ldrh	r3, [r7, #10]
 800e4a6:	085b      	lsrs	r3, r3, #1
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	fb12 f303 	smulbb	r3, r2, r3
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	89bb      	ldrh	r3, [r7, #12]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	3304      	adds	r3, #4
 800e4b8:	b299      	uxth	r1, r3
 800e4ba:	4b54      	ldr	r3, [pc, #336]	@ (800e60c <Draw_resultTable+0x3d4>)
 800e4bc:	89f8      	ldrh	r0, [r7, #14]
 800e4be:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e4c0:	9202      	str	r2, [sp, #8]
 800e4c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e4c4:	9201      	str	r2, [sp, #4]
 800e4c6:	685a      	ldr	r2, [r3, #4]
 800e4c8:	9200      	str	r2, [sp, #0]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a50      	ldr	r2, [pc, #320]	@ (800e610 <Draw_resultTable+0x3d8>)
 800e4ce:	f7f4 f8ad 	bl	800262c <ST7789_WriteString>
	ST7789_WriteString(x+2, y+row_size*(rows/2)+35, "   ", Font_16x26, color, bgcolor);
 800e4d2:	89fb      	ldrh	r3, [r7, #14]
 800e4d4:	3302      	adds	r3, #2
 800e4d6:	b298      	uxth	r0, r3
 800e4d8:	7efb      	ldrb	r3, [r7, #27]
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	897b      	ldrh	r3, [r7, #10]
 800e4de:	085b      	lsrs	r3, r3, #1
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	fb12 f303 	smulbb	r3, r2, r3
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	89bb      	ldrh	r3, [r7, #12]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	3323      	adds	r3, #35	@ 0x23
 800e4f0:	b299      	uxth	r1, r3
 800e4f2:	4b46      	ldr	r3, [pc, #280]	@ (800e60c <Draw_resultTable+0x3d4>)
 800e4f4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e4f6:	9202      	str	r2, [sp, #8]
 800e4f8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e4fa:	9201      	str	r2, [sp, #4]
 800e4fc:	685a      	ldr	r2, [r3, #4]
 800e4fe:	9200      	str	r2, [sp, #0]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a44      	ldr	r2, [pc, #272]	@ (800e614 <Draw_resultTable+0x3dc>)
 800e504:	f7f4 f892 	bl	800262c <ST7789_WriteString>
	ST7789_WriteString(x+2, y+row_size*(rows/2)+35, text_buffer, Font_16x26, color, bgcolor);
 800e508:	89fb      	ldrh	r3, [r7, #14]
 800e50a:	3302      	adds	r3, #2
 800e50c:	b298      	uxth	r0, r3
 800e50e:	7efb      	ldrb	r3, [r7, #27]
 800e510:	b29a      	uxth	r2, r3
 800e512:	897b      	ldrh	r3, [r7, #10]
 800e514:	085b      	lsrs	r3, r3, #1
 800e516:	b29b      	uxth	r3, r3
 800e518:	fb12 f303 	smulbb	r3, r2, r3
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	89bb      	ldrh	r3, [r7, #12]
 800e520:	4413      	add	r3, r2
 800e522:	b29b      	uxth	r3, r3
 800e524:	3323      	adds	r3, #35	@ 0x23
 800e526:	b299      	uxth	r1, r3
 800e528:	4b38      	ldr	r3, [pc, #224]	@ (800e60c <Draw_resultTable+0x3d4>)
 800e52a:	f107 0414 	add.w	r4, r7, #20
 800e52e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e530:	9202      	str	r2, [sp, #8]
 800e532:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e534:	9201      	str	r2, [sp, #4]
 800e536:	685a      	ldr	r2, [r3, #4]
 800e538:	9200      	str	r2, [sp, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4622      	mov	r2, r4
 800e53e:	f7f4 f875 	bl	800262c <ST7789_WriteString>
	ST7789_WriteString(x, y+row_size*(rows/2)+62, "Page:", Font_11x18, color, bgcolor);
 800e542:	7efb      	ldrb	r3, [r7, #27]
 800e544:	b29a      	uxth	r2, r3
 800e546:	897b      	ldrh	r3, [r7, #10]
 800e548:	085b      	lsrs	r3, r3, #1
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	fb12 f303 	smulbb	r3, r2, r3
 800e550:	b29a      	uxth	r2, r3
 800e552:	89bb      	ldrh	r3, [r7, #12]
 800e554:	4413      	add	r3, r2
 800e556:	b29b      	uxth	r3, r3
 800e558:	333e      	adds	r3, #62	@ 0x3e
 800e55a:	b299      	uxth	r1, r3
 800e55c:	4b2a      	ldr	r3, [pc, #168]	@ (800e608 <Draw_resultTable+0x3d0>)
 800e55e:	89f8      	ldrh	r0, [r7, #14]
 800e560:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e562:	9202      	str	r2, [sp, #8]
 800e564:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e566:	9201      	str	r2, [sp, #4]
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	9200      	str	r2, [sp, #0]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a2a      	ldr	r2, [pc, #168]	@ (800e618 <Draw_resultTable+0x3e0>)
 800e570:	f7f4 f85c 	bl	800262c <ST7789_WriteString>
	sprintf(text_buffer,"%d",index/rows);
 800e574:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800e576:	897b      	ldrh	r3, [r7, #10]
 800e578:	fbb2 f3f3 	udiv	r3, r2, r3
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	461a      	mov	r2, r3
 800e580:	f107 0314 	add.w	r3, r7, #20
 800e584:	4925      	ldr	r1, [pc, #148]	@ (800e61c <Draw_resultTable+0x3e4>)
 800e586:	4618      	mov	r0, r3
 800e588:	f008 feb4 	bl	80172f4 <siprintf>
	ST7789_WriteString(x+2+50, y+row_size*(rows/2)+62, "   ", Font_11x18, color, bgcolor);
 800e58c:	89fb      	ldrh	r3, [r7, #14]
 800e58e:	3334      	adds	r3, #52	@ 0x34
 800e590:	b298      	uxth	r0, r3
 800e592:	7efb      	ldrb	r3, [r7, #27]
 800e594:	b29a      	uxth	r2, r3
 800e596:	897b      	ldrh	r3, [r7, #10]
 800e598:	085b      	lsrs	r3, r3, #1
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	fb12 f303 	smulbb	r3, r2, r3
 800e5a0:	b29a      	uxth	r2, r3
 800e5a2:	89bb      	ldrh	r3, [r7, #12]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	333e      	adds	r3, #62	@ 0x3e
 800e5aa:	b299      	uxth	r1, r3
 800e5ac:	4b16      	ldr	r3, [pc, #88]	@ (800e608 <Draw_resultTable+0x3d0>)
 800e5ae:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e5b0:	9202      	str	r2, [sp, #8]
 800e5b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e5b4:	9201      	str	r2, [sp, #4]
 800e5b6:	685a      	ldr	r2, [r3, #4]
 800e5b8:	9200      	str	r2, [sp, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a15      	ldr	r2, [pc, #84]	@ (800e614 <Draw_resultTable+0x3dc>)
 800e5be:	f7f4 f835 	bl	800262c <ST7789_WriteString>
	ST7789_WriteString(x+2+50, y+row_size*(rows/2)+62, text_buffer, Font_11x18, color, bgcolor);
 800e5c2:	89fb      	ldrh	r3, [r7, #14]
 800e5c4:	3334      	adds	r3, #52	@ 0x34
 800e5c6:	b298      	uxth	r0, r3
 800e5c8:	7efb      	ldrb	r3, [r7, #27]
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	897b      	ldrh	r3, [r7, #10]
 800e5ce:	085b      	lsrs	r3, r3, #1
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	fb12 f303 	smulbb	r3, r2, r3
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	89bb      	ldrh	r3, [r7, #12]
 800e5da:	4413      	add	r3, r2
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	333e      	adds	r3, #62	@ 0x3e
 800e5e0:	b299      	uxth	r1, r3
 800e5e2:	4b09      	ldr	r3, [pc, #36]	@ (800e608 <Draw_resultTable+0x3d0>)
 800e5e4:	f107 0414 	add.w	r4, r7, #20
 800e5e8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e5ea:	9202      	str	r2, [sp, #8]
 800e5ec:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e5ee:	9201      	str	r2, [sp, #4]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	9200      	str	r2, [sp, #0]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4622      	mov	r2, r4
 800e5f8:	f7f4 f818 	bl	800262c <ST7789_WriteString>
}
 800e5fc:	bf00      	nop
 800e5fe:	3724      	adds	r7, #36	@ 0x24
 800e600:	46bd      	mov	sp, r7
 800e602:	bd90      	pop	{r4, r7, pc}
 800e604:	0801b7d4 	.word	0x0801b7d4
 800e608:	20000008 	.word	0x20000008
 800e60c:	20000010 	.word	0x20000010
 800e610:	0801b7d8 	.word	0x0801b7d8
 800e614:	0801b7e0 	.word	0x0801b7e0
 800e618:	0801b7e4 	.word	0x0801b7e4
 800e61c:	0801b7ec 	.word	0x0801b7ec

0800e620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800e620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800e658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e624:	480d      	ldr	r0, [pc, #52]	@ (800e65c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e626:	490e      	ldr	r1, [pc, #56]	@ (800e660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e628:	4a0e      	ldr	r2, [pc, #56]	@ (800e664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e62a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e62c:	e002      	b.n	800e634 <LoopCopyDataInit>

0800e62e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e62e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e632:	3304      	adds	r3, #4

0800e634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e638:	d3f9      	bcc.n	800e62e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e63a:	4a0b      	ldr	r2, [pc, #44]	@ (800e668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e63c:	4c0b      	ldr	r4, [pc, #44]	@ (800e66c <LoopFillZerobss+0x26>)
  movs r3, #0
 800e63e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e640:	e001      	b.n	800e646 <LoopFillZerobss>

0800e642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e644:	3204      	adds	r2, #4

0800e646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e648:	d3fb      	bcc.n	800e642 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e64a:	f7ff fcad 	bl	800dfa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e64e:	f008 ff1d 	bl	801748c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e652:	f7fd fba1 	bl	800bd98 <main>
  bx  lr    
 800e656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800e658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e65c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e660:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 800e664:	0801e7e8 	.word	0x0801e7e8
  ldr r2, =_sbss
 800e668:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 800e66c:	20003640 	.word	0x20003640

0800e670 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e670:	e7fe      	b.n	800e670 <DMA1_Stream0_IRQHandler>
	...

0800e674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e678:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b4 <HAL_Init+0x40>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a0d      	ldr	r2, [pc, #52]	@ (800e6b4 <HAL_Init+0x40>)
 800e67e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e684:	4b0b      	ldr	r3, [pc, #44]	@ (800e6b4 <HAL_Init+0x40>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a0a      	ldr	r2, [pc, #40]	@ (800e6b4 <HAL_Init+0x40>)
 800e68a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e68e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e690:	4b08      	ldr	r3, [pc, #32]	@ (800e6b4 <HAL_Init+0x40>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a07      	ldr	r2, [pc, #28]	@ (800e6b4 <HAL_Init+0x40>)
 800e696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e69a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e69c:	2003      	movs	r0, #3
 800e69e:	f000 ff05 	bl	800f4ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e6a2:	200f      	movs	r0, #15
 800e6a4:	f000 f808 	bl	800e6b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e6a8:	f7ff fa0a 	bl	800dac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	40023c00 	.word	0x40023c00

0800e6b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e6c0:	4b12      	ldr	r3, [pc, #72]	@ (800e70c <HAL_InitTick+0x54>)
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	4b12      	ldr	r3, [pc, #72]	@ (800e710 <HAL_InitTick+0x58>)
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e6ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f000 ff1d 	bl	800f516 <HAL_SYSTICK_Config>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d001      	beq.n	800e6e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e00e      	b.n	800e704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2b0f      	cmp	r3, #15
 800e6ea:	d80a      	bhi.n	800e702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	6879      	ldr	r1, [r7, #4]
 800e6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f4:	f000 fee5 	bl	800f4c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e6f8:	4a06      	ldr	r2, [pc, #24]	@ (800e714 <HAL_InitTick+0x5c>)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e6fe:	2300      	movs	r3, #0
 800e700:	e000      	b.n	800e704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e702:	2301      	movs	r3, #1
}
 800e704:	4618      	mov	r0, r3
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	2000004c 	.word	0x2000004c
 800e710:	20000054 	.word	0x20000054
 800e714:	20000050 	.word	0x20000050

0800e718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e718:	b480      	push	{r7}
 800e71a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e71c:	4b06      	ldr	r3, [pc, #24]	@ (800e738 <HAL_IncTick+0x20>)
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	461a      	mov	r2, r3
 800e722:	4b06      	ldr	r3, [pc, #24]	@ (800e73c <HAL_IncTick+0x24>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4413      	add	r3, r2
 800e728:	4a04      	ldr	r2, [pc, #16]	@ (800e73c <HAL_IncTick+0x24>)
 800e72a:	6013      	str	r3, [r2, #0]
}
 800e72c:	bf00      	nop
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	20000054 	.word	0x20000054
 800e73c:	200019f4 	.word	0x200019f4

0800e740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e740:	b480      	push	{r7}
 800e742:	af00      	add	r7, sp, #0
  return uwTick;
 800e744:	4b03      	ldr	r3, [pc, #12]	@ (800e754 <HAL_GetTick+0x14>)
 800e746:	681b      	ldr	r3, [r3, #0]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	200019f4 	.word	0x200019f4

0800e758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e760:	f7ff ffee 	bl	800e740 <HAL_GetTick>
 800e764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e770:	d005      	beq.n	800e77e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e772:	4b0a      	ldr	r3, [pc, #40]	@ (800e79c <HAL_Delay+0x44>)
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	461a      	mov	r2, r3
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	4413      	add	r3, r2
 800e77c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e77e:	bf00      	nop
 800e780:	f7ff ffde 	bl	800e740 <HAL_GetTick>
 800e784:	4602      	mov	r2, r0
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d8f7      	bhi.n	800e780 <HAL_Delay+0x28>
  {
  }
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	20000054 	.word	0x20000054

0800e7a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d101      	bne.n	800e7b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e033      	b.n	800e81e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d109      	bne.n	800e7d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7ff f9a6 	bl	800db10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7d6:	f003 0310 	and.w	r3, r3, #16
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d118      	bne.n	800e810 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800e7e6:	f023 0302 	bic.w	r3, r3, #2
 800e7ea:	f043 0202 	orr.w	r2, r3, #2
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fc02 	bl	800effc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e802:	f023 0303 	bic.w	r3, r3, #3
 800e806:	f043 0201 	orr.w	r2, r3, #1
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	641a      	str	r2, [r3, #64]	@ 0x40
 800e80e:	e001      	b.n	800e814 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e810:	2301      	movs	r3, #1
 800e812:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800e82e:	2300      	movs	r3, #0
 800e830:	60fb      	str	r3, [r7, #12]
 800e832:	2300      	movs	r3, #0
 800e834:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f003 0302 	and.w	r3, r3, #2
 800e840:	2b02      	cmp	r3, #2
 800e842:	bf0c      	ite	eq
 800e844:	2301      	moveq	r3, #1
 800e846:	2300      	movne	r3, #0
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	f003 0320 	and.w	r3, r3, #32
 800e856:	2b20      	cmp	r3, #32
 800e858:	bf0c      	ite	eq
 800e85a:	2301      	moveq	r3, #1
 800e85c:	2300      	movne	r3, #0
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d049      	beq.n	800e8fc <HAL_ADC_IRQHandler+0xd6>
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d046      	beq.n	800e8fc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e872:	f003 0310 	and.w	r3, r3, #16
 800e876:	2b00      	cmp	r3, #0
 800e878:	d105      	bne.n	800e886 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e87e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e890:	2b00      	cmp	r3, #0
 800e892:	d12b      	bne.n	800e8ec <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d127      	bne.n	800e8ec <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d006      	beq.n	800e8b8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d119      	bne.n	800e8ec <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	685a      	ldr	r2, [r3, #4]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f022 0220 	bic.w	r2, r2, #32
 800e8c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d105      	bne.n	800e8ec <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8e4:	f043 0201 	orr.w	r2, r3, #1
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 f9cb 	bl	800ec88 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f06f 0212 	mvn.w	r2, #18
 800e8fa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0304 	and.w	r3, r3, #4
 800e906:	2b04      	cmp	r3, #4
 800e908:	bf0c      	ite	eq
 800e90a:	2301      	moveq	r3, #1
 800e90c:	2300      	movne	r3, #0
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e91c:	2b80      	cmp	r3, #128	@ 0x80
 800e91e:	bf0c      	ite	eq
 800e920:	2301      	moveq	r3, #1
 800e922:	2300      	movne	r3, #0
 800e924:	b2db      	uxtb	r3, r3
 800e926:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d057      	beq.n	800e9de <HAL_ADC_IRQHandler+0x1b8>
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d054      	beq.n	800e9de <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e938:	f003 0310 	and.w	r3, r3, #16
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d105      	bne.n	800e94c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e944:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e956:	2b00      	cmp	r3, #0
 800e958:	d139      	bne.n	800e9ce <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e960:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800e964:	2b00      	cmp	r3, #0
 800e966:	d006      	beq.n	800e976 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800e972:	2b00      	cmp	r3, #0
 800e974:	d12b      	bne.n	800e9ce <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800e980:	2b00      	cmp	r3, #0
 800e982:	d124      	bne.n	800e9ce <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d11d      	bne.n	800e9ce <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800e996:	2b00      	cmp	r3, #0
 800e998:	d119      	bne.n	800e9ce <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e9a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d105      	bne.n	800e9ce <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9c6:	f043 0201 	orr.w	r2, r3, #1
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 fc92 	bl	800f2f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f06f 020c 	mvn.w	r2, #12
 800e9dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	bf0c      	ite	eq
 800e9ec:	2301      	moveq	r3, #1
 800e9ee:	2300      	movne	r3, #0
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9fe:	2b40      	cmp	r3, #64	@ 0x40
 800ea00:	bf0c      	ite	eq
 800ea02:	2301      	moveq	r3, #1
 800ea04:	2300      	movne	r3, #0
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d017      	beq.n	800ea40 <HAL_ADC_IRQHandler+0x21a>
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d014      	beq.n	800ea40 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f003 0301 	and.w	r3, r3, #1
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d10d      	bne.n	800ea40 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 f93d 	bl	800ecb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f06f 0201 	mvn.w	r2, #1
 800ea3e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f003 0320 	and.w	r3, r3, #32
 800ea4a:	2b20      	cmp	r3, #32
 800ea4c:	bf0c      	ite	eq
 800ea4e:	2301      	moveq	r3, #1
 800ea50:	2300      	movne	r3, #0
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ea60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea64:	bf0c      	ite	eq
 800ea66:	2301      	moveq	r3, #1
 800ea68:	2300      	movne	r3, #0
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d015      	beq.n	800eaa0 <HAL_ADC_IRQHandler+0x27a>
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d012      	beq.n	800eaa0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea7e:	f043 0202 	orr.w	r2, r3, #2
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f06f 0220 	mvn.w	r2, #32
 800ea8e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 f917 	bl	800ecc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f06f 0220 	mvn.w	r2, #32
 800ea9e:	601a      	str	r2, [r3, #0]
  }
}
 800eaa0:	bf00      	nop
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b086      	sub	sp, #24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800eab4:	2300      	movs	r3, #0
 800eab6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d101      	bne.n	800eac6 <HAL_ADC_Start_DMA+0x1e>
 800eac2:	2302      	movs	r3, #2
 800eac4:	e0ce      	b.n	800ec64 <HAL_ADC_Start_DMA+0x1bc>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	f003 0301 	and.w	r3, r3, #1
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d018      	beq.n	800eb0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	689a      	ldr	r2, [r3, #8]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f042 0201 	orr.w	r2, r2, #1
 800eaea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800eaec:	4b5f      	ldr	r3, [pc, #380]	@ (800ec6c <HAL_ADC_Start_DMA+0x1c4>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4a5f      	ldr	r2, [pc, #380]	@ (800ec70 <HAL_ADC_Start_DMA+0x1c8>)
 800eaf2:	fba2 2303 	umull	r2, r3, r2, r3
 800eaf6:	0c9a      	lsrs	r2, r3, #18
 800eaf8:	4613      	mov	r3, r2
 800eafa:	005b      	lsls	r3, r3, #1
 800eafc:	4413      	add	r3, r2
 800eafe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800eb00:	e002      	b.n	800eb08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	3b01      	subs	r3, #1
 800eb06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d1f9      	bne.n	800eb02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb1c:	d107      	bne.n	800eb2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689a      	ldr	r2, [r3, #8]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800eb2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	f003 0301 	and.w	r3, r3, #1
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	f040 8086 	bne.w	800ec4a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb42:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800eb46:	f023 0301 	bic.w	r3, r3, #1
 800eb4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d007      	beq.n	800eb70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800eb68:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800eb78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb7c:	d106      	bne.n	800eb8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb82:	f023 0206 	bic.w	r2, r3, #6
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	645a      	str	r2, [r3, #68]	@ 0x44
 800eb8a:	e002      	b.n	800eb92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800eb9a:	4b36      	ldr	r3, [pc, #216]	@ (800ec74 <HAL_ADC_Start_DMA+0x1cc>)
 800eb9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eba2:	4a35      	ldr	r2, [pc, #212]	@ (800ec78 <HAL_ADC_Start_DMA+0x1d0>)
 800eba4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebaa:	4a34      	ldr	r2, [pc, #208]	@ (800ec7c <HAL_ADC_Start_DMA+0x1d4>)
 800ebac:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebb2:	4a33      	ldr	r2, [pc, #204]	@ (800ec80 <HAL_ADC_Start_DMA+0x1d8>)
 800ebb4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800ebbe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800ebce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	689a      	ldr	r2, [r3, #8]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ebde:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	334c      	adds	r3, #76	@ 0x4c
 800ebea:	4619      	mov	r1, r3
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f000 fd4c 	bl	800f68c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	f003 031f 	and.w	r3, r3, #31
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10f      	bne.n	800ec20 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d129      	bne.n	800ec62 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	689a      	ldr	r2, [r3, #8]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800ec1c:	609a      	str	r2, [r3, #8]
 800ec1e:	e020      	b.n	800ec62 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4a17      	ldr	r2, [pc, #92]	@ (800ec84 <HAL_ADC_Start_DMA+0x1dc>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d11b      	bne.n	800ec62 <HAL_ADC_Start_DMA+0x1ba>
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d114      	bne.n	800ec62 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	689a      	ldr	r2, [r3, #8]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800ec46:	609a      	str	r2, [r3, #8]
 800ec48:	e00b      	b.n	800ec62 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec4e:	f043 0210 	orr.w	r2, r3, #16
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec5a:	f043 0201 	orr.w	r2, r3, #1
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3718      	adds	r7, #24
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	2000004c 	.word	0x2000004c
 800ec70:	431bde83 	.word	0x431bde83
 800ec74:	40012300 	.word	0x40012300
 800ec78:	0800f1f5 	.word	0x0800f1f5
 800ec7c:	0800f2af 	.word	0x0800f2af
 800ec80:	0800f2cb 	.word	0x0800f2cb
 800ec84:	40012000 	.word	0x40012000

0800ec88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800eca4:	bf00      	nop
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800eccc:	bf00      	nop
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ece2:	2300      	movs	r3, #0
 800ece4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d101      	bne.n	800ecf4 <HAL_ADC_ConfigChannel+0x1c>
 800ecf0:	2302      	movs	r3, #2
 800ecf2:	e113      	b.n	800ef1c <HAL_ADC_ConfigChannel+0x244>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2b09      	cmp	r3, #9
 800ed02:	d925      	bls.n	800ed50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	68d9      	ldr	r1, [r3, #12]
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	461a      	mov	r2, r3
 800ed12:	4613      	mov	r3, r2
 800ed14:	005b      	lsls	r3, r3, #1
 800ed16:	4413      	add	r3, r2
 800ed18:	3b1e      	subs	r3, #30
 800ed1a:	2207      	movs	r2, #7
 800ed1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed20:	43da      	mvns	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	400a      	ands	r2, r1
 800ed28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	68d9      	ldr	r1, [r3, #12]
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	689a      	ldr	r2, [r3, #8]
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	005b      	lsls	r3, r3, #1
 800ed40:	4403      	add	r3, r0
 800ed42:	3b1e      	subs	r3, #30
 800ed44:	409a      	lsls	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	430a      	orrs	r2, r1
 800ed4c:	60da      	str	r2, [r3, #12]
 800ed4e:	e022      	b.n	800ed96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6919      	ldr	r1, [r3, #16]
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	4613      	mov	r3, r2
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	4413      	add	r3, r2
 800ed64:	2207      	movs	r2, #7
 800ed66:	fa02 f303 	lsl.w	r3, r2, r3
 800ed6a:	43da      	mvns	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	400a      	ands	r2, r1
 800ed72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6919      	ldr	r1, [r3, #16]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	689a      	ldr	r2, [r3, #8]
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	4618      	mov	r0, r3
 800ed86:	4603      	mov	r3, r0
 800ed88:	005b      	lsls	r3, r3, #1
 800ed8a:	4403      	add	r3, r0
 800ed8c:	409a      	lsls	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	430a      	orrs	r2, r1
 800ed94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	2b06      	cmp	r3, #6
 800ed9c:	d824      	bhi.n	800ede8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	685a      	ldr	r2, [r3, #4]
 800eda8:	4613      	mov	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	4413      	add	r3, r2
 800edae:	3b05      	subs	r3, #5
 800edb0:	221f      	movs	r2, #31
 800edb2:	fa02 f303 	lsl.w	r3, r2, r3
 800edb6:	43da      	mvns	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	400a      	ands	r2, r1
 800edbe:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	b29b      	uxth	r3, r3
 800edcc:	4618      	mov	r0, r3
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	4613      	mov	r3, r2
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	4413      	add	r3, r2
 800edd8:	3b05      	subs	r3, #5
 800edda:	fa00 f203 	lsl.w	r2, r0, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	430a      	orrs	r2, r1
 800ede4:	635a      	str	r2, [r3, #52]	@ 0x34
 800ede6:	e04c      	b.n	800ee82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	2b0c      	cmp	r3, #12
 800edee:	d824      	bhi.n	800ee3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	685a      	ldr	r2, [r3, #4]
 800edfa:	4613      	mov	r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4413      	add	r3, r2
 800ee00:	3b23      	subs	r3, #35	@ 0x23
 800ee02:	221f      	movs	r2, #31
 800ee04:	fa02 f303 	lsl.w	r3, r2, r3
 800ee08:	43da      	mvns	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	400a      	ands	r2, r1
 800ee10:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4618      	mov	r0, r3
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	685a      	ldr	r2, [r3, #4]
 800ee24:	4613      	mov	r3, r2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4413      	add	r3, r2
 800ee2a:	3b23      	subs	r3, #35	@ 0x23
 800ee2c:	fa00 f203 	lsl.w	r2, r0, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	631a      	str	r2, [r3, #48]	@ 0x30
 800ee38:	e023      	b.n	800ee82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	685a      	ldr	r2, [r3, #4]
 800ee44:	4613      	mov	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	4413      	add	r3, r2
 800ee4a:	3b41      	subs	r3, #65	@ 0x41
 800ee4c:	221f      	movs	r2, #31
 800ee4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee52:	43da      	mvns	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	400a      	ands	r2, r1
 800ee5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	4618      	mov	r0, r3
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	685a      	ldr	r2, [r3, #4]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	3b41      	subs	r3, #65	@ 0x41
 800ee76:	fa00 f203 	lsl.w	r2, r0, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	430a      	orrs	r2, r1
 800ee80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ee82:	4b29      	ldr	r3, [pc, #164]	@ (800ef28 <HAL_ADC_ConfigChannel+0x250>)
 800ee84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a28      	ldr	r2, [pc, #160]	@ (800ef2c <HAL_ADC_ConfigChannel+0x254>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d10f      	bne.n	800eeb0 <HAL_ADC_ConfigChannel+0x1d8>
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b12      	cmp	r3, #18
 800ee96:	d10b      	bne.n	800eeb0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a1d      	ldr	r2, [pc, #116]	@ (800ef2c <HAL_ADC_ConfigChannel+0x254>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d12b      	bne.n	800ef12 <HAL_ADC_ConfigChannel+0x23a>
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a1c      	ldr	r2, [pc, #112]	@ (800ef30 <HAL_ADC_ConfigChannel+0x258>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d003      	beq.n	800eecc <HAL_ADC_ConfigChannel+0x1f4>
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b11      	cmp	r3, #17
 800eeca:	d122      	bne.n	800ef12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a11      	ldr	r2, [pc, #68]	@ (800ef30 <HAL_ADC_ConfigChannel+0x258>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d111      	bne.n	800ef12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800eeee:	4b11      	ldr	r3, [pc, #68]	@ (800ef34 <HAL_ADC_ConfigChannel+0x25c>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a11      	ldr	r2, [pc, #68]	@ (800ef38 <HAL_ADC_ConfigChannel+0x260>)
 800eef4:	fba2 2303 	umull	r2, r3, r2, r3
 800eef8:	0c9a      	lsrs	r2, r3, #18
 800eefa:	4613      	mov	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	4413      	add	r3, r2
 800ef00:	005b      	lsls	r3, r3, #1
 800ef02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ef04:	e002      	b.n	800ef0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1f9      	bne.n	800ef06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3714      	adds	r7, #20
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	40012300 	.word	0x40012300
 800ef2c:	40012000 	.word	0x40012000
 800ef30:	10000012 	.word	0x10000012
 800ef34:	2000004c 	.word	0x2000004c
 800ef38:	431bde83 	.word	0x431bde83

0800ef3c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d101      	bne.n	800ef54 <HAL_ADC_AnalogWDGConfig+0x18>
 800ef50:	2302      	movs	r3, #2
 800ef52:	e04d      	b.n	800eff0 <HAL_ADC_AnalogWDGConfig+0xb4>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	7c1b      	ldrb	r3, [r3, #16]
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d108      	bne.n	800ef76 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	685a      	ldr	r2, [r3, #4]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef72:	605a      	str	r2, [r3, #4]
 800ef74:	e007      	b.n	800ef86 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	685a      	ldr	r2, [r3, #4]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ef84:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	6812      	ldr	r2, [r2, #0]
 800ef90:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ef94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ef98:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	6859      	ldr	r1, [r3, #4]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	430a      	orrs	r2, r1
 800efaa:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	6852      	ldr	r2, [r2, #4]
 800efb4:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	6892      	ldr	r2, [r2, #8]
 800efbe:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	685a      	ldr	r2, [r3, #4]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f022 021f 	bic.w	r2, r2, #31
 800efce:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	685a      	ldr	r2, [r3, #4]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	b29b      	uxth	r3, r3
 800efdc:	4619      	mov	r1, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	430a      	orrs	r2, r1
 800efe4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800effc:	b480      	push	{r7}
 800effe:	b085      	sub	sp, #20
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f004:	4b79      	ldr	r3, [pc, #484]	@ (800f1ec <ADC_Init+0x1f0>)
 800f006:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	685a      	ldr	r2, [r3, #4]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	431a      	orrs	r2, r3
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	685a      	ldr	r2, [r3, #4]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6859      	ldr	r1, [r3, #4]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	021a      	lsls	r2, r3, #8
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	430a      	orrs	r2, r1
 800f044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	685a      	ldr	r2, [r3, #4]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800f054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	6859      	ldr	r1, [r3, #4]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	689a      	ldr	r2, [r3, #8]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	430a      	orrs	r2, r1
 800f066:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	689a      	ldr	r2, [r3, #8]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6899      	ldr	r1, [r3, #8]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	68da      	ldr	r2, [r3, #12]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	430a      	orrs	r2, r1
 800f088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f08e:	4a58      	ldr	r2, [pc, #352]	@ (800f1f0 <ADC_Init+0x1f4>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d022      	beq.n	800f0da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	689a      	ldr	r2, [r3, #8]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800f0a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	6899      	ldr	r1, [r3, #8]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	430a      	orrs	r2, r1
 800f0b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	689a      	ldr	r2, [r3, #8]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800f0c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6899      	ldr	r1, [r3, #8]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	430a      	orrs	r2, r1
 800f0d6:	609a      	str	r2, [r3, #8]
 800f0d8:	e00f      	b.n	800f0fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	689a      	ldr	r2, [r3, #8]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800f0e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	689a      	ldr	r2, [r3, #8]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800f0f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	689a      	ldr	r2, [r3, #8]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f022 0202 	bic.w	r2, r2, #2
 800f108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	6899      	ldr	r1, [r3, #8]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	7e1b      	ldrb	r3, [r3, #24]
 800f114:	005a      	lsls	r2, r3, #1
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	430a      	orrs	r2, r1
 800f11c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d01b      	beq.n	800f160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	685a      	ldr	r2, [r3, #4]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f136:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	685a      	ldr	r2, [r3, #4]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800f146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	6859      	ldr	r1, [r3, #4]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f152:	3b01      	subs	r3, #1
 800f154:	035a      	lsls	r2, r3, #13
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	430a      	orrs	r2, r1
 800f15c:	605a      	str	r2, [r3, #4]
 800f15e:	e007      	b.n	800f170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	685a      	ldr	r2, [r3, #4]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f16e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800f17e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	69db      	ldr	r3, [r3, #28]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	051a      	lsls	r2, r3, #20
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	430a      	orrs	r2, r1
 800f194:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	689a      	ldr	r2, [r3, #8]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800f1a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	6899      	ldr	r1, [r3, #8]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1b2:	025a      	lsls	r2, r3, #9
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	430a      	orrs	r2, r1
 800f1ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	689a      	ldr	r2, [r3, #8]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	6899      	ldr	r1, [r3, #8]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	695b      	ldr	r3, [r3, #20]
 800f1d6:	029a      	lsls	r2, r3, #10
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	430a      	orrs	r2, r1
 800f1de:	609a      	str	r2, [r3, #8]
}
 800f1e0:	bf00      	nop
 800f1e2:	3714      	adds	r7, #20
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr
 800f1ec:	40012300 	.word	0x40012300
 800f1f0:	0f000001 	.word	0x0f000001

0800f1f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f200:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f206:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d13c      	bne.n	800f288 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f212:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d12b      	bne.n	800f280 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d127      	bne.n	800f280 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f236:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d006      	beq.n	800f24c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d119      	bne.n	800f280 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	685a      	ldr	r2, [r3, #4]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f022 0220 	bic.w	r2, r2, #32
 800f25a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f26c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f270:	2b00      	cmp	r3, #0
 800f272:	d105      	bne.n	800f280 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f278:	f043 0201 	orr.w	r2, r3, #1
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7ff fd01 	bl	800ec88 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800f286:	e00e      	b.n	800f2a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f28c:	f003 0310 	and.w	r3, r3, #16
 800f290:	2b00      	cmp	r3, #0
 800f292:	d003      	beq.n	800f29c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f7ff fd15 	bl	800ecc4 <HAL_ADC_ErrorCallback>
}
 800f29a:	e004      	b.n	800f2a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	4798      	blx	r3
}
 800f2a6:	bf00      	nop
 800f2a8:	3710      	adds	r7, #16
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b084      	sub	sp, #16
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f7ff fced 	bl	800ec9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f2c2:	bf00      	nop
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b084      	sub	sp, #16
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2240      	movs	r2, #64	@ 0x40
 800f2dc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2e2:	f043 0204 	orr.w	r2, r3, #4
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7ff fcea 	bl	800ecc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f2f0:	bf00      	nop
 800f2f2:	3710      	adds	r7, #16
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f003 0307 	and.w	r3, r3, #7
 800f31a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f31c:	4b0c      	ldr	r3, [pc, #48]	@ (800f350 <__NVIC_SetPriorityGrouping+0x44>)
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f322:	68ba      	ldr	r2, [r7, #8]
 800f324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800f328:	4013      	ands	r3, r2
 800f32a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800f338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f33c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f33e:	4a04      	ldr	r2, [pc, #16]	@ (800f350 <__NVIC_SetPriorityGrouping+0x44>)
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	60d3      	str	r3, [r2, #12]
}
 800f344:	bf00      	nop
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	e000ed00 	.word	0xe000ed00

0800f354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f354:	b480      	push	{r7}
 800f356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f358:	4b04      	ldr	r3, [pc, #16]	@ (800f36c <__NVIC_GetPriorityGrouping+0x18>)
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	0a1b      	lsrs	r3, r3, #8
 800f35e:	f003 0307 	and.w	r3, r3, #7
}
 800f362:	4618      	mov	r0, r3
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	e000ed00 	.word	0xe000ed00

0800f370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	4603      	mov	r3, r0
 800f378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	db0b      	blt.n	800f39a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f382:	79fb      	ldrb	r3, [r7, #7]
 800f384:	f003 021f 	and.w	r2, r3, #31
 800f388:	4907      	ldr	r1, [pc, #28]	@ (800f3a8 <__NVIC_EnableIRQ+0x38>)
 800f38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f38e:	095b      	lsrs	r3, r3, #5
 800f390:	2001      	movs	r0, #1
 800f392:	fa00 f202 	lsl.w	r2, r0, r2
 800f396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f39a:	bf00      	nop
 800f39c:	370c      	adds	r7, #12
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	e000e100 	.word	0xe000e100

0800f3ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	6039      	str	r1, [r7, #0]
 800f3b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f3b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	db0a      	blt.n	800f3d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	b2da      	uxtb	r2, r3
 800f3c4:	490c      	ldr	r1, [pc, #48]	@ (800f3f8 <__NVIC_SetPriority+0x4c>)
 800f3c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3ca:	0112      	lsls	r2, r2, #4
 800f3cc:	b2d2      	uxtb	r2, r2
 800f3ce:	440b      	add	r3, r1
 800f3d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f3d4:	e00a      	b.n	800f3ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	b2da      	uxtb	r2, r3
 800f3da:	4908      	ldr	r1, [pc, #32]	@ (800f3fc <__NVIC_SetPriority+0x50>)
 800f3dc:	79fb      	ldrb	r3, [r7, #7]
 800f3de:	f003 030f 	and.w	r3, r3, #15
 800f3e2:	3b04      	subs	r3, #4
 800f3e4:	0112      	lsls	r2, r2, #4
 800f3e6:	b2d2      	uxtb	r2, r2
 800f3e8:	440b      	add	r3, r1
 800f3ea:	761a      	strb	r2, [r3, #24]
}
 800f3ec:	bf00      	nop
 800f3ee:	370c      	adds	r7, #12
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr
 800f3f8:	e000e100 	.word	0xe000e100
 800f3fc:	e000ed00 	.word	0xe000ed00

0800f400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f400:	b480      	push	{r7}
 800f402:	b089      	sub	sp, #36	@ 0x24
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f003 0307 	and.w	r3, r3, #7
 800f412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	f1c3 0307 	rsb	r3, r3, #7
 800f41a:	2b04      	cmp	r3, #4
 800f41c:	bf28      	it	cs
 800f41e:	2304      	movcs	r3, #4
 800f420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	3304      	adds	r3, #4
 800f426:	2b06      	cmp	r3, #6
 800f428:	d902      	bls.n	800f430 <NVIC_EncodePriority+0x30>
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	3b03      	subs	r3, #3
 800f42e:	e000      	b.n	800f432 <NVIC_EncodePriority+0x32>
 800f430:	2300      	movs	r3, #0
 800f432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f434:	f04f 32ff 	mov.w	r2, #4294967295
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	fa02 f303 	lsl.w	r3, r2, r3
 800f43e:	43da      	mvns	r2, r3
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	401a      	ands	r2, r3
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f448:	f04f 31ff 	mov.w	r1, #4294967295
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	fa01 f303 	lsl.w	r3, r1, r3
 800f452:	43d9      	mvns	r1, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f458:	4313      	orrs	r3, r2
         );
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3724      	adds	r7, #36	@ 0x24
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr
	...

0800f468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	3b01      	subs	r3, #1
 800f474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f478:	d301      	bcc.n	800f47e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f47a:	2301      	movs	r3, #1
 800f47c:	e00f      	b.n	800f49e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f47e:	4a0a      	ldr	r2, [pc, #40]	@ (800f4a8 <SysTick_Config+0x40>)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	3b01      	subs	r3, #1
 800f484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f486:	210f      	movs	r1, #15
 800f488:	f04f 30ff 	mov.w	r0, #4294967295
 800f48c:	f7ff ff8e 	bl	800f3ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f490:	4b05      	ldr	r3, [pc, #20]	@ (800f4a8 <SysTick_Config+0x40>)
 800f492:	2200      	movs	r2, #0
 800f494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f496:	4b04      	ldr	r3, [pc, #16]	@ (800f4a8 <SysTick_Config+0x40>)
 800f498:	2207      	movs	r2, #7
 800f49a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	e000e010 	.word	0xe000e010

0800f4ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7ff ff29 	bl	800f30c <__NVIC_SetPriorityGrouping>
}
 800f4ba:	bf00      	nop
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b086      	sub	sp, #24
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	607a      	str	r2, [r7, #4]
 800f4ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f4d4:	f7ff ff3e 	bl	800f354 <__NVIC_GetPriorityGrouping>
 800f4d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	68b9      	ldr	r1, [r7, #8]
 800f4de:	6978      	ldr	r0, [r7, #20]
 800f4e0:	f7ff ff8e 	bl	800f400 <NVIC_EncodePriority>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff ff5d 	bl	800f3ac <__NVIC_SetPriority>
}
 800f4f2:	bf00      	nop
 800f4f4:	3718      	adds	r7, #24
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	4603      	mov	r3, r0
 800f502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f508:	4618      	mov	r0, r3
 800f50a:	f7ff ff31 	bl	800f370 <__NVIC_EnableIRQ>
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7ff ffa2 	bl	800f468 <SysTick_Config>
 800f524:	4603      	mov	r3, r0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
	...

0800f530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b086      	sub	sp, #24
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f538:	2300      	movs	r3, #0
 800f53a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f53c:	f7ff f900 	bl	800e740 <HAL_GetTick>
 800f540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d101      	bne.n	800f54c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f548:	2301      	movs	r3, #1
 800f54a:	e099      	b.n	800f680 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2202      	movs	r2, #2
 800f550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f022 0201 	bic.w	r2, r2, #1
 800f56a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f56c:	e00f      	b.n	800f58e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f56e:	f7ff f8e7 	bl	800e740 <HAL_GetTick>
 800f572:	4602      	mov	r2, r0
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	1ad3      	subs	r3, r2, r3
 800f578:	2b05      	cmp	r3, #5
 800f57a:	d908      	bls.n	800f58e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2220      	movs	r2, #32
 800f580:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2203      	movs	r2, #3
 800f586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800f58a:	2303      	movs	r3, #3
 800f58c:	e078      	b.n	800f680 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d1e8      	bne.n	800f56e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f5a4:	697a      	ldr	r2, [r7, #20]
 800f5a6:	4b38      	ldr	r3, [pc, #224]	@ (800f688 <HAL_DMA_Init+0x158>)
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f5ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	691b      	ldr	r3, [r3, #16]
 800f5c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6a1b      	ldr	r3, [r3, #32]
 800f5d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f5da:	697a      	ldr	r2, [r7, #20]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5e4:	2b04      	cmp	r3, #4
 800f5e6:	d107      	bne.n	800f5f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	697a      	ldr	r2, [r7, #20]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	697a      	ldr	r2, [r7, #20]
 800f5fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	695b      	ldr	r3, [r3, #20]
 800f606:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	f023 0307 	bic.w	r3, r3, #7
 800f60e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	4313      	orrs	r3, r2
 800f618:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f61e:	2b04      	cmp	r3, #4
 800f620:	d117      	bne.n	800f652 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f626:	697a      	ldr	r2, [r7, #20]
 800f628:	4313      	orrs	r3, r2
 800f62a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f630:	2b00      	cmp	r3, #0
 800f632:	d00e      	beq.n	800f652 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 fa6f 	bl	800fb18 <DMA_CheckFifoParam>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d008      	beq.n	800f652 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2240      	movs	r2, #64	@ 0x40
 800f644:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2201      	movs	r2, #1
 800f64a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800f64e:	2301      	movs	r3, #1
 800f650:	e016      	b.n	800f680 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 fa26 	bl	800faac <DMA_CalcBaseAndBitshift>
 800f660:	4603      	mov	r3, r0
 800f662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f668:	223f      	movs	r2, #63	@ 0x3f
 800f66a:	409a      	lsls	r2, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2201      	movs	r2, #1
 800f67a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800f67e:	2300      	movs	r3, #0
}
 800f680:	4618      	mov	r0, r3
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	f010803f 	.word	0xf010803f

0800f68c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b086      	sub	sp, #24
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
 800f698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f69a:	2300      	movs	r3, #0
 800f69c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d101      	bne.n	800f6b2 <HAL_DMA_Start_IT+0x26>
 800f6ae:	2302      	movs	r3, #2
 800f6b0:	e040      	b.n	800f734 <HAL_DMA_Start_IT+0xa8>
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d12f      	bne.n	800f726 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	68b9      	ldr	r1, [r7, #8]
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f000 f9b8 	bl	800fa50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f6e4:	223f      	movs	r2, #63	@ 0x3f
 800f6e6:	409a      	lsls	r2, r3
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f042 0216 	orr.w	r2, r2, #22
 800f6fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f700:	2b00      	cmp	r3, #0
 800f702:	d007      	beq.n	800f714 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f042 0208 	orr.w	r2, r2, #8
 800f712:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	681a      	ldr	r2, [r3, #0]
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f042 0201 	orr.w	r2, r2, #1
 800f722:	601a      	str	r2, [r3, #0]
 800f724:	e005      	b.n	800f732 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2200      	movs	r2, #0
 800f72a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f72e:	2302      	movs	r3, #2
 800f730:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f732:	7dfb      	ldrb	r3, [r7, #23]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3718      	adds	r7, #24
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b086      	sub	sp, #24
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f744:	2300      	movs	r3, #0
 800f746:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f748:	4b8e      	ldr	r3, [pc, #568]	@ (800f984 <HAL_DMA_IRQHandler+0x248>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a8e      	ldr	r2, [pc, #568]	@ (800f988 <HAL_DMA_IRQHandler+0x24c>)
 800f74e:	fba2 2303 	umull	r2, r3, r2, r3
 800f752:	0a9b      	lsrs	r3, r3, #10
 800f754:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f75a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f766:	2208      	movs	r2, #8
 800f768:	409a      	lsls	r2, r3
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	4013      	ands	r3, r2
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d01a      	beq.n	800f7a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f003 0304 	and.w	r3, r3, #4
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d013      	beq.n	800f7a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f022 0204 	bic.w	r2, r2, #4
 800f78e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f794:	2208      	movs	r2, #8
 800f796:	409a      	lsls	r2, r3
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7a0:	f043 0201 	orr.w	r2, r3, #1
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	409a      	lsls	r2, r3
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	4013      	ands	r3, r2
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d012      	beq.n	800f7de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	695b      	ldr	r3, [r3, #20]
 800f7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d00b      	beq.n	800f7de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	409a      	lsls	r2, r3
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7d6:	f043 0202 	orr.w	r2, r3, #2
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7e2:	2204      	movs	r2, #4
 800f7e4:	409a      	lsls	r2, r3
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	4013      	ands	r3, r2
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d012      	beq.n	800f814 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f003 0302 	and.w	r3, r3, #2
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00b      	beq.n	800f814 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f800:	2204      	movs	r2, #4
 800f802:	409a      	lsls	r2, r3
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f80c:	f043 0204 	orr.w	r2, r3, #4
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f818:	2210      	movs	r2, #16
 800f81a:	409a      	lsls	r2, r3
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	4013      	ands	r3, r2
 800f820:	2b00      	cmp	r3, #0
 800f822:	d043      	beq.n	800f8ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f003 0308 	and.w	r3, r3, #8
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d03c      	beq.n	800f8ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f836:	2210      	movs	r2, #16
 800f838:	409a      	lsls	r2, r3
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d018      	beq.n	800f87e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f856:	2b00      	cmp	r3, #0
 800f858:	d108      	bne.n	800f86c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d024      	beq.n	800f8ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	4798      	blx	r3
 800f86a:	e01f      	b.n	800f8ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f870:	2b00      	cmp	r3, #0
 800f872:	d01b      	beq.n	800f8ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	4798      	blx	r3
 800f87c:	e016      	b.n	800f8ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d107      	bne.n	800f89c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f022 0208 	bic.w	r2, r2, #8
 800f89a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d003      	beq.n	800f8ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f8b0:	2220      	movs	r2, #32
 800f8b2:	409a      	lsls	r2, r3
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	4013      	ands	r3, r2
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f000 808f 	beq.w	800f9dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f003 0310 	and.w	r3, r3, #16
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	f000 8087 	beq.w	800f9dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f8d2:	2220      	movs	r2, #32
 800f8d4:	409a      	lsls	r2, r3
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	2b05      	cmp	r3, #5
 800f8e4:	d136      	bne.n	800f954 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f022 0216 	bic.w	r2, r2, #22
 800f8f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	695a      	ldr	r2, [r3, #20]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f904:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d103      	bne.n	800f916 <HAL_DMA_IRQHandler+0x1da>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f912:	2b00      	cmp	r3, #0
 800f914:	d007      	beq.n	800f926 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f022 0208 	bic.w	r2, r2, #8
 800f924:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f92a:	223f      	movs	r2, #63	@ 0x3f
 800f92c:	409a      	lsls	r2, r3
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2201      	movs	r2, #1
 800f936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f946:	2b00      	cmp	r3, #0
 800f948:	d07e      	beq.n	800fa48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	4798      	blx	r3
        }
        return;
 800f952:	e079      	b.n	800fa48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d01d      	beq.n	800f99e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d10d      	bne.n	800f98c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f974:	2b00      	cmp	r3, #0
 800f976:	d031      	beq.n	800f9dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	4798      	blx	r3
 800f980:	e02c      	b.n	800f9dc <HAL_DMA_IRQHandler+0x2a0>
 800f982:	bf00      	nop
 800f984:	2000004c 	.word	0x2000004c
 800f988:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f990:	2b00      	cmp	r3, #0
 800f992:	d023      	beq.n	800f9dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	4798      	blx	r3
 800f99c:	e01e      	b.n	800f9dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10f      	bne.n	800f9cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f022 0210 	bic.w	r2, r2, #16
 800f9ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2201      	movs	r2, #1
 800f9c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d003      	beq.n	800f9dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d032      	beq.n	800fa4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9e8:	f003 0301 	and.w	r3, r3, #1
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d022      	beq.n	800fa36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2205      	movs	r2, #5
 800f9f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	681a      	ldr	r2, [r3, #0]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f022 0201 	bic.w	r2, r2, #1
 800fa06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	60bb      	str	r3, [r7, #8]
 800fa0e:	697a      	ldr	r2, [r7, #20]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d307      	bcc.n	800fa24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f003 0301 	and.w	r3, r3, #1
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1f2      	bne.n	800fa08 <HAL_DMA_IRQHandler+0x2cc>
 800fa22:	e000      	b.n	800fa26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800fa24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2201      	movs	r2, #1
 800fa2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2200      	movs	r2, #0
 800fa32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d005      	beq.n	800fa4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	4798      	blx	r3
 800fa46:	e000      	b.n	800fa4a <HAL_DMA_IRQHandler+0x30e>
        return;
 800fa48:	bf00      	nop
    }
  }
}
 800fa4a:	3718      	adds	r7, #24
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b085      	sub	sp, #20
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
 800fa5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800fa6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	683a      	ldr	r2, [r7, #0]
 800fa74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	689b      	ldr	r3, [r3, #8]
 800fa7a:	2b40      	cmp	r3, #64	@ 0x40
 800fa7c:	d108      	bne.n	800fa90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	68ba      	ldr	r2, [r7, #8]
 800fa8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fa8e:	e007      	b.n	800faa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	60da      	str	r2, [r3, #12]
}
 800faa0:	bf00      	nop
 800faa2:	3714      	adds	r7, #20
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800faac:	b480      	push	{r7}
 800faae:	b085      	sub	sp, #20
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	3b10      	subs	r3, #16
 800fabc:	4a14      	ldr	r2, [pc, #80]	@ (800fb10 <DMA_CalcBaseAndBitshift+0x64>)
 800fabe:	fba2 2303 	umull	r2, r3, r2, r3
 800fac2:	091b      	lsrs	r3, r3, #4
 800fac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fac6:	4a13      	ldr	r2, [pc, #76]	@ (800fb14 <DMA_CalcBaseAndBitshift+0x68>)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	4413      	add	r3, r2
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	461a      	mov	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2b03      	cmp	r3, #3
 800fad8:	d909      	bls.n	800faee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800fae2:	f023 0303 	bic.w	r3, r3, #3
 800fae6:	1d1a      	adds	r2, r3, #4
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	659a      	str	r2, [r3, #88]	@ 0x58
 800faec:	e007      	b.n	800fafe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800faf6:	f023 0303 	bic.w	r3, r3, #3
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3714      	adds	r7, #20
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	aaaaaaab 	.word	0xaaaaaaab
 800fb14:	0801e05c 	.word	0x0801e05c

0800fb18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb20:	2300      	movs	r3, #0
 800fb22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d11f      	bne.n	800fb72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	2b03      	cmp	r3, #3
 800fb36:	d856      	bhi.n	800fbe6 <DMA_CheckFifoParam+0xce>
 800fb38:	a201      	add	r2, pc, #4	@ (adr r2, 800fb40 <DMA_CheckFifoParam+0x28>)
 800fb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb3e:	bf00      	nop
 800fb40:	0800fb51 	.word	0x0800fb51
 800fb44:	0800fb63 	.word	0x0800fb63
 800fb48:	0800fb51 	.word	0x0800fb51
 800fb4c:	0800fbe7 	.word	0x0800fbe7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d046      	beq.n	800fbea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb60:	e043      	b.n	800fbea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800fb6a:	d140      	bne.n	800fbee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb70:	e03d      	b.n	800fbee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	699b      	ldr	r3, [r3, #24]
 800fb76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb7a:	d121      	bne.n	800fbc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	2b03      	cmp	r3, #3
 800fb80:	d837      	bhi.n	800fbf2 <DMA_CheckFifoParam+0xda>
 800fb82:	a201      	add	r2, pc, #4	@ (adr r2, 800fb88 <DMA_CheckFifoParam+0x70>)
 800fb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb88:	0800fb99 	.word	0x0800fb99
 800fb8c:	0800fb9f 	.word	0x0800fb9f
 800fb90:	0800fb99 	.word	0x0800fb99
 800fb94:	0800fbb1 	.word	0x0800fbb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fb98:	2301      	movs	r3, #1
 800fb9a:	73fb      	strb	r3, [r7, #15]
      break;
 800fb9c:	e030      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d025      	beq.n	800fbf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fbaa:	2301      	movs	r3, #1
 800fbac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fbae:	e022      	b.n	800fbf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800fbb8:	d11f      	bne.n	800fbfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fbbe:	e01c      	b.n	800fbfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	2b02      	cmp	r3, #2
 800fbc4:	d903      	bls.n	800fbce <DMA_CheckFifoParam+0xb6>
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	2b03      	cmp	r3, #3
 800fbca:	d003      	beq.n	800fbd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fbcc:	e018      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	73fb      	strb	r3, [r7, #15]
      break;
 800fbd2:	e015      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d00e      	beq.n	800fbfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	73fb      	strb	r3, [r7, #15]
      break;
 800fbe4:	e00b      	b.n	800fbfe <DMA_CheckFifoParam+0xe6>
      break;
 800fbe6:	bf00      	nop
 800fbe8:	e00a      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
      break;
 800fbea:	bf00      	nop
 800fbec:	e008      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
      break;
 800fbee:	bf00      	nop
 800fbf0:	e006      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
      break;
 800fbf2:	bf00      	nop
 800fbf4:	e004      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
      break;
 800fbf6:	bf00      	nop
 800fbf8:	e002      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
      break;   
 800fbfa:	bf00      	nop
 800fbfc:	e000      	b.n	800fc00 <DMA_CheckFifoParam+0xe8>
      break;
 800fbfe:	bf00      	nop
    }
  } 
  
  return status; 
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3714      	adds	r7, #20
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop

0800fc10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b089      	sub	sp, #36	@ 0x24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fc22:	2300      	movs	r3, #0
 800fc24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fc26:	2300      	movs	r3, #0
 800fc28:	61fb      	str	r3, [r7, #28]
 800fc2a:	e159      	b.n	800fee0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	fa02 f303 	lsl.w	r3, r2, r3
 800fc34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	697a      	ldr	r2, [r7, #20]
 800fc3c:	4013      	ands	r3, r2
 800fc3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fc40:	693a      	ldr	r2, [r7, #16]
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	f040 8148 	bne.w	800feda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	f003 0303 	and.w	r3, r3, #3
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d005      	beq.n	800fc62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	d130      	bne.n	800fcc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	2203      	movs	r2, #3
 800fc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc72:	43db      	mvns	r3, r3
 800fc74:	69ba      	ldr	r2, [r7, #24]
 800fc76:	4013      	ands	r3, r2
 800fc78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	68da      	ldr	r2, [r3, #12]
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	fa02 f303 	lsl.w	r3, r2, r3
 800fc86:	69ba      	ldr	r2, [r7, #24]
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	69ba      	ldr	r2, [r7, #24]
 800fc90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fc98:	2201      	movs	r2, #1
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	fa02 f303 	lsl.w	r3, r2, r3
 800fca0:	43db      	mvns	r3, r3
 800fca2:	69ba      	ldr	r2, [r7, #24]
 800fca4:	4013      	ands	r3, r2
 800fca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	091b      	lsrs	r3, r3, #4
 800fcae:	f003 0201 	and.w	r2, r3, #1
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	fa02 f303 	lsl.w	r3, r2, r3
 800fcb8:	69ba      	ldr	r2, [r7, #24]
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	69ba      	ldr	r2, [r7, #24]
 800fcc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	f003 0303 	and.w	r3, r3, #3
 800fccc:	2b03      	cmp	r3, #3
 800fcce:	d017      	beq.n	800fd00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	005b      	lsls	r3, r3, #1
 800fcda:	2203      	movs	r2, #3
 800fcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800fce0:	43db      	mvns	r3, r3
 800fce2:	69ba      	ldr	r2, [r7, #24]
 800fce4:	4013      	ands	r3, r2
 800fce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	689a      	ldr	r2, [r3, #8]
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	005b      	lsls	r3, r3, #1
 800fcf0:	fa02 f303 	lsl.w	r3, r2, r3
 800fcf4:	69ba      	ldr	r2, [r7, #24]
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	69ba      	ldr	r2, [r7, #24]
 800fcfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	f003 0303 	and.w	r3, r3, #3
 800fd08:	2b02      	cmp	r3, #2
 800fd0a:	d123      	bne.n	800fd54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	08da      	lsrs	r2, r3, #3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3208      	adds	r2, #8
 800fd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	f003 0307 	and.w	r3, r3, #7
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	220f      	movs	r2, #15
 800fd24:	fa02 f303 	lsl.w	r3, r2, r3
 800fd28:	43db      	mvns	r3, r3
 800fd2a:	69ba      	ldr	r2, [r7, #24]
 800fd2c:	4013      	ands	r3, r2
 800fd2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	691a      	ldr	r2, [r3, #16]
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	f003 0307 	and.w	r3, r3, #7
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800fd40:	69ba      	ldr	r2, [r7, #24]
 800fd42:	4313      	orrs	r3, r2
 800fd44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	08da      	lsrs	r2, r3, #3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	3208      	adds	r2, #8
 800fd4e:	69b9      	ldr	r1, [r7, #24]
 800fd50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	005b      	lsls	r3, r3, #1
 800fd5e:	2203      	movs	r2, #3
 800fd60:	fa02 f303 	lsl.w	r3, r2, r3
 800fd64:	43db      	mvns	r3, r3
 800fd66:	69ba      	ldr	r2, [r7, #24]
 800fd68:	4013      	ands	r3, r2
 800fd6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	f003 0203 	and.w	r2, r3, #3
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	005b      	lsls	r3, r3, #1
 800fd78:	fa02 f303 	lsl.w	r3, r2, r3
 800fd7c:	69ba      	ldr	r2, [r7, #24]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	69ba      	ldr	r2, [r7, #24]
 800fd86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f000 80a2 	beq.w	800feda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fd96:	2300      	movs	r3, #0
 800fd98:	60fb      	str	r3, [r7, #12]
 800fd9a:	4b57      	ldr	r3, [pc, #348]	@ (800fef8 <HAL_GPIO_Init+0x2e8>)
 800fd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd9e:	4a56      	ldr	r2, [pc, #344]	@ (800fef8 <HAL_GPIO_Init+0x2e8>)
 800fda0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fda4:	6453      	str	r3, [r2, #68]	@ 0x44
 800fda6:	4b54      	ldr	r3, [pc, #336]	@ (800fef8 <HAL_GPIO_Init+0x2e8>)
 800fda8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fdae:	60fb      	str	r3, [r7, #12]
 800fdb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800fdb2:	4a52      	ldr	r2, [pc, #328]	@ (800fefc <HAL_GPIO_Init+0x2ec>)
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	089b      	lsrs	r3, r3, #2
 800fdb8:	3302      	adds	r3, #2
 800fdba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	f003 0303 	and.w	r3, r3, #3
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	220f      	movs	r2, #15
 800fdca:	fa02 f303 	lsl.w	r3, r2, r3
 800fdce:	43db      	mvns	r3, r3
 800fdd0:	69ba      	ldr	r2, [r7, #24]
 800fdd2:	4013      	ands	r3, r2
 800fdd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4a49      	ldr	r2, [pc, #292]	@ (800ff00 <HAL_GPIO_Init+0x2f0>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d019      	beq.n	800fe12 <HAL_GPIO_Init+0x202>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4a48      	ldr	r2, [pc, #288]	@ (800ff04 <HAL_GPIO_Init+0x2f4>)
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d013      	beq.n	800fe0e <HAL_GPIO_Init+0x1fe>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4a47      	ldr	r2, [pc, #284]	@ (800ff08 <HAL_GPIO_Init+0x2f8>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d00d      	beq.n	800fe0a <HAL_GPIO_Init+0x1fa>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4a46      	ldr	r2, [pc, #280]	@ (800ff0c <HAL_GPIO_Init+0x2fc>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d007      	beq.n	800fe06 <HAL_GPIO_Init+0x1f6>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	4a45      	ldr	r2, [pc, #276]	@ (800ff10 <HAL_GPIO_Init+0x300>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d101      	bne.n	800fe02 <HAL_GPIO_Init+0x1f2>
 800fdfe:	2304      	movs	r3, #4
 800fe00:	e008      	b.n	800fe14 <HAL_GPIO_Init+0x204>
 800fe02:	2307      	movs	r3, #7
 800fe04:	e006      	b.n	800fe14 <HAL_GPIO_Init+0x204>
 800fe06:	2303      	movs	r3, #3
 800fe08:	e004      	b.n	800fe14 <HAL_GPIO_Init+0x204>
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	e002      	b.n	800fe14 <HAL_GPIO_Init+0x204>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e000      	b.n	800fe14 <HAL_GPIO_Init+0x204>
 800fe12:	2300      	movs	r3, #0
 800fe14:	69fa      	ldr	r2, [r7, #28]
 800fe16:	f002 0203 	and.w	r2, r2, #3
 800fe1a:	0092      	lsls	r2, r2, #2
 800fe1c:	4093      	lsls	r3, r2
 800fe1e:	69ba      	ldr	r2, [r7, #24]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fe24:	4935      	ldr	r1, [pc, #212]	@ (800fefc <HAL_GPIO_Init+0x2ec>)
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	089b      	lsrs	r3, r3, #2
 800fe2a:	3302      	adds	r3, #2
 800fe2c:	69ba      	ldr	r2, [r7, #24]
 800fe2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fe32:	4b38      	ldr	r3, [pc, #224]	@ (800ff14 <HAL_GPIO_Init+0x304>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	43db      	mvns	r3, r3
 800fe3c:	69ba      	ldr	r2, [r7, #24]
 800fe3e:	4013      	ands	r3, r2
 800fe40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d003      	beq.n	800fe56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800fe4e:	69ba      	ldr	r2, [r7, #24]
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	4313      	orrs	r3, r2
 800fe54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fe56:	4a2f      	ldr	r2, [pc, #188]	@ (800ff14 <HAL_GPIO_Init+0x304>)
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800fe5c:	4b2d      	ldr	r3, [pc, #180]	@ (800ff14 <HAL_GPIO_Init+0x304>)
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	43db      	mvns	r3, r3
 800fe66:	69ba      	ldr	r2, [r7, #24]
 800fe68:	4013      	ands	r3, r2
 800fe6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d003      	beq.n	800fe80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800fe78:	69ba      	ldr	r2, [r7, #24]
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800fe80:	4a24      	ldr	r2, [pc, #144]	@ (800ff14 <HAL_GPIO_Init+0x304>)
 800fe82:	69bb      	ldr	r3, [r7, #24]
 800fe84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fe86:	4b23      	ldr	r3, [pc, #140]	@ (800ff14 <HAL_GPIO_Init+0x304>)
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	43db      	mvns	r3, r3
 800fe90:	69ba      	ldr	r2, [r7, #24]
 800fe92:	4013      	ands	r3, r2
 800fe94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d003      	beq.n	800feaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800fea2:	69ba      	ldr	r2, [r7, #24]
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800feaa:	4a1a      	ldr	r2, [pc, #104]	@ (800ff14 <HAL_GPIO_Init+0x304>)
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800feb0:	4b18      	ldr	r3, [pc, #96]	@ (800ff14 <HAL_GPIO_Init+0x304>)
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	43db      	mvns	r3, r3
 800feba:	69ba      	ldr	r2, [r7, #24]
 800febc:	4013      	ands	r3, r2
 800febe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d003      	beq.n	800fed4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800fecc:	69ba      	ldr	r2, [r7, #24]
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800fed4:	4a0f      	ldr	r2, [pc, #60]	@ (800ff14 <HAL_GPIO_Init+0x304>)
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	3301      	adds	r3, #1
 800fede:	61fb      	str	r3, [r7, #28]
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	2b0f      	cmp	r3, #15
 800fee4:	f67f aea2 	bls.w	800fc2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800fee8:	bf00      	nop
 800feea:	bf00      	nop
 800feec:	3724      	adds	r7, #36	@ 0x24
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	40023800 	.word	0x40023800
 800fefc:	40013800 	.word	0x40013800
 800ff00:	40020000 	.word	0x40020000
 800ff04:	40020400 	.word	0x40020400
 800ff08:	40020800 	.word	0x40020800
 800ff0c:	40020c00 	.word	0x40020c00
 800ff10:	40021000 	.word	0x40021000
 800ff14:	40013c00 	.word	0x40013c00

0800ff18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	460b      	mov	r3, r1
 800ff22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	691a      	ldr	r2, [r3, #16]
 800ff28:	887b      	ldrh	r3, [r7, #2]
 800ff2a:	4013      	ands	r3, r2
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ff30:	2301      	movs	r3, #1
 800ff32:	73fb      	strb	r3, [r7, #15]
 800ff34:	e001      	b.n	800ff3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ff36:	2300      	movs	r3, #0
 800ff38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ff3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3714      	adds	r7, #20
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	460b      	mov	r3, r1
 800ff52:	807b      	strh	r3, [r7, #2]
 800ff54:	4613      	mov	r3, r2
 800ff56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ff58:	787b      	ldrb	r3, [r7, #1]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d003      	beq.n	800ff66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ff5e:	887a      	ldrh	r2, [r7, #2]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ff64:	e003      	b.n	800ff6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ff66:	887b      	ldrh	r3, [r7, #2]
 800ff68:	041a      	lsls	r2, r3, #16
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	619a      	str	r2, [r3, #24]
}
 800ff6e:	bf00      	nop
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ff7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7c:	b08f      	sub	sp, #60	@ 0x3c
 800ff7e:	af0a      	add	r7, sp, #40	@ 0x28
 800ff80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d101      	bne.n	800ff8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e10f      	b.n	80101ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d106      	bne.n	800ffac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f006 f8c2 	bl	8016130 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2203      	movs	r2, #3
 800ffb0:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d102      	bne.n	800ffc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f002 ffb7 	bl	8012f3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	603b      	str	r3, [r7, #0]
 800ffd6:	687e      	ldr	r6, [r7, #4]
 800ffd8:	466d      	mov	r5, sp
 800ffda:	f106 0410 	add.w	r4, r6, #16
 800ffde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ffe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ffe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ffea:	e885 0003 	stmia.w	r5, {r0, r1}
 800ffee:	1d33      	adds	r3, r6, #4
 800fff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fff2:	6838      	ldr	r0, [r7, #0]
 800fff4:	f002 fe8e 	bl	8012d14 <USB_CoreInit>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d005      	beq.n	801000a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2202      	movs	r2, #2
 8010002:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8010006:	2301      	movs	r3, #1
 8010008:	e0d0      	b.n	80101ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2100      	movs	r1, #0
 8010010:	4618      	mov	r0, r3
 8010012:	f002 ffa5 	bl	8012f60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010016:	2300      	movs	r3, #0
 8010018:	73fb      	strb	r3, [r7, #15]
 801001a:	e04a      	b.n	80100b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801001c:	7bfa      	ldrb	r2, [r7, #15]
 801001e:	6879      	ldr	r1, [r7, #4]
 8010020:	4613      	mov	r3, r2
 8010022:	00db      	lsls	r3, r3, #3
 8010024:	1a9b      	subs	r3, r3, r2
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	440b      	add	r3, r1
 801002a:	333d      	adds	r3, #61	@ 0x3d
 801002c:	2201      	movs	r2, #1
 801002e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8010030:	7bfa      	ldrb	r2, [r7, #15]
 8010032:	6879      	ldr	r1, [r7, #4]
 8010034:	4613      	mov	r3, r2
 8010036:	00db      	lsls	r3, r3, #3
 8010038:	1a9b      	subs	r3, r3, r2
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	440b      	add	r3, r1
 801003e:	333c      	adds	r3, #60	@ 0x3c
 8010040:	7bfa      	ldrb	r2, [r7, #15]
 8010042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8010044:	7bfa      	ldrb	r2, [r7, #15]
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	b298      	uxth	r0, r3
 801004a:	6879      	ldr	r1, [r7, #4]
 801004c:	4613      	mov	r3, r2
 801004e:	00db      	lsls	r3, r3, #3
 8010050:	1a9b      	subs	r3, r3, r2
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	440b      	add	r3, r1
 8010056:	3342      	adds	r3, #66	@ 0x42
 8010058:	4602      	mov	r2, r0
 801005a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801005c:	7bfa      	ldrb	r2, [r7, #15]
 801005e:	6879      	ldr	r1, [r7, #4]
 8010060:	4613      	mov	r3, r2
 8010062:	00db      	lsls	r3, r3, #3
 8010064:	1a9b      	subs	r3, r3, r2
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	440b      	add	r3, r1
 801006a:	333f      	adds	r3, #63	@ 0x3f
 801006c:	2200      	movs	r2, #0
 801006e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8010070:	7bfa      	ldrb	r2, [r7, #15]
 8010072:	6879      	ldr	r1, [r7, #4]
 8010074:	4613      	mov	r3, r2
 8010076:	00db      	lsls	r3, r3, #3
 8010078:	1a9b      	subs	r3, r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	440b      	add	r3, r1
 801007e:	3344      	adds	r3, #68	@ 0x44
 8010080:	2200      	movs	r2, #0
 8010082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8010084:	7bfa      	ldrb	r2, [r7, #15]
 8010086:	6879      	ldr	r1, [r7, #4]
 8010088:	4613      	mov	r3, r2
 801008a:	00db      	lsls	r3, r3, #3
 801008c:	1a9b      	subs	r3, r3, r2
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	440b      	add	r3, r1
 8010092:	3348      	adds	r3, #72	@ 0x48
 8010094:	2200      	movs	r2, #0
 8010096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8010098:	7bfa      	ldrb	r2, [r7, #15]
 801009a:	6879      	ldr	r1, [r7, #4]
 801009c:	4613      	mov	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	1a9b      	subs	r3, r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	440b      	add	r3, r1
 80100a6:	3350      	adds	r3, #80	@ 0x50
 80100a8:	2200      	movs	r2, #0
 80100aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100ac:	7bfb      	ldrb	r3, [r7, #15]
 80100ae:	3301      	adds	r3, #1
 80100b0:	73fb      	strb	r3, [r7, #15]
 80100b2:	7bfa      	ldrb	r2, [r7, #15]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d3af      	bcc.n	801001c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100bc:	2300      	movs	r3, #0
 80100be:	73fb      	strb	r3, [r7, #15]
 80100c0:	e044      	b.n	801014c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80100c2:	7bfa      	ldrb	r2, [r7, #15]
 80100c4:	6879      	ldr	r1, [r7, #4]
 80100c6:	4613      	mov	r3, r2
 80100c8:	00db      	lsls	r3, r3, #3
 80100ca:	1a9b      	subs	r3, r3, r2
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	440b      	add	r3, r1
 80100d0:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 80100d4:	2200      	movs	r2, #0
 80100d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80100d8:	7bfa      	ldrb	r2, [r7, #15]
 80100da:	6879      	ldr	r1, [r7, #4]
 80100dc:	4613      	mov	r3, r2
 80100de:	00db      	lsls	r3, r3, #3
 80100e0:	1a9b      	subs	r3, r3, r2
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	440b      	add	r3, r1
 80100e6:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80100ea:	7bfa      	ldrb	r2, [r7, #15]
 80100ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80100ee:	7bfa      	ldrb	r2, [r7, #15]
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	4613      	mov	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	1a9b      	subs	r3, r3, r2
 80100f8:	009b      	lsls	r3, r3, #2
 80100fa:	440b      	add	r3, r1
 80100fc:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010100:	2200      	movs	r2, #0
 8010102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8010104:	7bfa      	ldrb	r2, [r7, #15]
 8010106:	6879      	ldr	r1, [r7, #4]
 8010108:	4613      	mov	r3, r2
 801010a:	00db      	lsls	r3, r3, #3
 801010c:	1a9b      	subs	r3, r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	440b      	add	r3, r1
 8010112:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8010116:	2200      	movs	r2, #0
 8010118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801011a:	7bfa      	ldrb	r2, [r7, #15]
 801011c:	6879      	ldr	r1, [r7, #4]
 801011e:	4613      	mov	r3, r2
 8010120:	00db      	lsls	r3, r3, #3
 8010122:	1a9b      	subs	r3, r3, r2
 8010124:	009b      	lsls	r3, r3, #2
 8010126:	440b      	add	r3, r1
 8010128:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 801012c:	2200      	movs	r2, #0
 801012e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8010130:	7bfa      	ldrb	r2, [r7, #15]
 8010132:	6879      	ldr	r1, [r7, #4]
 8010134:	4613      	mov	r3, r2
 8010136:	00db      	lsls	r3, r3, #3
 8010138:	1a9b      	subs	r3, r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	440b      	add	r3, r1
 801013e:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8010142:	2200      	movs	r2, #0
 8010144:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010146:	7bfb      	ldrb	r3, [r7, #15]
 8010148:	3301      	adds	r3, #1
 801014a:	73fb      	strb	r3, [r7, #15]
 801014c:	7bfa      	ldrb	r2, [r7, #15]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	429a      	cmp	r2, r3
 8010154:	d3b5      	bcc.n	80100c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	603b      	str	r3, [r7, #0]
 801015c:	687e      	ldr	r6, [r7, #4]
 801015e:	466d      	mov	r5, sp
 8010160:	f106 0410 	add.w	r4, r6, #16
 8010164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801016a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801016c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010170:	e885 0003 	stmia.w	r5, {r0, r1}
 8010174:	1d33      	adds	r3, r6, #4
 8010176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010178:	6838      	ldr	r0, [r7, #0]
 801017a:	f002 ff3d 	bl	8012ff8 <USB_DevInit>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d005      	beq.n	8010190 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2202      	movs	r2, #2
 8010188:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 801018c:	2301      	movs	r3, #1
 801018e:	e00d      	b.n	80101ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2201      	movs	r2, #1
 801019c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f003 ffb9 	bl	801411c <USB_DevDisconnect>

  return HAL_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3714      	adds	r7, #20
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d101      	bne.n	80101d0 <HAL_PCD_Start+0x1c>
 80101cc:	2302      	movs	r3, #2
 80101ce:	e020      	b.n	8010212 <HAL_PCD_Start+0x5e>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2201      	movs	r2, #1
 80101d4:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d109      	bne.n	80101f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d005      	beq.n	80101f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f002 fe8f 	bl	8012f1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4618      	mov	r0, r3
 8010204:	f003 ff69 	bl	80140da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8010210:	2300      	movs	r3, #0
}
 8010212:	4618      	mov	r0, r3
 8010214:	3710      	adds	r7, #16
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801021a:	b590      	push	{r4, r7, lr}
 801021c:	b08d      	sub	sp, #52	@ 0x34
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010228:	6a3b      	ldr	r3, [r7, #32]
 801022a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	4618      	mov	r0, r3
 8010232:	f004 f827 	bl	8014284 <USB_GetMode>
 8010236:	4603      	mov	r3, r0
 8010238:	2b00      	cmp	r3, #0
 801023a:	f040 839d 	bne.w	8010978 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	4618      	mov	r0, r3
 8010244:	f003 ff8b 	bl	801415e <USB_ReadInterrupts>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	f000 8393 	beq.w	8010976 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4618      	mov	r0, r3
 8010256:	f003 ff82 	bl	801415e <USB_ReadInterrupts>
 801025a:	4603      	mov	r3, r0
 801025c:	f003 0302 	and.w	r3, r3, #2
 8010260:	2b02      	cmp	r3, #2
 8010262:	d107      	bne.n	8010274 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	695a      	ldr	r2, [r3, #20]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f002 0202 	and.w	r2, r2, #2
 8010272:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4618      	mov	r0, r3
 801027a:	f003 ff70 	bl	801415e <USB_ReadInterrupts>
 801027e:	4603      	mov	r3, r0
 8010280:	f003 0310 	and.w	r3, r3, #16
 8010284:	2b10      	cmp	r3, #16
 8010286:	d161      	bne.n	801034c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	699a      	ldr	r2, [r3, #24]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f022 0210 	bic.w	r2, r2, #16
 8010296:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8010298:	6a3b      	ldr	r3, [r7, #32]
 801029a:	6a1b      	ldr	r3, [r3, #32]
 801029c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	f003 020f 	and.w	r2, r3, #15
 80102a4:	4613      	mov	r3, r2
 80102a6:	00db      	lsls	r3, r3, #3
 80102a8:	1a9b      	subs	r3, r3, r2
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80102b0:	687a      	ldr	r2, [r7, #4]
 80102b2:	4413      	add	r3, r2
 80102b4:	3304      	adds	r3, #4
 80102b6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	0c5b      	lsrs	r3, r3, #17
 80102bc:	f003 030f 	and.w	r3, r3, #15
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d124      	bne.n	801030e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80102c4:	69ba      	ldr	r2, [r7, #24]
 80102c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80102ca:	4013      	ands	r3, r2
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d035      	beq.n	801033c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	091b      	lsrs	r3, r3, #4
 80102d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80102da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80102de:	b29b      	uxth	r3, r3
 80102e0:	461a      	mov	r2, r3
 80102e2:	6a38      	ldr	r0, [r7, #32]
 80102e4:	f003 fda7 	bl	8013e36 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	68da      	ldr	r2, [r3, #12]
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	091b      	lsrs	r3, r3, #4
 80102f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80102f4:	441a      	add	r2, r3
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	699a      	ldr	r2, [r3, #24]
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	091b      	lsrs	r3, r3, #4
 8010302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010306:	441a      	add	r2, r3
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	619a      	str	r2, [r3, #24]
 801030c:	e016      	b.n	801033c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 801030e:	69bb      	ldr	r3, [r7, #24]
 8010310:	0c5b      	lsrs	r3, r3, #17
 8010312:	f003 030f 	and.w	r3, r3, #15
 8010316:	2b06      	cmp	r3, #6
 8010318:	d110      	bne.n	801033c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8010320:	2208      	movs	r2, #8
 8010322:	4619      	mov	r1, r3
 8010324:	6a38      	ldr	r0, [r7, #32]
 8010326:	f003 fd86 	bl	8013e36 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	699a      	ldr	r2, [r3, #24]
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	091b      	lsrs	r3, r3, #4
 8010332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010336:	441a      	add	r2, r3
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	699a      	ldr	r2, [r3, #24]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f042 0210 	orr.w	r2, r2, #16
 801034a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4618      	mov	r0, r3
 8010352:	f003 ff04 	bl	801415e <USB_ReadInterrupts>
 8010356:	4603      	mov	r3, r0
 8010358:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801035c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8010360:	d16e      	bne.n	8010440 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8010362:	2300      	movs	r3, #0
 8010364:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4618      	mov	r0, r3
 801036c:	f003 ff0a 	bl	8014184 <USB_ReadDevAllOutEpInterrupt>
 8010370:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8010372:	e062      	b.n	801043a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8010374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010376:	f003 0301 	and.w	r3, r3, #1
 801037a:	2b00      	cmp	r3, #0
 801037c:	d057      	beq.n	801042e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010384:	b2d2      	uxtb	r2, r2
 8010386:	4611      	mov	r1, r2
 8010388:	4618      	mov	r0, r3
 801038a:	f003 ff2f 	bl	80141ec <USB_ReadDevOutEPInterrupt>
 801038e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	f003 0301 	and.w	r3, r3, #1
 8010396:	2b00      	cmp	r3, #0
 8010398:	d00c      	beq.n	80103b4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801039a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801039c:	015a      	lsls	r2, r3, #5
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	4413      	add	r3, r2
 80103a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103a6:	461a      	mov	r2, r3
 80103a8:	2301      	movs	r3, #1
 80103aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80103ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 fdb0 	bl	8010f14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	f003 0308 	and.w	r3, r3, #8
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00c      	beq.n	80103d8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80103be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c0:	015a      	lsls	r2, r3, #5
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	4413      	add	r3, r2
 80103c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103ca:	461a      	mov	r2, r3
 80103cc:	2308      	movs	r3, #8
 80103ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80103d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 feaa 	bl	801112c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	f003 0310 	and.w	r3, r3, #16
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d008      	beq.n	80103f4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80103e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e4:	015a      	lsls	r2, r3, #5
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	4413      	add	r3, r2
 80103ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103ee:	461a      	mov	r2, r3
 80103f0:	2310      	movs	r3, #16
 80103f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	f003 0320 	and.w	r3, r3, #32
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d008      	beq.n	8010410 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80103fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010400:	015a      	lsls	r2, r3, #5
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	4413      	add	r3, r2
 8010406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801040a:	461a      	mov	r2, r3
 801040c:	2320      	movs	r3, #32
 801040e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010416:	2b00      	cmp	r3, #0
 8010418:	d009      	beq.n	801042e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801041a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801041c:	015a      	lsls	r2, r3, #5
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	4413      	add	r3, r2
 8010422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010426:	461a      	mov	r2, r3
 8010428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801042c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801042e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010430:	3301      	adds	r3, #1
 8010432:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8010434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010436:	085b      	lsrs	r3, r3, #1
 8010438:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 801043a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801043c:	2b00      	cmp	r3, #0
 801043e:	d199      	bne.n	8010374 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	4618      	mov	r0, r3
 8010446:	f003 fe8a 	bl	801415e <USB_ReadInterrupts>
 801044a:	4603      	mov	r3, r0
 801044c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010450:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010454:	f040 80c0 	bne.w	80105d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4618      	mov	r0, r3
 801045e:	f003 feab 	bl	80141b8 <USB_ReadDevAllInEpInterrupt>
 8010462:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8010464:	2300      	movs	r3, #0
 8010466:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8010468:	e0b2      	b.n	80105d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801046a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801046c:	f003 0301 	and.w	r3, r3, #1
 8010470:	2b00      	cmp	r3, #0
 8010472:	f000 80a7 	beq.w	80105c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801047c:	b2d2      	uxtb	r2, r2
 801047e:	4611      	mov	r1, r2
 8010480:	4618      	mov	r0, r3
 8010482:	f003 fed1 	bl	8014228 <USB_ReadDevInEPInterrupt>
 8010486:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	f003 0301 	and.w	r3, r3, #1
 801048e:	2b00      	cmp	r3, #0
 8010490:	d057      	beq.n	8010542 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010494:	f003 030f 	and.w	r3, r3, #15
 8010498:	2201      	movs	r2, #1
 801049a:	fa02 f303 	lsl.w	r3, r2, r3
 801049e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	43db      	mvns	r3, r3
 80104ac:	69f9      	ldr	r1, [r7, #28]
 80104ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80104b2:	4013      	ands	r3, r2
 80104b4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80104b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104b8:	015a      	lsls	r2, r3, #5
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	4413      	add	r3, r2
 80104be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104c2:	461a      	mov	r2, r3
 80104c4:	2301      	movs	r3, #1
 80104c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	691b      	ldr	r3, [r3, #16]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d132      	bne.n	8010536 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80104d0:	6879      	ldr	r1, [r7, #4]
 80104d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104d4:	4613      	mov	r3, r2
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	1a9b      	subs	r3, r3, r2
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	440b      	add	r3, r1
 80104de:	3348      	adds	r3, #72	@ 0x48
 80104e0:	6819      	ldr	r1, [r3, #0]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104e6:	4613      	mov	r3, r2
 80104e8:	00db      	lsls	r3, r3, #3
 80104ea:	1a9b      	subs	r3, r3, r2
 80104ec:	009b      	lsls	r3, r3, #2
 80104ee:	4403      	add	r3, r0
 80104f0:	3344      	adds	r3, #68	@ 0x44
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4419      	add	r1, r3
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104fa:	4613      	mov	r3, r2
 80104fc:	00db      	lsls	r3, r3, #3
 80104fe:	1a9b      	subs	r3, r3, r2
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	4403      	add	r3, r0
 8010504:	3348      	adds	r3, #72	@ 0x48
 8010506:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8010508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801050a:	2b00      	cmp	r3, #0
 801050c:	d113      	bne.n	8010536 <HAL_PCD_IRQHandler+0x31c>
 801050e:	6879      	ldr	r1, [r7, #4]
 8010510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010512:	4613      	mov	r3, r2
 8010514:	00db      	lsls	r3, r3, #3
 8010516:	1a9b      	subs	r3, r3, r2
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	440b      	add	r3, r1
 801051c:	3350      	adds	r3, #80	@ 0x50
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d108      	bne.n	8010536 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 801052e:	461a      	mov	r2, r3
 8010530:	2101      	movs	r1, #1
 8010532:	f003 fed9 	bl	80142e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8010536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010538:	b2db      	uxtb	r3, r3
 801053a:	4619      	mov	r1, r3
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f005 fe78 	bl	8016232 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	f003 0308 	and.w	r3, r3, #8
 8010548:	2b00      	cmp	r3, #0
 801054a:	d008      	beq.n	801055e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801054c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054e:	015a      	lsls	r2, r3, #5
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	4413      	add	r3, r2
 8010554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010558:	461a      	mov	r2, r3
 801055a:	2308      	movs	r3, #8
 801055c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	f003 0310 	and.w	r3, r3, #16
 8010564:	2b00      	cmp	r3, #0
 8010566:	d008      	beq.n	801057a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801056a:	015a      	lsls	r2, r3, #5
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	4413      	add	r3, r2
 8010570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010574:	461a      	mov	r2, r3
 8010576:	2310      	movs	r3, #16
 8010578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010580:	2b00      	cmp	r3, #0
 8010582:	d008      	beq.n	8010596 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8010584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010586:	015a      	lsls	r2, r3, #5
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	4413      	add	r3, r2
 801058c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010590:	461a      	mov	r2, r3
 8010592:	2340      	movs	r3, #64	@ 0x40
 8010594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	f003 0302 	and.w	r3, r3, #2
 801059c:	2b00      	cmp	r3, #0
 801059e:	d008      	beq.n	80105b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80105a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a2:	015a      	lsls	r2, r3, #5
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	4413      	add	r3, r2
 80105a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105ac:	461a      	mov	r2, r3
 80105ae:	2302      	movs	r3, #2
 80105b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d003      	beq.n	80105c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80105bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fc1b 	bl	8010dfa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80105c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c6:	3301      	adds	r3, #1
 80105c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80105ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105cc:	085b      	lsrs	r3, r3, #1
 80105ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80105d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f47f af49 	bne.w	801046a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4618      	mov	r0, r3
 80105de:	f003 fdbe 	bl	801415e <USB_ReadInterrupts>
 80105e2:	4603      	mov	r3, r0
 80105e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80105e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80105ec:	d122      	bne.n	8010634 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	69fa      	ldr	r2, [r7, #28]
 80105f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80105fc:	f023 0301 	bic.w	r3, r3, #1
 8010600:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8010608:	2b01      	cmp	r3, #1
 801060a:	d108      	bne.n	801061e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8010614:	2100      	movs	r1, #0
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f000 fe26 	bl	8011268 <HAL_PCDEx_LPM_Callback>
 801061c:	e002      	b.n	8010624 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f005 fe74 	bl	801630c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	695a      	ldr	r2, [r3, #20]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8010632:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4618      	mov	r0, r3
 801063a:	f003 fd90 	bl	801415e <USB_ReadInterrupts>
 801063e:	4603      	mov	r3, r0
 8010640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010648:	d112      	bne.n	8010670 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	2b01      	cmp	r3, #1
 8010658:	d102      	bne.n	8010660 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f005 fe30 	bl	80162c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	695a      	ldr	r2, [r3, #20]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 801066e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4618      	mov	r0, r3
 8010676:	f003 fd72 	bl	801415e <USB_ReadInterrupts>
 801067a:	4603      	mov	r3, r0
 801067c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010684:	f040 80c7 	bne.w	8010816 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	69fa      	ldr	r2, [r7, #28]
 8010692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010696:	f023 0301 	bic.w	r3, r3, #1
 801069a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2110      	movs	r1, #16
 80106a2:	4618      	mov	r0, r3
 80106a4:	f002 fe0c 	bl	80132c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80106a8:	2300      	movs	r3, #0
 80106aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80106ac:	e056      	b.n	801075c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80106ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b0:	015a      	lsls	r2, r3, #5
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	4413      	add	r3, r2
 80106b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106ba:	461a      	mov	r2, r3
 80106bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80106c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80106c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106c4:	015a      	lsls	r2, r3, #5
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	4413      	add	r3, r2
 80106ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106d2:	0151      	lsls	r1, r2, #5
 80106d4:	69fa      	ldr	r2, [r7, #28]
 80106d6:	440a      	add	r2, r1
 80106d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80106dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80106e0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80106e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e4:	015a      	lsls	r2, r3, #5
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	4413      	add	r3, r2
 80106ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106f2:	0151      	lsls	r1, r2, #5
 80106f4:	69fa      	ldr	r2, [r7, #28]
 80106f6:	440a      	add	r2, r1
 80106f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80106fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010700:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8010702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010704:	015a      	lsls	r2, r3, #5
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	4413      	add	r3, r2
 801070a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801070e:	461a      	mov	r2, r3
 8010710:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010714:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010718:	015a      	lsls	r2, r3, #5
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	4413      	add	r3, r2
 801071e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010726:	0151      	lsls	r1, r2, #5
 8010728:	69fa      	ldr	r2, [r7, #28]
 801072a:	440a      	add	r2, r1
 801072c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010730:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010734:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010738:	015a      	lsls	r2, r3, #5
 801073a:	69fb      	ldr	r3, [r7, #28]
 801073c:	4413      	add	r3, r2
 801073e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010746:	0151      	lsls	r1, r2, #5
 8010748:	69fa      	ldr	r2, [r7, #28]
 801074a:	440a      	add	r2, r1
 801074c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010754:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010758:	3301      	adds	r3, #1
 801075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010762:	429a      	cmp	r2, r3
 8010764:	d3a3      	bcc.n	80106ae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801076c:	69db      	ldr	r3, [r3, #28]
 801076e:	69fa      	ldr	r2, [r7, #28]
 8010770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010774:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8010778:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801077e:	2b00      	cmp	r3, #0
 8010780:	d016      	beq.n	80107b0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801078c:	69fa      	ldr	r2, [r7, #28]
 801078e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010792:	f043 030b 	orr.w	r3, r3, #11
 8010796:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107a2:	69fa      	ldr	r2, [r7, #28]
 80107a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80107a8:	f043 030b 	orr.w	r3, r3, #11
 80107ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80107ae:	e015      	b.n	80107dc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107b6:	695b      	ldr	r3, [r3, #20]
 80107b8:	69fa      	ldr	r2, [r7, #28]
 80107ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80107be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80107c2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80107c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	69fa      	ldr	r2, [r7, #28]
 80107d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80107d6:	f043 030b 	orr.w	r3, r3, #11
 80107da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	69fa      	ldr	r2, [r7, #28]
 80107e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80107ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80107ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6818      	ldr	r0, [r3, #0]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	691b      	ldr	r3, [r3, #16]
 80107f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010800:	461a      	mov	r2, r3
 8010802:	f003 fd71 	bl	80142e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	695a      	ldr	r2, [r3, #20]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8010814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	4618      	mov	r0, r3
 801081c:	f003 fc9f 	bl	801415e <USB_ReadInterrupts>
 8010820:	4603      	mov	r3, r0
 8010822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801082a:	d124      	bne.n	8010876 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4618      	mov	r0, r3
 8010832:	f003 fd35 	bl	80142a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4618      	mov	r0, r3
 801083c:	f002 fd9d 	bl	801337a <USB_GetDevSpeed>
 8010840:	4603      	mov	r3, r0
 8010842:	461a      	mov	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681c      	ldr	r4, [r3, #0]
 801084c:	f001 f93c 	bl	8011ac8 <HAL_RCC_GetHCLKFreq>
 8010850:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010856:	b2db      	uxtb	r3, r3
 8010858:	461a      	mov	r2, r3
 801085a:	4620      	mov	r0, r4
 801085c:	f002 fabc 	bl	8012dd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f005 fd0e 	bl	8016282 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	695a      	ldr	r2, [r3, #20]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8010874:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4618      	mov	r0, r3
 801087c:	f003 fc6f 	bl	801415e <USB_ReadInterrupts>
 8010880:	4603      	mov	r3, r0
 8010882:	f003 0308 	and.w	r3, r3, #8
 8010886:	2b08      	cmp	r3, #8
 8010888:	d10a      	bne.n	80108a0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f005 fceb 	bl	8016266 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	695a      	ldr	r2, [r3, #20]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f002 0208 	and.w	r2, r2, #8
 801089e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f003 fc5a 	bl	801415e <USB_ReadInterrupts>
 80108aa:	4603      	mov	r3, r0
 80108ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80108b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80108b4:	d10f      	bne.n	80108d6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80108b6:	2300      	movs	r3, #0
 80108b8:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80108ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	4619      	mov	r1, r3
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f005 fd43 	bl	801634c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	695a      	ldr	r2, [r3, #20]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80108d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4618      	mov	r0, r3
 80108dc:	f003 fc3f 	bl	801415e <USB_ReadInterrupts>
 80108e0:	4603      	mov	r3, r0
 80108e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80108e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80108ea:	d10f      	bne.n	801090c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80108ec:	2300      	movs	r3, #0
 80108ee:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80108f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	4619      	mov	r1, r3
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f005 fd16 	bl	8016328 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	695a      	ldr	r2, [r3, #20]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 801090a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4618      	mov	r0, r3
 8010912:	f003 fc24 	bl	801415e <USB_ReadInterrupts>
 8010916:	4603      	mov	r3, r0
 8010918:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801091c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010920:	d10a      	bne.n	8010938 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f005 fd24 	bl	8016370 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	695a      	ldr	r2, [r3, #20]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8010936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	4618      	mov	r0, r3
 801093e:	f003 fc0e 	bl	801415e <USB_ReadInterrupts>
 8010942:	4603      	mov	r3, r0
 8010944:	f003 0304 	and.w	r3, r3, #4
 8010948:	2b04      	cmp	r3, #4
 801094a:	d115      	bne.n	8010978 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	f003 0304 	and.w	r3, r3, #4
 801095a:	2b00      	cmp	r3, #0
 801095c:	d002      	beq.n	8010964 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f005 fd14 	bl	801638c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	6859      	ldr	r1, [r3, #4]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	69ba      	ldr	r2, [r7, #24]
 8010970:	430a      	orrs	r2, r1
 8010972:	605a      	str	r2, [r3, #4]
 8010974:	e000      	b.n	8010978 <HAL_PCD_IRQHandler+0x75e>
      return;
 8010976:	bf00      	nop
    }
  }
}
 8010978:	3734      	adds	r7, #52	@ 0x34
 801097a:	46bd      	mov	sp, r7
 801097c:	bd90      	pop	{r4, r7, pc}

0801097e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801097e:	b580      	push	{r7, lr}
 8010980:	b082      	sub	sp, #8
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	460b      	mov	r3, r1
 8010988:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8010990:	2b01      	cmp	r3, #1
 8010992:	d101      	bne.n	8010998 <HAL_PCD_SetAddress+0x1a>
 8010994:	2302      	movs	r3, #2
 8010996:	e013      	b.n	80109c0 <HAL_PCD_SetAddress+0x42>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2201      	movs	r2, #1
 801099c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	78fa      	ldrb	r2, [r7, #3]
 80109a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	78fa      	ldrb	r2, [r7, #3]
 80109ae:	4611      	mov	r1, r2
 80109b0:	4618      	mov	r0, r3
 80109b2:	f003 fb6c 	bl	801408e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80109be:	2300      	movs	r3, #0
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	4608      	mov	r0, r1
 80109d2:	4611      	mov	r1, r2
 80109d4:	461a      	mov	r2, r3
 80109d6:	4603      	mov	r3, r0
 80109d8:	70fb      	strb	r3, [r7, #3]
 80109da:	460b      	mov	r3, r1
 80109dc:	803b      	strh	r3, [r7, #0]
 80109de:	4613      	mov	r3, r2
 80109e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80109e2:	2300      	movs	r3, #0
 80109e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80109e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	da0f      	bge.n	8010a0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80109ee:	78fb      	ldrb	r3, [r7, #3]
 80109f0:	f003 020f 	and.w	r2, r3, #15
 80109f4:	4613      	mov	r3, r2
 80109f6:	00db      	lsls	r3, r3, #3
 80109f8:	1a9b      	subs	r3, r3, r2
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	3338      	adds	r3, #56	@ 0x38
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	4413      	add	r3, r2
 8010a02:	3304      	adds	r3, #4
 8010a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	705a      	strb	r2, [r3, #1]
 8010a0c:	e00f      	b.n	8010a2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a0e:	78fb      	ldrb	r3, [r7, #3]
 8010a10:	f003 020f 	and.w	r2, r3, #15
 8010a14:	4613      	mov	r3, r2
 8010a16:	00db      	lsls	r3, r3, #3
 8010a18:	1a9b      	subs	r3, r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	4413      	add	r3, r2
 8010a24:	3304      	adds	r3, #4
 8010a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8010a2e:	78fb      	ldrb	r3, [r7, #3]
 8010a30:	f003 030f 	and.w	r3, r3, #15
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8010a3a:	883a      	ldrh	r2, [r7, #0]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	78ba      	ldrb	r2, [r7, #2]
 8010a44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	785b      	ldrb	r3, [r3, #1]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d004      	beq.n	8010a58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	461a      	mov	r2, r3
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8010a58:	78bb      	ldrb	r3, [r7, #2]
 8010a5a:	2b02      	cmp	r3, #2
 8010a5c:	d102      	bne.n	8010a64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2200      	movs	r2, #0
 8010a62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d101      	bne.n	8010a72 <HAL_PCD_EP_Open+0xaa>
 8010a6e:	2302      	movs	r3, #2
 8010a70:	e00e      	b.n	8010a90 <HAL_PCD_EP_Open+0xc8>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2201      	movs	r2, #1
 8010a76:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	68f9      	ldr	r1, [r7, #12]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f002 fc9f 	bl	80133c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8010a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8010aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	da0f      	bge.n	8010acc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010aac:	78fb      	ldrb	r3, [r7, #3]
 8010aae:	f003 020f 	and.w	r2, r3, #15
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	00db      	lsls	r3, r3, #3
 8010ab6:	1a9b      	subs	r3, r3, r2
 8010ab8:	009b      	lsls	r3, r3, #2
 8010aba:	3338      	adds	r3, #56	@ 0x38
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	4413      	add	r3, r2
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	705a      	strb	r2, [r3, #1]
 8010aca:	e00f      	b.n	8010aec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010acc:	78fb      	ldrb	r3, [r7, #3]
 8010ace:	f003 020f 	and.w	r2, r3, #15
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	00db      	lsls	r3, r3, #3
 8010ad6:	1a9b      	subs	r3, r3, r2
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8010aec:	78fb      	ldrb	r3, [r7, #3]
 8010aee:	f003 030f 	and.w	r3, r3, #15
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d101      	bne.n	8010b06 <HAL_PCD_EP_Close+0x6e>
 8010b02:	2302      	movs	r3, #2
 8010b04:	e00e      	b.n	8010b24 <HAL_PCD_EP_Close+0x8c>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2201      	movs	r2, #1
 8010b0a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	68f9      	ldr	r1, [r7, #12]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f002 fcdd 	bl	80134d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  return HAL_OK;
 8010b22:	2300      	movs	r3, #0
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3710      	adds	r7, #16
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b086      	sub	sp, #24
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	607a      	str	r2, [r7, #4]
 8010b36:	603b      	str	r3, [r7, #0]
 8010b38:	460b      	mov	r3, r1
 8010b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010b3c:	7afb      	ldrb	r3, [r7, #11]
 8010b3e:	f003 020f 	and.w	r2, r3, #15
 8010b42:	4613      	mov	r3, r2
 8010b44:	00db      	lsls	r3, r3, #3
 8010b46:	1a9b      	subs	r3, r3, r2
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	4413      	add	r3, r2
 8010b52:	3304      	adds	r3, #4
 8010b54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	683a      	ldr	r2, [r7, #0]
 8010b60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	2200      	movs	r2, #0
 8010b66:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010b6e:	7afb      	ldrb	r3, [r7, #11]
 8010b70:	f003 030f 	and.w	r3, r3, #15
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	691b      	ldr	r3, [r3, #16]
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	d102      	bne.n	8010b88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010b88:	7afb      	ldrb	r3, [r7, #11]
 8010b8a:	f003 030f 	and.w	r3, r3, #15
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d109      	bne.n	8010ba6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6818      	ldr	r0, [r3, #0]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	691b      	ldr	r3, [r3, #16]
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	6979      	ldr	r1, [r7, #20]
 8010ba0:	f002 ffb8 	bl	8013b14 <USB_EP0StartXfer>
 8010ba4:	e008      	b.n	8010bb8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6818      	ldr	r0, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	6979      	ldr	r1, [r7, #20]
 8010bb4:	f002 fd6a 	bl	801368c <USB_EPStartXfer>
  }

  return HAL_OK;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3718      	adds	r7, #24
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010bc2:	b480      	push	{r7}
 8010bc4:	b083      	sub	sp, #12
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	460b      	mov	r3, r1
 8010bcc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8010bce:	78fb      	ldrb	r3, [r7, #3]
 8010bd0:	f003 020f 	and.w	r2, r3, #15
 8010bd4:	6879      	ldr	r1, [r7, #4]
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	00db      	lsls	r3, r3, #3
 8010bda:	1a9b      	subs	r3, r3, r2
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	440b      	add	r3, r1
 8010be0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8010be4:	681b      	ldr	r3, [r3, #0]
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	370c      	adds	r7, #12
 8010bea:	46bd      	mov	sp, r7
 8010bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf0:	4770      	bx	lr

08010bf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8010bf2:	b580      	push	{r7, lr}
 8010bf4:	b086      	sub	sp, #24
 8010bf6:	af00      	add	r7, sp, #0
 8010bf8:	60f8      	str	r0, [r7, #12]
 8010bfa:	607a      	str	r2, [r7, #4]
 8010bfc:	603b      	str	r3, [r7, #0]
 8010bfe:	460b      	mov	r3, r1
 8010c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010c02:	7afb      	ldrb	r3, [r7, #11]
 8010c04:	f003 020f 	and.w	r2, r3, #15
 8010c08:	4613      	mov	r3, r2
 8010c0a:	00db      	lsls	r3, r3, #3
 8010c0c:	1a9b      	subs	r3, r3, r2
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	3338      	adds	r3, #56	@ 0x38
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	4413      	add	r3, r2
 8010c16:	3304      	adds	r3, #4
 8010c18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	683a      	ldr	r2, [r7, #0]
 8010c24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010c32:	7afb      	ldrb	r3, [r7, #11]
 8010c34:	f003 030f 	and.w	r3, r3, #15
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	691b      	ldr	r3, [r3, #16]
 8010c42:	2b01      	cmp	r3, #1
 8010c44:	d102      	bne.n	8010c4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010c4c:	7afb      	ldrb	r3, [r7, #11]
 8010c4e:	f003 030f 	and.w	r3, r3, #15
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d109      	bne.n	8010c6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6818      	ldr	r0, [r3, #0]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	461a      	mov	r2, r3
 8010c62:	6979      	ldr	r1, [r7, #20]
 8010c64:	f002 ff56 	bl	8013b14 <USB_EP0StartXfer>
 8010c68:	e008      	b.n	8010c7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6818      	ldr	r0, [r3, #0]
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	691b      	ldr	r3, [r3, #16]
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	461a      	mov	r2, r3
 8010c76:	6979      	ldr	r1, [r7, #20]
 8010c78:	f002 fd08 	bl	801368c <USB_EPStartXfer>
  }

  return HAL_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3718      	adds	r7, #24
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b084      	sub	sp, #16
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
 8010c8e:	460b      	mov	r3, r1
 8010c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010c92:	78fb      	ldrb	r3, [r7, #3]
 8010c94:	f003 020f 	and.w	r2, r3, #15
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d901      	bls.n	8010ca4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e050      	b.n	8010d46 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	da0f      	bge.n	8010ccc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010cac:	78fb      	ldrb	r3, [r7, #3]
 8010cae:	f003 020f 	and.w	r2, r3, #15
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	00db      	lsls	r3, r3, #3
 8010cb6:	1a9b      	subs	r3, r3, r2
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	3338      	adds	r3, #56	@ 0x38
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	4413      	add	r3, r2
 8010cc0:	3304      	adds	r3, #4
 8010cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	705a      	strb	r2, [r3, #1]
 8010cca:	e00d      	b.n	8010ce8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010ccc:	78fa      	ldrb	r2, [r7, #3]
 8010cce:	4613      	mov	r3, r2
 8010cd0:	00db      	lsls	r3, r3, #3
 8010cd2:	1a9b      	subs	r3, r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	4413      	add	r3, r2
 8010cde:	3304      	adds	r3, #4
 8010ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2201      	movs	r2, #1
 8010cec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010cee:	78fb      	ldrb	r3, [r7, #3]
 8010cf0:	f003 030f 	and.w	r3, r3, #15
 8010cf4:	b2da      	uxtb	r2, r3
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d101      	bne.n	8010d08 <HAL_PCD_EP_SetStall+0x82>
 8010d04:	2302      	movs	r3, #2
 8010d06:	e01e      	b.n	8010d46 <HAL_PCD_EP_SetStall+0xc0>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	68f9      	ldr	r1, [r7, #12]
 8010d16:	4618      	mov	r0, r3
 8010d18:	f003 f8e5 	bl	8013ee6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010d1c:	78fb      	ldrb	r3, [r7, #3]
 8010d1e:	f003 030f 	and.w	r3, r3, #15
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10a      	bne.n	8010d3c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6818      	ldr	r0, [r3, #0]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	691b      	ldr	r3, [r3, #16]
 8010d2e:	b2d9      	uxtb	r1, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8010d36:	461a      	mov	r2, r3
 8010d38:	f003 fad6 	bl	80142e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8010d44:	2300      	movs	r3, #0
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b084      	sub	sp, #16
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
 8010d56:	460b      	mov	r3, r1
 8010d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010d5a:	78fb      	ldrb	r3, [r7, #3]
 8010d5c:	f003 020f 	and.w	r2, r3, #15
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d901      	bls.n	8010d6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e042      	b.n	8010df2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	da0f      	bge.n	8010d94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010d74:	78fb      	ldrb	r3, [r7, #3]
 8010d76:	f003 020f 	and.w	r2, r3, #15
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	00db      	lsls	r3, r3, #3
 8010d7e:	1a9b      	subs	r3, r3, r2
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	3338      	adds	r3, #56	@ 0x38
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	4413      	add	r3, r2
 8010d88:	3304      	adds	r3, #4
 8010d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	705a      	strb	r2, [r3, #1]
 8010d92:	e00f      	b.n	8010db4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010d94:	78fb      	ldrb	r3, [r7, #3]
 8010d96:	f003 020f 	and.w	r2, r3, #15
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	00db      	lsls	r3, r3, #3
 8010d9e:	1a9b      	subs	r3, r3, r2
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	4413      	add	r3, r2
 8010daa:	3304      	adds	r3, #4
 8010dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2200      	movs	r2, #0
 8010db2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2200      	movs	r2, #0
 8010db8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010dba:	78fb      	ldrb	r3, [r7, #3]
 8010dbc:	f003 030f 	and.w	r3, r3, #15
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d101      	bne.n	8010dd4 <HAL_PCD_EP_ClrStall+0x86>
 8010dd0:	2302      	movs	r3, #2
 8010dd2:	e00e      	b.n	8010df2 <HAL_PCD_EP_ClrStall+0xa4>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	68f9      	ldr	r1, [r7, #12]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f003 f8ed 	bl	8013fc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8010df0:	2300      	movs	r3, #0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3710      	adds	r7, #16
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b08a      	sub	sp, #40	@ 0x28
 8010dfe:	af02      	add	r7, sp, #8
 8010e00:	6078      	str	r0, [r7, #4]
 8010e02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8010e0e:	683a      	ldr	r2, [r7, #0]
 8010e10:	4613      	mov	r3, r2
 8010e12:	00db      	lsls	r3, r3, #3
 8010e14:	1a9b      	subs	r3, r3, r2
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	3338      	adds	r3, #56	@ 0x38
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	3304      	adds	r3, #4
 8010e20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	699a      	ldr	r2, [r3, #24]
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	695b      	ldr	r3, [r3, #20]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d901      	bls.n	8010e32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	e06c      	b.n	8010f0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	695a      	ldr	r2, [r3, #20]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	699b      	ldr	r3, [r3, #24]
 8010e3a:	1ad3      	subs	r3, r2, r3
 8010e3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	689b      	ldr	r3, [r3, #8]
 8010e42:	69fa      	ldr	r2, [r7, #28]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d902      	bls.n	8010e4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	689b      	ldr	r3, [r3, #8]
 8010e4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	3303      	adds	r3, #3
 8010e52:	089b      	lsrs	r3, r3, #2
 8010e54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010e56:	e02b      	b.n	8010eb0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	695a      	ldr	r2, [r3, #20]
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	699b      	ldr	r3, [r3, #24]
 8010e60:	1ad3      	subs	r3, r2, r3
 8010e62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	69fa      	ldr	r2, [r7, #28]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d902      	bls.n	8010e74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	689b      	ldr	r3, [r3, #8]
 8010e72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	3303      	adds	r3, #3
 8010e78:	089b      	lsrs	r3, r3, #2
 8010e7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	68d9      	ldr	r1, [r3, #12]
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	b2da      	uxtb	r2, r3
 8010e84:	69fb      	ldr	r3, [r7, #28]
 8010e86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	9300      	str	r3, [sp, #0]
 8010e90:	4603      	mov	r3, r0
 8010e92:	6978      	ldr	r0, [r7, #20]
 8010e94:	f002 ff91 	bl	8013dba <USB_WritePacket>

    ep->xfer_buff  += len;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	68da      	ldr	r2, [r3, #12]
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	441a      	add	r2, r3
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	699a      	ldr	r2, [r3, #24]
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	441a      	add	r2, r3
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	015a      	lsls	r2, r3, #5
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	4413      	add	r3, r2
 8010eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ebc:	699b      	ldr	r3, [r3, #24]
 8010ebe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8010ec0:	69ba      	ldr	r2, [r7, #24]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d809      	bhi.n	8010eda <PCD_WriteEmptyTxFifo+0xe0>
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	699a      	ldr	r2, [r3, #24]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d203      	bcs.n	8010eda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	695b      	ldr	r3, [r3, #20]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d1be      	bne.n	8010e58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	695a      	ldr	r2, [r3, #20]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d811      	bhi.n	8010f0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	f003 030f 	and.w	r3, r3, #15
 8010eec:	2201      	movs	r2, #1
 8010eee:	fa02 f303 	lsl.w	r3, r2, r3
 8010ef2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	43db      	mvns	r3, r3
 8010f00:	6939      	ldr	r1, [r7, #16]
 8010f02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010f06:	4013      	ands	r3, r2
 8010f08:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3720      	adds	r7, #32
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b086      	sub	sp, #24
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	333c      	adds	r3, #60	@ 0x3c
 8010f2c:	3304      	adds	r3, #4
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	015a      	lsls	r2, r3, #5
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	4413      	add	r3, r2
 8010f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	691b      	ldr	r3, [r3, #16]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	f040 80a0 	bne.w	801108c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	f003 0308 	and.w	r3, r3, #8
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d015      	beq.n	8010f82 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	4a72      	ldr	r2, [pc, #456]	@ (8011124 <PCD_EP_OutXfrComplete_int+0x210>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	f240 80dd 	bls.w	801111a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	f000 80d7 	beq.w	801111a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	015a      	lsls	r2, r3, #5
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	4413      	add	r3, r2
 8010f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f78:	461a      	mov	r2, r3
 8010f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f7e:	6093      	str	r3, [r2, #8]
 8010f80:	e0cb      	b.n	801111a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	f003 0320 	and.w	r3, r3, #32
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d009      	beq.n	8010fa0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	015a      	lsls	r2, r3, #5
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	4413      	add	r3, r2
 8010f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f98:	461a      	mov	r2, r3
 8010f9a:	2320      	movs	r3, #32
 8010f9c:	6093      	str	r3, [r2, #8]
 8010f9e:	e0bc      	b.n	801111a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f040 80b7 	bne.w	801111a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	4a5d      	ldr	r2, [pc, #372]	@ (8011124 <PCD_EP_OutXfrComplete_int+0x210>)
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d90f      	bls.n	8010fd4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00a      	beq.n	8010fd4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	015a      	lsls	r2, r3, #5
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010fca:	461a      	mov	r2, r3
 8010fcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010fd0:	6093      	str	r3, [r2, #8]
 8010fd2:	e0a2      	b.n	801111a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8010fd4:	6879      	ldr	r1, [r7, #4]
 8010fd6:	683a      	ldr	r2, [r7, #0]
 8010fd8:	4613      	mov	r3, r2
 8010fda:	00db      	lsls	r3, r3, #3
 8010fdc:	1a9b      	subs	r3, r3, r2
 8010fde:	009b      	lsls	r3, r3, #2
 8010fe0:	440b      	add	r3, r1
 8010fe2:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8010fe6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	0159      	lsls	r1, r3, #5
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	440b      	add	r3, r1
 8010ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8010ffa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	4613      	mov	r3, r2
 8011002:	00db      	lsls	r3, r3, #3
 8011004:	1a9b      	subs	r3, r3, r2
 8011006:	009b      	lsls	r3, r3, #2
 8011008:	4403      	add	r3, r0
 801100a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 801100e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8011010:	6879      	ldr	r1, [r7, #4]
 8011012:	683a      	ldr	r2, [r7, #0]
 8011014:	4613      	mov	r3, r2
 8011016:	00db      	lsls	r3, r3, #3
 8011018:	1a9b      	subs	r3, r3, r2
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	440b      	add	r3, r1
 801101e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8011022:	6819      	ldr	r1, [r3, #0]
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	4613      	mov	r3, r2
 801102a:	00db      	lsls	r3, r3, #3
 801102c:	1a9b      	subs	r3, r3, r2
 801102e:	009b      	lsls	r3, r3, #2
 8011030:	4403      	add	r3, r0
 8011032:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4419      	add	r1, r3
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	683a      	ldr	r2, [r7, #0]
 801103e:	4613      	mov	r3, r2
 8011040:	00db      	lsls	r3, r3, #3
 8011042:	1a9b      	subs	r3, r3, r2
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4403      	add	r3, r0
 8011048:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 801104c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d114      	bne.n	801107e <PCD_EP_OutXfrComplete_int+0x16a>
 8011054:	6879      	ldr	r1, [r7, #4]
 8011056:	683a      	ldr	r2, [r7, #0]
 8011058:	4613      	mov	r3, r2
 801105a:	00db      	lsls	r3, r3, #3
 801105c:	1a9b      	subs	r3, r3, r2
 801105e:	009b      	lsls	r3, r3, #2
 8011060:	440b      	add	r3, r1
 8011062:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d108      	bne.n	801107e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6818      	ldr	r0, [r3, #0]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8011076:	461a      	mov	r2, r3
 8011078:	2101      	movs	r1, #1
 801107a:	f003 f935 	bl	80142e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	b2db      	uxtb	r3, r3
 8011082:	4619      	mov	r1, r3
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f005 f8b9 	bl	80161fc <HAL_PCD_DataOutStageCallback>
 801108a:	e046      	b.n	801111a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	4a26      	ldr	r2, [pc, #152]	@ (8011128 <PCD_EP_OutXfrComplete_int+0x214>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d124      	bne.n	80110de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00a      	beq.n	80110b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	015a      	lsls	r2, r3, #5
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	4413      	add	r3, r2
 80110a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110aa:	461a      	mov	r2, r3
 80110ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80110b0:	6093      	str	r3, [r2, #8]
 80110b2:	e032      	b.n	801111a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	f003 0320 	and.w	r3, r3, #32
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d008      	beq.n	80110d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	015a      	lsls	r2, r3, #5
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	4413      	add	r3, r2
 80110c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110ca:	461a      	mov	r2, r3
 80110cc:	2320      	movs	r3, #32
 80110ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	4619      	mov	r1, r3
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f005 f890 	bl	80161fc <HAL_PCD_DataOutStageCallback>
 80110dc:	e01d      	b.n	801111a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d114      	bne.n	801110e <PCD_EP_OutXfrComplete_int+0x1fa>
 80110e4:	6879      	ldr	r1, [r7, #4]
 80110e6:	683a      	ldr	r2, [r7, #0]
 80110e8:	4613      	mov	r3, r2
 80110ea:	00db      	lsls	r3, r3, #3
 80110ec:	1a9b      	subs	r3, r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	440b      	add	r3, r1
 80110f2:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d108      	bne.n	801110e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6818      	ldr	r0, [r3, #0]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8011106:	461a      	mov	r2, r3
 8011108:	2100      	movs	r1, #0
 801110a:	f003 f8ed 	bl	80142e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	b2db      	uxtb	r3, r3
 8011112:	4619      	mov	r1, r3
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f005 f871 	bl	80161fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801111a:	2300      	movs	r3, #0
}
 801111c:	4618      	mov	r0, r3
 801111e:	3718      	adds	r7, #24
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	4f54300a 	.word	0x4f54300a
 8011128:	4f54310a 	.word	0x4f54310a

0801112c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b086      	sub	sp, #24
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	333c      	adds	r3, #60	@ 0x3c
 8011144:	3304      	adds	r3, #4
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	015a      	lsls	r2, r3, #5
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	4413      	add	r3, r2
 8011152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011156:	689b      	ldr	r3, [r3, #8]
 8011158:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	4a15      	ldr	r2, [pc, #84]	@ (80111b4 <PCD_EP_OutSetupPacket_int+0x88>)
 801115e:	4293      	cmp	r3, r2
 8011160:	d90e      	bls.n	8011180 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011168:	2b00      	cmp	r3, #0
 801116a:	d009      	beq.n	8011180 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	015a      	lsls	r2, r3, #5
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	4413      	add	r3, r2
 8011174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011178:	461a      	mov	r2, r3
 801117a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801117e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f005 f829 	bl	80161d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	4a0a      	ldr	r2, [pc, #40]	@ (80111b4 <PCD_EP_OutSetupPacket_int+0x88>)
 801118a:	4293      	cmp	r3, r2
 801118c:	d90c      	bls.n	80111a8 <PCD_EP_OutSetupPacket_int+0x7c>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	691b      	ldr	r3, [r3, #16]
 8011192:	2b01      	cmp	r3, #1
 8011194:	d108      	bne.n	80111a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6818      	ldr	r0, [r3, #0]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80111a0:	461a      	mov	r2, r3
 80111a2:	2101      	movs	r1, #1
 80111a4:	f003 f8a0 	bl	80142e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80111a8:	2300      	movs	r3, #0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3718      	adds	r7, #24
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	4f54300a 	.word	0x4f54300a

080111b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b085      	sub	sp, #20
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	460b      	mov	r3, r1
 80111c2:	70fb      	strb	r3, [r7, #3]
 80111c4:	4613      	mov	r3, r2
 80111c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80111d0:	78fb      	ldrb	r3, [r7, #3]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d107      	bne.n	80111e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80111d6:	883b      	ldrh	r3, [r7, #0]
 80111d8:	0419      	lsls	r1, r3, #16
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	68ba      	ldr	r2, [r7, #8]
 80111e0:	430a      	orrs	r2, r1
 80111e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80111e4:	e028      	b.n	8011238 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111ec:	0c1b      	lsrs	r3, r3, #16
 80111ee:	68ba      	ldr	r2, [r7, #8]
 80111f0:	4413      	add	r3, r2
 80111f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80111f4:	2300      	movs	r3, #0
 80111f6:	73fb      	strb	r3, [r7, #15]
 80111f8:	e00d      	b.n	8011216 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	7bfb      	ldrb	r3, [r7, #15]
 8011200:	3340      	adds	r3, #64	@ 0x40
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	4413      	add	r3, r2
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	0c1b      	lsrs	r3, r3, #16
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	4413      	add	r3, r2
 801120e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011210:	7bfb      	ldrb	r3, [r7, #15]
 8011212:	3301      	adds	r3, #1
 8011214:	73fb      	strb	r3, [r7, #15]
 8011216:	7bfa      	ldrb	r2, [r7, #15]
 8011218:	78fb      	ldrb	r3, [r7, #3]
 801121a:	3b01      	subs	r3, #1
 801121c:	429a      	cmp	r2, r3
 801121e:	d3ec      	bcc.n	80111fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8011220:	883b      	ldrh	r3, [r7, #0]
 8011222:	0418      	lsls	r0, r3, #16
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6819      	ldr	r1, [r3, #0]
 8011228:	78fb      	ldrb	r3, [r7, #3]
 801122a:	3b01      	subs	r3, #1
 801122c:	68ba      	ldr	r2, [r7, #8]
 801122e:	4302      	orrs	r2, r0
 8011230:	3340      	adds	r3, #64	@ 0x40
 8011232:	009b      	lsls	r3, r3, #2
 8011234:	440b      	add	r3, r1
 8011236:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011238:	2300      	movs	r3, #0
}
 801123a:	4618      	mov	r0, r3
 801123c:	3714      	adds	r7, #20
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr

08011246 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8011246:	b480      	push	{r7}
 8011248:	b083      	sub	sp, #12
 801124a:	af00      	add	r7, sp, #0
 801124c:	6078      	str	r0, [r7, #4]
 801124e:	460b      	mov	r3, r1
 8011250:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	887a      	ldrh	r2, [r7, #2]
 8011258:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	460b      	mov	r3, r1
 8011272:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8011274:	bf00      	nop
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d101      	bne.n	8011292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801128e:	2301      	movs	r3, #1
 8011290:	e267      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f003 0301 	and.w	r3, r3, #1
 801129a:	2b00      	cmp	r3, #0
 801129c:	d075      	beq.n	801138a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801129e:	4b88      	ldr	r3, [pc, #544]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	f003 030c 	and.w	r3, r3, #12
 80112a6:	2b04      	cmp	r3, #4
 80112a8:	d00c      	beq.n	80112c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80112aa:	4b85      	ldr	r3, [pc, #532]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80112ac:	689b      	ldr	r3, [r3, #8]
 80112ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80112b2:	2b08      	cmp	r3, #8
 80112b4:	d112      	bne.n	80112dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80112b6:	4b82      	ldr	r3, [pc, #520]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80112be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80112c2:	d10b      	bne.n	80112dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112c4:	4b7e      	ldr	r3, [pc, #504]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d05b      	beq.n	8011388 <HAL_RCC_OscConfig+0x108>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d157      	bne.n	8011388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	e242      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112e4:	d106      	bne.n	80112f4 <HAL_RCC_OscConfig+0x74>
 80112e6:	4b76      	ldr	r3, [pc, #472]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a75      	ldr	r2, [pc, #468]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80112ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80112f0:	6013      	str	r3, [r2, #0]
 80112f2:	e01d      	b.n	8011330 <HAL_RCC_OscConfig+0xb0>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80112fc:	d10c      	bne.n	8011318 <HAL_RCC_OscConfig+0x98>
 80112fe:	4b70      	ldr	r3, [pc, #448]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	4a6f      	ldr	r2, [pc, #444]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011308:	6013      	str	r3, [r2, #0]
 801130a:	4b6d      	ldr	r3, [pc, #436]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4a6c      	ldr	r2, [pc, #432]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011314:	6013      	str	r3, [r2, #0]
 8011316:	e00b      	b.n	8011330 <HAL_RCC_OscConfig+0xb0>
 8011318:	4b69      	ldr	r3, [pc, #420]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a68      	ldr	r2, [pc, #416]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 801131e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011322:	6013      	str	r3, [r2, #0]
 8011324:	4b66      	ldr	r3, [pc, #408]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4a65      	ldr	r2, [pc, #404]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 801132a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801132e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d013      	beq.n	8011360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011338:	f7fd fa02 	bl	800e740 <HAL_GetTick>
 801133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801133e:	e008      	b.n	8011352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011340:	f7fd f9fe 	bl	800e740 <HAL_GetTick>
 8011344:	4602      	mov	r2, r0
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	2b64      	cmp	r3, #100	@ 0x64
 801134c:	d901      	bls.n	8011352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801134e:	2303      	movs	r3, #3
 8011350:	e207      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011352:	4b5b      	ldr	r3, [pc, #364]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801135a:	2b00      	cmp	r3, #0
 801135c:	d0f0      	beq.n	8011340 <HAL_RCC_OscConfig+0xc0>
 801135e:	e014      	b.n	801138a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011360:	f7fd f9ee 	bl	800e740 <HAL_GetTick>
 8011364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011366:	e008      	b.n	801137a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011368:	f7fd f9ea 	bl	800e740 <HAL_GetTick>
 801136c:	4602      	mov	r2, r0
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	2b64      	cmp	r3, #100	@ 0x64
 8011374:	d901      	bls.n	801137a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011376:	2303      	movs	r3, #3
 8011378:	e1f3      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801137a:	4b51      	ldr	r3, [pc, #324]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011382:	2b00      	cmp	r3, #0
 8011384:	d1f0      	bne.n	8011368 <HAL_RCC_OscConfig+0xe8>
 8011386:	e000      	b.n	801138a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f003 0302 	and.w	r3, r3, #2
 8011392:	2b00      	cmp	r3, #0
 8011394:	d063      	beq.n	801145e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011396:	4b4a      	ldr	r3, [pc, #296]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	f003 030c 	and.w	r3, r3, #12
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00b      	beq.n	80113ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80113a2:	4b47      	ldr	r3, [pc, #284]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80113a4:	689b      	ldr	r3, [r3, #8]
 80113a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80113aa:	2b08      	cmp	r3, #8
 80113ac:	d11c      	bne.n	80113e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80113ae:	4b44      	ldr	r3, [pc, #272]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d116      	bne.n	80113e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80113ba:	4b41      	ldr	r3, [pc, #260]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f003 0302 	and.w	r3, r3, #2
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d005      	beq.n	80113d2 <HAL_RCC_OscConfig+0x152>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d001      	beq.n	80113d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80113ce:	2301      	movs	r3, #1
 80113d0:	e1c7      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113d2:	4b3b      	ldr	r3, [pc, #236]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	691b      	ldr	r3, [r3, #16]
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	4937      	ldr	r1, [pc, #220]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 80113e2:	4313      	orrs	r3, r2
 80113e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80113e6:	e03a      	b.n	801145e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d020      	beq.n	8011432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80113f0:	4b34      	ldr	r3, [pc, #208]	@ (80114c4 <HAL_RCC_OscConfig+0x244>)
 80113f2:	2201      	movs	r2, #1
 80113f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113f6:	f7fd f9a3 	bl	800e740 <HAL_GetTick>
 80113fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80113fc:	e008      	b.n	8011410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80113fe:	f7fd f99f 	bl	800e740 <HAL_GetTick>
 8011402:	4602      	mov	r2, r0
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	2b02      	cmp	r3, #2
 801140a:	d901      	bls.n	8011410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801140c:	2303      	movs	r3, #3
 801140e:	e1a8      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011410:	4b2b      	ldr	r3, [pc, #172]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f003 0302 	and.w	r3, r3, #2
 8011418:	2b00      	cmp	r3, #0
 801141a:	d0f0      	beq.n	80113fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801141c:	4b28      	ldr	r3, [pc, #160]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	691b      	ldr	r3, [r3, #16]
 8011428:	00db      	lsls	r3, r3, #3
 801142a:	4925      	ldr	r1, [pc, #148]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 801142c:	4313      	orrs	r3, r2
 801142e:	600b      	str	r3, [r1, #0]
 8011430:	e015      	b.n	801145e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011432:	4b24      	ldr	r3, [pc, #144]	@ (80114c4 <HAL_RCC_OscConfig+0x244>)
 8011434:	2200      	movs	r2, #0
 8011436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011438:	f7fd f982 	bl	800e740 <HAL_GetTick>
 801143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801143e:	e008      	b.n	8011452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011440:	f7fd f97e 	bl	800e740 <HAL_GetTick>
 8011444:	4602      	mov	r2, r0
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	1ad3      	subs	r3, r2, r3
 801144a:	2b02      	cmp	r3, #2
 801144c:	d901      	bls.n	8011452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801144e:	2303      	movs	r3, #3
 8011450:	e187      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011452:	4b1b      	ldr	r3, [pc, #108]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f003 0302 	and.w	r3, r3, #2
 801145a:	2b00      	cmp	r3, #0
 801145c:	d1f0      	bne.n	8011440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f003 0308 	and.w	r3, r3, #8
 8011466:	2b00      	cmp	r3, #0
 8011468:	d036      	beq.n	80114d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	695b      	ldr	r3, [r3, #20]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d016      	beq.n	80114a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011472:	4b15      	ldr	r3, [pc, #84]	@ (80114c8 <HAL_RCC_OscConfig+0x248>)
 8011474:	2201      	movs	r2, #1
 8011476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011478:	f7fd f962 	bl	800e740 <HAL_GetTick>
 801147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801147e:	e008      	b.n	8011492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011480:	f7fd f95e 	bl	800e740 <HAL_GetTick>
 8011484:	4602      	mov	r2, r0
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	1ad3      	subs	r3, r2, r3
 801148a:	2b02      	cmp	r3, #2
 801148c:	d901      	bls.n	8011492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801148e:	2303      	movs	r3, #3
 8011490:	e167      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011492:	4b0b      	ldr	r3, [pc, #44]	@ (80114c0 <HAL_RCC_OscConfig+0x240>)
 8011494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011496:	f003 0302 	and.w	r3, r3, #2
 801149a:	2b00      	cmp	r3, #0
 801149c:	d0f0      	beq.n	8011480 <HAL_RCC_OscConfig+0x200>
 801149e:	e01b      	b.n	80114d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80114a0:	4b09      	ldr	r3, [pc, #36]	@ (80114c8 <HAL_RCC_OscConfig+0x248>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80114a6:	f7fd f94b 	bl	800e740 <HAL_GetTick>
 80114aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80114ac:	e00e      	b.n	80114cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80114ae:	f7fd f947 	bl	800e740 <HAL_GetTick>
 80114b2:	4602      	mov	r2, r0
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d907      	bls.n	80114cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80114bc:	2303      	movs	r3, #3
 80114be:	e150      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
 80114c0:	40023800 	.word	0x40023800
 80114c4:	42470000 	.word	0x42470000
 80114c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80114cc:	4b88      	ldr	r3, [pc, #544]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 80114ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114d0:	f003 0302 	and.w	r3, r3, #2
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d1ea      	bne.n	80114ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f003 0304 	and.w	r3, r3, #4
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	f000 8097 	beq.w	8011614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80114e6:	2300      	movs	r3, #0
 80114e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80114ea:	4b81      	ldr	r3, [pc, #516]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 80114ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d10f      	bne.n	8011516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80114f6:	2300      	movs	r3, #0
 80114f8:	60bb      	str	r3, [r7, #8]
 80114fa:	4b7d      	ldr	r3, [pc, #500]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 80114fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114fe:	4a7c      	ldr	r2, [pc, #496]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011504:	6413      	str	r3, [r2, #64]	@ 0x40
 8011506:	4b7a      	ldr	r3, [pc, #488]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801150a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801150e:	60bb      	str	r3, [r7, #8]
 8011510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011512:	2301      	movs	r3, #1
 8011514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011516:	4b77      	ldr	r3, [pc, #476]	@ (80116f4 <HAL_RCC_OscConfig+0x474>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801151e:	2b00      	cmp	r3, #0
 8011520:	d118      	bne.n	8011554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011522:	4b74      	ldr	r3, [pc, #464]	@ (80116f4 <HAL_RCC_OscConfig+0x474>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4a73      	ldr	r2, [pc, #460]	@ (80116f4 <HAL_RCC_OscConfig+0x474>)
 8011528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801152c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801152e:	f7fd f907 	bl	800e740 <HAL_GetTick>
 8011532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011534:	e008      	b.n	8011548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011536:	f7fd f903 	bl	800e740 <HAL_GetTick>
 801153a:	4602      	mov	r2, r0
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	1ad3      	subs	r3, r2, r3
 8011540:	2b02      	cmp	r3, #2
 8011542:	d901      	bls.n	8011548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011544:	2303      	movs	r3, #3
 8011546:	e10c      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011548:	4b6a      	ldr	r3, [pc, #424]	@ (80116f4 <HAL_RCC_OscConfig+0x474>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011550:	2b00      	cmp	r3, #0
 8011552:	d0f0      	beq.n	8011536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	2b01      	cmp	r3, #1
 801155a:	d106      	bne.n	801156a <HAL_RCC_OscConfig+0x2ea>
 801155c:	4b64      	ldr	r3, [pc, #400]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 801155e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011560:	4a63      	ldr	r2, [pc, #396]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011562:	f043 0301 	orr.w	r3, r3, #1
 8011566:	6713      	str	r3, [r2, #112]	@ 0x70
 8011568:	e01c      	b.n	80115a4 <HAL_RCC_OscConfig+0x324>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	2b05      	cmp	r3, #5
 8011570:	d10c      	bne.n	801158c <HAL_RCC_OscConfig+0x30c>
 8011572:	4b5f      	ldr	r3, [pc, #380]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011576:	4a5e      	ldr	r2, [pc, #376]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011578:	f043 0304 	orr.w	r3, r3, #4
 801157c:	6713      	str	r3, [r2, #112]	@ 0x70
 801157e:	4b5c      	ldr	r3, [pc, #368]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011582:	4a5b      	ldr	r2, [pc, #364]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011584:	f043 0301 	orr.w	r3, r3, #1
 8011588:	6713      	str	r3, [r2, #112]	@ 0x70
 801158a:	e00b      	b.n	80115a4 <HAL_RCC_OscConfig+0x324>
 801158c:	4b58      	ldr	r3, [pc, #352]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 801158e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011590:	4a57      	ldr	r2, [pc, #348]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011592:	f023 0301 	bic.w	r3, r3, #1
 8011596:	6713      	str	r3, [r2, #112]	@ 0x70
 8011598:	4b55      	ldr	r3, [pc, #340]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 801159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801159c:	4a54      	ldr	r2, [pc, #336]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 801159e:	f023 0304 	bic.w	r3, r3, #4
 80115a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	689b      	ldr	r3, [r3, #8]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d015      	beq.n	80115d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80115ac:	f7fd f8c8 	bl	800e740 <HAL_GetTick>
 80115b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80115b2:	e00a      	b.n	80115ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80115b4:	f7fd f8c4 	bl	800e740 <HAL_GetTick>
 80115b8:	4602      	mov	r2, r0
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d901      	bls.n	80115ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80115c6:	2303      	movs	r3, #3
 80115c8:	e0cb      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80115ca:	4b49      	ldr	r3, [pc, #292]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 80115cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115ce:	f003 0302 	and.w	r3, r3, #2
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d0ee      	beq.n	80115b4 <HAL_RCC_OscConfig+0x334>
 80115d6:	e014      	b.n	8011602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80115d8:	f7fd f8b2 	bl	800e740 <HAL_GetTick>
 80115dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80115de:	e00a      	b.n	80115f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80115e0:	f7fd f8ae 	bl	800e740 <HAL_GetTick>
 80115e4:	4602      	mov	r2, r0
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	1ad3      	subs	r3, r2, r3
 80115ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d901      	bls.n	80115f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80115f2:	2303      	movs	r3, #3
 80115f4:	e0b5      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80115f6:	4b3e      	ldr	r3, [pc, #248]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 80115f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115fa:	f003 0302 	and.w	r3, r3, #2
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1ee      	bne.n	80115e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011602:	7dfb      	ldrb	r3, [r7, #23]
 8011604:	2b01      	cmp	r3, #1
 8011606:	d105      	bne.n	8011614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011608:	4b39      	ldr	r3, [pc, #228]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 801160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801160c:	4a38      	ldr	r2, [pc, #224]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 801160e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011612:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	699b      	ldr	r3, [r3, #24]
 8011618:	2b00      	cmp	r3, #0
 801161a:	f000 80a1 	beq.w	8011760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801161e:	4b34      	ldr	r3, [pc, #208]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	f003 030c 	and.w	r3, r3, #12
 8011626:	2b08      	cmp	r3, #8
 8011628:	d05c      	beq.n	80116e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	699b      	ldr	r3, [r3, #24]
 801162e:	2b02      	cmp	r3, #2
 8011630:	d141      	bne.n	80116b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011632:	4b31      	ldr	r3, [pc, #196]	@ (80116f8 <HAL_RCC_OscConfig+0x478>)
 8011634:	2200      	movs	r2, #0
 8011636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011638:	f7fd f882 	bl	800e740 <HAL_GetTick>
 801163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801163e:	e008      	b.n	8011652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011640:	f7fd f87e 	bl	800e740 <HAL_GetTick>
 8011644:	4602      	mov	r2, r0
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	1ad3      	subs	r3, r2, r3
 801164a:	2b02      	cmp	r3, #2
 801164c:	d901      	bls.n	8011652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801164e:	2303      	movs	r3, #3
 8011650:	e087      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011652:	4b27      	ldr	r3, [pc, #156]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801165a:	2b00      	cmp	r3, #0
 801165c:	d1f0      	bne.n	8011640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	69da      	ldr	r2, [r3, #28]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6a1b      	ldr	r3, [r3, #32]
 8011666:	431a      	orrs	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166c:	019b      	lsls	r3, r3, #6
 801166e:	431a      	orrs	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011674:	085b      	lsrs	r3, r3, #1
 8011676:	3b01      	subs	r3, #1
 8011678:	041b      	lsls	r3, r3, #16
 801167a:	431a      	orrs	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011680:	061b      	lsls	r3, r3, #24
 8011682:	491b      	ldr	r1, [pc, #108]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 8011684:	4313      	orrs	r3, r2
 8011686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011688:	4b1b      	ldr	r3, [pc, #108]	@ (80116f8 <HAL_RCC_OscConfig+0x478>)
 801168a:	2201      	movs	r2, #1
 801168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801168e:	f7fd f857 	bl	800e740 <HAL_GetTick>
 8011692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011694:	e008      	b.n	80116a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011696:	f7fd f853 	bl	800e740 <HAL_GetTick>
 801169a:	4602      	mov	r2, r0
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	2b02      	cmp	r3, #2
 80116a2:	d901      	bls.n	80116a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80116a4:	2303      	movs	r3, #3
 80116a6:	e05c      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80116a8:	4b11      	ldr	r3, [pc, #68]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d0f0      	beq.n	8011696 <HAL_RCC_OscConfig+0x416>
 80116b4:	e054      	b.n	8011760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80116b6:	4b10      	ldr	r3, [pc, #64]	@ (80116f8 <HAL_RCC_OscConfig+0x478>)
 80116b8:	2200      	movs	r2, #0
 80116ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80116bc:	f7fd f840 	bl	800e740 <HAL_GetTick>
 80116c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80116c2:	e008      	b.n	80116d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80116c4:	f7fd f83c 	bl	800e740 <HAL_GetTick>
 80116c8:	4602      	mov	r2, r0
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	1ad3      	subs	r3, r2, r3
 80116ce:	2b02      	cmp	r3, #2
 80116d0:	d901      	bls.n	80116d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80116d2:	2303      	movs	r3, #3
 80116d4:	e045      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80116d6:	4b06      	ldr	r3, [pc, #24]	@ (80116f0 <HAL_RCC_OscConfig+0x470>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d1f0      	bne.n	80116c4 <HAL_RCC_OscConfig+0x444>
 80116e2:	e03d      	b.n	8011760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	699b      	ldr	r3, [r3, #24]
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d107      	bne.n	80116fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80116ec:	2301      	movs	r3, #1
 80116ee:	e038      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
 80116f0:	40023800 	.word	0x40023800
 80116f4:	40007000 	.word	0x40007000
 80116f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80116fc:	4b1b      	ldr	r3, [pc, #108]	@ (801176c <HAL_RCC_OscConfig+0x4ec>)
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	699b      	ldr	r3, [r3, #24]
 8011706:	2b01      	cmp	r3, #1
 8011708:	d028      	beq.n	801175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011714:	429a      	cmp	r2, r3
 8011716:	d121      	bne.n	801175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011722:	429a      	cmp	r2, r3
 8011724:	d11a      	bne.n	801175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011726:	68fa      	ldr	r2, [r7, #12]
 8011728:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 801172c:	4013      	ands	r3, r2
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8011732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011734:	4293      	cmp	r3, r2
 8011736:	d111      	bne.n	801175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011742:	085b      	lsrs	r3, r3, #1
 8011744:	3b01      	subs	r3, #1
 8011746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011748:	429a      	cmp	r2, r3
 801174a:	d107      	bne.n	801175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011758:	429a      	cmp	r2, r3
 801175a:	d001      	beq.n	8011760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801175c:	2301      	movs	r3, #1
 801175e:	e000      	b.n	8011762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011760:	2300      	movs	r3, #0
}
 8011762:	4618      	mov	r0, r3
 8011764:	3718      	adds	r7, #24
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	40023800 	.word	0x40023800

08011770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d101      	bne.n	8011784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011780:	2301      	movs	r3, #1
 8011782:	e0cc      	b.n	801191e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011784:	4b68      	ldr	r3, [pc, #416]	@ (8011928 <HAL_RCC_ClockConfig+0x1b8>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f003 0307 	and.w	r3, r3, #7
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	429a      	cmp	r2, r3
 8011790:	d90c      	bls.n	80117ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011792:	4b65      	ldr	r3, [pc, #404]	@ (8011928 <HAL_RCC_ClockConfig+0x1b8>)
 8011794:	683a      	ldr	r2, [r7, #0]
 8011796:	b2d2      	uxtb	r2, r2
 8011798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801179a:	4b63      	ldr	r3, [pc, #396]	@ (8011928 <HAL_RCC_ClockConfig+0x1b8>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f003 0307 	and.w	r3, r3, #7
 80117a2:	683a      	ldr	r2, [r7, #0]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d001      	beq.n	80117ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80117a8:	2301      	movs	r3, #1
 80117aa:	e0b8      	b.n	801191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	f003 0302 	and.w	r3, r3, #2
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d020      	beq.n	80117fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f003 0304 	and.w	r3, r3, #4
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d005      	beq.n	80117d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80117c4:	4b59      	ldr	r3, [pc, #356]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	4a58      	ldr	r2, [pc, #352]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80117ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80117ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f003 0308 	and.w	r3, r3, #8
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d005      	beq.n	80117e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80117dc:	4b53      	ldr	r3, [pc, #332]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	4a52      	ldr	r2, [pc, #328]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80117e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80117e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80117e8:	4b50      	ldr	r3, [pc, #320]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80117ea:	689b      	ldr	r3, [r3, #8]
 80117ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	689b      	ldr	r3, [r3, #8]
 80117f4:	494d      	ldr	r1, [pc, #308]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80117f6:	4313      	orrs	r3, r2
 80117f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f003 0301 	and.w	r3, r3, #1
 8011802:	2b00      	cmp	r3, #0
 8011804:	d044      	beq.n	8011890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	2b01      	cmp	r3, #1
 801180c:	d107      	bne.n	801181e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801180e:	4b47      	ldr	r3, [pc, #284]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011816:	2b00      	cmp	r3, #0
 8011818:	d119      	bne.n	801184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801181a:	2301      	movs	r3, #1
 801181c:	e07f      	b.n	801191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	2b02      	cmp	r3, #2
 8011824:	d003      	beq.n	801182e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801182a:	2b03      	cmp	r3, #3
 801182c:	d107      	bne.n	801183e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801182e:	4b3f      	ldr	r3, [pc, #252]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011836:	2b00      	cmp	r3, #0
 8011838:	d109      	bne.n	801184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801183a:	2301      	movs	r3, #1
 801183c:	e06f      	b.n	801191e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801183e:	4b3b      	ldr	r3, [pc, #236]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f003 0302 	and.w	r3, r3, #2
 8011846:	2b00      	cmp	r3, #0
 8011848:	d101      	bne.n	801184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801184a:	2301      	movs	r3, #1
 801184c:	e067      	b.n	801191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801184e:	4b37      	ldr	r3, [pc, #220]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	f023 0203 	bic.w	r2, r3, #3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	4934      	ldr	r1, [pc, #208]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 801185c:	4313      	orrs	r3, r2
 801185e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011860:	f7fc ff6e 	bl	800e740 <HAL_GetTick>
 8011864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011866:	e00a      	b.n	801187e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011868:	f7fc ff6a 	bl	800e740 <HAL_GetTick>
 801186c:	4602      	mov	r2, r0
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	1ad3      	subs	r3, r2, r3
 8011872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011876:	4293      	cmp	r3, r2
 8011878:	d901      	bls.n	801187e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801187a:	2303      	movs	r3, #3
 801187c:	e04f      	b.n	801191e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801187e:	4b2b      	ldr	r3, [pc, #172]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	f003 020c 	and.w	r2, r3, #12
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	429a      	cmp	r2, r3
 801188e:	d1eb      	bne.n	8011868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011890:	4b25      	ldr	r3, [pc, #148]	@ (8011928 <HAL_RCC_ClockConfig+0x1b8>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	f003 0307 	and.w	r3, r3, #7
 8011898:	683a      	ldr	r2, [r7, #0]
 801189a:	429a      	cmp	r2, r3
 801189c:	d20c      	bcs.n	80118b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801189e:	4b22      	ldr	r3, [pc, #136]	@ (8011928 <HAL_RCC_ClockConfig+0x1b8>)
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	b2d2      	uxtb	r2, r2
 80118a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80118a6:	4b20      	ldr	r3, [pc, #128]	@ (8011928 <HAL_RCC_ClockConfig+0x1b8>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f003 0307 	and.w	r3, r3, #7
 80118ae:	683a      	ldr	r2, [r7, #0]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d001      	beq.n	80118b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80118b4:	2301      	movs	r3, #1
 80118b6:	e032      	b.n	801191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f003 0304 	and.w	r3, r3, #4
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d008      	beq.n	80118d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80118c4:	4b19      	ldr	r3, [pc, #100]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80118c6:	689b      	ldr	r3, [r3, #8]
 80118c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	4916      	ldr	r1, [pc, #88]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80118d2:	4313      	orrs	r3, r2
 80118d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f003 0308 	and.w	r3, r3, #8
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d009      	beq.n	80118f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80118e2:	4b12      	ldr	r3, [pc, #72]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80118e4:	689b      	ldr	r3, [r3, #8]
 80118e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	691b      	ldr	r3, [r3, #16]
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	490e      	ldr	r1, [pc, #56]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80118f2:	4313      	orrs	r3, r2
 80118f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80118f6:	f000 f821 	bl	801193c <HAL_RCC_GetSysClockFreq>
 80118fa:	4602      	mov	r2, r0
 80118fc:	4b0b      	ldr	r3, [pc, #44]	@ (801192c <HAL_RCC_ClockConfig+0x1bc>)
 80118fe:	689b      	ldr	r3, [r3, #8]
 8011900:	091b      	lsrs	r3, r3, #4
 8011902:	f003 030f 	and.w	r3, r3, #15
 8011906:	490a      	ldr	r1, [pc, #40]	@ (8011930 <HAL_RCC_ClockConfig+0x1c0>)
 8011908:	5ccb      	ldrb	r3, [r1, r3]
 801190a:	fa22 f303 	lsr.w	r3, r2, r3
 801190e:	4a09      	ldr	r2, [pc, #36]	@ (8011934 <HAL_RCC_ClockConfig+0x1c4>)
 8011910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011912:	4b09      	ldr	r3, [pc, #36]	@ (8011938 <HAL_RCC_ClockConfig+0x1c8>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4618      	mov	r0, r3
 8011918:	f7fc fece 	bl	800e6b8 <HAL_InitTick>

  return HAL_OK;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	40023c00 	.word	0x40023c00
 801192c:	40023800 	.word	0x40023800
 8011930:	0801e04c 	.word	0x0801e04c
 8011934:	2000004c 	.word	0x2000004c
 8011938:	20000050 	.word	0x20000050

0801193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801193c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011940:	b090      	sub	sp, #64	@ 0x40
 8011942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011944:	2300      	movs	r3, #0
 8011946:	637b      	str	r3, [r7, #52]	@ 0x34
 8011948:	2300      	movs	r3, #0
 801194a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801194c:	2300      	movs	r3, #0
 801194e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8011950:	2300      	movs	r3, #0
 8011952:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011954:	4b59      	ldr	r3, [pc, #356]	@ (8011abc <HAL_RCC_GetSysClockFreq+0x180>)
 8011956:	689b      	ldr	r3, [r3, #8]
 8011958:	f003 030c 	and.w	r3, r3, #12
 801195c:	2b08      	cmp	r3, #8
 801195e:	d00d      	beq.n	801197c <HAL_RCC_GetSysClockFreq+0x40>
 8011960:	2b08      	cmp	r3, #8
 8011962:	f200 80a1 	bhi.w	8011aa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8011966:	2b00      	cmp	r3, #0
 8011968:	d002      	beq.n	8011970 <HAL_RCC_GetSysClockFreq+0x34>
 801196a:	2b04      	cmp	r3, #4
 801196c:	d003      	beq.n	8011976 <HAL_RCC_GetSysClockFreq+0x3a>
 801196e:	e09b      	b.n	8011aa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011970:	4b53      	ldr	r3, [pc, #332]	@ (8011ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8011972:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8011974:	e09b      	b.n	8011aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011976:	4b53      	ldr	r3, [pc, #332]	@ (8011ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 8011978:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 801197a:	e098      	b.n	8011aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801197c:	4b4f      	ldr	r3, [pc, #316]	@ (8011abc <HAL_RCC_GetSysClockFreq+0x180>)
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011984:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011986:	4b4d      	ldr	r3, [pc, #308]	@ (8011abc <HAL_RCC_GetSysClockFreq+0x180>)
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801198e:	2b00      	cmp	r3, #0
 8011990:	d028      	beq.n	80119e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011992:	4b4a      	ldr	r3, [pc, #296]	@ (8011abc <HAL_RCC_GetSysClockFreq+0x180>)
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	099b      	lsrs	r3, r3, #6
 8011998:	2200      	movs	r2, #0
 801199a:	623b      	str	r3, [r7, #32]
 801199c:	627a      	str	r2, [r7, #36]	@ 0x24
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80119a4:	2100      	movs	r1, #0
 80119a6:	4b47      	ldr	r3, [pc, #284]	@ (8011ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80119a8:	fb03 f201 	mul.w	r2, r3, r1
 80119ac:	2300      	movs	r3, #0
 80119ae:	fb00 f303 	mul.w	r3, r0, r3
 80119b2:	4413      	add	r3, r2
 80119b4:	4a43      	ldr	r2, [pc, #268]	@ (8011ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80119b6:	fba0 1202 	umull	r1, r2, r0, r2
 80119ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80119bc:	460a      	mov	r2, r1
 80119be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80119c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119c2:	4413      	add	r3, r2
 80119c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119c8:	2200      	movs	r2, #0
 80119ca:	61bb      	str	r3, [r7, #24]
 80119cc:	61fa      	str	r2, [r7, #28]
 80119ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80119d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80119d6:	f7ef f93f 	bl	8000c58 <__aeabi_uldivmod>
 80119da:	4602      	mov	r2, r0
 80119dc:	460b      	mov	r3, r1
 80119de:	4613      	mov	r3, r2
 80119e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80119e2:	e053      	b.n	8011a8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80119e4:	4b35      	ldr	r3, [pc, #212]	@ (8011abc <HAL_RCC_GetSysClockFreq+0x180>)
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	099b      	lsrs	r3, r3, #6
 80119ea:	2200      	movs	r2, #0
 80119ec:	613b      	str	r3, [r7, #16]
 80119ee:	617a      	str	r2, [r7, #20]
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80119f6:	f04f 0b00 	mov.w	fp, #0
 80119fa:	4652      	mov	r2, sl
 80119fc:	465b      	mov	r3, fp
 80119fe:	f04f 0000 	mov.w	r0, #0
 8011a02:	f04f 0100 	mov.w	r1, #0
 8011a06:	0159      	lsls	r1, r3, #5
 8011a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011a0c:	0150      	lsls	r0, r2, #5
 8011a0e:	4602      	mov	r2, r0
 8011a10:	460b      	mov	r3, r1
 8011a12:	ebb2 080a 	subs.w	r8, r2, sl
 8011a16:	eb63 090b 	sbc.w	r9, r3, fp
 8011a1a:	f04f 0200 	mov.w	r2, #0
 8011a1e:	f04f 0300 	mov.w	r3, #0
 8011a22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8011a26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8011a2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8011a2e:	ebb2 0408 	subs.w	r4, r2, r8
 8011a32:	eb63 0509 	sbc.w	r5, r3, r9
 8011a36:	f04f 0200 	mov.w	r2, #0
 8011a3a:	f04f 0300 	mov.w	r3, #0
 8011a3e:	00eb      	lsls	r3, r5, #3
 8011a40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011a44:	00e2      	lsls	r2, r4, #3
 8011a46:	4614      	mov	r4, r2
 8011a48:	461d      	mov	r5, r3
 8011a4a:	eb14 030a 	adds.w	r3, r4, sl
 8011a4e:	603b      	str	r3, [r7, #0]
 8011a50:	eb45 030b 	adc.w	r3, r5, fp
 8011a54:	607b      	str	r3, [r7, #4]
 8011a56:	f04f 0200 	mov.w	r2, #0
 8011a5a:	f04f 0300 	mov.w	r3, #0
 8011a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011a62:	4629      	mov	r1, r5
 8011a64:	028b      	lsls	r3, r1, #10
 8011a66:	4621      	mov	r1, r4
 8011a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011a6c:	4621      	mov	r1, r4
 8011a6e:	028a      	lsls	r2, r1, #10
 8011a70:	4610      	mov	r0, r2
 8011a72:	4619      	mov	r1, r3
 8011a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a76:	2200      	movs	r2, #0
 8011a78:	60bb      	str	r3, [r7, #8]
 8011a7a:	60fa      	str	r2, [r7, #12]
 8011a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011a80:	f7ef f8ea 	bl	8000c58 <__aeabi_uldivmod>
 8011a84:	4602      	mov	r2, r0
 8011a86:	460b      	mov	r3, r1
 8011a88:	4613      	mov	r3, r2
 8011a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8011abc <HAL_RCC_GetSysClockFreq+0x180>)
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	0c1b      	lsrs	r3, r3, #16
 8011a92:	f003 0303 	and.w	r3, r3, #3
 8011a96:	3301      	adds	r3, #1
 8011a98:	005b      	lsls	r3, r3, #1
 8011a9a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8011a9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8011aa6:	e002      	b.n	8011aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011aa8:	4b05      	ldr	r3, [pc, #20]	@ (8011ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8011aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8011aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3740      	adds	r7, #64	@ 0x40
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011aba:	bf00      	nop
 8011abc:	40023800 	.word	0x40023800
 8011ac0:	00f42400 	.word	0x00f42400
 8011ac4:	017d7840 	.word	0x017d7840

08011ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011acc:	4b03      	ldr	r3, [pc, #12]	@ (8011adc <HAL_RCC_GetHCLKFreq+0x14>)
 8011ace:	681b      	ldr	r3, [r3, #0]
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr
 8011ada:	bf00      	nop
 8011adc:	2000004c 	.word	0x2000004c

08011ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d101      	bne.n	8011af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011aee:	2301      	movs	r3, #1
 8011af0:	e07b      	b.n	8011bea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d108      	bne.n	8011b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011b02:	d009      	beq.n	8011b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2200      	movs	r2, #0
 8011b08:	61da      	str	r2, [r3, #28]
 8011b0a:	e005      	b.n	8011b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d106      	bne.n	8011b38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7fc f86c 	bl	800dc10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2202      	movs	r2, #2
 8011b3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011b4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	689b      	ldr	r3, [r3, #8]
 8011b5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011b60:	431a      	orrs	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011b6a:	431a      	orrs	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	691b      	ldr	r3, [r3, #16]
 8011b70:	f003 0302 	and.w	r3, r3, #2
 8011b74:	431a      	orrs	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	695b      	ldr	r3, [r3, #20]
 8011b7a:	f003 0301 	and.w	r3, r3, #1
 8011b7e:	431a      	orrs	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	699b      	ldr	r3, [r3, #24]
 8011b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011b88:	431a      	orrs	r2, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	69db      	ldr	r3, [r3, #28]
 8011b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011b92:	431a      	orrs	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6a1b      	ldr	r3, [r3, #32]
 8011b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b9c:	ea42 0103 	orr.w	r1, r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ba4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	430a      	orrs	r2, r1
 8011bae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	699b      	ldr	r3, [r3, #24]
 8011bb4:	0c1b      	lsrs	r3, r3, #16
 8011bb6:	f003 0104 	and.w	r1, r3, #4
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bbe:	f003 0210 	and.w	r2, r3, #16
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	430a      	orrs	r2, r1
 8011bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	69da      	ldr	r2, [r3, #28]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2201      	movs	r2, #1
 8011be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8011be8:	2300      	movs	r3, #0
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3708      	adds	r7, #8
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b088      	sub	sp, #32
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	60f8      	str	r0, [r7, #12]
 8011bfa:	60b9      	str	r1, [r7, #8]
 8011bfc:	603b      	str	r3, [r7, #0]
 8011bfe:	4613      	mov	r3, r2
 8011c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011c02:	2300      	movs	r3, #0
 8011c04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d101      	bne.n	8011c14 <HAL_SPI_Transmit+0x22>
 8011c10:	2302      	movs	r3, #2
 8011c12:	e126      	b.n	8011e62 <HAL_SPI_Transmit+0x270>
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2201      	movs	r2, #1
 8011c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011c1c:	f7fc fd90 	bl	800e740 <HAL_GetTick>
 8011c20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011c22:	88fb      	ldrh	r3, [r7, #6]
 8011c24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d002      	beq.n	8011c38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011c32:	2302      	movs	r3, #2
 8011c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011c36:	e10b      	b.n	8011e50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d002      	beq.n	8011c44 <HAL_SPI_Transmit+0x52>
 8011c3e:	88fb      	ldrh	r3, [r7, #6]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d102      	bne.n	8011c4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011c44:	2301      	movs	r3, #1
 8011c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011c48:	e102      	b.n	8011e50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2203      	movs	r2, #3
 8011c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2200      	movs	r2, #0
 8011c56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	88fa      	ldrh	r2, [r7, #6]
 8011c62:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	88fa      	ldrh	r2, [r7, #6]
 8011c68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2200      	movs	r2, #0
 8011c74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2200      	movs	r2, #0
 8011c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	689b      	ldr	r3, [r3, #8]
 8011c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011c90:	d10f      	bne.n	8011cb2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cbc:	2b40      	cmp	r3, #64	@ 0x40
 8011cbe:	d007      	beq.n	8011cd0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011cd8:	d14b      	bne.n	8011d72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d002      	beq.n	8011ce8 <HAL_SPI_Transmit+0xf6>
 8011ce2:	8afb      	ldrh	r3, [r7, #22]
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d13e      	bne.n	8011d66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cec:	881a      	ldrh	r2, [r3, #0]
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cf8:	1c9a      	adds	r2, r3, #2
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	3b01      	subs	r3, #1
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011d0c:	e02b      	b.n	8011d66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	689b      	ldr	r3, [r3, #8]
 8011d14:	f003 0302 	and.w	r3, r3, #2
 8011d18:	2b02      	cmp	r3, #2
 8011d1a:	d112      	bne.n	8011d42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d20:	881a      	ldrh	r2, [r3, #0]
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d2c:	1c9a      	adds	r2, r3, #2
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	3b01      	subs	r3, #1
 8011d3a:	b29a      	uxth	r2, r3
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8011d40:	e011      	b.n	8011d66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d42:	f7fc fcfd 	bl	800e740 <HAL_GetTick>
 8011d46:	4602      	mov	r2, r0
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	683a      	ldr	r2, [r7, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d803      	bhi.n	8011d5a <HAL_SPI_Transmit+0x168>
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d58:	d102      	bne.n	8011d60 <HAL_SPI_Transmit+0x16e>
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d102      	bne.n	8011d66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8011d60:	2303      	movs	r3, #3
 8011d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011d64:	e074      	b.n	8011e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d1ce      	bne.n	8011d0e <HAL_SPI_Transmit+0x11c>
 8011d70:	e04c      	b.n	8011e0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d002      	beq.n	8011d80 <HAL_SPI_Transmit+0x18e>
 8011d7a:	8afb      	ldrh	r3, [r7, #22]
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d140      	bne.n	8011e02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	330c      	adds	r3, #12
 8011d8a:	7812      	ldrb	r2, [r2, #0]
 8011d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d92:	1c5a      	adds	r2, r3, #1
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	3b01      	subs	r3, #1
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8011da6:	e02c      	b.n	8011e02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	689b      	ldr	r3, [r3, #8]
 8011dae:	f003 0302 	and.w	r3, r3, #2
 8011db2:	2b02      	cmp	r3, #2
 8011db4:	d113      	bne.n	8011dde <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	330c      	adds	r3, #12
 8011dc0:	7812      	ldrb	r2, [r2, #0]
 8011dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dc8:	1c5a      	adds	r2, r3, #1
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	3b01      	subs	r3, #1
 8011dd6:	b29a      	uxth	r2, r3
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	86da      	strh	r2, [r3, #54]	@ 0x36
 8011ddc:	e011      	b.n	8011e02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011dde:	f7fc fcaf 	bl	800e740 <HAL_GetTick>
 8011de2:	4602      	mov	r2, r0
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	683a      	ldr	r2, [r7, #0]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d803      	bhi.n	8011df6 <HAL_SPI_Transmit+0x204>
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011df4:	d102      	bne.n	8011dfc <HAL_SPI_Transmit+0x20a>
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d102      	bne.n	8011e02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011e00:	e026      	b.n	8011e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d1cd      	bne.n	8011da8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011e0c:	69ba      	ldr	r2, [r7, #24]
 8011e0e:	6839      	ldr	r1, [r7, #0]
 8011e10:	68f8      	ldr	r0, [r7, #12]
 8011e12:	f000 f8b3 	bl	8011f7c <SPI_EndRxTxTransaction>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d002      	beq.n	8011e22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2220      	movs	r2, #32
 8011e20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	689b      	ldr	r3, [r3, #8]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d10a      	bne.n	8011e40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	613b      	str	r3, [r7, #16]
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	613b      	str	r3, [r7, #16]
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	689b      	ldr	r3, [r3, #8]
 8011e3c:	613b      	str	r3, [r7, #16]
 8011e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d002      	beq.n	8011e4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	77fb      	strb	r3, [r7, #31]
 8011e4c:	e000      	b.n	8011e50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8011e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2201      	movs	r2, #1
 8011e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8011e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3720      	adds	r7, #32
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
	...

08011e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b088      	sub	sp, #32
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	603b      	str	r3, [r7, #0]
 8011e78:	4613      	mov	r3, r2
 8011e7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011e7c:	f7fc fc60 	bl	800e740 <HAL_GetTick>
 8011e80:	4602      	mov	r2, r0
 8011e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e84:	1a9b      	subs	r3, r3, r2
 8011e86:	683a      	ldr	r2, [r7, #0]
 8011e88:	4413      	add	r3, r2
 8011e8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011e8c:	f7fc fc58 	bl	800e740 <HAL_GetTick>
 8011e90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011e92:	4b39      	ldr	r3, [pc, #228]	@ (8011f78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	015b      	lsls	r3, r3, #5
 8011e98:	0d1b      	lsrs	r3, r3, #20
 8011e9a:	69fa      	ldr	r2, [r7, #28]
 8011e9c:	fb02 f303 	mul.w	r3, r2, r3
 8011ea0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011ea2:	e054      	b.n	8011f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eaa:	d050      	beq.n	8011f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011eac:	f7fc fc48 	bl	800e740 <HAL_GetTick>
 8011eb0:	4602      	mov	r2, r0
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	1ad3      	subs	r3, r2, r3
 8011eb6:	69fa      	ldr	r2, [r7, #28]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d902      	bls.n	8011ec2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011ebc:	69fb      	ldr	r3, [r7, #28]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d13d      	bne.n	8011f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	685a      	ldr	r2, [r3, #4]
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011eda:	d111      	bne.n	8011f00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	689b      	ldr	r3, [r3, #8]
 8011ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ee4:	d004      	beq.n	8011ef0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011eee:	d107      	bne.n	8011f00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	681a      	ldr	r2, [r3, #0]
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011f08:	d10f      	bne.n	8011f2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	681a      	ldr	r2, [r3, #0]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011f18:	601a      	str	r2, [r3, #0]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	2200      	movs	r2, #0
 8011f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8011f3a:	2303      	movs	r3, #3
 8011f3c:	e017      	b.n	8011f6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d101      	bne.n	8011f48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011f44:	2300      	movs	r3, #0
 8011f46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	3b01      	subs	r3, #1
 8011f4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	689a      	ldr	r2, [r3, #8]
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	4013      	ands	r3, r2
 8011f58:	68ba      	ldr	r2, [r7, #8]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	bf0c      	ite	eq
 8011f5e:	2301      	moveq	r3, #1
 8011f60:	2300      	movne	r3, #0
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	461a      	mov	r2, r3
 8011f66:	79fb      	ldrb	r3, [r7, #7]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d19b      	bne.n	8011ea4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011f6c:	2300      	movs	r3, #0
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3720      	adds	r7, #32
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	2000004c 	.word	0x2000004c

08011f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b088      	sub	sp, #32
 8011f80:	af02      	add	r7, sp, #8
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011f88:	4b1b      	ldr	r3, [pc, #108]	@ (8011ff8 <SPI_EndRxTxTransaction+0x7c>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8011ffc <SPI_EndRxTxTransaction+0x80>)
 8011f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8011f92:	0d5b      	lsrs	r3, r3, #21
 8011f94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011f98:	fb02 f303 	mul.w	r3, r2, r3
 8011f9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011fa6:	d112      	bne.n	8011fce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	9300      	str	r3, [sp, #0]
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	2180      	movs	r1, #128	@ 0x80
 8011fb2:	68f8      	ldr	r0, [r7, #12]
 8011fb4:	f7ff ff5a 	bl	8011e6c <SPI_WaitFlagStateUntilTimeout>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d016      	beq.n	8011fec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fc2:	f043 0220 	orr.w	r2, r3, #32
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8011fca:	2303      	movs	r3, #3
 8011fcc:	e00f      	b.n	8011fee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00a      	beq.n	8011fea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	3b01      	subs	r3, #1
 8011fd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	689b      	ldr	r3, [r3, #8]
 8011fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011fe4:	2b80      	cmp	r3, #128	@ 0x80
 8011fe6:	d0f2      	beq.n	8011fce <SPI_EndRxTxTransaction+0x52>
 8011fe8:	e000      	b.n	8011fec <SPI_EndRxTxTransaction+0x70>
        break;
 8011fea:	bf00      	nop
  }

  return HAL_OK;
 8011fec:	2300      	movs	r3, #0
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3718      	adds	r7, #24
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	2000004c 	.word	0x2000004c
 8011ffc:	165e9f81 	.word	0x165e9f81

08012000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d101      	bne.n	8012012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801200e:	2301      	movs	r3, #1
 8012010:	e041      	b.n	8012096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012018:	b2db      	uxtb	r3, r3
 801201a:	2b00      	cmp	r3, #0
 801201c:	d106      	bne.n	801202c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2200      	movs	r2, #0
 8012022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7fb fe4a 	bl	800dcc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2202      	movs	r2, #2
 8012030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	3304      	adds	r3, #4
 801203c:	4619      	mov	r1, r3
 801203e:	4610      	mov	r0, r2
 8012040:	f000 fb40 	bl	80126c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2201      	movs	r2, #1
 8012048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2201      	movs	r2, #1
 8012050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2201      	movs	r2, #1
 8012058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2201      	movs	r2, #1
 8012060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2201      	movs	r2, #1
 8012068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2201      	movs	r2, #1
 8012070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2201      	movs	r2, #1
 8012078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2201      	movs	r2, #1
 8012080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2201      	movs	r2, #1
 8012088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2201      	movs	r2, #1
 8012090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012094:	2300      	movs	r3, #0
}
 8012096:	4618      	mov	r0, r3
 8012098:	3708      	adds	r7, #8
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
	...

080120a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b085      	sub	sp, #20
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	d001      	beq.n	80120b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80120b4:	2301      	movs	r3, #1
 80120b6:	e03c      	b.n	8012132 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2202      	movs	r2, #2
 80120bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4a1e      	ldr	r2, [pc, #120]	@ (8012140 <HAL_TIM_Base_Start+0xa0>)
 80120c6:	4293      	cmp	r3, r2
 80120c8:	d018      	beq.n	80120fc <HAL_TIM_Base_Start+0x5c>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120d2:	d013      	beq.n	80120fc <HAL_TIM_Base_Start+0x5c>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4a1a      	ldr	r2, [pc, #104]	@ (8012144 <HAL_TIM_Base_Start+0xa4>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d00e      	beq.n	80120fc <HAL_TIM_Base_Start+0x5c>
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	4a19      	ldr	r2, [pc, #100]	@ (8012148 <HAL_TIM_Base_Start+0xa8>)
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d009      	beq.n	80120fc <HAL_TIM_Base_Start+0x5c>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	4a17      	ldr	r2, [pc, #92]	@ (801214c <HAL_TIM_Base_Start+0xac>)
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d004      	beq.n	80120fc <HAL_TIM_Base_Start+0x5c>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4a16      	ldr	r2, [pc, #88]	@ (8012150 <HAL_TIM_Base_Start+0xb0>)
 80120f8:	4293      	cmp	r3, r2
 80120fa:	d111      	bne.n	8012120 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	689b      	ldr	r3, [r3, #8]
 8012102:	f003 0307 	and.w	r3, r3, #7
 8012106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	2b06      	cmp	r3, #6
 801210c:	d010      	beq.n	8012130 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	f042 0201 	orr.w	r2, r2, #1
 801211c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801211e:	e007      	b.n	8012130 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	681a      	ldr	r2, [r3, #0]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f042 0201 	orr.w	r2, r2, #1
 801212e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012130:	2300      	movs	r3, #0
}
 8012132:	4618      	mov	r0, r3
 8012134:	3714      	adds	r7, #20
 8012136:	46bd      	mov	sp, r7
 8012138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213c:	4770      	bx	lr
 801213e:	bf00      	nop
 8012140:	40010000 	.word	0x40010000
 8012144:	40000400 	.word	0x40000400
 8012148:	40000800 	.word	0x40000800
 801214c:	40000c00 	.word	0x40000c00
 8012150:	40014000 	.word	0x40014000

08012154 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d101      	bne.n	8012166 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8012162:	2301      	movs	r3, #1
 8012164:	e041      	b.n	80121ea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801216c:	b2db      	uxtb	r3, r3
 801216e:	2b00      	cmp	r3, #0
 8012170:	d106      	bne.n	8012180 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 f839 	bl	80121f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2202      	movs	r2, #2
 8012184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	3304      	adds	r3, #4
 8012190:	4619      	mov	r1, r3
 8012192:	4610      	mov	r0, r2
 8012194:	f000 fa96 	bl	80126c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2201      	movs	r2, #1
 801219c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2201      	movs	r2, #1
 80121a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2201      	movs	r2, #1
 80121ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2201      	movs	r2, #1
 80121b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2201      	movs	r2, #1
 80121bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2201      	movs	r2, #1
 80121c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2201      	movs	r2, #1
 80121cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2201      	movs	r2, #1
 80121d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2201      	movs	r2, #1
 80121dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2201      	movs	r2, #1
 80121e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80121e8:	2300      	movs	r3, #0
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3708      	adds	r7, #8
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}

080121f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80121f2:	b480      	push	{r7}
 80121f4:	b083      	sub	sp, #12
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80121fa:	bf00      	nop
 80121fc:	370c      	adds	r7, #12
 80121fe:	46bd      	mov	sp, r7
 8012200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012204:	4770      	bx	lr

08012206 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012206:	b580      	push	{r7, lr}
 8012208:	b082      	sub	sp, #8
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	691b      	ldr	r3, [r3, #16]
 8012214:	f003 0302 	and.w	r3, r3, #2
 8012218:	2b02      	cmp	r3, #2
 801221a:	d122      	bne.n	8012262 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	f003 0302 	and.w	r3, r3, #2
 8012226:	2b02      	cmp	r3, #2
 8012228:	d11b      	bne.n	8012262 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	f06f 0202 	mvn.w	r2, #2
 8012232:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2201      	movs	r2, #1
 8012238:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	699b      	ldr	r3, [r3, #24]
 8012240:	f003 0303 	and.w	r3, r3, #3
 8012244:	2b00      	cmp	r3, #0
 8012246:	d003      	beq.n	8012250 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 fa1c 	bl	8012686 <HAL_TIM_IC_CaptureCallback>
 801224e:	e005      	b.n	801225c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 fa0e 	bl	8012672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f000 fa1f 	bl	801269a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2200      	movs	r2, #0
 8012260:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	691b      	ldr	r3, [r3, #16]
 8012268:	f003 0304 	and.w	r3, r3, #4
 801226c:	2b04      	cmp	r3, #4
 801226e:	d122      	bne.n	80122b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	f003 0304 	and.w	r3, r3, #4
 801227a:	2b04      	cmp	r3, #4
 801227c:	d11b      	bne.n	80122b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	f06f 0204 	mvn.w	r2, #4
 8012286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2202      	movs	r2, #2
 801228c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	699b      	ldr	r3, [r3, #24]
 8012294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012298:	2b00      	cmp	r3, #0
 801229a:	d003      	beq.n	80122a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f000 f9f2 	bl	8012686 <HAL_TIM_IC_CaptureCallback>
 80122a2:	e005      	b.n	80122b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 f9e4 	bl	8012672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 f9f5 	bl	801269a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	691b      	ldr	r3, [r3, #16]
 80122bc:	f003 0308 	and.w	r3, r3, #8
 80122c0:	2b08      	cmp	r3, #8
 80122c2:	d122      	bne.n	801230a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	f003 0308 	and.w	r3, r3, #8
 80122ce:	2b08      	cmp	r3, #8
 80122d0:	d11b      	bne.n	801230a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f06f 0208 	mvn.w	r2, #8
 80122da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2204      	movs	r2, #4
 80122e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	69db      	ldr	r3, [r3, #28]
 80122e8:	f003 0303 	and.w	r3, r3, #3
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d003      	beq.n	80122f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 f9c8 	bl	8012686 <HAL_TIM_IC_CaptureCallback>
 80122f6:	e005      	b.n	8012304 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f000 f9ba 	bl	8012672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 f9cb 	bl	801269a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2200      	movs	r2, #0
 8012308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	691b      	ldr	r3, [r3, #16]
 8012310:	f003 0310 	and.w	r3, r3, #16
 8012314:	2b10      	cmp	r3, #16
 8012316:	d122      	bne.n	801235e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	68db      	ldr	r3, [r3, #12]
 801231e:	f003 0310 	and.w	r3, r3, #16
 8012322:	2b10      	cmp	r3, #16
 8012324:	d11b      	bne.n	801235e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f06f 0210 	mvn.w	r2, #16
 801232e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2208      	movs	r2, #8
 8012334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	69db      	ldr	r3, [r3, #28]
 801233c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012340:	2b00      	cmp	r3, #0
 8012342:	d003      	beq.n	801234c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f000 f99e 	bl	8012686 <HAL_TIM_IC_CaptureCallback>
 801234a:	e005      	b.n	8012358 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f000 f990 	bl	8012672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 f9a1 	bl	801269a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2200      	movs	r2, #0
 801235c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	f003 0301 	and.w	r3, r3, #1
 8012368:	2b01      	cmp	r3, #1
 801236a:	d10e      	bne.n	801238a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	f003 0301 	and.w	r3, r3, #1
 8012376:	2b01      	cmp	r3, #1
 8012378:	d107      	bne.n	801238a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f06f 0201 	mvn.w	r2, #1
 8012382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 f96a 	bl	801265e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	691b      	ldr	r3, [r3, #16]
 8012390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012394:	2b80      	cmp	r3, #128	@ 0x80
 8012396:	d10e      	bne.n	80123b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123a2:	2b80      	cmp	r3, #128	@ 0x80
 80123a4:	d107      	bne.n	80123b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80123ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f000 fca5 	bl	8012d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	691b      	ldr	r3, [r3, #16]
 80123bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123c0:	2b40      	cmp	r3, #64	@ 0x40
 80123c2:	d10e      	bne.n	80123e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123ce:	2b40      	cmp	r3, #64	@ 0x40
 80123d0:	d107      	bne.n	80123e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80123da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f000 f966 	bl	80126ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	691b      	ldr	r3, [r3, #16]
 80123e8:	f003 0320 	and.w	r3, r3, #32
 80123ec:	2b20      	cmp	r3, #32
 80123ee:	d10e      	bne.n	801240e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	68db      	ldr	r3, [r3, #12]
 80123f6:	f003 0320 	and.w	r3, r3, #32
 80123fa:	2b20      	cmp	r3, #32
 80123fc:	d107      	bne.n	801240e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f06f 0220 	mvn.w	r2, #32
 8012406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fc6f 	bl	8012cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801240e:	bf00      	nop
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
	...

08012418 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b086      	sub	sp, #24
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012424:	2300      	movs	r3, #0
 8012426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801242e:	2b01      	cmp	r3, #1
 8012430:	d101      	bne.n	8012436 <HAL_TIM_OC_ConfigChannel+0x1e>
 8012432:	2302      	movs	r3, #2
 8012434:	e048      	b.n	80124c8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	2201      	movs	r2, #1
 801243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b0c      	cmp	r3, #12
 8012442:	d839      	bhi.n	80124b8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8012444:	a201      	add	r2, pc, #4	@ (adr r2, 801244c <HAL_TIM_OC_ConfigChannel+0x34>)
 8012446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801244a:	bf00      	nop
 801244c:	08012481 	.word	0x08012481
 8012450:	080124b9 	.word	0x080124b9
 8012454:	080124b9 	.word	0x080124b9
 8012458:	080124b9 	.word	0x080124b9
 801245c:	0801248f 	.word	0x0801248f
 8012460:	080124b9 	.word	0x080124b9
 8012464:	080124b9 	.word	0x080124b9
 8012468:	080124b9 	.word	0x080124b9
 801246c:	0801249d 	.word	0x0801249d
 8012470:	080124b9 	.word	0x080124b9
 8012474:	080124b9 	.word	0x080124b9
 8012478:	080124b9 	.word	0x080124b9
 801247c:	080124ab 	.word	0x080124ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	68b9      	ldr	r1, [r7, #8]
 8012486:	4618      	mov	r0, r3
 8012488:	f000 f99c 	bl	80127c4 <TIM_OC1_SetConfig>
      break;
 801248c:	e017      	b.n	80124be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68b9      	ldr	r1, [r7, #8]
 8012494:	4618      	mov	r0, r3
 8012496:	f000 f9fb 	bl	8012890 <TIM_OC2_SetConfig>
      break;
 801249a:	e010      	b.n	80124be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	68b9      	ldr	r1, [r7, #8]
 80124a2:	4618      	mov	r0, r3
 80124a4:	f000 fa60 	bl	8012968 <TIM_OC3_SetConfig>
      break;
 80124a8:	e009      	b.n	80124be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	68b9      	ldr	r1, [r7, #8]
 80124b0:	4618      	mov	r0, r3
 80124b2:	f000 fac3 	bl	8012a3c <TIM_OC4_SetConfig>
      break;
 80124b6:	e002      	b.n	80124be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80124b8:	2301      	movs	r3, #1
 80124ba:	75fb      	strb	r3, [r7, #23]
      break;
 80124bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2200      	movs	r2, #0
 80124c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80124c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3718      	adds	r7, #24
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b084      	sub	sp, #16
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80124da:	2300      	movs	r3, #0
 80124dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d101      	bne.n	80124ec <HAL_TIM_ConfigClockSource+0x1c>
 80124e8:	2302      	movs	r3, #2
 80124ea:	e0b4      	b.n	8012656 <HAL_TIM_ConfigClockSource+0x186>
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2201      	movs	r2, #1
 80124f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2202      	movs	r2, #2
 80124f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	689b      	ldr	r3, [r3, #8]
 8012502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801250a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	68ba      	ldr	r2, [r7, #8]
 801251a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012524:	d03e      	beq.n	80125a4 <HAL_TIM_ConfigClockSource+0xd4>
 8012526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801252a:	f200 8087 	bhi.w	801263c <HAL_TIM_ConfigClockSource+0x16c>
 801252e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012532:	f000 8086 	beq.w	8012642 <HAL_TIM_ConfigClockSource+0x172>
 8012536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801253a:	d87f      	bhi.n	801263c <HAL_TIM_ConfigClockSource+0x16c>
 801253c:	2b70      	cmp	r3, #112	@ 0x70
 801253e:	d01a      	beq.n	8012576 <HAL_TIM_ConfigClockSource+0xa6>
 8012540:	2b70      	cmp	r3, #112	@ 0x70
 8012542:	d87b      	bhi.n	801263c <HAL_TIM_ConfigClockSource+0x16c>
 8012544:	2b60      	cmp	r3, #96	@ 0x60
 8012546:	d050      	beq.n	80125ea <HAL_TIM_ConfigClockSource+0x11a>
 8012548:	2b60      	cmp	r3, #96	@ 0x60
 801254a:	d877      	bhi.n	801263c <HAL_TIM_ConfigClockSource+0x16c>
 801254c:	2b50      	cmp	r3, #80	@ 0x50
 801254e:	d03c      	beq.n	80125ca <HAL_TIM_ConfigClockSource+0xfa>
 8012550:	2b50      	cmp	r3, #80	@ 0x50
 8012552:	d873      	bhi.n	801263c <HAL_TIM_ConfigClockSource+0x16c>
 8012554:	2b40      	cmp	r3, #64	@ 0x40
 8012556:	d058      	beq.n	801260a <HAL_TIM_ConfigClockSource+0x13a>
 8012558:	2b40      	cmp	r3, #64	@ 0x40
 801255a:	d86f      	bhi.n	801263c <HAL_TIM_ConfigClockSource+0x16c>
 801255c:	2b30      	cmp	r3, #48	@ 0x30
 801255e:	d064      	beq.n	801262a <HAL_TIM_ConfigClockSource+0x15a>
 8012560:	2b30      	cmp	r3, #48	@ 0x30
 8012562:	d86b      	bhi.n	801263c <HAL_TIM_ConfigClockSource+0x16c>
 8012564:	2b20      	cmp	r3, #32
 8012566:	d060      	beq.n	801262a <HAL_TIM_ConfigClockSource+0x15a>
 8012568:	2b20      	cmp	r3, #32
 801256a:	d867      	bhi.n	801263c <HAL_TIM_ConfigClockSource+0x16c>
 801256c:	2b00      	cmp	r3, #0
 801256e:	d05c      	beq.n	801262a <HAL_TIM_ConfigClockSource+0x15a>
 8012570:	2b10      	cmp	r3, #16
 8012572:	d05a      	beq.n	801262a <HAL_TIM_ConfigClockSource+0x15a>
 8012574:	e062      	b.n	801263c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6818      	ldr	r0, [r3, #0]
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	6899      	ldr	r1, [r3, #8]
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	685a      	ldr	r2, [r3, #4]
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	f000 fb23 	bl	8012bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	689b      	ldr	r3, [r3, #8]
 8012590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	68ba      	ldr	r2, [r7, #8]
 80125a0:	609a      	str	r2, [r3, #8]
      break;
 80125a2:	e04f      	b.n	8012644 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6818      	ldr	r0, [r3, #0]
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	6899      	ldr	r1, [r3, #8]
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	685a      	ldr	r2, [r3, #4]
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	f000 fb0c 	bl	8012bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	689a      	ldr	r2, [r3, #8]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80125c6:	609a      	str	r2, [r3, #8]
      break;
 80125c8:	e03c      	b.n	8012644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6818      	ldr	r0, [r3, #0]
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	6859      	ldr	r1, [r3, #4]
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	68db      	ldr	r3, [r3, #12]
 80125d6:	461a      	mov	r2, r3
 80125d8:	f000 fa80 	bl	8012adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2150      	movs	r1, #80	@ 0x50
 80125e2:	4618      	mov	r0, r3
 80125e4:	f000 fad9 	bl	8012b9a <TIM_ITRx_SetConfig>
      break;
 80125e8:	e02c      	b.n	8012644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6818      	ldr	r0, [r3, #0]
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	6859      	ldr	r1, [r3, #4]
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	68db      	ldr	r3, [r3, #12]
 80125f6:	461a      	mov	r2, r3
 80125f8:	f000 fa9f 	bl	8012b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2160      	movs	r1, #96	@ 0x60
 8012602:	4618      	mov	r0, r3
 8012604:	f000 fac9 	bl	8012b9a <TIM_ITRx_SetConfig>
      break;
 8012608:	e01c      	b.n	8012644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6818      	ldr	r0, [r3, #0]
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	6859      	ldr	r1, [r3, #4]
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	461a      	mov	r2, r3
 8012618:	f000 fa60 	bl	8012adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	2140      	movs	r1, #64	@ 0x40
 8012622:	4618      	mov	r0, r3
 8012624:	f000 fab9 	bl	8012b9a <TIM_ITRx_SetConfig>
      break;
 8012628:	e00c      	b.n	8012644 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	4619      	mov	r1, r3
 8012634:	4610      	mov	r0, r2
 8012636:	f000 fab0 	bl	8012b9a <TIM_ITRx_SetConfig>
      break;
 801263a:	e003      	b.n	8012644 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801263c:	2301      	movs	r3, #1
 801263e:	73fb      	strb	r3, [r7, #15]
      break;
 8012640:	e000      	b.n	8012644 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8012642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2201      	movs	r2, #1
 8012648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012654:	7bfb      	ldrb	r3, [r7, #15]
}
 8012656:	4618      	mov	r0, r3
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}

0801265e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801265e:	b480      	push	{r7}
 8012660:	b083      	sub	sp, #12
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8012666:	bf00      	nop
 8012668:	370c      	adds	r7, #12
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr

08012672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012672:	b480      	push	{r7}
 8012674:	b083      	sub	sp, #12
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801267a:	bf00      	nop
 801267c:	370c      	adds	r7, #12
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr

08012686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012686:	b480      	push	{r7}
 8012688:	b083      	sub	sp, #12
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801268e:	bf00      	nop
 8012690:	370c      	adds	r7, #12
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr

0801269a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801269a:	b480      	push	{r7}
 801269c:	b083      	sub	sp, #12
 801269e:	af00      	add	r7, sp, #0
 80126a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80126a2:	bf00      	nop
 80126a4:	370c      	adds	r7, #12
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr

080126ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80126ae:	b480      	push	{r7}
 80126b0:	b083      	sub	sp, #12
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80126b6:	bf00      	nop
 80126b8:	370c      	adds	r7, #12
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr
	...

080126c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80126c4:	b480      	push	{r7}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	4a34      	ldr	r2, [pc, #208]	@ (80127a8 <TIM_Base_SetConfig+0xe4>)
 80126d8:	4293      	cmp	r3, r2
 80126da:	d00f      	beq.n	80126fc <TIM_Base_SetConfig+0x38>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80126e2:	d00b      	beq.n	80126fc <TIM_Base_SetConfig+0x38>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	4a31      	ldr	r2, [pc, #196]	@ (80127ac <TIM_Base_SetConfig+0xe8>)
 80126e8:	4293      	cmp	r3, r2
 80126ea:	d007      	beq.n	80126fc <TIM_Base_SetConfig+0x38>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4a30      	ldr	r2, [pc, #192]	@ (80127b0 <TIM_Base_SetConfig+0xec>)
 80126f0:	4293      	cmp	r3, r2
 80126f2:	d003      	beq.n	80126fc <TIM_Base_SetConfig+0x38>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	4a2f      	ldr	r2, [pc, #188]	@ (80127b4 <TIM_Base_SetConfig+0xf0>)
 80126f8:	4293      	cmp	r3, r2
 80126fa:	d108      	bne.n	801270e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	4313      	orrs	r3, r2
 801270c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	4a25      	ldr	r2, [pc, #148]	@ (80127a8 <TIM_Base_SetConfig+0xe4>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d01b      	beq.n	801274e <TIM_Base_SetConfig+0x8a>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801271c:	d017      	beq.n	801274e <TIM_Base_SetConfig+0x8a>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	4a22      	ldr	r2, [pc, #136]	@ (80127ac <TIM_Base_SetConfig+0xe8>)
 8012722:	4293      	cmp	r3, r2
 8012724:	d013      	beq.n	801274e <TIM_Base_SetConfig+0x8a>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4a21      	ldr	r2, [pc, #132]	@ (80127b0 <TIM_Base_SetConfig+0xec>)
 801272a:	4293      	cmp	r3, r2
 801272c:	d00f      	beq.n	801274e <TIM_Base_SetConfig+0x8a>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4a20      	ldr	r2, [pc, #128]	@ (80127b4 <TIM_Base_SetConfig+0xf0>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d00b      	beq.n	801274e <TIM_Base_SetConfig+0x8a>
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4a1f      	ldr	r2, [pc, #124]	@ (80127b8 <TIM_Base_SetConfig+0xf4>)
 801273a:	4293      	cmp	r3, r2
 801273c:	d007      	beq.n	801274e <TIM_Base_SetConfig+0x8a>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	4a1e      	ldr	r2, [pc, #120]	@ (80127bc <TIM_Base_SetConfig+0xf8>)
 8012742:	4293      	cmp	r3, r2
 8012744:	d003      	beq.n	801274e <TIM_Base_SetConfig+0x8a>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	4a1d      	ldr	r2, [pc, #116]	@ (80127c0 <TIM_Base_SetConfig+0xfc>)
 801274a:	4293      	cmp	r3, r2
 801274c:	d108      	bne.n	8012760 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	68fa      	ldr	r2, [r7, #12]
 801275c:	4313      	orrs	r3, r2
 801275e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	695b      	ldr	r3, [r3, #20]
 801276a:	4313      	orrs	r3, r2
 801276c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	68fa      	ldr	r2, [r7, #12]
 8012772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	689a      	ldr	r2, [r3, #8]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4a08      	ldr	r2, [pc, #32]	@ (80127a8 <TIM_Base_SetConfig+0xe4>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d103      	bne.n	8012794 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	691a      	ldr	r2, [r3, #16]
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2201      	movs	r2, #1
 8012798:	615a      	str	r2, [r3, #20]
}
 801279a:	bf00      	nop
 801279c:	3714      	adds	r7, #20
 801279e:	46bd      	mov	sp, r7
 80127a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a4:	4770      	bx	lr
 80127a6:	bf00      	nop
 80127a8:	40010000 	.word	0x40010000
 80127ac:	40000400 	.word	0x40000400
 80127b0:	40000800 	.word	0x40000800
 80127b4:	40000c00 	.word	0x40000c00
 80127b8:	40014000 	.word	0x40014000
 80127bc:	40014400 	.word	0x40014400
 80127c0:	40014800 	.word	0x40014800

080127c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80127c4:	b480      	push	{r7}
 80127c6:	b087      	sub	sp, #28
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6a1b      	ldr	r3, [r3, #32]
 80127d2:	f023 0201 	bic.w	r2, r3, #1
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6a1b      	ldr	r3, [r3, #32]
 80127de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	699b      	ldr	r3, [r3, #24]
 80127ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80127f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f023 0303 	bic.w	r3, r3, #3
 80127fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	68fa      	ldr	r2, [r7, #12]
 8012802:	4313      	orrs	r3, r2
 8012804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	f023 0302 	bic.w	r3, r3, #2
 801280c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	697a      	ldr	r2, [r7, #20]
 8012814:	4313      	orrs	r3, r2
 8012816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	4a1c      	ldr	r2, [pc, #112]	@ (801288c <TIM_OC1_SetConfig+0xc8>)
 801281c:	4293      	cmp	r3, r2
 801281e:	d10c      	bne.n	801283a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	f023 0308 	bic.w	r3, r3, #8
 8012826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	697a      	ldr	r2, [r7, #20]
 801282e:	4313      	orrs	r3, r2
 8012830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	f023 0304 	bic.w	r3, r3, #4
 8012838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	4a13      	ldr	r2, [pc, #76]	@ (801288c <TIM_OC1_SetConfig+0xc8>)
 801283e:	4293      	cmp	r3, r2
 8012840:	d111      	bne.n	8012866 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	695b      	ldr	r3, [r3, #20]
 8012856:	693a      	ldr	r2, [r7, #16]
 8012858:	4313      	orrs	r3, r2
 801285a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	699b      	ldr	r3, [r3, #24]
 8012860:	693a      	ldr	r2, [r7, #16]
 8012862:	4313      	orrs	r3, r2
 8012864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	693a      	ldr	r2, [r7, #16]
 801286a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	68fa      	ldr	r2, [r7, #12]
 8012870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	685a      	ldr	r2, [r3, #4]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	697a      	ldr	r2, [r7, #20]
 801287e:	621a      	str	r2, [r3, #32]
}
 8012880:	bf00      	nop
 8012882:	371c      	adds	r7, #28
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr
 801288c:	40010000 	.word	0x40010000

08012890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012890:	b480      	push	{r7}
 8012892:	b087      	sub	sp, #28
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6a1b      	ldr	r3, [r3, #32]
 801289e:	f023 0210 	bic.w	r2, r3, #16
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6a1b      	ldr	r3, [r3, #32]
 80128aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	699b      	ldr	r3, [r3, #24]
 80128b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80128be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80128c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	021b      	lsls	r3, r3, #8
 80128ce:	68fa      	ldr	r2, [r7, #12]
 80128d0:	4313      	orrs	r3, r2
 80128d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	f023 0320 	bic.w	r3, r3, #32
 80128da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	011b      	lsls	r3, r3, #4
 80128e2:	697a      	ldr	r2, [r7, #20]
 80128e4:	4313      	orrs	r3, r2
 80128e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	4a1e      	ldr	r2, [pc, #120]	@ (8012964 <TIM_OC2_SetConfig+0xd4>)
 80128ec:	4293      	cmp	r3, r2
 80128ee:	d10d      	bne.n	801290c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80128f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	011b      	lsls	r3, r3, #4
 80128fe:	697a      	ldr	r2, [r7, #20]
 8012900:	4313      	orrs	r3, r2
 8012902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801290a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	4a15      	ldr	r2, [pc, #84]	@ (8012964 <TIM_OC2_SetConfig+0xd4>)
 8012910:	4293      	cmp	r3, r2
 8012912:	d113      	bne.n	801293c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801291a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	695b      	ldr	r3, [r3, #20]
 8012928:	009b      	lsls	r3, r3, #2
 801292a:	693a      	ldr	r2, [r7, #16]
 801292c:	4313      	orrs	r3, r2
 801292e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	699b      	ldr	r3, [r3, #24]
 8012934:	009b      	lsls	r3, r3, #2
 8012936:	693a      	ldr	r2, [r7, #16]
 8012938:	4313      	orrs	r3, r2
 801293a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	693a      	ldr	r2, [r7, #16]
 8012940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	68fa      	ldr	r2, [r7, #12]
 8012946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	685a      	ldr	r2, [r3, #4]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	697a      	ldr	r2, [r7, #20]
 8012954:	621a      	str	r2, [r3, #32]
}
 8012956:	bf00      	nop
 8012958:	371c      	adds	r7, #28
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr
 8012962:	bf00      	nop
 8012964:	40010000 	.word	0x40010000

08012968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012968:	b480      	push	{r7}
 801296a:	b087      	sub	sp, #28
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6a1b      	ldr	r3, [r3, #32]
 8012976:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6a1b      	ldr	r3, [r3, #32]
 8012982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	69db      	ldr	r3, [r3, #28]
 801298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	f023 0303 	bic.w	r3, r3, #3
 801299e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	68fa      	ldr	r2, [r7, #12]
 80129a6:	4313      	orrs	r3, r2
 80129a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80129b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	689b      	ldr	r3, [r3, #8]
 80129b6:	021b      	lsls	r3, r3, #8
 80129b8:	697a      	ldr	r2, [r7, #20]
 80129ba:	4313      	orrs	r3, r2
 80129bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4a1d      	ldr	r2, [pc, #116]	@ (8012a38 <TIM_OC3_SetConfig+0xd0>)
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d10d      	bne.n	80129e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80129cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	68db      	ldr	r3, [r3, #12]
 80129d2:	021b      	lsls	r3, r3, #8
 80129d4:	697a      	ldr	r2, [r7, #20]
 80129d6:	4313      	orrs	r3, r2
 80129d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80129e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	4a14      	ldr	r2, [pc, #80]	@ (8012a38 <TIM_OC3_SetConfig+0xd0>)
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d113      	bne.n	8012a12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80129f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80129f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	695b      	ldr	r3, [r3, #20]
 80129fe:	011b      	lsls	r3, r3, #4
 8012a00:	693a      	ldr	r2, [r7, #16]
 8012a02:	4313      	orrs	r3, r2
 8012a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	699b      	ldr	r3, [r3, #24]
 8012a0a:	011b      	lsls	r3, r3, #4
 8012a0c:	693a      	ldr	r2, [r7, #16]
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	693a      	ldr	r2, [r7, #16]
 8012a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	68fa      	ldr	r2, [r7, #12]
 8012a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	685a      	ldr	r2, [r3, #4]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	697a      	ldr	r2, [r7, #20]
 8012a2a:	621a      	str	r2, [r3, #32]
}
 8012a2c:	bf00      	nop
 8012a2e:	371c      	adds	r7, #28
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr
 8012a38:	40010000 	.word	0x40010000

08012a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	b087      	sub	sp, #28
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6a1b      	ldr	r3, [r3, #32]
 8012a4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6a1b      	ldr	r3, [r3, #32]
 8012a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	685b      	ldr	r3, [r3, #4]
 8012a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	69db      	ldr	r3, [r3, #28]
 8012a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	021b      	lsls	r3, r3, #8
 8012a7a:	68fa      	ldr	r2, [r7, #12]
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012a80:	693b      	ldr	r3, [r7, #16]
 8012a82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	689b      	ldr	r3, [r3, #8]
 8012a8c:	031b      	lsls	r3, r3, #12
 8012a8e:	693a      	ldr	r2, [r7, #16]
 8012a90:	4313      	orrs	r3, r2
 8012a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	4a10      	ldr	r2, [pc, #64]	@ (8012ad8 <TIM_OC4_SetConfig+0x9c>)
 8012a98:	4293      	cmp	r3, r2
 8012a9a:	d109      	bne.n	8012ab0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	695b      	ldr	r3, [r3, #20]
 8012aa8:	019b      	lsls	r3, r3, #6
 8012aaa:	697a      	ldr	r2, [r7, #20]
 8012aac:	4313      	orrs	r3, r2
 8012aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	697a      	ldr	r2, [r7, #20]
 8012ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	685a      	ldr	r2, [r3, #4]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	693a      	ldr	r2, [r7, #16]
 8012ac8:	621a      	str	r2, [r3, #32]
}
 8012aca:	bf00      	nop
 8012acc:	371c      	adds	r7, #28
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	40010000 	.word	0x40010000

08012adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b087      	sub	sp, #28
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	60f8      	str	r0, [r7, #12]
 8012ae4:	60b9      	str	r1, [r7, #8]
 8012ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	6a1b      	ldr	r3, [r3, #32]
 8012aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	6a1b      	ldr	r3, [r3, #32]
 8012af2:	f023 0201 	bic.w	r2, r3, #1
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	699b      	ldr	r3, [r3, #24]
 8012afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	011b      	lsls	r3, r3, #4
 8012b0c:	693a      	ldr	r2, [r7, #16]
 8012b0e:	4313      	orrs	r3, r2
 8012b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	f023 030a 	bic.w	r3, r3, #10
 8012b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012b1a:	697a      	ldr	r2, [r7, #20]
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	4313      	orrs	r3, r2
 8012b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	693a      	ldr	r2, [r7, #16]
 8012b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	697a      	ldr	r2, [r7, #20]
 8012b2c:	621a      	str	r2, [r3, #32]
}
 8012b2e:	bf00      	nop
 8012b30:	371c      	adds	r7, #28
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr

08012b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012b3a:	b480      	push	{r7}
 8012b3c:	b087      	sub	sp, #28
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	60f8      	str	r0, [r7, #12]
 8012b42:	60b9      	str	r1, [r7, #8]
 8012b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	6a1b      	ldr	r3, [r3, #32]
 8012b4a:	f023 0210 	bic.w	r2, r3, #16
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	699b      	ldr	r3, [r3, #24]
 8012b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	6a1b      	ldr	r3, [r3, #32]
 8012b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	031b      	lsls	r3, r3, #12
 8012b6a:	697a      	ldr	r2, [r7, #20]
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8012b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	011b      	lsls	r3, r3, #4
 8012b7c:	693a      	ldr	r2, [r7, #16]
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	697a      	ldr	r2, [r7, #20]
 8012b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	693a      	ldr	r2, [r7, #16]
 8012b8c:	621a      	str	r2, [r3, #32]
}
 8012b8e:	bf00      	nop
 8012b90:	371c      	adds	r7, #28
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012b9a:	b480      	push	{r7}
 8012b9c:	b085      	sub	sp, #20
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
 8012ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	689b      	ldr	r3, [r3, #8]
 8012ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012bb2:	683a      	ldr	r2, [r7, #0]
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	4313      	orrs	r3, r2
 8012bb8:	f043 0307 	orr.w	r3, r3, #7
 8012bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	68fa      	ldr	r2, [r7, #12]
 8012bc2:	609a      	str	r2, [r3, #8]
}
 8012bc4:	bf00      	nop
 8012bc6:	3714      	adds	r7, #20
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bce:	4770      	bx	lr

08012bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	b087      	sub	sp, #28
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
 8012bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	689b      	ldr	r3, [r3, #8]
 8012be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	021a      	lsls	r2, r3, #8
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	431a      	orrs	r2, r3
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	697a      	ldr	r2, [r7, #20]
 8012bfa:	4313      	orrs	r3, r2
 8012bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	697a      	ldr	r2, [r7, #20]
 8012c02:	609a      	str	r2, [r3, #8]
}
 8012c04:	bf00      	nop
 8012c06:	371c      	adds	r7, #28
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr

08012c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b085      	sub	sp, #20
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d101      	bne.n	8012c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012c24:	2302      	movs	r3, #2
 8012c26:	e050      	b.n	8012cca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2202      	movs	r2, #2
 8012c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	4313      	orrs	r3, r2
 8012c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	68fa      	ldr	r2, [r7, #12]
 8012c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4a1c      	ldr	r2, [pc, #112]	@ (8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8012c68:	4293      	cmp	r3, r2
 8012c6a:	d018      	beq.n	8012c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c74:	d013      	beq.n	8012c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	4a18      	ldr	r2, [pc, #96]	@ (8012cdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d00e      	beq.n	8012c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	4a16      	ldr	r2, [pc, #88]	@ (8012ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d009      	beq.n	8012c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	4a15      	ldr	r2, [pc, #84]	@ (8012ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8012c90:	4293      	cmp	r3, r2
 8012c92:	d004      	beq.n	8012c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4a13      	ldr	r2, [pc, #76]	@ (8012ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d10c      	bne.n	8012cb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	68ba      	ldr	r2, [r7, #8]
 8012cac:	4313      	orrs	r3, r2
 8012cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	68ba      	ldr	r2, [r7, #8]
 8012cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2201      	movs	r2, #1
 8012cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012cc8:	2300      	movs	r3, #0
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3714      	adds	r7, #20
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd4:	4770      	bx	lr
 8012cd6:	bf00      	nop
 8012cd8:	40010000 	.word	0x40010000
 8012cdc:	40000400 	.word	0x40000400
 8012ce0:	40000800 	.word	0x40000800
 8012ce4:	40000c00 	.word	0x40000c00
 8012ce8:	40014000 	.word	0x40014000

08012cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012cf4:	bf00      	nop
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr

08012d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012d08:	bf00      	nop
 8012d0a:	370c      	adds	r7, #12
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr

08012d14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d14:	b084      	sub	sp, #16
 8012d16:	b580      	push	{r7, lr}
 8012d18:	b084      	sub	sp, #16
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
 8012d1e:	f107 001c 	add.w	r0, r7, #28
 8012d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d122      	bne.n	8012d72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8012d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d56:	2b01      	cmp	r3, #1
 8012d58:	d105      	bne.n	8012d66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f001 fb1c 	bl	80143a4 <USB_CoreReset>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	73fb      	strb	r3, [r7, #15]
 8012d70:	e01a      	b.n	8012da8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	68db      	ldr	r3, [r3, #12]
 8012d76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f001 fb10 	bl	80143a4 <USB_CoreReset>
 8012d84:	4603      	mov	r3, r0
 8012d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d106      	bne.n	8012d9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	639a      	str	r2, [r3, #56]	@ 0x38
 8012d9a:	e005      	b.n	8012da8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012da0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012daa:	2b01      	cmp	r3, #1
 8012dac:	d10b      	bne.n	8012dc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	689b      	ldr	r3, [r3, #8]
 8012db2:	f043 0206 	orr.w	r2, r3, #6
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	689b      	ldr	r3, [r3, #8]
 8012dbe:	f043 0220 	orr.w	r2, r3, #32
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3710      	adds	r7, #16
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012dd2:	b004      	add	sp, #16
 8012dd4:	4770      	bx	lr
	...

08012dd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b087      	sub	sp, #28
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	60b9      	str	r1, [r7, #8]
 8012de2:	4613      	mov	r3, r2
 8012de4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012de6:	79fb      	ldrb	r3, [r7, #7]
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d165      	bne.n	8012eb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	4a41      	ldr	r2, [pc, #260]	@ (8012ef4 <USB_SetTurnaroundTime+0x11c>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d906      	bls.n	8012e02 <USB_SetTurnaroundTime+0x2a>
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	4a40      	ldr	r2, [pc, #256]	@ (8012ef8 <USB_SetTurnaroundTime+0x120>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d202      	bcs.n	8012e02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012dfc:	230f      	movs	r3, #15
 8012dfe:	617b      	str	r3, [r7, #20]
 8012e00:	e062      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	4a3c      	ldr	r2, [pc, #240]	@ (8012ef8 <USB_SetTurnaroundTime+0x120>)
 8012e06:	4293      	cmp	r3, r2
 8012e08:	d306      	bcc.n	8012e18 <USB_SetTurnaroundTime+0x40>
 8012e0a:	68bb      	ldr	r3, [r7, #8]
 8012e0c:	4a3b      	ldr	r2, [pc, #236]	@ (8012efc <USB_SetTurnaroundTime+0x124>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d202      	bcs.n	8012e18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012e12:	230e      	movs	r3, #14
 8012e14:	617b      	str	r3, [r7, #20]
 8012e16:	e057      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	4a38      	ldr	r2, [pc, #224]	@ (8012efc <USB_SetTurnaroundTime+0x124>)
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d306      	bcc.n	8012e2e <USB_SetTurnaroundTime+0x56>
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	4a37      	ldr	r2, [pc, #220]	@ (8012f00 <USB_SetTurnaroundTime+0x128>)
 8012e24:	4293      	cmp	r3, r2
 8012e26:	d202      	bcs.n	8012e2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012e28:	230d      	movs	r3, #13
 8012e2a:	617b      	str	r3, [r7, #20]
 8012e2c:	e04c      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	4a33      	ldr	r2, [pc, #204]	@ (8012f00 <USB_SetTurnaroundTime+0x128>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d306      	bcc.n	8012e44 <USB_SetTurnaroundTime+0x6c>
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	4a32      	ldr	r2, [pc, #200]	@ (8012f04 <USB_SetTurnaroundTime+0x12c>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d802      	bhi.n	8012e44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012e3e:	230c      	movs	r3, #12
 8012e40:	617b      	str	r3, [r7, #20]
 8012e42:	e041      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	4a2f      	ldr	r2, [pc, #188]	@ (8012f04 <USB_SetTurnaroundTime+0x12c>)
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d906      	bls.n	8012e5a <USB_SetTurnaroundTime+0x82>
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8012f08 <USB_SetTurnaroundTime+0x130>)
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d802      	bhi.n	8012e5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012e54:	230b      	movs	r3, #11
 8012e56:	617b      	str	r3, [r7, #20]
 8012e58:	e036      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8012f08 <USB_SetTurnaroundTime+0x130>)
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d906      	bls.n	8012e70 <USB_SetTurnaroundTime+0x98>
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	4a29      	ldr	r2, [pc, #164]	@ (8012f0c <USB_SetTurnaroundTime+0x134>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d802      	bhi.n	8012e70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012e6a:	230a      	movs	r3, #10
 8012e6c:	617b      	str	r3, [r7, #20]
 8012e6e:	e02b      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	4a26      	ldr	r2, [pc, #152]	@ (8012f0c <USB_SetTurnaroundTime+0x134>)
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d906      	bls.n	8012e86 <USB_SetTurnaroundTime+0xae>
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	4a25      	ldr	r2, [pc, #148]	@ (8012f10 <USB_SetTurnaroundTime+0x138>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d202      	bcs.n	8012e86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012e80:	2309      	movs	r3, #9
 8012e82:	617b      	str	r3, [r7, #20]
 8012e84:	e020      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	4a21      	ldr	r2, [pc, #132]	@ (8012f10 <USB_SetTurnaroundTime+0x138>)
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d306      	bcc.n	8012e9c <USB_SetTurnaroundTime+0xc4>
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	4a20      	ldr	r2, [pc, #128]	@ (8012f14 <USB_SetTurnaroundTime+0x13c>)
 8012e92:	4293      	cmp	r3, r2
 8012e94:	d802      	bhi.n	8012e9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012e96:	2308      	movs	r3, #8
 8012e98:	617b      	str	r3, [r7, #20]
 8012e9a:	e015      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8012f14 <USB_SetTurnaroundTime+0x13c>)
 8012ea0:	4293      	cmp	r3, r2
 8012ea2:	d906      	bls.n	8012eb2 <USB_SetTurnaroundTime+0xda>
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8012f18 <USB_SetTurnaroundTime+0x140>)
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d202      	bcs.n	8012eb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012eac:	2307      	movs	r3, #7
 8012eae:	617b      	str	r3, [r7, #20]
 8012eb0:	e00a      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012eb2:	2306      	movs	r3, #6
 8012eb4:	617b      	str	r3, [r7, #20]
 8012eb6:	e007      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d102      	bne.n	8012ec4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012ebe:	2309      	movs	r3, #9
 8012ec0:	617b      	str	r3, [r7, #20]
 8012ec2:	e001      	b.n	8012ec8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012ec4:	2309      	movs	r3, #9
 8012ec6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	68da      	ldr	r2, [r3, #12]
 8012ed8:	697b      	ldr	r3, [r7, #20]
 8012eda:	029b      	lsls	r3, r3, #10
 8012edc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8012ee0:	431a      	orrs	r2, r3
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012ee6:	2300      	movs	r3, #0
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	371c      	adds	r7, #28
 8012eec:	46bd      	mov	sp, r7
 8012eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef2:	4770      	bx	lr
 8012ef4:	00d8acbf 	.word	0x00d8acbf
 8012ef8:	00e4e1c0 	.word	0x00e4e1c0
 8012efc:	00f42400 	.word	0x00f42400
 8012f00:	01067380 	.word	0x01067380
 8012f04:	011a499f 	.word	0x011a499f
 8012f08:	01312cff 	.word	0x01312cff
 8012f0c:	014ca43f 	.word	0x014ca43f
 8012f10:	016e3600 	.word	0x016e3600
 8012f14:	01a6ab1f 	.word	0x01a6ab1f
 8012f18:	01e84800 	.word	0x01e84800

08012f1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b083      	sub	sp, #12
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	689b      	ldr	r3, [r3, #8]
 8012f28:	f043 0201 	orr.w	r2, r3, #1
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012f30:	2300      	movs	r3, #0
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	370c      	adds	r7, #12
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr

08012f3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f3e:	b480      	push	{r7}
 8012f40:	b083      	sub	sp, #12
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	689b      	ldr	r3, [r3, #8]
 8012f4a:	f023 0201 	bic.w	r2, r3, #1
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012f52:	2300      	movs	r3, #0
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	370c      	adds	r7, #12
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr

08012f60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	460b      	mov	r3, r1
 8012f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012f7c:	78fb      	ldrb	r3, [r7, #3]
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d115      	bne.n	8012fae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	68db      	ldr	r3, [r3, #12]
 8012f86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012f8e:	2001      	movs	r0, #1
 8012f90:	f7fb fbe2 	bl	800e758 <HAL_Delay>
      ms++;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	3301      	adds	r3, #1
 8012f98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f001 f972 	bl	8014284 <USB_GetMode>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d01e      	beq.n	8012fe4 <USB_SetCurrentMode+0x84>
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2b31      	cmp	r3, #49	@ 0x31
 8012faa:	d9f0      	bls.n	8012f8e <USB_SetCurrentMode+0x2e>
 8012fac:	e01a      	b.n	8012fe4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012fae:	78fb      	ldrb	r3, [r7, #3]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d115      	bne.n	8012fe0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012fc0:	2001      	movs	r0, #1
 8012fc2:	f7fb fbc9 	bl	800e758 <HAL_Delay>
      ms++;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	3301      	adds	r3, #1
 8012fca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f001 f959 	bl	8014284 <USB_GetMode>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d005      	beq.n	8012fe4 <USB_SetCurrentMode+0x84>
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2b31      	cmp	r3, #49	@ 0x31
 8012fdc:	d9f0      	bls.n	8012fc0 <USB_SetCurrentMode+0x60>
 8012fde:	e001      	b.n	8012fe4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	e005      	b.n	8012ff0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b32      	cmp	r3, #50	@ 0x32
 8012fe8:	d101      	bne.n	8012fee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012fea:	2301      	movs	r3, #1
 8012fec:	e000      	b.n	8012ff0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012fee:	2300      	movs	r3, #0
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3710      	adds	r7, #16
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012ff8:	b084      	sub	sp, #16
 8012ffa:	b580      	push	{r7, lr}
 8012ffc:	b086      	sub	sp, #24
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
 8013002:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801300a:	2300      	movs	r3, #0
 801300c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013012:	2300      	movs	r3, #0
 8013014:	613b      	str	r3, [r7, #16]
 8013016:	e009      	b.n	801302c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	3340      	adds	r3, #64	@ 0x40
 801301e:	009b      	lsls	r3, r3, #2
 8013020:	4413      	add	r3, r2
 8013022:	2200      	movs	r2, #0
 8013024:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	3301      	adds	r3, #1
 801302a:	613b      	str	r3, [r7, #16]
 801302c:	693b      	ldr	r3, [r7, #16]
 801302e:	2b0e      	cmp	r3, #14
 8013030:	d9f2      	bls.n	8013018 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013034:	2b00      	cmp	r3, #0
 8013036:	d11c      	bne.n	8013072 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801303e:	685b      	ldr	r3, [r3, #4]
 8013040:	68fa      	ldr	r2, [r7, #12]
 8013042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013046:	f043 0302 	orr.w	r3, r3, #2
 801304a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013050:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801305c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013068:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	639a      	str	r2, [r3, #56]	@ 0x38
 8013070:	e00b      	b.n	801308a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013076:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013082:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013090:	461a      	mov	r2, r3
 8013092:	2300      	movs	r3, #0
 8013094:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801309c:	4619      	mov	r1, r3
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130a4:	461a      	mov	r2, r3
 80130a6:	680b      	ldr	r3, [r1, #0]
 80130a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80130aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d10c      	bne.n	80130ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80130b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d104      	bne.n	80130c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80130b6:	2100      	movs	r1, #0
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 f945 	bl	8013348 <USB_SetDevSpeed>
 80130be:	e008      	b.n	80130d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80130c0:	2101      	movs	r1, #1
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 f940 	bl	8013348 <USB_SetDevSpeed>
 80130c8:	e003      	b.n	80130d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80130ca:	2103      	movs	r1, #3
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f000 f93b 	bl	8013348 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80130d2:	2110      	movs	r1, #16
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 f8f3 	bl	80132c0 <USB_FlushTxFifo>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d001      	beq.n	80130e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80130e0:	2301      	movs	r3, #1
 80130e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 f90f 	bl	8013308 <USB_FlushRxFifo>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d001      	beq.n	80130f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80130f0:	2301      	movs	r3, #1
 80130f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130fa:	461a      	mov	r2, r3
 80130fc:	2300      	movs	r3, #0
 80130fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013106:	461a      	mov	r2, r3
 8013108:	2300      	movs	r3, #0
 801310a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013112:	461a      	mov	r2, r3
 8013114:	2300      	movs	r3, #0
 8013116:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013118:	2300      	movs	r3, #0
 801311a:	613b      	str	r3, [r7, #16]
 801311c:	e043      	b.n	80131a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	015a      	lsls	r2, r3, #5
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	4413      	add	r3, r2
 8013126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013134:	d118      	bne.n	8013168 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d10a      	bne.n	8013152 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	015a      	lsls	r2, r3, #5
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	4413      	add	r3, r2
 8013144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013148:	461a      	mov	r2, r3
 801314a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801314e:	6013      	str	r3, [r2, #0]
 8013150:	e013      	b.n	801317a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	015a      	lsls	r2, r3, #5
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	4413      	add	r3, r2
 801315a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801315e:	461a      	mov	r2, r3
 8013160:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8013164:	6013      	str	r3, [r2, #0]
 8013166:	e008      	b.n	801317a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	015a      	lsls	r2, r3, #5
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	4413      	add	r3, r2
 8013170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013174:	461a      	mov	r2, r3
 8013176:	2300      	movs	r3, #0
 8013178:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	015a      	lsls	r2, r3, #5
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	4413      	add	r3, r2
 8013182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013186:	461a      	mov	r2, r3
 8013188:	2300      	movs	r3, #0
 801318a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	015a      	lsls	r2, r3, #5
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	4413      	add	r3, r2
 8013194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013198:	461a      	mov	r2, r3
 801319a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801319e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	3301      	adds	r3, #1
 80131a4:	613b      	str	r3, [r7, #16]
 80131a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a8:	693a      	ldr	r2, [r7, #16]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d3b7      	bcc.n	801311e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80131ae:	2300      	movs	r3, #0
 80131b0:	613b      	str	r3, [r7, #16]
 80131b2:	e043      	b.n	801323c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	015a      	lsls	r2, r3, #5
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	4413      	add	r3, r2
 80131bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80131c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80131ca:	d118      	bne.n	80131fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d10a      	bne.n	80131e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	015a      	lsls	r2, r3, #5
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	4413      	add	r3, r2
 80131da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131de:	461a      	mov	r2, r3
 80131e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80131e4:	6013      	str	r3, [r2, #0]
 80131e6:	e013      	b.n	8013210 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	015a      	lsls	r2, r3, #5
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	4413      	add	r3, r2
 80131f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131f4:	461a      	mov	r2, r3
 80131f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80131fa:	6013      	str	r3, [r2, #0]
 80131fc:	e008      	b.n	8013210 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	015a      	lsls	r2, r3, #5
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	4413      	add	r3, r2
 8013206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801320a:	461a      	mov	r2, r3
 801320c:	2300      	movs	r3, #0
 801320e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	015a      	lsls	r2, r3, #5
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	4413      	add	r3, r2
 8013218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801321c:	461a      	mov	r2, r3
 801321e:	2300      	movs	r3, #0
 8013220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	015a      	lsls	r2, r3, #5
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	4413      	add	r3, r2
 801322a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801322e:	461a      	mov	r2, r3
 8013230:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013234:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	3301      	adds	r3, #1
 801323a:	613b      	str	r3, [r7, #16]
 801323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801323e:	693a      	ldr	r2, [r7, #16]
 8013240:	429a      	cmp	r2, r3
 8013242:	d3b7      	bcc.n	80131b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801324a:	691b      	ldr	r3, [r3, #16]
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013252:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013256:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2200      	movs	r2, #0
 801325c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8013264:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013268:	2b00      	cmp	r3, #0
 801326a:	d105      	bne.n	8013278 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	699b      	ldr	r3, [r3, #24]
 8013270:	f043 0210 	orr.w	r2, r3, #16
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	699a      	ldr	r2, [r3, #24]
 801327c:	4b0f      	ldr	r3, [pc, #60]	@ (80132bc <USB_DevInit+0x2c4>)
 801327e:	4313      	orrs	r3, r2
 8013280:	687a      	ldr	r2, [r7, #4]
 8013282:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013286:	2b00      	cmp	r3, #0
 8013288:	d005      	beq.n	8013296 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	699b      	ldr	r3, [r3, #24]
 801328e:	f043 0208 	orr.w	r2, r3, #8
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013298:	2b01      	cmp	r3, #1
 801329a:	d107      	bne.n	80132ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	699b      	ldr	r3, [r3, #24]
 80132a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80132a4:	f043 0304 	orr.w	r3, r3, #4
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80132ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3718      	adds	r7, #24
 80132b2:	46bd      	mov	sp, r7
 80132b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80132b8:	b004      	add	sp, #16
 80132ba:	4770      	bx	lr
 80132bc:	803c3800 	.word	0x803c3800

080132c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80132c0:	b480      	push	{r7}
 80132c2:	b085      	sub	sp, #20
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80132ca:	2300      	movs	r3, #0
 80132cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	019b      	lsls	r3, r3, #6
 80132d2:	f043 0220 	orr.w	r2, r3, #32
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	3301      	adds	r3, #1
 80132de:	60fb      	str	r3, [r7, #12]
 80132e0:	4a08      	ldr	r2, [pc, #32]	@ (8013304 <USB_FlushTxFifo+0x44>)
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d901      	bls.n	80132ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80132e6:	2303      	movs	r3, #3
 80132e8:	e006      	b.n	80132f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	691b      	ldr	r3, [r3, #16]
 80132ee:	f003 0320 	and.w	r3, r3, #32
 80132f2:	2b20      	cmp	r3, #32
 80132f4:	d0f1      	beq.n	80132da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80132f6:	2300      	movs	r3, #0
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3714      	adds	r7, #20
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr
 8013304:	00030d40 	.word	0x00030d40

08013308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013308:	b480      	push	{r7}
 801330a:	b085      	sub	sp, #20
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013310:	2300      	movs	r3, #0
 8013312:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2210      	movs	r2, #16
 8013318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	3301      	adds	r3, #1
 801331e:	60fb      	str	r3, [r7, #12]
 8013320:	4a08      	ldr	r2, [pc, #32]	@ (8013344 <USB_FlushRxFifo+0x3c>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d901      	bls.n	801332a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8013326:	2303      	movs	r3, #3
 8013328:	e006      	b.n	8013338 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	691b      	ldr	r3, [r3, #16]
 801332e:	f003 0310 	and.w	r3, r3, #16
 8013332:	2b10      	cmp	r3, #16
 8013334:	d0f1      	beq.n	801331a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013336:	2300      	movs	r3, #0
}
 8013338:	4618      	mov	r0, r3
 801333a:	3714      	adds	r7, #20
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr
 8013344:	00030d40 	.word	0x00030d40

08013348 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013348:	b480      	push	{r7}
 801334a:	b085      	sub	sp, #20
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	460b      	mov	r3, r1
 8013352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801335e:	681a      	ldr	r2, [r3, #0]
 8013360:	78fb      	ldrb	r3, [r7, #3]
 8013362:	68f9      	ldr	r1, [r7, #12]
 8013364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013368:	4313      	orrs	r3, r2
 801336a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801336c:	2300      	movs	r3, #0
}
 801336e:	4618      	mov	r0, r3
 8013370:	3714      	adds	r7, #20
 8013372:	46bd      	mov	sp, r7
 8013374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013378:	4770      	bx	lr

0801337a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801337a:	b480      	push	{r7}
 801337c:	b087      	sub	sp, #28
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801338c:	689b      	ldr	r3, [r3, #8]
 801338e:	f003 0306 	and.w	r3, r3, #6
 8013392:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d102      	bne.n	80133a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801339a:	2300      	movs	r3, #0
 801339c:	75fb      	strb	r3, [r7, #23]
 801339e:	e00a      	b.n	80133b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2b02      	cmp	r3, #2
 80133a4:	d002      	beq.n	80133ac <USB_GetDevSpeed+0x32>
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	2b06      	cmp	r3, #6
 80133aa:	d102      	bne.n	80133b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80133ac:	2302      	movs	r3, #2
 80133ae:	75fb      	strb	r3, [r7, #23]
 80133b0:	e001      	b.n	80133b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80133b2:	230f      	movs	r3, #15
 80133b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80133b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	371c      	adds	r7, #28
 80133bc:	46bd      	mov	sp, r7
 80133be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c2:	4770      	bx	lr

080133c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80133c4:	b480      	push	{r7}
 80133c6:	b085      	sub	sp, #20
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	785b      	ldrb	r3, [r3, #1]
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d13a      	bne.n	8013456 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133e6:	69da      	ldr	r2, [r3, #28]
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	f003 030f 	and.w	r3, r3, #15
 80133f0:	2101      	movs	r1, #1
 80133f2:	fa01 f303 	lsl.w	r3, r1, r3
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	68f9      	ldr	r1, [r7, #12]
 80133fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80133fe:	4313      	orrs	r3, r2
 8013400:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013402:	68bb      	ldr	r3, [r7, #8]
 8013404:	015a      	lsls	r2, r3, #5
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	4413      	add	r3, r2
 801340a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013414:	2b00      	cmp	r3, #0
 8013416:	d155      	bne.n	80134c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	015a      	lsls	r2, r3, #5
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	4413      	add	r3, r2
 8013420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	689b      	ldr	r3, [r3, #8]
 801342a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	78db      	ldrb	r3, [r3, #3]
 8013432:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013434:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	059b      	lsls	r3, r3, #22
 801343a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801343c:	4313      	orrs	r3, r2
 801343e:	68ba      	ldr	r2, [r7, #8]
 8013440:	0151      	lsls	r1, r2, #5
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	440a      	add	r2, r1
 8013446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801344a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801344e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013452:	6013      	str	r3, [r2, #0]
 8013454:	e036      	b.n	80134c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801345c:	69da      	ldr	r2, [r3, #28]
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	f003 030f 	and.w	r3, r3, #15
 8013466:	2101      	movs	r1, #1
 8013468:	fa01 f303 	lsl.w	r3, r1, r3
 801346c:	041b      	lsls	r3, r3, #16
 801346e:	68f9      	ldr	r1, [r7, #12]
 8013470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013474:	4313      	orrs	r3, r2
 8013476:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	015a      	lsls	r2, r3, #5
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	4413      	add	r3, r2
 8013480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801348a:	2b00      	cmp	r3, #0
 801348c:	d11a      	bne.n	80134c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	015a      	lsls	r2, r3, #5
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	4413      	add	r3, r2
 8013496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801349a:	681a      	ldr	r2, [r3, #0]
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	689b      	ldr	r3, [r3, #8]
 80134a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	78db      	ldrb	r3, [r3, #3]
 80134a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80134aa:	430b      	orrs	r3, r1
 80134ac:	4313      	orrs	r3, r2
 80134ae:	68ba      	ldr	r2, [r7, #8]
 80134b0:	0151      	lsls	r1, r2, #5
 80134b2:	68fa      	ldr	r2, [r7, #12]
 80134b4:	440a      	add	r2, r1
 80134b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80134ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80134be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80134c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80134c4:	2300      	movs	r3, #0
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3714      	adds	r7, #20
 80134ca:	46bd      	mov	sp, r7
 80134cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d0:	4770      	bx	lr
	...

080134d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b085      	sub	sp, #20
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	785b      	ldrb	r3, [r3, #1]
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d161      	bne.n	80135b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	015a      	lsls	r2, r3, #5
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	4413      	add	r3, r2
 80134f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013506:	d11f      	bne.n	8013548 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	015a      	lsls	r2, r3, #5
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	4413      	add	r3, r2
 8013510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	68ba      	ldr	r2, [r7, #8]
 8013518:	0151      	lsls	r1, r2, #5
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	440a      	add	r2, r1
 801351e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013522:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013526:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	015a      	lsls	r2, r3, #5
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	4413      	add	r3, r2
 8013530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	0151      	lsls	r1, r2, #5
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	440a      	add	r2, r1
 801353e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801354e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	f003 030f 	and.w	r3, r3, #15
 8013558:	2101      	movs	r1, #1
 801355a:	fa01 f303 	lsl.w	r3, r1, r3
 801355e:	b29b      	uxth	r3, r3
 8013560:	43db      	mvns	r3, r3
 8013562:	68f9      	ldr	r1, [r7, #12]
 8013564:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013568:	4013      	ands	r3, r2
 801356a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013572:	69da      	ldr	r2, [r3, #28]
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	f003 030f 	and.w	r3, r3, #15
 801357c:	2101      	movs	r1, #1
 801357e:	fa01 f303 	lsl.w	r3, r1, r3
 8013582:	b29b      	uxth	r3, r3
 8013584:	43db      	mvns	r3, r3
 8013586:	68f9      	ldr	r1, [r7, #12]
 8013588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801358c:	4013      	ands	r3, r2
 801358e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	015a      	lsls	r2, r3, #5
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	4413      	add	r3, r2
 8013598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	0159      	lsls	r1, r3, #5
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	440b      	add	r3, r1
 80135a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135aa:	4619      	mov	r1, r3
 80135ac:	4b35      	ldr	r3, [pc, #212]	@ (8013684 <USB_DeactivateEndpoint+0x1b0>)
 80135ae:	4013      	ands	r3, r2
 80135b0:	600b      	str	r3, [r1, #0]
 80135b2:	e060      	b.n	8013676 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	015a      	lsls	r2, r3, #5
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	4413      	add	r3, r2
 80135bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80135c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80135ca:	d11f      	bne.n	801360c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	015a      	lsls	r2, r3, #5
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	4413      	add	r3, r2
 80135d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	68ba      	ldr	r2, [r7, #8]
 80135dc:	0151      	lsls	r1, r2, #5
 80135de:	68fa      	ldr	r2, [r7, #12]
 80135e0:	440a      	add	r2, r1
 80135e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80135e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80135ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	015a      	lsls	r2, r3, #5
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	4413      	add	r3, r2
 80135f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	68ba      	ldr	r2, [r7, #8]
 80135fc:	0151      	lsls	r1, r2, #5
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	440a      	add	r2, r1
 8013602:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013606:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801360a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	f003 030f 	and.w	r3, r3, #15
 801361c:	2101      	movs	r1, #1
 801361e:	fa01 f303 	lsl.w	r3, r1, r3
 8013622:	041b      	lsls	r3, r3, #16
 8013624:	43db      	mvns	r3, r3
 8013626:	68f9      	ldr	r1, [r7, #12]
 8013628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801362c:	4013      	ands	r3, r2
 801362e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013636:	69da      	ldr	r2, [r3, #28]
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	f003 030f 	and.w	r3, r3, #15
 8013640:	2101      	movs	r1, #1
 8013642:	fa01 f303 	lsl.w	r3, r1, r3
 8013646:	041b      	lsls	r3, r3, #16
 8013648:	43db      	mvns	r3, r3
 801364a:	68f9      	ldr	r1, [r7, #12]
 801364c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013650:	4013      	ands	r3, r2
 8013652:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	015a      	lsls	r2, r3, #5
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	4413      	add	r3, r2
 801365c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	0159      	lsls	r1, r3, #5
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	440b      	add	r3, r1
 801366a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801366e:	4619      	mov	r1, r3
 8013670:	4b05      	ldr	r3, [pc, #20]	@ (8013688 <USB_DeactivateEndpoint+0x1b4>)
 8013672:	4013      	ands	r3, r2
 8013674:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013676:	2300      	movs	r3, #0
}
 8013678:	4618      	mov	r0, r3
 801367a:	3714      	adds	r7, #20
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr
 8013684:	ec337800 	.word	0xec337800
 8013688:	eff37800 	.word	0xeff37800

0801368c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b08a      	sub	sp, #40	@ 0x28
 8013690:	af02      	add	r7, sp, #8
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	60b9      	str	r1, [r7, #8]
 8013696:	4613      	mov	r3, r2
 8013698:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	785b      	ldrb	r3, [r3, #1]
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	f040 815c 	bne.w	8013966 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	695b      	ldr	r3, [r3, #20]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d132      	bne.n	801371c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80136b6:	69bb      	ldr	r3, [r7, #24]
 80136b8:	015a      	lsls	r2, r3, #5
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	4413      	add	r3, r2
 80136be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136c2:	691b      	ldr	r3, [r3, #16]
 80136c4:	69ba      	ldr	r2, [r7, #24]
 80136c6:	0151      	lsls	r1, r2, #5
 80136c8:	69fa      	ldr	r2, [r7, #28]
 80136ca:	440a      	add	r2, r1
 80136cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80136d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80136d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80136d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	015a      	lsls	r2, r3, #5
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	4413      	add	r3, r2
 80136e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136e6:	691b      	ldr	r3, [r3, #16]
 80136e8:	69ba      	ldr	r2, [r7, #24]
 80136ea:	0151      	lsls	r1, r2, #5
 80136ec:	69fa      	ldr	r2, [r7, #28]
 80136ee:	440a      	add	r2, r1
 80136f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80136f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80136f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	015a      	lsls	r2, r3, #5
 80136fe:	69fb      	ldr	r3, [r7, #28]
 8013700:	4413      	add	r3, r2
 8013702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013706:	691b      	ldr	r3, [r3, #16]
 8013708:	69ba      	ldr	r2, [r7, #24]
 801370a:	0151      	lsls	r1, r2, #5
 801370c:	69fa      	ldr	r2, [r7, #28]
 801370e:	440a      	add	r2, r1
 8013710:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013714:	0cdb      	lsrs	r3, r3, #19
 8013716:	04db      	lsls	r3, r3, #19
 8013718:	6113      	str	r3, [r2, #16]
 801371a:	e074      	b.n	8013806 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	015a      	lsls	r2, r3, #5
 8013720:	69fb      	ldr	r3, [r7, #28]
 8013722:	4413      	add	r3, r2
 8013724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013728:	691b      	ldr	r3, [r3, #16]
 801372a:	69ba      	ldr	r2, [r7, #24]
 801372c:	0151      	lsls	r1, r2, #5
 801372e:	69fa      	ldr	r2, [r7, #28]
 8013730:	440a      	add	r2, r1
 8013732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013736:	0cdb      	lsrs	r3, r3, #19
 8013738:	04db      	lsls	r3, r3, #19
 801373a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	015a      	lsls	r2, r3, #5
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	4413      	add	r3, r2
 8013744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013748:	691b      	ldr	r3, [r3, #16]
 801374a:	69ba      	ldr	r2, [r7, #24]
 801374c:	0151      	lsls	r1, r2, #5
 801374e:	69fa      	ldr	r2, [r7, #28]
 8013750:	440a      	add	r2, r1
 8013752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013756:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801375a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801375e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	015a      	lsls	r2, r3, #5
 8013764:	69fb      	ldr	r3, [r7, #28]
 8013766:	4413      	add	r3, r2
 8013768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801376c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	6959      	ldr	r1, [r3, #20]
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	689b      	ldr	r3, [r3, #8]
 8013776:	440b      	add	r3, r1
 8013778:	1e59      	subs	r1, r3, #1
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	689b      	ldr	r3, [r3, #8]
 801377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013782:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013784:	4b9d      	ldr	r3, [pc, #628]	@ (80139fc <USB_EPStartXfer+0x370>)
 8013786:	400b      	ands	r3, r1
 8013788:	69b9      	ldr	r1, [r7, #24]
 801378a:	0148      	lsls	r0, r1, #5
 801378c:	69f9      	ldr	r1, [r7, #28]
 801378e:	4401      	add	r1, r0
 8013790:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013794:	4313      	orrs	r3, r2
 8013796:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	015a      	lsls	r2, r3, #5
 801379c:	69fb      	ldr	r3, [r7, #28]
 801379e:	4413      	add	r3, r2
 80137a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137a4:	691a      	ldr	r2, [r3, #16]
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	695b      	ldr	r3, [r3, #20]
 80137aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80137ae:	69b9      	ldr	r1, [r7, #24]
 80137b0:	0148      	lsls	r0, r1, #5
 80137b2:	69f9      	ldr	r1, [r7, #28]
 80137b4:	4401      	add	r1, r0
 80137b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80137ba:	4313      	orrs	r3, r2
 80137bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	78db      	ldrb	r3, [r3, #3]
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d11f      	bne.n	8013806 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80137c6:	69bb      	ldr	r3, [r7, #24]
 80137c8:	015a      	lsls	r2, r3, #5
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	4413      	add	r3, r2
 80137ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137d2:	691b      	ldr	r3, [r3, #16]
 80137d4:	69ba      	ldr	r2, [r7, #24]
 80137d6:	0151      	lsls	r1, r2, #5
 80137d8:	69fa      	ldr	r2, [r7, #28]
 80137da:	440a      	add	r2, r1
 80137dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80137e0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80137e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	015a      	lsls	r2, r3, #5
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	4413      	add	r3, r2
 80137ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137f2:	691b      	ldr	r3, [r3, #16]
 80137f4:	69ba      	ldr	r2, [r7, #24]
 80137f6:	0151      	lsls	r1, r2, #5
 80137f8:	69fa      	ldr	r2, [r7, #28]
 80137fa:	440a      	add	r2, r1
 80137fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013800:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013804:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013806:	79fb      	ldrb	r3, [r7, #7]
 8013808:	2b01      	cmp	r3, #1
 801380a:	d14b      	bne.n	80138a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	691b      	ldr	r3, [r3, #16]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d009      	beq.n	8013828 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	015a      	lsls	r2, r3, #5
 8013818:	69fb      	ldr	r3, [r7, #28]
 801381a:	4413      	add	r3, r2
 801381c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013820:	461a      	mov	r2, r3
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	691b      	ldr	r3, [r3, #16]
 8013826:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	78db      	ldrb	r3, [r3, #3]
 801382c:	2b01      	cmp	r3, #1
 801382e:	d128      	bne.n	8013882 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013836:	689b      	ldr	r3, [r3, #8]
 8013838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801383c:	2b00      	cmp	r3, #0
 801383e:	d110      	bne.n	8013862 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013840:	69bb      	ldr	r3, [r7, #24]
 8013842:	015a      	lsls	r2, r3, #5
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	4413      	add	r3, r2
 8013848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	69ba      	ldr	r2, [r7, #24]
 8013850:	0151      	lsls	r1, r2, #5
 8013852:	69fa      	ldr	r2, [r7, #28]
 8013854:	440a      	add	r2, r1
 8013856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801385a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801385e:	6013      	str	r3, [r2, #0]
 8013860:	e00f      	b.n	8013882 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013862:	69bb      	ldr	r3, [r7, #24]
 8013864:	015a      	lsls	r2, r3, #5
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	4413      	add	r3, r2
 801386a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	69ba      	ldr	r2, [r7, #24]
 8013872:	0151      	lsls	r1, r2, #5
 8013874:	69fa      	ldr	r2, [r7, #28]
 8013876:	440a      	add	r2, r1
 8013878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801387c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013880:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	015a      	lsls	r2, r3, #5
 8013886:	69fb      	ldr	r3, [r7, #28]
 8013888:	4413      	add	r3, r2
 801388a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	69ba      	ldr	r2, [r7, #24]
 8013892:	0151      	lsls	r1, r2, #5
 8013894:	69fa      	ldr	r2, [r7, #28]
 8013896:	440a      	add	r2, r1
 8013898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801389c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80138a0:	6013      	str	r3, [r2, #0]
 80138a2:	e12f      	b.n	8013b04 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	015a      	lsls	r2, r3, #5
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	4413      	add	r3, r2
 80138ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	69ba      	ldr	r2, [r7, #24]
 80138b4:	0151      	lsls	r1, r2, #5
 80138b6:	69fa      	ldr	r2, [r7, #28]
 80138b8:	440a      	add	r2, r1
 80138ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80138c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	78db      	ldrb	r3, [r3, #3]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d015      	beq.n	80138f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	695b      	ldr	r3, [r3, #20]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f000 8117 	beq.w	8013b04 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	f003 030f 	and.w	r3, r3, #15
 80138e6:	2101      	movs	r1, #1
 80138e8:	fa01 f303 	lsl.w	r3, r1, r3
 80138ec:	69f9      	ldr	r1, [r7, #28]
 80138ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80138f2:	4313      	orrs	r3, r2
 80138f4:	634b      	str	r3, [r1, #52]	@ 0x34
 80138f6:	e105      	b.n	8013b04 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138fe:	689b      	ldr	r3, [r3, #8]
 8013900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013904:	2b00      	cmp	r3, #0
 8013906:	d110      	bne.n	801392a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	015a      	lsls	r2, r3, #5
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	4413      	add	r3, r2
 8013910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	69ba      	ldr	r2, [r7, #24]
 8013918:	0151      	lsls	r1, r2, #5
 801391a:	69fa      	ldr	r2, [r7, #28]
 801391c:	440a      	add	r2, r1
 801391e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013922:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013926:	6013      	str	r3, [r2, #0]
 8013928:	e00f      	b.n	801394a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	015a      	lsls	r2, r3, #5
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	4413      	add	r3, r2
 8013932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	69ba      	ldr	r2, [r7, #24]
 801393a:	0151      	lsls	r1, r2, #5
 801393c:	69fa      	ldr	r2, [r7, #28]
 801393e:	440a      	add	r2, r1
 8013940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013948:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	68d9      	ldr	r1, [r3, #12]
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	781a      	ldrb	r2, [r3, #0]
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	695b      	ldr	r3, [r3, #20]
 8013956:	b298      	uxth	r0, r3
 8013958:	79fb      	ldrb	r3, [r7, #7]
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	4603      	mov	r3, r0
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f000 fa2b 	bl	8013dba <USB_WritePacket>
 8013964:	e0ce      	b.n	8013b04 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	015a      	lsls	r2, r3, #5
 801396a:	69fb      	ldr	r3, [r7, #28]
 801396c:	4413      	add	r3, r2
 801396e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013972:	691b      	ldr	r3, [r3, #16]
 8013974:	69ba      	ldr	r2, [r7, #24]
 8013976:	0151      	lsls	r1, r2, #5
 8013978:	69fa      	ldr	r2, [r7, #28]
 801397a:	440a      	add	r2, r1
 801397c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013980:	0cdb      	lsrs	r3, r3, #19
 8013982:	04db      	lsls	r3, r3, #19
 8013984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	015a      	lsls	r2, r3, #5
 801398a:	69fb      	ldr	r3, [r7, #28]
 801398c:	4413      	add	r3, r2
 801398e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013992:	691b      	ldr	r3, [r3, #16]
 8013994:	69ba      	ldr	r2, [r7, #24]
 8013996:	0151      	lsls	r1, r2, #5
 8013998:	69fa      	ldr	r2, [r7, #28]
 801399a:	440a      	add	r2, r1
 801399c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80139a0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80139a4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80139a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	695b      	ldr	r3, [r3, #20]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d126      	bne.n	8013a00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	015a      	lsls	r2, r3, #5
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	4413      	add	r3, r2
 80139ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139be:	691a      	ldr	r2, [r3, #16]
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	689b      	ldr	r3, [r3, #8]
 80139c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80139c8:	69b9      	ldr	r1, [r7, #24]
 80139ca:	0148      	lsls	r0, r1, #5
 80139cc:	69f9      	ldr	r1, [r7, #28]
 80139ce:	4401      	add	r1, r0
 80139d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80139d4:	4313      	orrs	r3, r2
 80139d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	015a      	lsls	r2, r3, #5
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	4413      	add	r3, r2
 80139e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139e4:	691b      	ldr	r3, [r3, #16]
 80139e6:	69ba      	ldr	r2, [r7, #24]
 80139e8:	0151      	lsls	r1, r2, #5
 80139ea:	69fa      	ldr	r2, [r7, #28]
 80139ec:	440a      	add	r2, r1
 80139ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80139f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80139f6:	6113      	str	r3, [r2, #16]
 80139f8:	e036      	b.n	8013a68 <USB_EPStartXfer+0x3dc>
 80139fa:	bf00      	nop
 80139fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	695a      	ldr	r2, [r3, #20]
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	689b      	ldr	r3, [r3, #8]
 8013a08:	4413      	add	r3, r2
 8013a0a:	1e5a      	subs	r2, r3, #1
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	689b      	ldr	r3, [r3, #8]
 8013a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013a16:	69bb      	ldr	r3, [r7, #24]
 8013a18:	015a      	lsls	r2, r3, #5
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a22:	691a      	ldr	r2, [r3, #16]
 8013a24:	8afb      	ldrh	r3, [r7, #22]
 8013a26:	04d9      	lsls	r1, r3, #19
 8013a28:	4b39      	ldr	r3, [pc, #228]	@ (8013b10 <USB_EPStartXfer+0x484>)
 8013a2a:	400b      	ands	r3, r1
 8013a2c:	69b9      	ldr	r1, [r7, #24]
 8013a2e:	0148      	lsls	r0, r1, #5
 8013a30:	69f9      	ldr	r1, [r7, #28]
 8013a32:	4401      	add	r1, r0
 8013a34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013a38:	4313      	orrs	r3, r2
 8013a3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	015a      	lsls	r2, r3, #5
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	4413      	add	r3, r2
 8013a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a48:	691a      	ldr	r2, [r3, #16]
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	689b      	ldr	r3, [r3, #8]
 8013a4e:	8af9      	ldrh	r1, [r7, #22]
 8013a50:	fb01 f303 	mul.w	r3, r1, r3
 8013a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a58:	69b9      	ldr	r1, [r7, #24]
 8013a5a:	0148      	lsls	r0, r1, #5
 8013a5c:	69f9      	ldr	r1, [r7, #28]
 8013a5e:	4401      	add	r1, r0
 8013a60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013a64:	4313      	orrs	r3, r2
 8013a66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013a68:	79fb      	ldrb	r3, [r7, #7]
 8013a6a:	2b01      	cmp	r3, #1
 8013a6c:	d10d      	bne.n	8013a8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	68db      	ldr	r3, [r3, #12]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d009      	beq.n	8013a8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	68d9      	ldr	r1, [r3, #12]
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	015a      	lsls	r2, r3, #5
 8013a7e:	69fb      	ldr	r3, [r7, #28]
 8013a80:	4413      	add	r3, r2
 8013a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a86:	460a      	mov	r2, r1
 8013a88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	78db      	ldrb	r3, [r3, #3]
 8013a8e:	2b01      	cmp	r3, #1
 8013a90:	d128      	bne.n	8013ae4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a98:	689b      	ldr	r3, [r3, #8]
 8013a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d110      	bne.n	8013ac4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	015a      	lsls	r2, r3, #5
 8013aa6:	69fb      	ldr	r3, [r7, #28]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	69ba      	ldr	r2, [r7, #24]
 8013ab2:	0151      	lsls	r1, r2, #5
 8013ab4:	69fa      	ldr	r2, [r7, #28]
 8013ab6:	440a      	add	r2, r1
 8013ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013abc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013ac0:	6013      	str	r3, [r2, #0]
 8013ac2:	e00f      	b.n	8013ae4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	015a      	lsls	r2, r3, #5
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	4413      	add	r3, r2
 8013acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	69ba      	ldr	r2, [r7, #24]
 8013ad4:	0151      	lsls	r1, r2, #5
 8013ad6:	69fa      	ldr	r2, [r7, #28]
 8013ad8:	440a      	add	r2, r1
 8013ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013ae2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	015a      	lsls	r2, r3, #5
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	4413      	add	r3, r2
 8013aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	69ba      	ldr	r2, [r7, #24]
 8013af4:	0151      	lsls	r1, r2, #5
 8013af6:	69fa      	ldr	r2, [r7, #28]
 8013af8:	440a      	add	r2, r1
 8013afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013afe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b04:	2300      	movs	r3, #0
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3720      	adds	r7, #32
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	1ff80000 	.word	0x1ff80000

08013b14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013b14:	b480      	push	{r7}
 8013b16:	b087      	sub	sp, #28
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	4613      	mov	r3, r2
 8013b20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	785b      	ldrb	r3, [r3, #1]
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	f040 80cd 	bne.w	8013cd0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	695b      	ldr	r3, [r3, #20]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d132      	bne.n	8013ba4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	015a      	lsls	r2, r3, #5
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	4413      	add	r3, r2
 8013b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013b4a:	691b      	ldr	r3, [r3, #16]
 8013b4c:	693a      	ldr	r2, [r7, #16]
 8013b4e:	0151      	lsls	r1, r2, #5
 8013b50:	697a      	ldr	r2, [r7, #20]
 8013b52:	440a      	add	r2, r1
 8013b54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013b58:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013b5c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	015a      	lsls	r2, r3, #5
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	4413      	add	r3, r2
 8013b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013b6e:	691b      	ldr	r3, [r3, #16]
 8013b70:	693a      	ldr	r2, [r7, #16]
 8013b72:	0151      	lsls	r1, r2, #5
 8013b74:	697a      	ldr	r2, [r7, #20]
 8013b76:	440a      	add	r2, r1
 8013b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013b7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	015a      	lsls	r2, r3, #5
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	4413      	add	r3, r2
 8013b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013b8e:	691b      	ldr	r3, [r3, #16]
 8013b90:	693a      	ldr	r2, [r7, #16]
 8013b92:	0151      	lsls	r1, r2, #5
 8013b94:	697a      	ldr	r2, [r7, #20]
 8013b96:	440a      	add	r2, r1
 8013b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013b9c:	0cdb      	lsrs	r3, r3, #19
 8013b9e:	04db      	lsls	r3, r3, #19
 8013ba0:	6113      	str	r3, [r2, #16]
 8013ba2:	e04e      	b.n	8013c42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	015a      	lsls	r2, r3, #5
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	4413      	add	r3, r2
 8013bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013bb0:	691b      	ldr	r3, [r3, #16]
 8013bb2:	693a      	ldr	r2, [r7, #16]
 8013bb4:	0151      	lsls	r1, r2, #5
 8013bb6:	697a      	ldr	r2, [r7, #20]
 8013bb8:	440a      	add	r2, r1
 8013bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013bbe:	0cdb      	lsrs	r3, r3, #19
 8013bc0:	04db      	lsls	r3, r3, #19
 8013bc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	015a      	lsls	r2, r3, #5
 8013bc8:	697b      	ldr	r3, [r7, #20]
 8013bca:	4413      	add	r3, r2
 8013bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013bd0:	691b      	ldr	r3, [r3, #16]
 8013bd2:	693a      	ldr	r2, [r7, #16]
 8013bd4:	0151      	lsls	r1, r2, #5
 8013bd6:	697a      	ldr	r2, [r7, #20]
 8013bd8:	440a      	add	r2, r1
 8013bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013bde:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013be2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013be6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	695a      	ldr	r2, [r3, #20]
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	689b      	ldr	r3, [r3, #8]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d903      	bls.n	8013bfc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	689a      	ldr	r2, [r3, #8]
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	015a      	lsls	r2, r3, #5
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	4413      	add	r3, r2
 8013c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013c08:	691b      	ldr	r3, [r3, #16]
 8013c0a:	693a      	ldr	r2, [r7, #16]
 8013c0c:	0151      	lsls	r1, r2, #5
 8013c0e:	697a      	ldr	r2, [r7, #20]
 8013c10:	440a      	add	r2, r1
 8013c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013c16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	015a      	lsls	r2, r3, #5
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	4413      	add	r3, r2
 8013c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013c28:	691a      	ldr	r2, [r3, #16]
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	695b      	ldr	r3, [r3, #20]
 8013c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c32:	6939      	ldr	r1, [r7, #16]
 8013c34:	0148      	lsls	r0, r1, #5
 8013c36:	6979      	ldr	r1, [r7, #20]
 8013c38:	4401      	add	r1, r0
 8013c3a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013c3e:	4313      	orrs	r3, r2
 8013c40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013c42:	79fb      	ldrb	r3, [r7, #7]
 8013c44:	2b01      	cmp	r3, #1
 8013c46:	d11e      	bne.n	8013c86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	691b      	ldr	r3, [r3, #16]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d009      	beq.n	8013c64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	015a      	lsls	r2, r3, #5
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	4413      	add	r3, r2
 8013c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	691b      	ldr	r3, [r3, #16]
 8013c62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	015a      	lsls	r2, r3, #5
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	693a      	ldr	r2, [r7, #16]
 8013c74:	0151      	lsls	r1, r2, #5
 8013c76:	697a      	ldr	r2, [r7, #20]
 8013c78:	440a      	add	r2, r1
 8013c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013c7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013c82:	6013      	str	r3, [r2, #0]
 8013c84:	e092      	b.n	8013dac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	015a      	lsls	r2, r3, #5
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	693a      	ldr	r2, [r7, #16]
 8013c96:	0151      	lsls	r1, r2, #5
 8013c98:	697a      	ldr	r2, [r7, #20]
 8013c9a:	440a      	add	r2, r1
 8013c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ca0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013ca4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	695b      	ldr	r3, [r3, #20]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d07e      	beq.n	8013dac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	f003 030f 	and.w	r3, r3, #15
 8013cbe:	2101      	movs	r1, #1
 8013cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8013cc4:	6979      	ldr	r1, [r7, #20]
 8013cc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013cca:	4313      	orrs	r3, r2
 8013ccc:	634b      	str	r3, [r1, #52]	@ 0x34
 8013cce:	e06d      	b.n	8013dac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	015a      	lsls	r2, r3, #5
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	4413      	add	r3, r2
 8013cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013cdc:	691b      	ldr	r3, [r3, #16]
 8013cde:	693a      	ldr	r2, [r7, #16]
 8013ce0:	0151      	lsls	r1, r2, #5
 8013ce2:	697a      	ldr	r2, [r7, #20]
 8013ce4:	440a      	add	r2, r1
 8013ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013cea:	0cdb      	lsrs	r3, r3, #19
 8013cec:	04db      	lsls	r3, r3, #19
 8013cee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	015a      	lsls	r2, r3, #5
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	4413      	add	r3, r2
 8013cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013cfc:	691b      	ldr	r3, [r3, #16]
 8013cfe:	693a      	ldr	r2, [r7, #16]
 8013d00:	0151      	lsls	r1, r2, #5
 8013d02:	697a      	ldr	r2, [r7, #20]
 8013d04:	440a      	add	r2, r1
 8013d06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013d0a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013d0e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013d12:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	695b      	ldr	r3, [r3, #20]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d003      	beq.n	8013d24 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8013d1c:	68bb      	ldr	r3, [r7, #8]
 8013d1e:	689a      	ldr	r2, [r3, #8]
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	015a      	lsls	r2, r3, #5
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	4413      	add	r3, r2
 8013d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	693a      	ldr	r2, [r7, #16]
 8013d34:	0151      	lsls	r1, r2, #5
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	440a      	add	r2, r1
 8013d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013d3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013d42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	015a      	lsls	r2, r3, #5
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d50:	691a      	ldr	r2, [r3, #16]
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	689b      	ldr	r3, [r3, #8]
 8013d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013d5a:	6939      	ldr	r1, [r7, #16]
 8013d5c:	0148      	lsls	r0, r1, #5
 8013d5e:	6979      	ldr	r1, [r7, #20]
 8013d60:	4401      	add	r1, r0
 8013d62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013d66:	4313      	orrs	r3, r2
 8013d68:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8013d6a:	79fb      	ldrb	r3, [r7, #7]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d10d      	bne.n	8013d8c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d009      	beq.n	8013d8c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	68d9      	ldr	r1, [r3, #12]
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	015a      	lsls	r2, r3, #5
 8013d80:	697b      	ldr	r3, [r7, #20]
 8013d82:	4413      	add	r3, r2
 8013d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d88:	460a      	mov	r2, r1
 8013d8a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	015a      	lsls	r2, r3, #5
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	4413      	add	r3, r2
 8013d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	693a      	ldr	r2, [r7, #16]
 8013d9c:	0151      	lsls	r1, r2, #5
 8013d9e:	697a      	ldr	r2, [r7, #20]
 8013da0:	440a      	add	r2, r1
 8013da2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013da6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013daa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013dac:	2300      	movs	r3, #0
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	371c      	adds	r7, #28
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr

08013dba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013dba:	b480      	push	{r7}
 8013dbc:	b089      	sub	sp, #36	@ 0x24
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	60f8      	str	r0, [r7, #12]
 8013dc2:	60b9      	str	r1, [r7, #8]
 8013dc4:	4611      	mov	r1, r2
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	460b      	mov	r3, r1
 8013dca:	71fb      	strb	r3, [r7, #7]
 8013dcc:	4613      	mov	r3, r2
 8013dce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013dd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d123      	bne.n	8013e28 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013de0:	88bb      	ldrh	r3, [r7, #4]
 8013de2:	3303      	adds	r3, #3
 8013de4:	089b      	lsrs	r3, r3, #2
 8013de6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013de8:	2300      	movs	r3, #0
 8013dea:	61bb      	str	r3, [r7, #24]
 8013dec:	e018      	b.n	8013e20 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013dee:	79fb      	ldrb	r3, [r7, #7]
 8013df0:	031a      	lsls	r2, r3, #12
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	4413      	add	r3, r2
 8013df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	3301      	adds	r3, #1
 8013e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e0e:	69fb      	ldr	r3, [r7, #28]
 8013e10:	3301      	adds	r3, #1
 8013e12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013e14:	69fb      	ldr	r3, [r7, #28]
 8013e16:	3301      	adds	r3, #1
 8013e18:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013e1a:	69bb      	ldr	r3, [r7, #24]
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	61bb      	str	r3, [r7, #24]
 8013e20:	69ba      	ldr	r2, [r7, #24]
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d3e2      	bcc.n	8013dee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013e28:	2300      	movs	r3, #0
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3724      	adds	r7, #36	@ 0x24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013e36:	b480      	push	{r7}
 8013e38:	b08b      	sub	sp, #44	@ 0x2c
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	60f8      	str	r0, [r7, #12]
 8013e3e:	60b9      	str	r1, [r7, #8]
 8013e40:	4613      	mov	r3, r2
 8013e42:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013e4c:	88fb      	ldrh	r3, [r7, #6]
 8013e4e:	089b      	lsrs	r3, r3, #2
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013e54:	88fb      	ldrh	r3, [r7, #6]
 8013e56:	f003 0303 	and.w	r3, r3, #3
 8013e5a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	623b      	str	r3, [r7, #32]
 8013e60:	e014      	b.n	8013e8c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013e62:	69bb      	ldr	r3, [r7, #24]
 8013e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e6c:	601a      	str	r2, [r3, #0]
    pDest++;
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e70:	3301      	adds	r3, #1
 8013e72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e76:	3301      	adds	r3, #1
 8013e78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e82:	3301      	adds	r3, #1
 8013e84:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8013e86:	6a3b      	ldr	r3, [r7, #32]
 8013e88:	3301      	adds	r3, #1
 8013e8a:	623b      	str	r3, [r7, #32]
 8013e8c:	6a3a      	ldr	r2, [r7, #32]
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d3e6      	bcc.n	8013e62 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013e94:	8bfb      	ldrh	r3, [r7, #30]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d01e      	beq.n	8013ed8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013e9e:	69bb      	ldr	r3, [r7, #24]
 8013ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	f107 0310 	add.w	r3, r7, #16
 8013eaa:	6812      	ldr	r2, [r2, #0]
 8013eac:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013eae:	693a      	ldr	r2, [r7, #16]
 8013eb0:	6a3b      	ldr	r3, [r7, #32]
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	00db      	lsls	r3, r3, #3
 8013eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8013eba:	b2da      	uxtb	r2, r3
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ebe:	701a      	strb	r2, [r3, #0]
      i++;
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	623b      	str	r3, [r7, #32]
      pDest++;
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec8:	3301      	adds	r3, #1
 8013eca:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8013ecc:	8bfb      	ldrh	r3, [r7, #30]
 8013ece:	3b01      	subs	r3, #1
 8013ed0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013ed2:	8bfb      	ldrh	r3, [r7, #30]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d1ea      	bne.n	8013eae <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	372c      	adds	r7, #44	@ 0x2c
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee4:	4770      	bx	lr

08013ee6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013ee6:	b480      	push	{r7}
 8013ee8:	b085      	sub	sp, #20
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
 8013eee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	785b      	ldrb	r3, [r3, #1]
 8013efe:	2b01      	cmp	r3, #1
 8013f00:	d12c      	bne.n	8013f5c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	015a      	lsls	r2, r3, #5
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	4413      	add	r3, r2
 8013f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	db12      	blt.n	8013f3a <USB_EPSetStall+0x54>
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d00f      	beq.n	8013f3a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	015a      	lsls	r2, r3, #5
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	4413      	add	r3, r2
 8013f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	68ba      	ldr	r2, [r7, #8]
 8013f2a:	0151      	lsls	r1, r2, #5
 8013f2c:	68fa      	ldr	r2, [r7, #12]
 8013f2e:	440a      	add	r2, r1
 8013f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013f34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013f38:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	015a      	lsls	r2, r3, #5
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	4413      	add	r3, r2
 8013f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	68ba      	ldr	r2, [r7, #8]
 8013f4a:	0151      	lsls	r1, r2, #5
 8013f4c:	68fa      	ldr	r2, [r7, #12]
 8013f4e:	440a      	add	r2, r1
 8013f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013f54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013f58:	6013      	str	r3, [r2, #0]
 8013f5a:	e02b      	b.n	8013fb4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	015a      	lsls	r2, r3, #5
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	4413      	add	r3, r2
 8013f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	db12      	blt.n	8013f94 <USB_EPSetStall+0xae>
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d00f      	beq.n	8013f94 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	015a      	lsls	r2, r3, #5
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	68ba      	ldr	r2, [r7, #8]
 8013f84:	0151      	lsls	r1, r2, #5
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	440a      	add	r2, r1
 8013f8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013f8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013f92:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	015a      	lsls	r2, r3, #5
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	68ba      	ldr	r2, [r7, #8]
 8013fa4:	0151      	lsls	r1, r2, #5
 8013fa6:	68fa      	ldr	r2, [r7, #12]
 8013fa8:	440a      	add	r2, r1
 8013faa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013fae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013fb4:	2300      	movs	r3, #0
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3714      	adds	r7, #20
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr

08013fc2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013fc2:	b480      	push	{r7}
 8013fc4:	b085      	sub	sp, #20
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	6078      	str	r0, [r7, #4]
 8013fca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	785b      	ldrb	r3, [r3, #1]
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d128      	bne.n	8014030 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	015a      	lsls	r2, r3, #5
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	4413      	add	r3, r2
 8013fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	68ba      	ldr	r2, [r7, #8]
 8013fee:	0151      	lsls	r1, r2, #5
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	440a      	add	r2, r1
 8013ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ff8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	78db      	ldrb	r3, [r3, #3]
 8014002:	2b03      	cmp	r3, #3
 8014004:	d003      	beq.n	801400e <USB_EPClearStall+0x4c>
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	78db      	ldrb	r3, [r3, #3]
 801400a:	2b02      	cmp	r3, #2
 801400c:	d138      	bne.n	8014080 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	015a      	lsls	r2, r3, #5
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	4413      	add	r3, r2
 8014016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	68ba      	ldr	r2, [r7, #8]
 801401e:	0151      	lsls	r1, r2, #5
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	440a      	add	r2, r1
 8014024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801402c:	6013      	str	r3, [r2, #0]
 801402e:	e027      	b.n	8014080 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	015a      	lsls	r2, r3, #5
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	4413      	add	r3, r2
 8014038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	68ba      	ldr	r2, [r7, #8]
 8014040:	0151      	lsls	r1, r2, #5
 8014042:	68fa      	ldr	r2, [r7, #12]
 8014044:	440a      	add	r2, r1
 8014046:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801404a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801404e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	78db      	ldrb	r3, [r3, #3]
 8014054:	2b03      	cmp	r3, #3
 8014056:	d003      	beq.n	8014060 <USB_EPClearStall+0x9e>
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	78db      	ldrb	r3, [r3, #3]
 801405c:	2b02      	cmp	r3, #2
 801405e:	d10f      	bne.n	8014080 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	015a      	lsls	r2, r3, #5
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	4413      	add	r3, r2
 8014068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	68ba      	ldr	r2, [r7, #8]
 8014070:	0151      	lsls	r1, r2, #5
 8014072:	68fa      	ldr	r2, [r7, #12]
 8014074:	440a      	add	r2, r1
 8014076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801407a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801407e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3714      	adds	r7, #20
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr

0801408e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801408e:	b480      	push	{r7}
 8014090:	b085      	sub	sp, #20
 8014092:	af00      	add	r7, sp, #0
 8014094:	6078      	str	r0, [r7, #4]
 8014096:	460b      	mov	r3, r1
 8014098:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	68fa      	ldr	r2, [r7, #12]
 80140a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80140ac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80140b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140b8:	681a      	ldr	r2, [r3, #0]
 80140ba:	78fb      	ldrb	r3, [r7, #3]
 80140bc:	011b      	lsls	r3, r3, #4
 80140be:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80140c2:	68f9      	ldr	r1, [r7, #12]
 80140c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80140c8:	4313      	orrs	r3, r2
 80140ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80140cc:	2300      	movs	r3, #0
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3714      	adds	r7, #20
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr

080140da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80140da:	b480      	push	{r7}
 80140dc:	b085      	sub	sp, #20
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	68fa      	ldr	r2, [r7, #12]
 80140f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80140f4:	f023 0303 	bic.w	r3, r3, #3
 80140f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	68fa      	ldr	r2, [r7, #12]
 8014104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014108:	f023 0302 	bic.w	r3, r3, #2
 801410c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801410e:	2300      	movs	r3, #0
}
 8014110:	4618      	mov	r0, r3
 8014112:	3714      	adds	r7, #20
 8014114:	46bd      	mov	sp, r7
 8014116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411a:	4770      	bx	lr

0801411c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801411c:	b480      	push	{r7}
 801411e:	b085      	sub	sp, #20
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014136:	f023 0303 	bic.w	r3, r3, #3
 801413a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014142:	685b      	ldr	r3, [r3, #4]
 8014144:	68fa      	ldr	r2, [r7, #12]
 8014146:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801414a:	f043 0302 	orr.w	r3, r3, #2
 801414e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014150:	2300      	movs	r3, #0
}
 8014152:	4618      	mov	r0, r3
 8014154:	3714      	adds	r7, #20
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr

0801415e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801415e:	b480      	push	{r7}
 8014160:	b085      	sub	sp, #20
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	695b      	ldr	r3, [r3, #20]
 801416a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	699b      	ldr	r3, [r3, #24]
 8014170:	68fa      	ldr	r2, [r7, #12]
 8014172:	4013      	ands	r3, r2
 8014174:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014176:	68fb      	ldr	r3, [r7, #12]
}
 8014178:	4618      	mov	r0, r3
 801417a:	3714      	adds	r7, #20
 801417c:	46bd      	mov	sp, r7
 801417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014182:	4770      	bx	lr

08014184 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014184:	b480      	push	{r7}
 8014186:	b085      	sub	sp, #20
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014196:	699b      	ldr	r3, [r3, #24]
 8014198:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141a0:	69db      	ldr	r3, [r3, #28]
 80141a2:	68ba      	ldr	r2, [r7, #8]
 80141a4:	4013      	ands	r3, r2
 80141a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	0c1b      	lsrs	r3, r3, #16
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	3714      	adds	r7, #20
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr

080141b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b085      	sub	sp, #20
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141ca:	699b      	ldr	r3, [r3, #24]
 80141cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141d4:	69db      	ldr	r3, [r3, #28]
 80141d6:	68ba      	ldr	r2, [r7, #8]
 80141d8:	4013      	ands	r3, r2
 80141da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	b29b      	uxth	r3, r3
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3714      	adds	r7, #20
 80141e4:	46bd      	mov	sp, r7
 80141e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ea:	4770      	bx	lr

080141ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80141ec:	b480      	push	{r7}
 80141ee:	b085      	sub	sp, #20
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	460b      	mov	r3, r1
 80141f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80141fc:	78fb      	ldrb	r3, [r7, #3]
 80141fe:	015a      	lsls	r2, r3, #5
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	4413      	add	r3, r2
 8014204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014208:	689b      	ldr	r3, [r3, #8]
 801420a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014212:	695b      	ldr	r3, [r3, #20]
 8014214:	68ba      	ldr	r2, [r7, #8]
 8014216:	4013      	ands	r3, r2
 8014218:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801421a:	68bb      	ldr	r3, [r7, #8]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3714      	adds	r7, #20
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr

08014228 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014228:	b480      	push	{r7}
 801422a:	b087      	sub	sp, #28
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
 8014230:	460b      	mov	r3, r1
 8014232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801423e:	691b      	ldr	r3, [r3, #16]
 8014240:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801424a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801424c:	78fb      	ldrb	r3, [r7, #3]
 801424e:	f003 030f 	and.w	r3, r3, #15
 8014252:	68fa      	ldr	r2, [r7, #12]
 8014254:	fa22 f303 	lsr.w	r3, r2, r3
 8014258:	01db      	lsls	r3, r3, #7
 801425a:	b2db      	uxtb	r3, r3
 801425c:	693a      	ldr	r2, [r7, #16]
 801425e:	4313      	orrs	r3, r2
 8014260:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014262:	78fb      	ldrb	r3, [r7, #3]
 8014264:	015a      	lsls	r2, r3, #5
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	4413      	add	r3, r2
 801426a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801426e:	689b      	ldr	r3, [r3, #8]
 8014270:	693a      	ldr	r2, [r7, #16]
 8014272:	4013      	ands	r3, r2
 8014274:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014276:	68bb      	ldr	r3, [r7, #8]
}
 8014278:	4618      	mov	r0, r3
 801427a:	371c      	adds	r7, #28
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr

08014284 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	695b      	ldr	r3, [r3, #20]
 8014290:	f003 0301 	and.w	r3, r3, #1
}
 8014294:	4618      	mov	r0, r3
 8014296:	370c      	adds	r7, #12
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr

080142a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80142a0:	b480      	push	{r7}
 80142a2:	b085      	sub	sp, #20
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	68fa      	ldr	r2, [r7, #12]
 80142b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80142ba:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80142be:	f023 0307 	bic.w	r3, r3, #7
 80142c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	68fa      	ldr	r2, [r7, #12]
 80142ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80142d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80142d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80142d8:	2300      	movs	r3, #0
}
 80142da:	4618      	mov	r0, r3
 80142dc:	3714      	adds	r7, #20
 80142de:	46bd      	mov	sp, r7
 80142e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e4:	4770      	bx	lr
	...

080142e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80142e8:	b480      	push	{r7}
 80142ea:	b087      	sub	sp, #28
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	460b      	mov	r3, r1
 80142f2:	607a      	str	r2, [r7, #4]
 80142f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	333c      	adds	r3, #60	@ 0x3c
 80142fe:	3304      	adds	r3, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	4a26      	ldr	r2, [pc, #152]	@ (80143a0 <USB_EP0_OutStart+0xb8>)
 8014308:	4293      	cmp	r3, r2
 801430a:	d90a      	bls.n	8014322 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801431c:	d101      	bne.n	8014322 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801431e:	2300      	movs	r3, #0
 8014320:	e037      	b.n	8014392 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014328:	461a      	mov	r2, r3
 801432a:	2300      	movs	r3, #0
 801432c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014334:	691b      	ldr	r3, [r3, #16]
 8014336:	697a      	ldr	r2, [r7, #20]
 8014338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801433c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014348:	691b      	ldr	r3, [r3, #16]
 801434a:	697a      	ldr	r2, [r7, #20]
 801434c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014350:	f043 0318 	orr.w	r3, r3, #24
 8014354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801435c:	691b      	ldr	r3, [r3, #16]
 801435e:	697a      	ldr	r2, [r7, #20]
 8014360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014364:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8014368:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801436a:	7afb      	ldrb	r3, [r7, #11]
 801436c:	2b01      	cmp	r3, #1
 801436e:	d10f      	bne.n	8014390 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014376:	461a      	mov	r2, r3
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	697a      	ldr	r2, [r7, #20]
 8014386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801438a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801438e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014390:	2300      	movs	r3, #0
}
 8014392:	4618      	mov	r0, r3
 8014394:	371c      	adds	r7, #28
 8014396:	46bd      	mov	sp, r7
 8014398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439c:	4770      	bx	lr
 801439e:	bf00      	nop
 80143a0:	4f54300a 	.word	0x4f54300a

080143a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b085      	sub	sp, #20
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80143ac:	2300      	movs	r3, #0
 80143ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	3301      	adds	r3, #1
 80143b4:	60fb      	str	r3, [r7, #12]
 80143b6:	4a13      	ldr	r2, [pc, #76]	@ (8014404 <USB_CoreReset+0x60>)
 80143b8:	4293      	cmp	r3, r2
 80143ba:	d901      	bls.n	80143c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80143bc:	2303      	movs	r3, #3
 80143be:	e01a      	b.n	80143f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	691b      	ldr	r3, [r3, #16]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	daf3      	bge.n	80143b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80143c8:	2300      	movs	r3, #0
 80143ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	f043 0201 	orr.w	r2, r3, #1
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	3301      	adds	r3, #1
 80143dc:	60fb      	str	r3, [r7, #12]
 80143de:	4a09      	ldr	r2, [pc, #36]	@ (8014404 <USB_CoreReset+0x60>)
 80143e0:	4293      	cmp	r3, r2
 80143e2:	d901      	bls.n	80143e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80143e4:	2303      	movs	r3, #3
 80143e6:	e006      	b.n	80143f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	691b      	ldr	r3, [r3, #16]
 80143ec:	f003 0301 	and.w	r3, r3, #1
 80143f0:	2b01      	cmp	r3, #1
 80143f2:	d0f1      	beq.n	80143d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80143f4:	2300      	movs	r3, #0
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3714      	adds	r7, #20
 80143fa:	46bd      	mov	sp, r7
 80143fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014400:	4770      	bx	lr
 8014402:	bf00      	nop
 8014404:	00030d40 	.word	0x00030d40

08014408 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	460b      	mov	r3, r1
 8014412:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014414:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8014418:	f002 f950 	bl	80166bc <USBD_static_malloc>
 801441c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d105      	bne.n	8014430 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2200      	movs	r2, #0
 8014428:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 801442c:	2302      	movs	r3, #2
 801442e:	e066      	b.n	80144fe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	68fa      	ldr	r2, [r7, #12]
 8014434:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	7c1b      	ldrb	r3, [r3, #16]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d119      	bne.n	8014474 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014444:	2202      	movs	r2, #2
 8014446:	2181      	movs	r1, #129	@ 0x81
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f002 f814 	bl	8016476 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2201      	movs	r2, #1
 8014452:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014454:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014458:	2202      	movs	r2, #2
 801445a:	2101      	movs	r1, #1
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f002 f80a 	bl	8016476 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2201      	movs	r2, #1
 8014466:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2210      	movs	r2, #16
 801446e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8014472:	e016      	b.n	80144a2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014474:	2340      	movs	r3, #64	@ 0x40
 8014476:	2202      	movs	r2, #2
 8014478:	2181      	movs	r1, #129	@ 0x81
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f001 fffb 	bl	8016476 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2201      	movs	r2, #1
 8014484:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014486:	2340      	movs	r3, #64	@ 0x40
 8014488:	2202      	movs	r2, #2
 801448a:	2101      	movs	r1, #1
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f001 fff2 	bl	8016476 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2201      	movs	r2, #1
 8014496:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2210      	movs	r2, #16
 801449e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80144a2:	2308      	movs	r3, #8
 80144a4:	2203      	movs	r2, #3
 80144a6:	2182      	movs	r1, #130	@ 0x82
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f001 ffe4 	bl	8016476 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2201      	movs	r2, #1
 80144b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2200      	movs	r2, #0
 80144c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	2200      	movs	r2, #0
 80144cc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	7c1b      	ldrb	r3, [r3, #16]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d109      	bne.n	80144ec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80144de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80144e2:	2101      	movs	r1, #1
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f002 f8b5 	bl	8016654 <USBD_LL_PrepareReceive>
 80144ea:	e007      	b.n	80144fc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80144f2:	2340      	movs	r3, #64	@ 0x40
 80144f4:	2101      	movs	r1, #1
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f002 f8ac 	bl	8016654 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80144fc:	2300      	movs	r3, #0
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3710      	adds	r7, #16
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}

08014506 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014506:	b580      	push	{r7, lr}
 8014508:	b082      	sub	sp, #8
 801450a:	af00      	add	r7, sp, #0
 801450c:	6078      	str	r0, [r7, #4]
 801450e:	460b      	mov	r3, r1
 8014510:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014512:	2181      	movs	r1, #129	@ 0x81
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f001 ffd4 	bl	80164c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2200      	movs	r2, #0
 801451e:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014520:	2101      	movs	r1, #1
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f001 ffcd 	bl	80164c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2200      	movs	r2, #0
 801452c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014530:	2182      	movs	r1, #130	@ 0x82
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f001 ffc5 	bl	80164c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2200      	movs	r2, #0
 801453c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2200      	movs	r2, #0
 8014544:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801454e:	2b00      	cmp	r3, #0
 8014550:	d00e      	beq.n	8014570 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014562:	4618      	mov	r0, r3
 8014564:	f002 f8b8 	bl	80166d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2200      	movs	r2, #0
 801456c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014570:	2300      	movs	r3, #0
}
 8014572:	4618      	mov	r0, r3
 8014574:	3708      	adds	r7, #8
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
	...

0801457c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b086      	sub	sp, #24
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801458c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801458e:	2300      	movs	r3, #0
 8014590:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014592:	2300      	movs	r3, #0
 8014594:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014596:	2300      	movs	r3, #0
 8014598:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d101      	bne.n	80145a4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80145a0:	2303      	movs	r3, #3
 80145a2:	e0af      	b.n	8014704 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d03f      	beq.n	8014630 <USBD_CDC_Setup+0xb4>
 80145b0:	2b20      	cmp	r3, #32
 80145b2:	f040 809f 	bne.w	80146f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	88db      	ldrh	r3, [r3, #6]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d02e      	beq.n	801461c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	b25b      	sxtb	r3, r3
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	da16      	bge.n	80145f6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80145ce:	689b      	ldr	r3, [r3, #8]
 80145d0:	683a      	ldr	r2, [r7, #0]
 80145d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80145d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80145d6:	683a      	ldr	r2, [r7, #0]
 80145d8:	88d2      	ldrh	r2, [r2, #6]
 80145da:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	88db      	ldrh	r3, [r3, #6]
 80145e0:	2b07      	cmp	r3, #7
 80145e2:	bf28      	it	cs
 80145e4:	2307      	movcs	r3, #7
 80145e6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	89fa      	ldrh	r2, [r7, #14]
 80145ec:	4619      	mov	r1, r3
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f001 fb17 	bl	8015c22 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80145f4:	e085      	b.n	8014702 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	785a      	ldrb	r2, [r3, #1]
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	88db      	ldrh	r3, [r3, #6]
 8014604:	b2da      	uxtb	r2, r3
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801460c:	6939      	ldr	r1, [r7, #16]
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	88db      	ldrh	r3, [r3, #6]
 8014612:	461a      	mov	r2, r3
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f001 fb30 	bl	8015c7a <USBD_CtlPrepareRx>
      break;
 801461a:	e072      	b.n	8014702 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8014622:	689b      	ldr	r3, [r3, #8]
 8014624:	683a      	ldr	r2, [r7, #0]
 8014626:	7850      	ldrb	r0, [r2, #1]
 8014628:	2200      	movs	r2, #0
 801462a:	6839      	ldr	r1, [r7, #0]
 801462c:	4798      	blx	r3
      break;
 801462e:	e068      	b.n	8014702 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	785b      	ldrb	r3, [r3, #1]
 8014634:	2b0b      	cmp	r3, #11
 8014636:	d852      	bhi.n	80146de <USBD_CDC_Setup+0x162>
 8014638:	a201      	add	r2, pc, #4	@ (adr r2, 8014640 <USBD_CDC_Setup+0xc4>)
 801463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801463e:	bf00      	nop
 8014640:	08014671 	.word	0x08014671
 8014644:	080146ed 	.word	0x080146ed
 8014648:	080146df 	.word	0x080146df
 801464c:	080146df 	.word	0x080146df
 8014650:	080146df 	.word	0x080146df
 8014654:	080146df 	.word	0x080146df
 8014658:	080146df 	.word	0x080146df
 801465c:	080146df 	.word	0x080146df
 8014660:	080146df 	.word	0x080146df
 8014664:	080146df 	.word	0x080146df
 8014668:	0801469b 	.word	0x0801469b
 801466c:	080146c5 	.word	0x080146c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014676:	b2db      	uxtb	r3, r3
 8014678:	2b03      	cmp	r3, #3
 801467a:	d107      	bne.n	801468c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801467c:	f107 030a 	add.w	r3, r7, #10
 8014680:	2202      	movs	r2, #2
 8014682:	4619      	mov	r1, r3
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f001 facc 	bl	8015c22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801468a:	e032      	b.n	80146f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801468c:	6839      	ldr	r1, [r7, #0]
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f001 fa56 	bl	8015b40 <USBD_CtlError>
            ret = USBD_FAIL;
 8014694:	2303      	movs	r3, #3
 8014696:	75fb      	strb	r3, [r7, #23]
          break;
 8014698:	e02b      	b.n	80146f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80146a0:	b2db      	uxtb	r3, r3
 80146a2:	2b03      	cmp	r3, #3
 80146a4:	d107      	bne.n	80146b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80146a6:	f107 030d 	add.w	r3, r7, #13
 80146aa:	2201      	movs	r2, #1
 80146ac:	4619      	mov	r1, r3
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f001 fab7 	bl	8015c22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80146b4:	e01d      	b.n	80146f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80146b6:	6839      	ldr	r1, [r7, #0]
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f001 fa41 	bl	8015b40 <USBD_CtlError>
            ret = USBD_FAIL;
 80146be:	2303      	movs	r3, #3
 80146c0:	75fb      	strb	r3, [r7, #23]
          break;
 80146c2:	e016      	b.n	80146f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	2b03      	cmp	r3, #3
 80146ce:	d00f      	beq.n	80146f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80146d0:	6839      	ldr	r1, [r7, #0]
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f001 fa34 	bl	8015b40 <USBD_CtlError>
            ret = USBD_FAIL;
 80146d8:	2303      	movs	r3, #3
 80146da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80146dc:	e008      	b.n	80146f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80146de:	6839      	ldr	r1, [r7, #0]
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f001 fa2d 	bl	8015b40 <USBD_CtlError>
          ret = USBD_FAIL;
 80146e6:	2303      	movs	r3, #3
 80146e8:	75fb      	strb	r3, [r7, #23]
          break;
 80146ea:	e002      	b.n	80146f2 <USBD_CDC_Setup+0x176>
          break;
 80146ec:	bf00      	nop
 80146ee:	e008      	b.n	8014702 <USBD_CDC_Setup+0x186>
          break;
 80146f0:	bf00      	nop
      }
      break;
 80146f2:	e006      	b.n	8014702 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80146f4:	6839      	ldr	r1, [r7, #0]
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f001 fa22 	bl	8015b40 <USBD_CtlError>
      ret = USBD_FAIL;
 80146fc:	2303      	movs	r3, #3
 80146fe:	75fb      	strb	r3, [r7, #23]
      break;
 8014700:	bf00      	nop
  }

  return (uint8_t)ret;
 8014702:	7dfb      	ldrb	r3, [r7, #23]
}
 8014704:	4618      	mov	r0, r3
 8014706:	3718      	adds	r7, #24
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b084      	sub	sp, #16
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	460b      	mov	r3, r1
 8014716:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801471e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014726:	2b00      	cmp	r3, #0
 8014728:	d101      	bne.n	801472e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801472a:	2303      	movs	r3, #3
 801472c:	e04f      	b.n	80147ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014734:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014736:	78fa      	ldrb	r2, [r7, #3]
 8014738:	6879      	ldr	r1, [r7, #4]
 801473a:	4613      	mov	r3, r2
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	4413      	add	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	440b      	add	r3, r1
 8014744:	3318      	adds	r3, #24
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d029      	beq.n	80147a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801474c:	78fa      	ldrb	r2, [r7, #3]
 801474e:	6879      	ldr	r1, [r7, #4]
 8014750:	4613      	mov	r3, r2
 8014752:	009b      	lsls	r3, r3, #2
 8014754:	4413      	add	r3, r2
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	440b      	add	r3, r1
 801475a:	3318      	adds	r3, #24
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	78f9      	ldrb	r1, [r7, #3]
 8014760:	68f8      	ldr	r0, [r7, #12]
 8014762:	460b      	mov	r3, r1
 8014764:	00db      	lsls	r3, r3, #3
 8014766:	1a5b      	subs	r3, r3, r1
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	4403      	add	r3, r0
 801476c:	3344      	adds	r3, #68	@ 0x44
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	fbb2 f1f3 	udiv	r1, r2, r3
 8014774:	fb01 f303 	mul.w	r3, r1, r3
 8014778:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801477a:	2b00      	cmp	r3, #0
 801477c:	d110      	bne.n	80147a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801477e:	78fa      	ldrb	r2, [r7, #3]
 8014780:	6879      	ldr	r1, [r7, #4]
 8014782:	4613      	mov	r3, r2
 8014784:	009b      	lsls	r3, r3, #2
 8014786:	4413      	add	r3, r2
 8014788:	009b      	lsls	r3, r3, #2
 801478a:	440b      	add	r3, r1
 801478c:	3318      	adds	r3, #24
 801478e:	2200      	movs	r2, #0
 8014790:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014792:	78f9      	ldrb	r1, [r7, #3]
 8014794:	2300      	movs	r3, #0
 8014796:	2200      	movs	r2, #0
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f001 ff3a 	bl	8016612 <USBD_LL_Transmit>
 801479e:	e015      	b.n	80147cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80147ae:	691b      	ldr	r3, [r3, #16]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d00b      	beq.n	80147cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80147ba:	691b      	ldr	r3, [r3, #16]
 80147bc:	68ba      	ldr	r2, [r7, #8]
 80147be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80147c2:	68ba      	ldr	r2, [r7, #8]
 80147c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80147c8:	78fa      	ldrb	r2, [r7, #3]
 80147ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3710      	adds	r7, #16
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}

080147d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80147d6:	b580      	push	{r7, lr}
 80147d8:	b084      	sub	sp, #16
 80147da:	af00      	add	r7, sp, #0
 80147dc:	6078      	str	r0, [r7, #4]
 80147de:	460b      	mov	r3, r1
 80147e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80147e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d101      	bne.n	80147f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80147f4:	2303      	movs	r3, #3
 80147f6:	e015      	b.n	8014824 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80147f8:	78fb      	ldrb	r3, [r7, #3]
 80147fa:	4619      	mov	r1, r3
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f001 ff4a 	bl	8016696 <USBD_LL_GetRxDataSize>
 8014802:	4602      	mov	r2, r0
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8014810:	68db      	ldr	r3, [r3, #12]
 8014812:	68fa      	ldr	r2, [r7, #12]
 8014814:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8014818:	68fa      	ldr	r2, [r7, #12]
 801481a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801481e:	4611      	mov	r1, r2
 8014820:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014822:	2300      	movs	r3, #0
}
 8014824:	4618      	mov	r0, r3
 8014826:	3710      	adds	r7, #16
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801483a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d101      	bne.n	8014846 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8014842:	2303      	movs	r3, #3
 8014844:	e01a      	b.n	801487c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801484c:	2b00      	cmp	r3, #0
 801484e:	d014      	beq.n	801487a <USBD_CDC_EP0_RxReady+0x4e>
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014856:	2bff      	cmp	r3, #255	@ 0xff
 8014858:	d00f      	beq.n	801487a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8014860:	689b      	ldr	r3, [r3, #8]
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8014868:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801486a:	68fa      	ldr	r2, [r7, #12]
 801486c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014870:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	22ff      	movs	r2, #255	@ 0xff
 8014876:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801487a:	2300      	movs	r3, #0
}
 801487c:	4618      	mov	r0, r3
 801487e:	3710      	adds	r7, #16
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014884:	b480      	push	{r7}
 8014886:	b083      	sub	sp, #12
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2243      	movs	r2, #67	@ 0x43
 8014890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8014892:	4b03      	ldr	r3, [pc, #12]	@ (80148a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014894:	4618      	mov	r0, r3
 8014896:	370c      	adds	r7, #12
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr
 80148a0:	200000e0 	.word	0x200000e0

080148a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80148a4:	b480      	push	{r7}
 80148a6:	b083      	sub	sp, #12
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2243      	movs	r2, #67	@ 0x43
 80148b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80148b2:	4b03      	ldr	r3, [pc, #12]	@ (80148c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80148b4:	4618      	mov	r0, r3
 80148b6:	370c      	adds	r7, #12
 80148b8:	46bd      	mov	sp, r7
 80148ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148be:	4770      	bx	lr
 80148c0:	2000009c 	.word	0x2000009c

080148c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80148c4:	b480      	push	{r7}
 80148c6:	b083      	sub	sp, #12
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2243      	movs	r2, #67	@ 0x43
 80148d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80148d2:	4b03      	ldr	r3, [pc, #12]	@ (80148e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	370c      	adds	r7, #12
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr
 80148e0:	20000124 	.word	0x20000124

080148e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	220a      	movs	r2, #10
 80148f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80148f2:	4b03      	ldr	r3, [pc, #12]	@ (8014900 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80148f4:	4618      	mov	r0, r3
 80148f6:	370c      	adds	r7, #12
 80148f8:	46bd      	mov	sp, r7
 80148fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fe:	4770      	bx	lr
 8014900:	20000058 	.word	0x20000058

08014904 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014904:	b480      	push	{r7}
 8014906:	b083      	sub	sp, #12
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
 801490c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d101      	bne.n	8014918 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014914:	2303      	movs	r3, #3
 8014916:	e004      	b.n	8014922 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	683a      	ldr	r2, [r7, #0]
 801491c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8014920:	2300      	movs	r3, #0
}
 8014922:	4618      	mov	r0, r3
 8014924:	370c      	adds	r7, #12
 8014926:	46bd      	mov	sp, r7
 8014928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492c:	4770      	bx	lr

0801492e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801492e:	b480      	push	{r7}
 8014930:	b087      	sub	sp, #28
 8014932:	af00      	add	r7, sp, #0
 8014934:	60f8      	str	r0, [r7, #12]
 8014936:	60b9      	str	r1, [r7, #8]
 8014938:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014940:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014942:	697b      	ldr	r3, [r7, #20]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d101      	bne.n	801494c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014948:	2303      	movs	r3, #3
 801494a:	e008      	b.n	801495e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	68ba      	ldr	r2, [r7, #8]
 8014950:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	687a      	ldr	r2, [r7, #4]
 8014958:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801495c:	2300      	movs	r3, #0
}
 801495e:	4618      	mov	r0, r3
 8014960:	371c      	adds	r7, #28
 8014962:	46bd      	mov	sp, r7
 8014964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014968:	4770      	bx	lr

0801496a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801496a:	b480      	push	{r7}
 801496c:	b085      	sub	sp, #20
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
 8014972:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801497a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d101      	bne.n	8014986 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8014982:	2303      	movs	r3, #3
 8014984:	e004      	b.n	8014990 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	683a      	ldr	r2, [r7, #0]
 801498a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801498e:	2300      	movs	r3, #0
}
 8014990:	4618      	mov	r0, r3
 8014992:	3714      	adds	r7, #20
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr

0801499c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80149aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80149ac:	2301      	movs	r3, #1
 80149ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d101      	bne.n	80149be <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80149ba:	2303      	movs	r3, #3
 80149bc:	e01a      	b.n	80149f4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d114      	bne.n	80149f2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	2201      	movs	r2, #1
 80149cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80149e6:	2181      	movs	r1, #129	@ 0x81
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f001 fe12 	bl	8016612 <USBD_LL_Transmit>

    ret = USBD_OK;
 80149ee:	2300      	movs	r3, #0
 80149f0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80149f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3710      	adds	r7, #16
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}

080149fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b084      	sub	sp, #16
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014a0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d101      	bne.n	8014a1a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014a16:	2303      	movs	r3, #3
 8014a18:	e016      	b.n	8014a48 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	7c1b      	ldrb	r3, [r3, #16]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d109      	bne.n	8014a36 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014a2c:	2101      	movs	r1, #1
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f001 fe10 	bl	8016654 <USBD_LL_PrepareReceive>
 8014a34:	e007      	b.n	8014a46 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014a3c:	2340      	movs	r3, #64	@ 0x40
 8014a3e:	2101      	movs	r1, #1
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f001 fe07 	bl	8016654 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014a46:	2300      	movs	r3, #0
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3710      	adds	r7, #16
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}

08014a50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b086      	sub	sp, #24
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	60f8      	str	r0, [r7, #12]
 8014a58:	60b9      	str	r1, [r7, #8]
 8014a5a:	4613      	mov	r3, r2
 8014a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d101      	bne.n	8014a68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014a64:	2303      	movs	r3, #3
 8014a66:	e01f      	b.n	8014aa8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	2200      	movs	r2, #0
 8014a74:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d003      	beq.n	8014a8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	68ba      	ldr	r2, [r7, #8]
 8014a8a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2201      	movs	r2, #1
 8014a92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	79fa      	ldrb	r2, [r7, #7]
 8014a9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f001 fc83 	bl	80163a8 <USBD_LL_Init>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3718      	adds	r7, #24
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014aba:	2300      	movs	r3, #0
 8014abc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d101      	bne.n	8014ac8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8014ac4:	2303      	movs	r3, #3
 8014ac6:	e016      	b.n	8014af6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	683a      	ldr	r2, [r7, #0]
 8014acc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d00b      	beq.n	8014af4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ae4:	f107 020e 	add.w	r2, r7, #14
 8014ae8:	4610      	mov	r0, r2
 8014aea:	4798      	blx	r3
 8014aec:	4602      	mov	r2, r0
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8014af4:	2300      	movs	r3, #0
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3710      	adds	r7, #16
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}

08014afe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014afe:	b580      	push	{r7, lr}
 8014b00:	b082      	sub	sp, #8
 8014b02:	af00      	add	r7, sp, #0
 8014b04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f001 fc9a 	bl	8016440 <USBD_LL_Start>
 8014b0c:	4603      	mov	r3, r0
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3708      	adds	r7, #8
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}

08014b16 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014b16:	b480      	push	{r7}
 8014b18:	b083      	sub	sp, #12
 8014b1a:	af00      	add	r7, sp, #0
 8014b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014b1e:	2300      	movs	r3, #0
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	370c      	adds	r7, #12
 8014b24:	46bd      	mov	sp, r7
 8014b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2a:	4770      	bx	lr

08014b2c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	460b      	mov	r3, r1
 8014b36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014b38:	2303      	movs	r3, #3
 8014b3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d009      	beq.n	8014b5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	78fa      	ldrb	r2, [r7, #3]
 8014b50:	4611      	mov	r1, r2
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	4798      	blx	r3
 8014b56:	4603      	mov	r3, r0
 8014b58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3710      	adds	r7, #16
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b082      	sub	sp, #8
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d007      	beq.n	8014b8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	78fa      	ldrb	r2, [r7, #3]
 8014b84:	4611      	mov	r1, r2
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	4798      	blx	r3
  }

  return USBD_OK;
 8014b8a:	2300      	movs	r3, #0
}
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	3708      	adds	r7, #8
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}

08014b94 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b084      	sub	sp, #16
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014ba4:	6839      	ldr	r1, [r7, #0]
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f000 ff90 	bl	8015acc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2201      	movs	r2, #1
 8014bb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014bba:	461a      	mov	r2, r3
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014bc8:	f003 031f 	and.w	r3, r3, #31
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d01a      	beq.n	8014c06 <USBD_LL_SetupStage+0x72>
 8014bd0:	2b02      	cmp	r3, #2
 8014bd2:	d822      	bhi.n	8014c1a <USBD_LL_SetupStage+0x86>
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d002      	beq.n	8014bde <USBD_LL_SetupStage+0x4a>
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	d00a      	beq.n	8014bf2 <USBD_LL_SetupStage+0x5e>
 8014bdc:	e01d      	b.n	8014c1a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014be4:	4619      	mov	r1, r3
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f000 fa62 	bl	80150b0 <USBD_StdDevReq>
 8014bec:	4603      	mov	r3, r0
 8014bee:	73fb      	strb	r3, [r7, #15]
      break;
 8014bf0:	e020      	b.n	8014c34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f000 fac6 	bl	801518c <USBD_StdItfReq>
 8014c00:	4603      	mov	r3, r0
 8014c02:	73fb      	strb	r3, [r7, #15]
      break;
 8014c04:	e016      	b.n	8014c34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f000 fb05 	bl	801521e <USBD_StdEPReq>
 8014c14:	4603      	mov	r3, r0
 8014c16:	73fb      	strb	r3, [r7, #15]
      break;
 8014c18:	e00c      	b.n	8014c34 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014c20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014c24:	b2db      	uxtb	r3, r3
 8014c26:	4619      	mov	r1, r3
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f001 fc69 	bl	8016500 <USBD_LL_StallEP>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	73fb      	strb	r3, [r7, #15]
      break;
 8014c32:	bf00      	nop
  }

  return ret;
 8014c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3710      	adds	r7, #16
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}

08014c3e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014c3e:	b580      	push	{r7, lr}
 8014c40:	b086      	sub	sp, #24
 8014c42:	af00      	add	r7, sp, #0
 8014c44:	60f8      	str	r0, [r7, #12]
 8014c46:	460b      	mov	r3, r1
 8014c48:	607a      	str	r2, [r7, #4]
 8014c4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014c4c:	7afb      	ldrb	r3, [r7, #11]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d138      	bne.n	8014cc4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8014c58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014c60:	2b03      	cmp	r3, #3
 8014c62:	d14a      	bne.n	8014cfa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	689a      	ldr	r2, [r3, #8]
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	68db      	ldr	r3, [r3, #12]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d913      	bls.n	8014c98 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	689a      	ldr	r2, [r3, #8]
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	68db      	ldr	r3, [r3, #12]
 8014c78:	1ad2      	subs	r2, r2, r3
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	68da      	ldr	r2, [r3, #12]
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	689b      	ldr	r3, [r3, #8]
 8014c86:	4293      	cmp	r3, r2
 8014c88:	bf28      	it	cs
 8014c8a:	4613      	movcs	r3, r2
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	6879      	ldr	r1, [r7, #4]
 8014c90:	68f8      	ldr	r0, [r7, #12]
 8014c92:	f001 f80f 	bl	8015cb4 <USBD_CtlContinueRx>
 8014c96:	e030      	b.n	8014cfa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c9e:	b2db      	uxtb	r3, r3
 8014ca0:	2b03      	cmp	r3, #3
 8014ca2:	d10b      	bne.n	8014cbc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014caa:	691b      	ldr	r3, [r3, #16]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d005      	beq.n	8014cbc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014cb6:	691b      	ldr	r3, [r3, #16]
 8014cb8:	68f8      	ldr	r0, [r7, #12]
 8014cba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f001 f80a 	bl	8015cd6 <USBD_CtlSendStatus>
 8014cc2:	e01a      	b.n	8014cfa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014cca:	b2db      	uxtb	r3, r3
 8014ccc:	2b03      	cmp	r3, #3
 8014cce:	d114      	bne.n	8014cfa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014cd6:	699b      	ldr	r3, [r3, #24]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d00e      	beq.n	8014cfa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014ce2:	699b      	ldr	r3, [r3, #24]
 8014ce4:	7afa      	ldrb	r2, [r7, #11]
 8014ce6:	4611      	mov	r1, r2
 8014ce8:	68f8      	ldr	r0, [r7, #12]
 8014cea:	4798      	blx	r3
 8014cec:	4603      	mov	r3, r0
 8014cee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014cf0:	7dfb      	ldrb	r3, [r7, #23]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d001      	beq.n	8014cfa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8014cf6:	7dfb      	ldrb	r3, [r7, #23]
 8014cf8:	e000      	b.n	8014cfc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8014cfa:	2300      	movs	r3, #0
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3718      	adds	r7, #24
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	607a      	str	r2, [r7, #4]
 8014d10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014d12:	7afb      	ldrb	r3, [r7, #11]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d16b      	bne.n	8014df0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	3314      	adds	r3, #20
 8014d1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014d24:	2b02      	cmp	r3, #2
 8014d26:	d156      	bne.n	8014dd6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	689a      	ldr	r2, [r3, #8]
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d914      	bls.n	8014d5e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	689a      	ldr	r2, [r3, #8]
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	1ad2      	subs	r2, r2, r3
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	689b      	ldr	r3, [r3, #8]
 8014d46:	461a      	mov	r2, r3
 8014d48:	6879      	ldr	r1, [r7, #4]
 8014d4a:	68f8      	ldr	r0, [r7, #12]
 8014d4c:	f000 ff84 	bl	8015c58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d50:	2300      	movs	r3, #0
 8014d52:	2200      	movs	r2, #0
 8014d54:	2100      	movs	r1, #0
 8014d56:	68f8      	ldr	r0, [r7, #12]
 8014d58:	f001 fc7c 	bl	8016654 <USBD_LL_PrepareReceive>
 8014d5c:	e03b      	b.n	8014dd6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	68da      	ldr	r2, [r3, #12]
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	689b      	ldr	r3, [r3, #8]
 8014d66:	429a      	cmp	r2, r3
 8014d68:	d11c      	bne.n	8014da4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	685a      	ldr	r2, [r3, #4]
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d316      	bcc.n	8014da4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	685a      	ldr	r2, [r3, #4]
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d20f      	bcs.n	8014da4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014d84:	2200      	movs	r2, #0
 8014d86:	2100      	movs	r1, #0
 8014d88:	68f8      	ldr	r0, [r7, #12]
 8014d8a:	f000 ff65 	bl	8015c58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	2200      	movs	r2, #0
 8014d92:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d96:	2300      	movs	r3, #0
 8014d98:	2200      	movs	r2, #0
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	68f8      	ldr	r0, [r7, #12]
 8014d9e:	f001 fc59 	bl	8016654 <USBD_LL_PrepareReceive>
 8014da2:	e018      	b.n	8014dd6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014daa:	b2db      	uxtb	r3, r3
 8014dac:	2b03      	cmp	r3, #3
 8014dae:	d10b      	bne.n	8014dc8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014db6:	68db      	ldr	r3, [r3, #12]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d005      	beq.n	8014dc8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014dc8:	2180      	movs	r1, #128	@ 0x80
 8014dca:	68f8      	ldr	r0, [r7, #12]
 8014dcc:	f001 fb98 	bl	8016500 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014dd0:	68f8      	ldr	r0, [r7, #12]
 8014dd2:	f000 ff93 	bl	8015cfc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8014ddc:	2b01      	cmp	r3, #1
 8014dde:	d122      	bne.n	8014e26 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014de0:	68f8      	ldr	r0, [r7, #12]
 8014de2:	f7ff fe98 	bl	8014b16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2200      	movs	r2, #0
 8014dea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8014dee:	e01a      	b.n	8014e26 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014df6:	b2db      	uxtb	r3, r3
 8014df8:	2b03      	cmp	r3, #3
 8014dfa:	d114      	bne.n	8014e26 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e02:	695b      	ldr	r3, [r3, #20]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d00e      	beq.n	8014e26 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e0e:	695b      	ldr	r3, [r3, #20]
 8014e10:	7afa      	ldrb	r2, [r7, #11]
 8014e12:	4611      	mov	r1, r2
 8014e14:	68f8      	ldr	r0, [r7, #12]
 8014e16:	4798      	blx	r3
 8014e18:	4603      	mov	r3, r0
 8014e1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014e1c:	7dfb      	ldrb	r3, [r7, #23]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d001      	beq.n	8014e26 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8014e22:	7dfb      	ldrb	r3, [r7, #23]
 8014e24:	e000      	b.n	8014e28 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8014e26:	2300      	movs	r3, #0
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3718      	adds	r7, #24
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}

08014e30 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2200      	movs	r2, #0
 8014e44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2200      	movs	r2, #0
 8014e52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d101      	bne.n	8014e64 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014e60:	2303      	movs	r3, #3
 8014e62:	e02f      	b.n	8014ec4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d00f      	beq.n	8014e8e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e74:	685b      	ldr	r3, [r3, #4]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d009      	beq.n	8014e8e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	6852      	ldr	r2, [r2, #4]
 8014e86:	b2d2      	uxtb	r2, r2
 8014e88:	4611      	mov	r1, r2
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014e8e:	2340      	movs	r3, #64	@ 0x40
 8014e90:	2200      	movs	r2, #0
 8014e92:	2100      	movs	r1, #0
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f001 faee 	bl	8016476 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2201      	movs	r2, #1
 8014e9e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2240      	movs	r2, #64	@ 0x40
 8014ea6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014eaa:	2340      	movs	r3, #64	@ 0x40
 8014eac:	2200      	movs	r2, #0
 8014eae:	2180      	movs	r1, #128	@ 0x80
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f001 fae0 	bl	8016476 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2201      	movs	r2, #1
 8014eba:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2240      	movs	r2, #64	@ 0x40
 8014ec0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014ec2:	2300      	movs	r3, #0
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	78fa      	ldrb	r2, [r7, #3]
 8014edc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014ede:	2300      	movs	r3, #0
}
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	370c      	adds	r7, #12
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eea:	4770      	bx	lr

08014eec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014efa:	b2da      	uxtb	r2, r3
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2204      	movs	r2, #4
 8014f06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8014f0a:	2300      	movs	r3, #0
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	370c      	adds	r7, #12
 8014f10:	46bd      	mov	sp, r7
 8014f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f16:	4770      	bx	lr

08014f18 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f26:	b2db      	uxtb	r3, r3
 8014f28:	2b04      	cmp	r3, #4
 8014f2a:	d106      	bne.n	8014f3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8014f32:	b2da      	uxtb	r2, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8014f3a:	2300      	movs	r3, #0
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	370c      	adds	r7, #12
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr

08014f48 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d101      	bne.n	8014f5e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8014f5a:	2303      	movs	r3, #3
 8014f5c:	e012      	b.n	8014f84 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	2b03      	cmp	r3, #3
 8014f68:	d10b      	bne.n	8014f82 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f70:	69db      	ldr	r3, [r3, #28]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d005      	beq.n	8014f82 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f7c:	69db      	ldr	r3, [r3, #28]
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014f82:	2300      	movs	r3, #0
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3708      	adds	r7, #8
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
 8014f94:	460b      	mov	r3, r1
 8014f96:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d101      	bne.n	8014fa6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8014fa2:	2303      	movs	r3, #3
 8014fa4:	e014      	b.n	8014fd0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	2b03      	cmp	r3, #3
 8014fb0:	d10d      	bne.n	8014fce <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014fb8:	6a1b      	ldr	r3, [r3, #32]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d007      	beq.n	8014fce <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014fc4:	6a1b      	ldr	r3, [r3, #32]
 8014fc6:	78fa      	ldrb	r2, [r7, #3]
 8014fc8:	4611      	mov	r1, r2
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014fce:	2300      	movs	r3, #0
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3708      	adds	r7, #8
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	460b      	mov	r3, r1
 8014fe2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d101      	bne.n	8014ff2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8014fee:	2303      	movs	r3, #3
 8014ff0:	e014      	b.n	801501c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ff8:	b2db      	uxtb	r3, r3
 8014ffa:	2b03      	cmp	r3, #3
 8014ffc:	d10d      	bne.n	801501a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015006:	2b00      	cmp	r3, #0
 8015008:	d007      	beq.n	801501a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015012:	78fa      	ldrb	r2, [r7, #3]
 8015014:	4611      	mov	r1, r2
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801501a:	2300      	movs	r3, #0
}
 801501c:	4618      	mov	r0, r3
 801501e:	3708      	adds	r7, #8
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}

08015024 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015024:	b480      	push	{r7}
 8015026:	b083      	sub	sp, #12
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801502c:	2300      	movs	r3, #0
}
 801502e:	4618      	mov	r0, r3
 8015030:	370c      	adds	r7, #12
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr

0801503a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801503a:	b580      	push	{r7, lr}
 801503c:	b082      	sub	sp, #8
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	2201      	movs	r2, #1
 8015046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015050:	2b00      	cmp	r3, #0
 8015052:	d009      	beq.n	8015068 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801505a:	685b      	ldr	r3, [r3, #4]
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	6852      	ldr	r2, [r2, #4]
 8015060:	b2d2      	uxtb	r2, r2
 8015062:	4611      	mov	r1, r2
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	4798      	blx	r3
  }

  return USBD_OK;
 8015068:	2300      	movs	r3, #0
}
 801506a:	4618      	mov	r0, r3
 801506c:	3708      	adds	r7, #8
 801506e:	46bd      	mov	sp, r7
 8015070:	bd80      	pop	{r7, pc}

08015072 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015072:	b480      	push	{r7}
 8015074:	b087      	sub	sp, #28
 8015076:	af00      	add	r7, sp, #0
 8015078:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	3301      	adds	r3, #1
 8015088:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	781b      	ldrb	r3, [r3, #0]
 801508e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015090:	8a3b      	ldrh	r3, [r7, #16]
 8015092:	021b      	lsls	r3, r3, #8
 8015094:	b21a      	sxth	r2, r3
 8015096:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801509a:	4313      	orrs	r3, r2
 801509c:	b21b      	sxth	r3, r3
 801509e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80150a0:	89fb      	ldrh	r3, [r7, #14]
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	371c      	adds	r7, #28
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr
	...

080150b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80150ba:	2300      	movs	r3, #0
 80150bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80150c6:	2b40      	cmp	r3, #64	@ 0x40
 80150c8:	d005      	beq.n	80150d6 <USBD_StdDevReq+0x26>
 80150ca:	2b40      	cmp	r3, #64	@ 0x40
 80150cc:	d853      	bhi.n	8015176 <USBD_StdDevReq+0xc6>
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d00b      	beq.n	80150ea <USBD_StdDevReq+0x3a>
 80150d2:	2b20      	cmp	r3, #32
 80150d4:	d14f      	bne.n	8015176 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80150dc:	689b      	ldr	r3, [r3, #8]
 80150de:	6839      	ldr	r1, [r7, #0]
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	4798      	blx	r3
 80150e4:	4603      	mov	r3, r0
 80150e6:	73fb      	strb	r3, [r7, #15]
      break;
 80150e8:	e04a      	b.n	8015180 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	785b      	ldrb	r3, [r3, #1]
 80150ee:	2b09      	cmp	r3, #9
 80150f0:	d83b      	bhi.n	801516a <USBD_StdDevReq+0xba>
 80150f2:	a201      	add	r2, pc, #4	@ (adr r2, 80150f8 <USBD_StdDevReq+0x48>)
 80150f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150f8:	0801514d 	.word	0x0801514d
 80150fc:	08015161 	.word	0x08015161
 8015100:	0801516b 	.word	0x0801516b
 8015104:	08015157 	.word	0x08015157
 8015108:	0801516b 	.word	0x0801516b
 801510c:	0801512b 	.word	0x0801512b
 8015110:	08015121 	.word	0x08015121
 8015114:	0801516b 	.word	0x0801516b
 8015118:	08015143 	.word	0x08015143
 801511c:	08015135 	.word	0x08015135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015120:	6839      	ldr	r1, [r7, #0]
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f000 f9de 	bl	80154e4 <USBD_GetDescriptor>
          break;
 8015128:	e024      	b.n	8015174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801512a:	6839      	ldr	r1, [r7, #0]
 801512c:	6878      	ldr	r0, [r7, #4]
 801512e:	f000 fb43 	bl	80157b8 <USBD_SetAddress>
          break;
 8015132:	e01f      	b.n	8015174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015134:	6839      	ldr	r1, [r7, #0]
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f000 fb82 	bl	8015840 <USBD_SetConfig>
 801513c:	4603      	mov	r3, r0
 801513e:	73fb      	strb	r3, [r7, #15]
          break;
 8015140:	e018      	b.n	8015174 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015142:	6839      	ldr	r1, [r7, #0]
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f000 fc21 	bl	801598c <USBD_GetConfig>
          break;
 801514a:	e013      	b.n	8015174 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801514c:	6839      	ldr	r1, [r7, #0]
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f000 fc52 	bl	80159f8 <USBD_GetStatus>
          break;
 8015154:	e00e      	b.n	8015174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015156:	6839      	ldr	r1, [r7, #0]
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f000 fc81 	bl	8015a60 <USBD_SetFeature>
          break;
 801515e:	e009      	b.n	8015174 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015160:	6839      	ldr	r1, [r7, #0]
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f000 fc90 	bl	8015a88 <USBD_ClrFeature>
          break;
 8015168:	e004      	b.n	8015174 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801516a:	6839      	ldr	r1, [r7, #0]
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f000 fce7 	bl	8015b40 <USBD_CtlError>
          break;
 8015172:	bf00      	nop
      }
      break;
 8015174:	e004      	b.n	8015180 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8015176:	6839      	ldr	r1, [r7, #0]
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f000 fce1 	bl	8015b40 <USBD_CtlError>
      break;
 801517e:	bf00      	nop
  }

  return ret;
 8015180:	7bfb      	ldrb	r3, [r7, #15]
}
 8015182:	4618      	mov	r0, r3
 8015184:	3710      	adds	r7, #16
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop

0801518c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b084      	sub	sp, #16
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015196:	2300      	movs	r3, #0
 8015198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80151a2:	2b40      	cmp	r3, #64	@ 0x40
 80151a4:	d005      	beq.n	80151b2 <USBD_StdItfReq+0x26>
 80151a6:	2b40      	cmp	r3, #64	@ 0x40
 80151a8:	d82f      	bhi.n	801520a <USBD_StdItfReq+0x7e>
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d001      	beq.n	80151b2 <USBD_StdItfReq+0x26>
 80151ae:	2b20      	cmp	r3, #32
 80151b0:	d12b      	bne.n	801520a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	3b01      	subs	r3, #1
 80151bc:	2b02      	cmp	r3, #2
 80151be:	d81d      	bhi.n	80151fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	889b      	ldrh	r3, [r3, #4]
 80151c4:	b2db      	uxtb	r3, r3
 80151c6:	2b01      	cmp	r3, #1
 80151c8:	d813      	bhi.n	80151f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80151d0:	689b      	ldr	r3, [r3, #8]
 80151d2:	6839      	ldr	r1, [r7, #0]
 80151d4:	6878      	ldr	r0, [r7, #4]
 80151d6:	4798      	blx	r3
 80151d8:	4603      	mov	r3, r0
 80151da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	88db      	ldrh	r3, [r3, #6]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d110      	bne.n	8015206 <USBD_StdItfReq+0x7a>
 80151e4:	7bfb      	ldrb	r3, [r7, #15]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d10d      	bne.n	8015206 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80151ea:	6878      	ldr	r0, [r7, #4]
 80151ec:	f000 fd73 	bl	8015cd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80151f0:	e009      	b.n	8015206 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80151f2:	6839      	ldr	r1, [r7, #0]
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f000 fca3 	bl	8015b40 <USBD_CtlError>
          break;
 80151fa:	e004      	b.n	8015206 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80151fc:	6839      	ldr	r1, [r7, #0]
 80151fe:	6878      	ldr	r0, [r7, #4]
 8015200:	f000 fc9e 	bl	8015b40 <USBD_CtlError>
          break;
 8015204:	e000      	b.n	8015208 <USBD_StdItfReq+0x7c>
          break;
 8015206:	bf00      	nop
      }
      break;
 8015208:	e004      	b.n	8015214 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801520a:	6839      	ldr	r1, [r7, #0]
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f000 fc97 	bl	8015b40 <USBD_CtlError>
      break;
 8015212:	bf00      	nop
  }

  return ret;
 8015214:	7bfb      	ldrb	r3, [r7, #15]
}
 8015216:	4618      	mov	r0, r3
 8015218:	3710      	adds	r7, #16
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}

0801521e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801521e:	b580      	push	{r7, lr}
 8015220:	b084      	sub	sp, #16
 8015222:	af00      	add	r7, sp, #0
 8015224:	6078      	str	r0, [r7, #4]
 8015226:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015228:	2300      	movs	r3, #0
 801522a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	889b      	ldrh	r3, [r3, #4]
 8015230:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	781b      	ldrb	r3, [r3, #0]
 8015236:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801523a:	2b40      	cmp	r3, #64	@ 0x40
 801523c:	d007      	beq.n	801524e <USBD_StdEPReq+0x30>
 801523e:	2b40      	cmp	r3, #64	@ 0x40
 8015240:	f200 8145 	bhi.w	80154ce <USBD_StdEPReq+0x2b0>
 8015244:	2b00      	cmp	r3, #0
 8015246:	d00c      	beq.n	8015262 <USBD_StdEPReq+0x44>
 8015248:	2b20      	cmp	r3, #32
 801524a:	f040 8140 	bne.w	80154ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015254:	689b      	ldr	r3, [r3, #8]
 8015256:	6839      	ldr	r1, [r7, #0]
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	4798      	blx	r3
 801525c:	4603      	mov	r3, r0
 801525e:	73fb      	strb	r3, [r7, #15]
      break;
 8015260:	e13a      	b.n	80154d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	785b      	ldrb	r3, [r3, #1]
 8015266:	2b03      	cmp	r3, #3
 8015268:	d007      	beq.n	801527a <USBD_StdEPReq+0x5c>
 801526a:	2b03      	cmp	r3, #3
 801526c:	f300 8129 	bgt.w	80154c2 <USBD_StdEPReq+0x2a4>
 8015270:	2b00      	cmp	r3, #0
 8015272:	d07f      	beq.n	8015374 <USBD_StdEPReq+0x156>
 8015274:	2b01      	cmp	r3, #1
 8015276:	d03c      	beq.n	80152f2 <USBD_StdEPReq+0xd4>
 8015278:	e123      	b.n	80154c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015280:	b2db      	uxtb	r3, r3
 8015282:	2b02      	cmp	r3, #2
 8015284:	d002      	beq.n	801528c <USBD_StdEPReq+0x6e>
 8015286:	2b03      	cmp	r3, #3
 8015288:	d016      	beq.n	80152b8 <USBD_StdEPReq+0x9a>
 801528a:	e02c      	b.n	80152e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801528c:	7bbb      	ldrb	r3, [r7, #14]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d00d      	beq.n	80152ae <USBD_StdEPReq+0x90>
 8015292:	7bbb      	ldrb	r3, [r7, #14]
 8015294:	2b80      	cmp	r3, #128	@ 0x80
 8015296:	d00a      	beq.n	80152ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015298:	7bbb      	ldrb	r3, [r7, #14]
 801529a:	4619      	mov	r1, r3
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f001 f92f 	bl	8016500 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80152a2:	2180      	movs	r1, #128	@ 0x80
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f001 f92b 	bl	8016500 <USBD_LL_StallEP>
 80152aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80152ac:	e020      	b.n	80152f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80152ae:	6839      	ldr	r1, [r7, #0]
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f000 fc45 	bl	8015b40 <USBD_CtlError>
              break;
 80152b6:	e01b      	b.n	80152f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	885b      	ldrh	r3, [r3, #2]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d10e      	bne.n	80152de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80152c0:	7bbb      	ldrb	r3, [r7, #14]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d00b      	beq.n	80152de <USBD_StdEPReq+0xc0>
 80152c6:	7bbb      	ldrb	r3, [r7, #14]
 80152c8:	2b80      	cmp	r3, #128	@ 0x80
 80152ca:	d008      	beq.n	80152de <USBD_StdEPReq+0xc0>
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	88db      	ldrh	r3, [r3, #6]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d104      	bne.n	80152de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80152d4:	7bbb      	ldrb	r3, [r7, #14]
 80152d6:	4619      	mov	r1, r3
 80152d8:	6878      	ldr	r0, [r7, #4]
 80152da:	f001 f911 	bl	8016500 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f000 fcf9 	bl	8015cd6 <USBD_CtlSendStatus>

              break;
 80152e4:	e004      	b.n	80152f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80152e6:	6839      	ldr	r1, [r7, #0]
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f000 fc29 	bl	8015b40 <USBD_CtlError>
              break;
 80152ee:	bf00      	nop
          }
          break;
 80152f0:	e0ec      	b.n	80154cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80152f8:	b2db      	uxtb	r3, r3
 80152fa:	2b02      	cmp	r3, #2
 80152fc:	d002      	beq.n	8015304 <USBD_StdEPReq+0xe6>
 80152fe:	2b03      	cmp	r3, #3
 8015300:	d016      	beq.n	8015330 <USBD_StdEPReq+0x112>
 8015302:	e030      	b.n	8015366 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015304:	7bbb      	ldrb	r3, [r7, #14]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d00d      	beq.n	8015326 <USBD_StdEPReq+0x108>
 801530a:	7bbb      	ldrb	r3, [r7, #14]
 801530c:	2b80      	cmp	r3, #128	@ 0x80
 801530e:	d00a      	beq.n	8015326 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015310:	7bbb      	ldrb	r3, [r7, #14]
 8015312:	4619      	mov	r1, r3
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f001 f8f3 	bl	8016500 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801531a:	2180      	movs	r1, #128	@ 0x80
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f001 f8ef 	bl	8016500 <USBD_LL_StallEP>
 8015322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015324:	e025      	b.n	8015372 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8015326:	6839      	ldr	r1, [r7, #0]
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f000 fc09 	bl	8015b40 <USBD_CtlError>
              break;
 801532e:	e020      	b.n	8015372 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	885b      	ldrh	r3, [r3, #2]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d11b      	bne.n	8015370 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015338:	7bbb      	ldrb	r3, [r7, #14]
 801533a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801533e:	2b00      	cmp	r3, #0
 8015340:	d004      	beq.n	801534c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015342:	7bbb      	ldrb	r3, [r7, #14]
 8015344:	4619      	mov	r1, r3
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f001 f8f9 	bl	801653e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 fcc2 	bl	8015cd6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015358:	689b      	ldr	r3, [r3, #8]
 801535a:	6839      	ldr	r1, [r7, #0]
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	4798      	blx	r3
 8015360:	4603      	mov	r3, r0
 8015362:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8015364:	e004      	b.n	8015370 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8015366:	6839      	ldr	r1, [r7, #0]
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f000 fbe9 	bl	8015b40 <USBD_CtlError>
              break;
 801536e:	e000      	b.n	8015372 <USBD_StdEPReq+0x154>
              break;
 8015370:	bf00      	nop
          }
          break;
 8015372:	e0ab      	b.n	80154cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801537a:	b2db      	uxtb	r3, r3
 801537c:	2b02      	cmp	r3, #2
 801537e:	d002      	beq.n	8015386 <USBD_StdEPReq+0x168>
 8015380:	2b03      	cmp	r3, #3
 8015382:	d032      	beq.n	80153ea <USBD_StdEPReq+0x1cc>
 8015384:	e097      	b.n	80154b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015386:	7bbb      	ldrb	r3, [r7, #14]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d007      	beq.n	801539c <USBD_StdEPReq+0x17e>
 801538c:	7bbb      	ldrb	r3, [r7, #14]
 801538e:	2b80      	cmp	r3, #128	@ 0x80
 8015390:	d004      	beq.n	801539c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8015392:	6839      	ldr	r1, [r7, #0]
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f000 fbd3 	bl	8015b40 <USBD_CtlError>
                break;
 801539a:	e091      	b.n	80154c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801539c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	da0b      	bge.n	80153bc <USBD_StdEPReq+0x19e>
 80153a4:	7bbb      	ldrb	r3, [r7, #14]
 80153a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80153aa:	4613      	mov	r3, r2
 80153ac:	009b      	lsls	r3, r3, #2
 80153ae:	4413      	add	r3, r2
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	3310      	adds	r3, #16
 80153b4:	687a      	ldr	r2, [r7, #4]
 80153b6:	4413      	add	r3, r2
 80153b8:	3304      	adds	r3, #4
 80153ba:	e00b      	b.n	80153d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80153bc:	7bbb      	ldrb	r3, [r7, #14]
 80153be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80153c2:	4613      	mov	r3, r2
 80153c4:	009b      	lsls	r3, r3, #2
 80153c6:	4413      	add	r3, r2
 80153c8:	009b      	lsls	r3, r3, #2
 80153ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80153ce:	687a      	ldr	r2, [r7, #4]
 80153d0:	4413      	add	r3, r2
 80153d2:	3304      	adds	r3, #4
 80153d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	2200      	movs	r2, #0
 80153da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	2202      	movs	r2, #2
 80153e0:	4619      	mov	r1, r3
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	f000 fc1d 	bl	8015c22 <USBD_CtlSendData>
              break;
 80153e8:	e06a      	b.n	80154c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80153ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	da11      	bge.n	8015416 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80153f2:	7bbb      	ldrb	r3, [r7, #14]
 80153f4:	f003 020f 	and.w	r2, r3, #15
 80153f8:	6879      	ldr	r1, [r7, #4]
 80153fa:	4613      	mov	r3, r2
 80153fc:	009b      	lsls	r3, r3, #2
 80153fe:	4413      	add	r3, r2
 8015400:	009b      	lsls	r3, r3, #2
 8015402:	440b      	add	r3, r1
 8015404:	3324      	adds	r3, #36	@ 0x24
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d117      	bne.n	801543c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801540c:	6839      	ldr	r1, [r7, #0]
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f000 fb96 	bl	8015b40 <USBD_CtlError>
                  break;
 8015414:	e054      	b.n	80154c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015416:	7bbb      	ldrb	r3, [r7, #14]
 8015418:	f003 020f 	and.w	r2, r3, #15
 801541c:	6879      	ldr	r1, [r7, #4]
 801541e:	4613      	mov	r3, r2
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	4413      	add	r3, r2
 8015424:	009b      	lsls	r3, r3, #2
 8015426:	440b      	add	r3, r1
 8015428:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801542c:	881b      	ldrh	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d104      	bne.n	801543c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015432:	6839      	ldr	r1, [r7, #0]
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f000 fb83 	bl	8015b40 <USBD_CtlError>
                  break;
 801543a:	e041      	b.n	80154c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801543c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015440:	2b00      	cmp	r3, #0
 8015442:	da0b      	bge.n	801545c <USBD_StdEPReq+0x23e>
 8015444:	7bbb      	ldrb	r3, [r7, #14]
 8015446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801544a:	4613      	mov	r3, r2
 801544c:	009b      	lsls	r3, r3, #2
 801544e:	4413      	add	r3, r2
 8015450:	009b      	lsls	r3, r3, #2
 8015452:	3310      	adds	r3, #16
 8015454:	687a      	ldr	r2, [r7, #4]
 8015456:	4413      	add	r3, r2
 8015458:	3304      	adds	r3, #4
 801545a:	e00b      	b.n	8015474 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801545c:	7bbb      	ldrb	r3, [r7, #14]
 801545e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015462:	4613      	mov	r3, r2
 8015464:	009b      	lsls	r3, r3, #2
 8015466:	4413      	add	r3, r2
 8015468:	009b      	lsls	r3, r3, #2
 801546a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	4413      	add	r3, r2
 8015472:	3304      	adds	r3, #4
 8015474:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015476:	7bbb      	ldrb	r3, [r7, #14]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d002      	beq.n	8015482 <USBD_StdEPReq+0x264>
 801547c:	7bbb      	ldrb	r3, [r7, #14]
 801547e:	2b80      	cmp	r3, #128	@ 0x80
 8015480:	d103      	bne.n	801548a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	2200      	movs	r2, #0
 8015486:	601a      	str	r2, [r3, #0]
 8015488:	e00e      	b.n	80154a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801548a:	7bbb      	ldrb	r3, [r7, #14]
 801548c:	4619      	mov	r1, r3
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	f001 f874 	bl	801657c <USBD_LL_IsStallEP>
 8015494:	4603      	mov	r3, r0
 8015496:	2b00      	cmp	r3, #0
 8015498:	d003      	beq.n	80154a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	2201      	movs	r2, #1
 801549e:	601a      	str	r2, [r3, #0]
 80154a0:	e002      	b.n	80154a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	2200      	movs	r2, #0
 80154a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	2202      	movs	r2, #2
 80154ac:	4619      	mov	r1, r3
 80154ae:	6878      	ldr	r0, [r7, #4]
 80154b0:	f000 fbb7 	bl	8015c22 <USBD_CtlSendData>
              break;
 80154b4:	e004      	b.n	80154c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80154b6:	6839      	ldr	r1, [r7, #0]
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f000 fb41 	bl	8015b40 <USBD_CtlError>
              break;
 80154be:	bf00      	nop
          }
          break;
 80154c0:	e004      	b.n	80154cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80154c2:	6839      	ldr	r1, [r7, #0]
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f000 fb3b 	bl	8015b40 <USBD_CtlError>
          break;
 80154ca:	bf00      	nop
      }
      break;
 80154cc:	e004      	b.n	80154d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80154ce:	6839      	ldr	r1, [r7, #0]
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f000 fb35 	bl	8015b40 <USBD_CtlError>
      break;
 80154d6:	bf00      	nop
  }

  return ret;
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3710      	adds	r7, #16
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
	...

080154e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b084      	sub	sp, #16
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80154ee:	2300      	movs	r3, #0
 80154f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80154f2:	2300      	movs	r3, #0
 80154f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80154f6:	2300      	movs	r3, #0
 80154f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	885b      	ldrh	r3, [r3, #2]
 80154fe:	0a1b      	lsrs	r3, r3, #8
 8015500:	b29b      	uxth	r3, r3
 8015502:	3b01      	subs	r3, #1
 8015504:	2b06      	cmp	r3, #6
 8015506:	f200 8128 	bhi.w	801575a <USBD_GetDescriptor+0x276>
 801550a:	a201      	add	r2, pc, #4	@ (adr r2, 8015510 <USBD_GetDescriptor+0x2c>)
 801550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015510:	0801552d 	.word	0x0801552d
 8015514:	08015545 	.word	0x08015545
 8015518:	08015585 	.word	0x08015585
 801551c:	0801575b 	.word	0x0801575b
 8015520:	0801575b 	.word	0x0801575b
 8015524:	080156fb 	.word	0x080156fb
 8015528:	08015727 	.word	0x08015727
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	687a      	ldr	r2, [r7, #4]
 8015536:	7c12      	ldrb	r2, [r2, #16]
 8015538:	f107 0108 	add.w	r1, r7, #8
 801553c:	4610      	mov	r0, r2
 801553e:	4798      	blx	r3
 8015540:	60f8      	str	r0, [r7, #12]
      break;
 8015542:	e112      	b.n	801576a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	7c1b      	ldrb	r3, [r3, #16]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10d      	bne.n	8015568 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015554:	f107 0208 	add.w	r2, r7, #8
 8015558:	4610      	mov	r0, r2
 801555a:	4798      	blx	r3
 801555c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	3301      	adds	r3, #1
 8015562:	2202      	movs	r2, #2
 8015564:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015566:	e100      	b.n	801576a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015570:	f107 0208 	add.w	r2, r7, #8
 8015574:	4610      	mov	r0, r2
 8015576:	4798      	blx	r3
 8015578:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	3301      	adds	r3, #1
 801557e:	2202      	movs	r2, #2
 8015580:	701a      	strb	r2, [r3, #0]
      break;
 8015582:	e0f2      	b.n	801576a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	885b      	ldrh	r3, [r3, #2]
 8015588:	b2db      	uxtb	r3, r3
 801558a:	2b05      	cmp	r3, #5
 801558c:	f200 80ac 	bhi.w	80156e8 <USBD_GetDescriptor+0x204>
 8015590:	a201      	add	r2, pc, #4	@ (adr r2, 8015598 <USBD_GetDescriptor+0xb4>)
 8015592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015596:	bf00      	nop
 8015598:	080155b1 	.word	0x080155b1
 801559c:	080155e5 	.word	0x080155e5
 80155a0:	08015619 	.word	0x08015619
 80155a4:	0801564d 	.word	0x0801564d
 80155a8:	08015681 	.word	0x08015681
 80155ac:	080156b5 	.word	0x080156b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d00b      	beq.n	80155d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	687a      	ldr	r2, [r7, #4]
 80155c6:	7c12      	ldrb	r2, [r2, #16]
 80155c8:	f107 0108 	add.w	r1, r7, #8
 80155cc:	4610      	mov	r0, r2
 80155ce:	4798      	blx	r3
 80155d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80155d2:	e091      	b.n	80156f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80155d4:	6839      	ldr	r1, [r7, #0]
 80155d6:	6878      	ldr	r0, [r7, #4]
 80155d8:	f000 fab2 	bl	8015b40 <USBD_CtlError>
            err++;
 80155dc:	7afb      	ldrb	r3, [r7, #11]
 80155de:	3301      	adds	r3, #1
 80155e0:	72fb      	strb	r3, [r7, #11]
          break;
 80155e2:	e089      	b.n	80156f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80155ea:	689b      	ldr	r3, [r3, #8]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d00b      	beq.n	8015608 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80155f6:	689b      	ldr	r3, [r3, #8]
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	7c12      	ldrb	r2, [r2, #16]
 80155fc:	f107 0108 	add.w	r1, r7, #8
 8015600:	4610      	mov	r0, r2
 8015602:	4798      	blx	r3
 8015604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015606:	e077      	b.n	80156f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015608:	6839      	ldr	r1, [r7, #0]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f000 fa98 	bl	8015b40 <USBD_CtlError>
            err++;
 8015610:	7afb      	ldrb	r3, [r7, #11]
 8015612:	3301      	adds	r3, #1
 8015614:	72fb      	strb	r3, [r7, #11]
          break;
 8015616:	e06f      	b.n	80156f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d00b      	beq.n	801563c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801562a:	68db      	ldr	r3, [r3, #12]
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	7c12      	ldrb	r2, [r2, #16]
 8015630:	f107 0108 	add.w	r1, r7, #8
 8015634:	4610      	mov	r0, r2
 8015636:	4798      	blx	r3
 8015638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801563a:	e05d      	b.n	80156f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801563c:	6839      	ldr	r1, [r7, #0]
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	f000 fa7e 	bl	8015b40 <USBD_CtlError>
            err++;
 8015644:	7afb      	ldrb	r3, [r7, #11]
 8015646:	3301      	adds	r3, #1
 8015648:	72fb      	strb	r3, [r7, #11]
          break;
 801564a:	e055      	b.n	80156f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015652:	691b      	ldr	r3, [r3, #16]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d00b      	beq.n	8015670 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801565e:	691b      	ldr	r3, [r3, #16]
 8015660:	687a      	ldr	r2, [r7, #4]
 8015662:	7c12      	ldrb	r2, [r2, #16]
 8015664:	f107 0108 	add.w	r1, r7, #8
 8015668:	4610      	mov	r0, r2
 801566a:	4798      	blx	r3
 801566c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801566e:	e043      	b.n	80156f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015670:	6839      	ldr	r1, [r7, #0]
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f000 fa64 	bl	8015b40 <USBD_CtlError>
            err++;
 8015678:	7afb      	ldrb	r3, [r7, #11]
 801567a:	3301      	adds	r3, #1
 801567c:	72fb      	strb	r3, [r7, #11]
          break;
 801567e:	e03b      	b.n	80156f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015686:	695b      	ldr	r3, [r3, #20]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d00b      	beq.n	80156a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015692:	695b      	ldr	r3, [r3, #20]
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	7c12      	ldrb	r2, [r2, #16]
 8015698:	f107 0108 	add.w	r1, r7, #8
 801569c:	4610      	mov	r0, r2
 801569e:	4798      	blx	r3
 80156a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80156a2:	e029      	b.n	80156f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80156a4:	6839      	ldr	r1, [r7, #0]
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f000 fa4a 	bl	8015b40 <USBD_CtlError>
            err++;
 80156ac:	7afb      	ldrb	r3, [r7, #11]
 80156ae:	3301      	adds	r3, #1
 80156b0:	72fb      	strb	r3, [r7, #11]
          break;
 80156b2:	e021      	b.n	80156f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80156ba:	699b      	ldr	r3, [r3, #24]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d00b      	beq.n	80156d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80156c6:	699b      	ldr	r3, [r3, #24]
 80156c8:	687a      	ldr	r2, [r7, #4]
 80156ca:	7c12      	ldrb	r2, [r2, #16]
 80156cc:	f107 0108 	add.w	r1, r7, #8
 80156d0:	4610      	mov	r0, r2
 80156d2:	4798      	blx	r3
 80156d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80156d6:	e00f      	b.n	80156f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80156d8:	6839      	ldr	r1, [r7, #0]
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f000 fa30 	bl	8015b40 <USBD_CtlError>
            err++;
 80156e0:	7afb      	ldrb	r3, [r7, #11]
 80156e2:	3301      	adds	r3, #1
 80156e4:	72fb      	strb	r3, [r7, #11]
          break;
 80156e6:	e007      	b.n	80156f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80156e8:	6839      	ldr	r1, [r7, #0]
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f000 fa28 	bl	8015b40 <USBD_CtlError>
          err++;
 80156f0:	7afb      	ldrb	r3, [r7, #11]
 80156f2:	3301      	adds	r3, #1
 80156f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80156f6:	bf00      	nop
      }
      break;
 80156f8:	e037      	b.n	801576a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	7c1b      	ldrb	r3, [r3, #16]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d109      	bne.n	8015716 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801570a:	f107 0208 	add.w	r2, r7, #8
 801570e:	4610      	mov	r0, r2
 8015710:	4798      	blx	r3
 8015712:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015714:	e029      	b.n	801576a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015716:	6839      	ldr	r1, [r7, #0]
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f000 fa11 	bl	8015b40 <USBD_CtlError>
        err++;
 801571e:	7afb      	ldrb	r3, [r7, #11]
 8015720:	3301      	adds	r3, #1
 8015722:	72fb      	strb	r3, [r7, #11]
      break;
 8015724:	e021      	b.n	801576a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	7c1b      	ldrb	r3, [r3, #16]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d10d      	bne.n	801574a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015736:	f107 0208 	add.w	r2, r7, #8
 801573a:	4610      	mov	r0, r2
 801573c:	4798      	blx	r3
 801573e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	3301      	adds	r3, #1
 8015744:	2207      	movs	r2, #7
 8015746:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015748:	e00f      	b.n	801576a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801574a:	6839      	ldr	r1, [r7, #0]
 801574c:	6878      	ldr	r0, [r7, #4]
 801574e:	f000 f9f7 	bl	8015b40 <USBD_CtlError>
        err++;
 8015752:	7afb      	ldrb	r3, [r7, #11]
 8015754:	3301      	adds	r3, #1
 8015756:	72fb      	strb	r3, [r7, #11]
      break;
 8015758:	e007      	b.n	801576a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801575a:	6839      	ldr	r1, [r7, #0]
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f000 f9ef 	bl	8015b40 <USBD_CtlError>
      err++;
 8015762:	7afb      	ldrb	r3, [r7, #11]
 8015764:	3301      	adds	r3, #1
 8015766:	72fb      	strb	r3, [r7, #11]
      break;
 8015768:	bf00      	nop
  }

  if (err != 0U)
 801576a:	7afb      	ldrb	r3, [r7, #11]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d11e      	bne.n	80157ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	88db      	ldrh	r3, [r3, #6]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d016      	beq.n	80157a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015778:	893b      	ldrh	r3, [r7, #8]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d00e      	beq.n	801579c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	88da      	ldrh	r2, [r3, #6]
 8015782:	893b      	ldrh	r3, [r7, #8]
 8015784:	4293      	cmp	r3, r2
 8015786:	bf28      	it	cs
 8015788:	4613      	movcs	r3, r2
 801578a:	b29b      	uxth	r3, r3
 801578c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801578e:	893b      	ldrh	r3, [r7, #8]
 8015790:	461a      	mov	r2, r3
 8015792:	68f9      	ldr	r1, [r7, #12]
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 fa44 	bl	8015c22 <USBD_CtlSendData>
 801579a:	e009      	b.n	80157b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801579c:	6839      	ldr	r1, [r7, #0]
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f000 f9ce 	bl	8015b40 <USBD_CtlError>
 80157a4:	e004      	b.n	80157b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f000 fa95 	bl	8015cd6 <USBD_CtlSendStatus>
 80157ac:	e000      	b.n	80157b0 <USBD_GetDescriptor+0x2cc>
    return;
 80157ae:	bf00      	nop
  }
}
 80157b0:	3710      	adds	r7, #16
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}
 80157b6:	bf00      	nop

080157b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b084      	sub	sp, #16
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	889b      	ldrh	r3, [r3, #4]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d131      	bne.n	801582e <USBD_SetAddress+0x76>
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	88db      	ldrh	r3, [r3, #6]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d12d      	bne.n	801582e <USBD_SetAddress+0x76>
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	885b      	ldrh	r3, [r3, #2]
 80157d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80157d8:	d829      	bhi.n	801582e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	885b      	ldrh	r3, [r3, #2]
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80157e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	2b03      	cmp	r3, #3
 80157f0:	d104      	bne.n	80157fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80157f2:	6839      	ldr	r1, [r7, #0]
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f000 f9a3 	bl	8015b40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157fa:	e01d      	b.n	8015838 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	7bfa      	ldrb	r2, [r7, #15]
 8015800:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015804:	7bfb      	ldrb	r3, [r7, #15]
 8015806:	4619      	mov	r1, r3
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f000 fee3 	bl	80165d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f000 fa61 	bl	8015cd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015814:	7bfb      	ldrb	r3, [r7, #15]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d004      	beq.n	8015824 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2202      	movs	r2, #2
 801581e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015822:	e009      	b.n	8015838 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2201      	movs	r2, #1
 8015828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801582c:	e004      	b.n	8015838 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801582e:	6839      	ldr	r1, [r7, #0]
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f000 f985 	bl	8015b40 <USBD_CtlError>
  }
}
 8015836:	bf00      	nop
 8015838:	bf00      	nop
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801584a:	2300      	movs	r3, #0
 801584c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	885b      	ldrh	r3, [r3, #2]
 8015852:	b2da      	uxtb	r2, r3
 8015854:	4b4c      	ldr	r3, [pc, #304]	@ (8015988 <USBD_SetConfig+0x148>)
 8015856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015858:	4b4b      	ldr	r3, [pc, #300]	@ (8015988 <USBD_SetConfig+0x148>)
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	2b01      	cmp	r3, #1
 801585e:	d905      	bls.n	801586c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015860:	6839      	ldr	r1, [r7, #0]
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f000 f96c 	bl	8015b40 <USBD_CtlError>
    return USBD_FAIL;
 8015868:	2303      	movs	r3, #3
 801586a:	e088      	b.n	801597e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015872:	b2db      	uxtb	r3, r3
 8015874:	2b02      	cmp	r3, #2
 8015876:	d002      	beq.n	801587e <USBD_SetConfig+0x3e>
 8015878:	2b03      	cmp	r3, #3
 801587a:	d025      	beq.n	80158c8 <USBD_SetConfig+0x88>
 801587c:	e071      	b.n	8015962 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801587e:	4b42      	ldr	r3, [pc, #264]	@ (8015988 <USBD_SetConfig+0x148>)
 8015880:	781b      	ldrb	r3, [r3, #0]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d01c      	beq.n	80158c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015886:	4b40      	ldr	r3, [pc, #256]	@ (8015988 <USBD_SetConfig+0x148>)
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	461a      	mov	r2, r3
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015890:	4b3d      	ldr	r3, [pc, #244]	@ (8015988 <USBD_SetConfig+0x148>)
 8015892:	781b      	ldrb	r3, [r3, #0]
 8015894:	4619      	mov	r1, r3
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f7ff f948 	bl	8014b2c <USBD_SetClassConfig>
 801589c:	4603      	mov	r3, r0
 801589e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80158a0:	7bfb      	ldrb	r3, [r7, #15]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d004      	beq.n	80158b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80158a6:	6839      	ldr	r1, [r7, #0]
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f000 f949 	bl	8015b40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80158ae:	e065      	b.n	801597c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f000 fa10 	bl	8015cd6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2203      	movs	r2, #3
 80158ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80158be:	e05d      	b.n	801597c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 fa08 	bl	8015cd6 <USBD_CtlSendStatus>
      break;
 80158c6:	e059      	b.n	801597c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80158c8:	4b2f      	ldr	r3, [pc, #188]	@ (8015988 <USBD_SetConfig+0x148>)
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d112      	bne.n	80158f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2202      	movs	r2, #2
 80158d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80158d8:	4b2b      	ldr	r3, [pc, #172]	@ (8015988 <USBD_SetConfig+0x148>)
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	461a      	mov	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80158e2:	4b29      	ldr	r3, [pc, #164]	@ (8015988 <USBD_SetConfig+0x148>)
 80158e4:	781b      	ldrb	r3, [r3, #0]
 80158e6:	4619      	mov	r1, r3
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7ff f93b 	bl	8014b64 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 f9f1 	bl	8015cd6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80158f4:	e042      	b.n	801597c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80158f6:	4b24      	ldr	r3, [pc, #144]	@ (8015988 <USBD_SetConfig+0x148>)
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	461a      	mov	r2, r3
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	429a      	cmp	r2, r3
 8015902:	d02a      	beq.n	801595a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	685b      	ldr	r3, [r3, #4]
 8015908:	b2db      	uxtb	r3, r3
 801590a:	4619      	mov	r1, r3
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f7ff f929 	bl	8014b64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015912:	4b1d      	ldr	r3, [pc, #116]	@ (8015988 <USBD_SetConfig+0x148>)
 8015914:	781b      	ldrb	r3, [r3, #0]
 8015916:	461a      	mov	r2, r3
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801591c:	4b1a      	ldr	r3, [pc, #104]	@ (8015988 <USBD_SetConfig+0x148>)
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	4619      	mov	r1, r3
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f7ff f902 	bl	8014b2c <USBD_SetClassConfig>
 8015928:	4603      	mov	r3, r0
 801592a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801592c:	7bfb      	ldrb	r3, [r7, #15]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d00f      	beq.n	8015952 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015932:	6839      	ldr	r1, [r7, #0]
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f000 f903 	bl	8015b40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	b2db      	uxtb	r3, r3
 8015940:	4619      	mov	r1, r3
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7ff f90e 	bl	8014b64 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2202      	movs	r2, #2
 801594c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015950:	e014      	b.n	801597c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f000 f9bf 	bl	8015cd6 <USBD_CtlSendStatus>
      break;
 8015958:	e010      	b.n	801597c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f000 f9bb 	bl	8015cd6 <USBD_CtlSendStatus>
      break;
 8015960:	e00c      	b.n	801597c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015962:	6839      	ldr	r1, [r7, #0]
 8015964:	6878      	ldr	r0, [r7, #4]
 8015966:	f000 f8eb 	bl	8015b40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801596a:	4b07      	ldr	r3, [pc, #28]	@ (8015988 <USBD_SetConfig+0x148>)
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	4619      	mov	r1, r3
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f7ff f8f7 	bl	8014b64 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015976:	2303      	movs	r3, #3
 8015978:	73fb      	strb	r3, [r7, #15]
      break;
 801597a:	bf00      	nop
  }

  return ret;
 801597c:	7bfb      	ldrb	r3, [r7, #15]
}
 801597e:	4618      	mov	r0, r3
 8015980:	3710      	adds	r7, #16
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}
 8015986:	bf00      	nop
 8015988:	200019f8 	.word	0x200019f8

0801598c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	88db      	ldrh	r3, [r3, #6]
 801599a:	2b01      	cmp	r3, #1
 801599c:	d004      	beq.n	80159a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801599e:	6839      	ldr	r1, [r7, #0]
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f000 f8cd 	bl	8015b40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80159a6:	e023      	b.n	80159f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80159ae:	b2db      	uxtb	r3, r3
 80159b0:	2b02      	cmp	r3, #2
 80159b2:	dc02      	bgt.n	80159ba <USBD_GetConfig+0x2e>
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	dc03      	bgt.n	80159c0 <USBD_GetConfig+0x34>
 80159b8:	e015      	b.n	80159e6 <USBD_GetConfig+0x5a>
 80159ba:	2b03      	cmp	r3, #3
 80159bc:	d00b      	beq.n	80159d6 <USBD_GetConfig+0x4a>
 80159be:	e012      	b.n	80159e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2200      	movs	r2, #0
 80159c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	3308      	adds	r3, #8
 80159ca:	2201      	movs	r2, #1
 80159cc:	4619      	mov	r1, r3
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f000 f927 	bl	8015c22 <USBD_CtlSendData>
        break;
 80159d4:	e00c      	b.n	80159f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	3304      	adds	r3, #4
 80159da:	2201      	movs	r2, #1
 80159dc:	4619      	mov	r1, r3
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f000 f91f 	bl	8015c22 <USBD_CtlSendData>
        break;
 80159e4:	e004      	b.n	80159f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80159e6:	6839      	ldr	r1, [r7, #0]
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f000 f8a9 	bl	8015b40 <USBD_CtlError>
        break;
 80159ee:	bf00      	nop
}
 80159f0:	bf00      	nop
 80159f2:	3708      	adds	r7, #8
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}

080159f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	3b01      	subs	r3, #1
 8015a0c:	2b02      	cmp	r3, #2
 8015a0e:	d81e      	bhi.n	8015a4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	88db      	ldrh	r3, [r3, #6]
 8015a14:	2b02      	cmp	r3, #2
 8015a16:	d004      	beq.n	8015a22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	f000 f890 	bl	8015b40 <USBD_CtlError>
        break;
 8015a20:	e01a      	b.n	8015a58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2201      	movs	r2, #1
 8015a26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d005      	beq.n	8015a3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	f043 0202 	orr.w	r2, r3, #2
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	330c      	adds	r3, #12
 8015a42:	2202      	movs	r2, #2
 8015a44:	4619      	mov	r1, r3
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f000 f8eb 	bl	8015c22 <USBD_CtlSendData>
      break;
 8015a4c:	e004      	b.n	8015a58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015a4e:	6839      	ldr	r1, [r7, #0]
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f000 f875 	bl	8015b40 <USBD_CtlError>
      break;
 8015a56:	bf00      	nop
  }
}
 8015a58:	bf00      	nop
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
 8015a68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	885b      	ldrh	r3, [r3, #2]
 8015a6e:	2b01      	cmp	r3, #1
 8015a70:	d106      	bne.n	8015a80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2201      	movs	r2, #1
 8015a76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f000 f92b 	bl	8015cd6 <USBD_CtlSendStatus>
  }
}
 8015a80:	bf00      	nop
 8015a82:	3708      	adds	r7, #8
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b082      	sub	sp, #8
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	3b01      	subs	r3, #1
 8015a9c:	2b02      	cmp	r3, #2
 8015a9e:	d80b      	bhi.n	8015ab8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	885b      	ldrh	r3, [r3, #2]
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	d10c      	bne.n	8015ac2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f000 f910 	bl	8015cd6 <USBD_CtlSendStatus>
      }
      break;
 8015ab6:	e004      	b.n	8015ac2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015ab8:	6839      	ldr	r1, [r7, #0]
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 f840 	bl	8015b40 <USBD_CtlError>
      break;
 8015ac0:	e000      	b.n	8015ac4 <USBD_ClrFeature+0x3c>
      break;
 8015ac2:	bf00      	nop
  }
}
 8015ac4:	bf00      	nop
 8015ac6:	3708      	adds	r7, #8
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}

08015acc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b084      	sub	sp, #16
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	781a      	ldrb	r2, [r3, #0]
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	3301      	adds	r3, #1
 8015ae6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	781a      	ldrb	r2, [r3, #0]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	3301      	adds	r3, #1
 8015af4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015af6:	68f8      	ldr	r0, [r7, #12]
 8015af8:	f7ff fabb 	bl	8015072 <SWAPBYTE>
 8015afc:	4603      	mov	r3, r0
 8015afe:	461a      	mov	r2, r3
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	3301      	adds	r3, #1
 8015b08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	3301      	adds	r3, #1
 8015b0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015b10:	68f8      	ldr	r0, [r7, #12]
 8015b12:	f7ff faae 	bl	8015072 <SWAPBYTE>
 8015b16:	4603      	mov	r3, r0
 8015b18:	461a      	mov	r2, r3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	3301      	adds	r3, #1
 8015b22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	3301      	adds	r3, #1
 8015b28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015b2a:	68f8      	ldr	r0, [r7, #12]
 8015b2c:	f7ff faa1 	bl	8015072 <SWAPBYTE>
 8015b30:	4603      	mov	r3, r0
 8015b32:	461a      	mov	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	80da      	strh	r2, [r3, #6]
}
 8015b38:	bf00      	nop
 8015b3a:	3710      	adds	r7, #16
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b4a:	2180      	movs	r1, #128	@ 0x80
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f000 fcd7 	bl	8016500 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015b52:	2100      	movs	r1, #0
 8015b54:	6878      	ldr	r0, [r7, #4]
 8015b56:	f000 fcd3 	bl	8016500 <USBD_LL_StallEP>
}
 8015b5a:	bf00      	nop
 8015b5c:	3708      	adds	r7, #8
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}

08015b62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b086      	sub	sp, #24
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	60f8      	str	r0, [r7, #12]
 8015b6a:	60b9      	str	r1, [r7, #8]
 8015b6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d036      	beq.n	8015be6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015b7c:	6938      	ldr	r0, [r7, #16]
 8015b7e:	f000 f836 	bl	8015bee <USBD_GetLen>
 8015b82:	4603      	mov	r3, r0
 8015b84:	3301      	adds	r3, #1
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	005b      	lsls	r3, r3, #1
 8015b8a:	b29a      	uxth	r2, r3
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015b90:	7dfb      	ldrb	r3, [r7, #23]
 8015b92:	68ba      	ldr	r2, [r7, #8]
 8015b94:	4413      	add	r3, r2
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	7812      	ldrb	r2, [r2, #0]
 8015b9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8015b9c:	7dfb      	ldrb	r3, [r7, #23]
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015ba2:	7dfb      	ldrb	r3, [r7, #23]
 8015ba4:	68ba      	ldr	r2, [r7, #8]
 8015ba6:	4413      	add	r3, r2
 8015ba8:	2203      	movs	r2, #3
 8015baa:	701a      	strb	r2, [r3, #0]
  idx++;
 8015bac:	7dfb      	ldrb	r3, [r7, #23]
 8015bae:	3301      	adds	r3, #1
 8015bb0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015bb2:	e013      	b.n	8015bdc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015bb4:	7dfb      	ldrb	r3, [r7, #23]
 8015bb6:	68ba      	ldr	r2, [r7, #8]
 8015bb8:	4413      	add	r3, r2
 8015bba:	693a      	ldr	r2, [r7, #16]
 8015bbc:	7812      	ldrb	r2, [r2, #0]
 8015bbe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	613b      	str	r3, [r7, #16]
    idx++;
 8015bc6:	7dfb      	ldrb	r3, [r7, #23]
 8015bc8:	3301      	adds	r3, #1
 8015bca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015bcc:	7dfb      	ldrb	r3, [r7, #23]
 8015bce:	68ba      	ldr	r2, [r7, #8]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	701a      	strb	r2, [r3, #0]
    idx++;
 8015bd6:	7dfb      	ldrb	r3, [r7, #23]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015bdc:	693b      	ldr	r3, [r7, #16]
 8015bde:	781b      	ldrb	r3, [r3, #0]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d1e7      	bne.n	8015bb4 <USBD_GetString+0x52>
 8015be4:	e000      	b.n	8015be8 <USBD_GetString+0x86>
    return;
 8015be6:	bf00      	nop
  }
}
 8015be8:	3718      	adds	r7, #24
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}

08015bee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015bee:	b480      	push	{r7}
 8015bf0:	b085      	sub	sp, #20
 8015bf2:	af00      	add	r7, sp, #0
 8015bf4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015bfe:	e005      	b.n	8015c0c <USBD_GetLen+0x1e>
  {
    len++;
 8015c00:	7bfb      	ldrb	r3, [r7, #15]
 8015c02:	3301      	adds	r3, #1
 8015c04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015c06:	68bb      	ldr	r3, [r7, #8]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d1f5      	bne.n	8015c00 <USBD_GetLen+0x12>
  }

  return len;
 8015c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3714      	adds	r7, #20
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c20:	4770      	bx	lr

08015c22 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015c22:	b580      	push	{r7, lr}
 8015c24:	b084      	sub	sp, #16
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	60f8      	str	r0, [r7, #12]
 8015c2a:	60b9      	str	r1, [r7, #8]
 8015c2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	2202      	movs	r2, #2
 8015c32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	687a      	ldr	r2, [r7, #4]
 8015c3a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	687a      	ldr	r2, [r7, #4]
 8015c40:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	68ba      	ldr	r2, [r7, #8]
 8015c46:	2100      	movs	r1, #0
 8015c48:	68f8      	ldr	r0, [r7, #12]
 8015c4a:	f000 fce2 	bl	8016612 <USBD_LL_Transmit>

  return USBD_OK;
 8015c4e:	2300      	movs	r3, #0
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3710      	adds	r7, #16
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}

08015c58 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b084      	sub	sp, #16
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	60f8      	str	r0, [r7, #12]
 8015c60:	60b9      	str	r1, [r7, #8]
 8015c62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	68ba      	ldr	r2, [r7, #8]
 8015c68:	2100      	movs	r1, #0
 8015c6a:	68f8      	ldr	r0, [r7, #12]
 8015c6c:	f000 fcd1 	bl	8016612 <USBD_LL_Transmit>

  return USBD_OK;
 8015c70:	2300      	movs	r3, #0
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3710      	adds	r7, #16
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}

08015c7a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015c7a:	b580      	push	{r7, lr}
 8015c7c:	b084      	sub	sp, #16
 8015c7e:	af00      	add	r7, sp, #0
 8015c80:	60f8      	str	r0, [r7, #12]
 8015c82:	60b9      	str	r1, [r7, #8]
 8015c84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2203      	movs	r2, #3
 8015c8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	68ba      	ldr	r2, [r7, #8]
 8015ca2:	2100      	movs	r1, #0
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	f000 fcd5 	bl	8016654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015caa:	2300      	movs	r3, #0
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3710      	adds	r7, #16
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}

08015cb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b084      	sub	sp, #16
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	60f8      	str	r0, [r7, #12]
 8015cbc:	60b9      	str	r1, [r7, #8]
 8015cbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	68ba      	ldr	r2, [r7, #8]
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	68f8      	ldr	r0, [r7, #12]
 8015cc8:	f000 fcc4 	bl	8016654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015ccc:	2300      	movs	r3, #0
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	3710      	adds	r7, #16
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}

08015cd6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b082      	sub	sp, #8
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2204      	movs	r2, #4
 8015ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	2200      	movs	r2, #0
 8015cea:	2100      	movs	r1, #0
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f000 fc90 	bl	8016612 <USBD_LL_Transmit>

  return USBD_OK;
 8015cf2:	2300      	movs	r3, #0
}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	3708      	adds	r7, #8
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd80      	pop	{r7, pc}

08015cfc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b082      	sub	sp, #8
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2205      	movs	r2, #5
 8015d08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	2200      	movs	r2, #0
 8015d10:	2100      	movs	r1, #0
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	f000 fc9e 	bl	8016654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015d18:	2300      	movs	r3, #0
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
	...

08015d24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015d28:	2200      	movs	r2, #0
 8015d2a:	4912      	ldr	r1, [pc, #72]	@ (8015d74 <MX_USB_DEVICE_Init+0x50>)
 8015d2c:	4812      	ldr	r0, [pc, #72]	@ (8015d78 <MX_USB_DEVICE_Init+0x54>)
 8015d2e:	f7fe fe8f 	bl	8014a50 <USBD_Init>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d001      	beq.n	8015d3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015d38:	f7f7 febc 	bl	800dab4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015d3c:	490f      	ldr	r1, [pc, #60]	@ (8015d7c <MX_USB_DEVICE_Init+0x58>)
 8015d3e:	480e      	ldr	r0, [pc, #56]	@ (8015d78 <MX_USB_DEVICE_Init+0x54>)
 8015d40:	f7fe feb6 	bl	8014ab0 <USBD_RegisterClass>
 8015d44:	4603      	mov	r3, r0
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d001      	beq.n	8015d4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015d4a:	f7f7 feb3 	bl	800dab4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015d4e:	490c      	ldr	r1, [pc, #48]	@ (8015d80 <MX_USB_DEVICE_Init+0x5c>)
 8015d50:	4809      	ldr	r0, [pc, #36]	@ (8015d78 <MX_USB_DEVICE_Init+0x54>)
 8015d52:	f7fe fdd7 	bl	8014904 <USBD_CDC_RegisterInterface>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d001      	beq.n	8015d60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015d5c:	f7f7 feaa 	bl	800dab4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015d60:	4805      	ldr	r0, [pc, #20]	@ (8015d78 <MX_USB_DEVICE_Init+0x54>)
 8015d62:	f7fe fecc 	bl	8014afe <USBD_Start>
 8015d66:	4603      	mov	r3, r0
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d001      	beq.n	8015d70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015d6c:	f7f7 fea2 	bl	800dab4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015d70:	bf00      	nop
 8015d72:	bd80      	pop	{r7, pc}
 8015d74:	2000017c 	.word	0x2000017c
 8015d78:	200019fc 	.word	0x200019fc
 8015d7c:	20000064 	.word	0x20000064
 8015d80:	20000168 	.word	0x20000168

08015d84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015d88:	2200      	movs	r2, #0
 8015d8a:	4905      	ldr	r1, [pc, #20]	@ (8015da0 <CDC_Init_FS+0x1c>)
 8015d8c:	4805      	ldr	r0, [pc, #20]	@ (8015da4 <CDC_Init_FS+0x20>)
 8015d8e:	f7fe fdce 	bl	801492e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015d92:	4905      	ldr	r1, [pc, #20]	@ (8015da8 <CDC_Init_FS+0x24>)
 8015d94:	4803      	ldr	r0, [pc, #12]	@ (8015da4 <CDC_Init_FS+0x20>)
 8015d96:	f7fe fde8 	bl	801496a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015d9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	200024cc 	.word	0x200024cc
 8015da4:	200019fc 	.word	0x200019fc
 8015da8:	20001ccc 	.word	0x20001ccc

08015dac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015dac:	b480      	push	{r7}
 8015dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015db0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	46bd      	mov	sp, r7
 8015db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dba:	4770      	bx	lr

08015dbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	b083      	sub	sp, #12
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	6039      	str	r1, [r7, #0]
 8015dc6:	71fb      	strb	r3, [r7, #7]
 8015dc8:	4613      	mov	r3, r2
 8015dca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015dcc:	79fb      	ldrb	r3, [r7, #7]
 8015dce:	2b23      	cmp	r3, #35	@ 0x23
 8015dd0:	d84a      	bhi.n	8015e68 <CDC_Control_FS+0xac>
 8015dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8015dd8 <CDC_Control_FS+0x1c>)
 8015dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dd8:	08015e69 	.word	0x08015e69
 8015ddc:	08015e69 	.word	0x08015e69
 8015de0:	08015e69 	.word	0x08015e69
 8015de4:	08015e69 	.word	0x08015e69
 8015de8:	08015e69 	.word	0x08015e69
 8015dec:	08015e69 	.word	0x08015e69
 8015df0:	08015e69 	.word	0x08015e69
 8015df4:	08015e69 	.word	0x08015e69
 8015df8:	08015e69 	.word	0x08015e69
 8015dfc:	08015e69 	.word	0x08015e69
 8015e00:	08015e69 	.word	0x08015e69
 8015e04:	08015e69 	.word	0x08015e69
 8015e08:	08015e69 	.word	0x08015e69
 8015e0c:	08015e69 	.word	0x08015e69
 8015e10:	08015e69 	.word	0x08015e69
 8015e14:	08015e69 	.word	0x08015e69
 8015e18:	08015e69 	.word	0x08015e69
 8015e1c:	08015e69 	.word	0x08015e69
 8015e20:	08015e69 	.word	0x08015e69
 8015e24:	08015e69 	.word	0x08015e69
 8015e28:	08015e69 	.word	0x08015e69
 8015e2c:	08015e69 	.word	0x08015e69
 8015e30:	08015e69 	.word	0x08015e69
 8015e34:	08015e69 	.word	0x08015e69
 8015e38:	08015e69 	.word	0x08015e69
 8015e3c:	08015e69 	.word	0x08015e69
 8015e40:	08015e69 	.word	0x08015e69
 8015e44:	08015e69 	.word	0x08015e69
 8015e48:	08015e69 	.word	0x08015e69
 8015e4c:	08015e69 	.word	0x08015e69
 8015e50:	08015e69 	.word	0x08015e69
 8015e54:	08015e69 	.word	0x08015e69
 8015e58:	08015e69 	.word	0x08015e69
 8015e5c:	08015e69 	.word	0x08015e69
 8015e60:	08015e69 	.word	0x08015e69
 8015e64:	08015e69 	.word	0x08015e69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015e68:	bf00      	nop
  }

  return (USBD_OK);
 8015e6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	370c      	adds	r7, #12
 8015e70:	46bd      	mov	sp, r7
 8015e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e76:	4770      	bx	lr

08015e78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015e82:	6879      	ldr	r1, [r7, #4]
 8015e84:	4805      	ldr	r0, [pc, #20]	@ (8015e9c <CDC_Receive_FS+0x24>)
 8015e86:	f7fe fd70 	bl	801496a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015e8a:	4804      	ldr	r0, [pc, #16]	@ (8015e9c <CDC_Receive_FS+0x24>)
 8015e8c:	f7fe fdb6 	bl	80149fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015e90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3708      	adds	r7, #8
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop
 8015e9c:	200019fc 	.word	0x200019fc

08015ea0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b084      	sub	sp, #16
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
 8015ea8:	460b      	mov	r3, r1
 8015eaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015eac:	2300      	movs	r3, #0
 8015eae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8015ee8 <CDC_Transmit_FS+0x48>)
 8015eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8015eb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d001      	beq.n	8015ec6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015ec2:	2301      	movs	r3, #1
 8015ec4:	e00b      	b.n	8015ede <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015ec6:	887b      	ldrh	r3, [r7, #2]
 8015ec8:	461a      	mov	r2, r3
 8015eca:	6879      	ldr	r1, [r7, #4]
 8015ecc:	4806      	ldr	r0, [pc, #24]	@ (8015ee8 <CDC_Transmit_FS+0x48>)
 8015ece:	f7fe fd2e 	bl	801492e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015ed2:	4805      	ldr	r0, [pc, #20]	@ (8015ee8 <CDC_Transmit_FS+0x48>)
 8015ed4:	f7fe fd62 	bl	801499c <USBD_CDC_TransmitPacket>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3710      	adds	r7, #16
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}
 8015ee6:	bf00      	nop
 8015ee8:	200019fc 	.word	0x200019fc

08015eec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b087      	sub	sp, #28
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	60f8      	str	r0, [r7, #12]
 8015ef4:	60b9      	str	r1, [r7, #8]
 8015ef6:	4613      	mov	r3, r2
 8015ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015efa:	2300      	movs	r3, #0
 8015efc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	371c      	adds	r7, #28
 8015f06:	46bd      	mov	sp, r7
 8015f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0c:	4770      	bx	lr
	...

08015f10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f10:	b480      	push	{r7}
 8015f12:	b083      	sub	sp, #12
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	4603      	mov	r3, r0
 8015f18:	6039      	str	r1, [r7, #0]
 8015f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	2212      	movs	r2, #18
 8015f20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015f22:	4b03      	ldr	r3, [pc, #12]	@ (8015f30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	370c      	adds	r7, #12
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2e:	4770      	bx	lr
 8015f30:	20000198 	.word	0x20000198

08015f34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f34:	b480      	push	{r7}
 8015f36:	b083      	sub	sp, #12
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	6039      	str	r1, [r7, #0]
 8015f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	2204      	movs	r2, #4
 8015f44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015f46:	4b03      	ldr	r3, [pc, #12]	@ (8015f54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	370c      	adds	r7, #12
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr
 8015f54:	200001ac 	.word	0x200001ac

08015f58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	4603      	mov	r3, r0
 8015f60:	6039      	str	r1, [r7, #0]
 8015f62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015f64:	79fb      	ldrb	r3, [r7, #7]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d105      	bne.n	8015f76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015f6a:	683a      	ldr	r2, [r7, #0]
 8015f6c:	4907      	ldr	r1, [pc, #28]	@ (8015f8c <USBD_FS_ProductStrDescriptor+0x34>)
 8015f6e:	4808      	ldr	r0, [pc, #32]	@ (8015f90 <USBD_FS_ProductStrDescriptor+0x38>)
 8015f70:	f7ff fdf7 	bl	8015b62 <USBD_GetString>
 8015f74:	e004      	b.n	8015f80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015f76:	683a      	ldr	r2, [r7, #0]
 8015f78:	4904      	ldr	r1, [pc, #16]	@ (8015f8c <USBD_FS_ProductStrDescriptor+0x34>)
 8015f7a:	4805      	ldr	r0, [pc, #20]	@ (8015f90 <USBD_FS_ProductStrDescriptor+0x38>)
 8015f7c:	f7ff fdf1 	bl	8015b62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015f80:	4b02      	ldr	r3, [pc, #8]	@ (8015f8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3708      	adds	r7, #8
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}
 8015f8a:	bf00      	nop
 8015f8c:	20002ccc 	.word	0x20002ccc
 8015f90:	0801b7f0 	.word	0x0801b7f0

08015f94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b082      	sub	sp, #8
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	6039      	str	r1, [r7, #0]
 8015f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015fa0:	683a      	ldr	r2, [r7, #0]
 8015fa2:	4904      	ldr	r1, [pc, #16]	@ (8015fb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015fa4:	4804      	ldr	r0, [pc, #16]	@ (8015fb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015fa6:	f7ff fddc 	bl	8015b62 <USBD_GetString>
  return USBD_StrDesc;
 8015faa:	4b02      	ldr	r3, [pc, #8]	@ (8015fb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3708      	adds	r7, #8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}
 8015fb4:	20002ccc 	.word	0x20002ccc
 8015fb8:	0801b808 	.word	0x0801b808

08015fbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	6039      	str	r1, [r7, #0]
 8015fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	221a      	movs	r2, #26
 8015fcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015fce:	f000 f843 	bl	8016058 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015fd2:	4b02      	ldr	r3, [pc, #8]	@ (8015fdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3708      	adds	r7, #8
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	200001b0 	.word	0x200001b0

08015fe0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	6039      	str	r1, [r7, #0]
 8015fea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015fec:	79fb      	ldrb	r3, [r7, #7]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d105      	bne.n	8015ffe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ff2:	683a      	ldr	r2, [r7, #0]
 8015ff4:	4907      	ldr	r1, [pc, #28]	@ (8016014 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015ff6:	4808      	ldr	r0, [pc, #32]	@ (8016018 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015ff8:	f7ff fdb3 	bl	8015b62 <USBD_GetString>
 8015ffc:	e004      	b.n	8016008 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ffe:	683a      	ldr	r2, [r7, #0]
 8016000:	4904      	ldr	r1, [pc, #16]	@ (8016014 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016002:	4805      	ldr	r0, [pc, #20]	@ (8016018 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016004:	f7ff fdad 	bl	8015b62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016008:	4b02      	ldr	r3, [pc, #8]	@ (8016014 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801600a:	4618      	mov	r0, r3
 801600c:	3708      	adds	r7, #8
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	20002ccc 	.word	0x20002ccc
 8016018:	0801b81c 	.word	0x0801b81c

0801601c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
 8016022:	4603      	mov	r3, r0
 8016024:	6039      	str	r1, [r7, #0]
 8016026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016028:	79fb      	ldrb	r3, [r7, #7]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d105      	bne.n	801603a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801602e:	683a      	ldr	r2, [r7, #0]
 8016030:	4907      	ldr	r1, [pc, #28]	@ (8016050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016032:	4808      	ldr	r0, [pc, #32]	@ (8016054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016034:	f7ff fd95 	bl	8015b62 <USBD_GetString>
 8016038:	e004      	b.n	8016044 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801603a:	683a      	ldr	r2, [r7, #0]
 801603c:	4904      	ldr	r1, [pc, #16]	@ (8016050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801603e:	4805      	ldr	r0, [pc, #20]	@ (8016054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016040:	f7ff fd8f 	bl	8015b62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016044:	4b02      	ldr	r3, [pc, #8]	@ (8016050 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016046:	4618      	mov	r0, r3
 8016048:	3708      	adds	r7, #8
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop
 8016050:	20002ccc 	.word	0x20002ccc
 8016054:	0801b828 	.word	0x0801b828

08016058 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801605e:	4b0f      	ldr	r3, [pc, #60]	@ (801609c <Get_SerialNum+0x44>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016064:	4b0e      	ldr	r3, [pc, #56]	@ (80160a0 <Get_SerialNum+0x48>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801606a:	4b0e      	ldr	r3, [pc, #56]	@ (80160a4 <Get_SerialNum+0x4c>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016070:	68fa      	ldr	r2, [r7, #12]
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	4413      	add	r3, r2
 8016076:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d009      	beq.n	8016092 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801607e:	2208      	movs	r2, #8
 8016080:	4909      	ldr	r1, [pc, #36]	@ (80160a8 <Get_SerialNum+0x50>)
 8016082:	68f8      	ldr	r0, [r7, #12]
 8016084:	f000 f814 	bl	80160b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016088:	2204      	movs	r2, #4
 801608a:	4908      	ldr	r1, [pc, #32]	@ (80160ac <Get_SerialNum+0x54>)
 801608c:	68b8      	ldr	r0, [r7, #8]
 801608e:	f000 f80f 	bl	80160b0 <IntToUnicode>
  }
}
 8016092:	bf00      	nop
 8016094:	3710      	adds	r7, #16
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	1fff7a10 	.word	0x1fff7a10
 80160a0:	1fff7a14 	.word	0x1fff7a14
 80160a4:	1fff7a18 	.word	0x1fff7a18
 80160a8:	200001b2 	.word	0x200001b2
 80160ac:	200001c2 	.word	0x200001c2

080160b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80160b0:	b480      	push	{r7}
 80160b2:	b087      	sub	sp, #28
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	4613      	mov	r3, r2
 80160bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80160be:	2300      	movs	r3, #0
 80160c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80160c2:	2300      	movs	r3, #0
 80160c4:	75fb      	strb	r3, [r7, #23]
 80160c6:	e027      	b.n	8016118 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	0f1b      	lsrs	r3, r3, #28
 80160cc:	2b09      	cmp	r3, #9
 80160ce:	d80b      	bhi.n	80160e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	0f1b      	lsrs	r3, r3, #28
 80160d4:	b2da      	uxtb	r2, r3
 80160d6:	7dfb      	ldrb	r3, [r7, #23]
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	4619      	mov	r1, r3
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	440b      	add	r3, r1
 80160e0:	3230      	adds	r2, #48	@ 0x30
 80160e2:	b2d2      	uxtb	r2, r2
 80160e4:	701a      	strb	r2, [r3, #0]
 80160e6:	e00a      	b.n	80160fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	0f1b      	lsrs	r3, r3, #28
 80160ec:	b2da      	uxtb	r2, r3
 80160ee:	7dfb      	ldrb	r3, [r7, #23]
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	4619      	mov	r1, r3
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	440b      	add	r3, r1
 80160f8:	3237      	adds	r2, #55	@ 0x37
 80160fa:	b2d2      	uxtb	r2, r2
 80160fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	011b      	lsls	r3, r3, #4
 8016102:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016104:	7dfb      	ldrb	r3, [r7, #23]
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	3301      	adds	r3, #1
 801610a:	68ba      	ldr	r2, [r7, #8]
 801610c:	4413      	add	r3, r2
 801610e:	2200      	movs	r2, #0
 8016110:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016112:	7dfb      	ldrb	r3, [r7, #23]
 8016114:	3301      	adds	r3, #1
 8016116:	75fb      	strb	r3, [r7, #23]
 8016118:	7dfa      	ldrb	r2, [r7, #23]
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	429a      	cmp	r2, r3
 801611e:	d3d3      	bcc.n	80160c8 <IntToUnicode+0x18>
  }
}
 8016120:	bf00      	nop
 8016122:	bf00      	nop
 8016124:	371c      	adds	r7, #28
 8016126:	46bd      	mov	sp, r7
 8016128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612c:	4770      	bx	lr
	...

08016130 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b08a      	sub	sp, #40	@ 0x28
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016138:	f107 0314 	add.w	r3, r7, #20
 801613c:	2200      	movs	r2, #0
 801613e:	601a      	str	r2, [r3, #0]
 8016140:	605a      	str	r2, [r3, #4]
 8016142:	609a      	str	r2, [r3, #8]
 8016144:	60da      	str	r2, [r3, #12]
 8016146:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016150:	d13a      	bne.n	80161c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016152:	2300      	movs	r3, #0
 8016154:	613b      	str	r3, [r7, #16]
 8016156:	4b1e      	ldr	r3, [pc, #120]	@ (80161d0 <HAL_PCD_MspInit+0xa0>)
 8016158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801615a:	4a1d      	ldr	r2, [pc, #116]	@ (80161d0 <HAL_PCD_MspInit+0xa0>)
 801615c:	f043 0301 	orr.w	r3, r3, #1
 8016160:	6313      	str	r3, [r2, #48]	@ 0x30
 8016162:	4b1b      	ldr	r3, [pc, #108]	@ (80161d0 <HAL_PCD_MspInit+0xa0>)
 8016164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016166:	f003 0301 	and.w	r3, r3, #1
 801616a:	613b      	str	r3, [r7, #16]
 801616c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801616e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8016172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016174:	2302      	movs	r3, #2
 8016176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016178:	2300      	movs	r3, #0
 801617a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801617c:	2303      	movs	r3, #3
 801617e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016180:	230a      	movs	r3, #10
 8016182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016184:	f107 0314 	add.w	r3, r7, #20
 8016188:	4619      	mov	r1, r3
 801618a:	4812      	ldr	r0, [pc, #72]	@ (80161d4 <HAL_PCD_MspInit+0xa4>)
 801618c:	f7f9 fd40 	bl	800fc10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016190:	4b0f      	ldr	r3, [pc, #60]	@ (80161d0 <HAL_PCD_MspInit+0xa0>)
 8016192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016194:	4a0e      	ldr	r2, [pc, #56]	@ (80161d0 <HAL_PCD_MspInit+0xa0>)
 8016196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801619a:	6353      	str	r3, [r2, #52]	@ 0x34
 801619c:	2300      	movs	r3, #0
 801619e:	60fb      	str	r3, [r7, #12]
 80161a0:	4b0b      	ldr	r3, [pc, #44]	@ (80161d0 <HAL_PCD_MspInit+0xa0>)
 80161a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161a4:	4a0a      	ldr	r2, [pc, #40]	@ (80161d0 <HAL_PCD_MspInit+0xa0>)
 80161a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80161aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80161ac:	4b08      	ldr	r3, [pc, #32]	@ (80161d0 <HAL_PCD_MspInit+0xa0>)
 80161ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80161b4:	60fb      	str	r3, [r7, #12]
 80161b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80161b8:	2200      	movs	r2, #0
 80161ba:	2100      	movs	r1, #0
 80161bc:	2043      	movs	r0, #67	@ 0x43
 80161be:	f7f9 f980 	bl	800f4c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80161c2:	2043      	movs	r0, #67	@ 0x43
 80161c4:	f7f9 f999 	bl	800f4fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80161c8:	bf00      	nop
 80161ca:	3728      	adds	r7, #40	@ 0x28
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd80      	pop	{r7, pc}
 80161d0:	40023800 	.word	0x40023800
 80161d4:	40020000 	.word	0x40020000

080161d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b082      	sub	sp, #8
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80161ec:	4619      	mov	r1, r3
 80161ee:	4610      	mov	r0, r2
 80161f0:	f7fe fcd0 	bl	8014b94 <USBD_LL_SetupStage>
}
 80161f4:	bf00      	nop
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}

080161fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
 8016204:	460b      	mov	r3, r1
 8016206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 801620e:	78fa      	ldrb	r2, [r7, #3]
 8016210:	6879      	ldr	r1, [r7, #4]
 8016212:	4613      	mov	r3, r2
 8016214:	00db      	lsls	r3, r3, #3
 8016216:	1a9b      	subs	r3, r3, r2
 8016218:	009b      	lsls	r3, r3, #2
 801621a:	440b      	add	r3, r1
 801621c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	78fb      	ldrb	r3, [r7, #3]
 8016224:	4619      	mov	r1, r3
 8016226:	f7fe fd0a 	bl	8014c3e <USBD_LL_DataOutStage>
}
 801622a:	bf00      	nop
 801622c:	3708      	adds	r7, #8
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}

08016232 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016232:	b580      	push	{r7, lr}
 8016234:	b082      	sub	sp, #8
 8016236:	af00      	add	r7, sp, #0
 8016238:	6078      	str	r0, [r7, #4]
 801623a:	460b      	mov	r3, r1
 801623c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8016244:	78fa      	ldrb	r2, [r7, #3]
 8016246:	6879      	ldr	r1, [r7, #4]
 8016248:	4613      	mov	r3, r2
 801624a:	00db      	lsls	r3, r3, #3
 801624c:	1a9b      	subs	r3, r3, r2
 801624e:	009b      	lsls	r3, r3, #2
 8016250:	440b      	add	r3, r1
 8016252:	3348      	adds	r3, #72	@ 0x48
 8016254:	681a      	ldr	r2, [r3, #0]
 8016256:	78fb      	ldrb	r3, [r7, #3]
 8016258:	4619      	mov	r1, r3
 801625a:	f7fe fd53 	bl	8014d04 <USBD_LL_DataInStage>
}
 801625e:	bf00      	nop
 8016260:	3708      	adds	r7, #8
 8016262:	46bd      	mov	sp, r7
 8016264:	bd80      	pop	{r7, pc}

08016266 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016266:	b580      	push	{r7, lr}
 8016268:	b082      	sub	sp, #8
 801626a:	af00      	add	r7, sp, #0
 801626c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8016274:	4618      	mov	r0, r3
 8016276:	f7fe fe67 	bl	8014f48 <USBD_LL_SOF>
}
 801627a:	bf00      	nop
 801627c:	3708      	adds	r7, #8
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016282:	b580      	push	{r7, lr}
 8016284:	b084      	sub	sp, #16
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801628a:	2301      	movs	r3, #1
 801628c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	68db      	ldr	r3, [r3, #12]
 8016292:	2b02      	cmp	r3, #2
 8016294:	d001      	beq.n	801629a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016296:	f7f7 fc0d 	bl	800dab4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80162a0:	7bfa      	ldrb	r2, [r7, #15]
 80162a2:	4611      	mov	r1, r2
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7fe fe11 	bl	8014ecc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7fe fdbd 	bl	8014e30 <USBD_LL_Reset>
}
 80162b6:	bf00      	nop
 80162b8:	3710      	adds	r7, #16
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
	...

080162c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b082      	sub	sp, #8
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7fe fe0c 	bl	8014eec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	687a      	ldr	r2, [r7, #4]
 80162e0:	6812      	ldr	r2, [r2, #0]
 80162e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80162e6:	f043 0301 	orr.w	r3, r3, #1
 80162ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6a1b      	ldr	r3, [r3, #32]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d005      	beq.n	8016300 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80162f4:	4b04      	ldr	r3, [pc, #16]	@ (8016308 <HAL_PCD_SuspendCallback+0x48>)
 80162f6:	691b      	ldr	r3, [r3, #16]
 80162f8:	4a03      	ldr	r2, [pc, #12]	@ (8016308 <HAL_PCD_SuspendCallback+0x48>)
 80162fa:	f043 0306 	orr.w	r3, r3, #6
 80162fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016300:	bf00      	nop
 8016302:	3708      	adds	r7, #8
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}
 8016308:	e000ed00 	.word	0xe000ed00

0801630c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b082      	sub	sp, #8
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801631a:	4618      	mov	r0, r3
 801631c:	f7fe fdfc 	bl	8014f18 <USBD_LL_Resume>
}
 8016320:	bf00      	nop
 8016322:	3708      	adds	r7, #8
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}

08016328 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b082      	sub	sp, #8
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	460b      	mov	r3, r1
 8016332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801633a:	78fa      	ldrb	r2, [r7, #3]
 801633c:	4611      	mov	r1, r2
 801633e:	4618      	mov	r0, r3
 8016340:	f7fe fe4a 	bl	8014fd8 <USBD_LL_IsoOUTIncomplete>
}
 8016344:	bf00      	nop
 8016346:	3708      	adds	r7, #8
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	460b      	mov	r3, r1
 8016356:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801635e:	78fa      	ldrb	r2, [r7, #3]
 8016360:	4611      	mov	r1, r2
 8016362:	4618      	mov	r0, r3
 8016364:	f7fe fe12 	bl	8014f8c <USBD_LL_IsoINIncomplete>
}
 8016368:	bf00      	nop
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}

08016370 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801637e:	4618      	mov	r0, r3
 8016380:	f7fe fe50 	bl	8015024 <USBD_LL_DevConnected>
}
 8016384:	bf00      	nop
 8016386:	3708      	adds	r7, #8
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}

0801638c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b082      	sub	sp, #8
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801639a:	4618      	mov	r0, r3
 801639c:	f7fe fe4d 	bl	801503a <USBD_LL_DevDisconnected>
}
 80163a0:	bf00      	nop
 80163a2:	3708      	adds	r7, #8
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}

080163a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b082      	sub	sp, #8
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	781b      	ldrb	r3, [r3, #0]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d13c      	bne.n	8016432 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80163b8:	4a20      	ldr	r2, [pc, #128]	@ (801643c <USBD_LL_Init+0x94>)
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	4a1e      	ldr	r2, [pc, #120]	@ (801643c <USBD_LL_Init+0x94>)
 80163c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80163c8:	4b1c      	ldr	r3, [pc, #112]	@ (801643c <USBD_LL_Init+0x94>)
 80163ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80163ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80163d0:	4b1a      	ldr	r3, [pc, #104]	@ (801643c <USBD_LL_Init+0x94>)
 80163d2:	2204      	movs	r2, #4
 80163d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80163d6:	4b19      	ldr	r3, [pc, #100]	@ (801643c <USBD_LL_Init+0x94>)
 80163d8:	2202      	movs	r2, #2
 80163da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80163dc:	4b17      	ldr	r3, [pc, #92]	@ (801643c <USBD_LL_Init+0x94>)
 80163de:	2200      	movs	r2, #0
 80163e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80163e2:	4b16      	ldr	r3, [pc, #88]	@ (801643c <USBD_LL_Init+0x94>)
 80163e4:	2202      	movs	r2, #2
 80163e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80163e8:	4b14      	ldr	r3, [pc, #80]	@ (801643c <USBD_LL_Init+0x94>)
 80163ea:	2200      	movs	r2, #0
 80163ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80163ee:	4b13      	ldr	r3, [pc, #76]	@ (801643c <USBD_LL_Init+0x94>)
 80163f0:	2200      	movs	r2, #0
 80163f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80163f4:	4b11      	ldr	r3, [pc, #68]	@ (801643c <USBD_LL_Init+0x94>)
 80163f6:	2200      	movs	r2, #0
 80163f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80163fa:	4b10      	ldr	r3, [pc, #64]	@ (801643c <USBD_LL_Init+0x94>)
 80163fc:	2200      	movs	r2, #0
 80163fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016400:	4b0e      	ldr	r3, [pc, #56]	@ (801643c <USBD_LL_Init+0x94>)
 8016402:	2200      	movs	r2, #0
 8016404:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016406:	480d      	ldr	r0, [pc, #52]	@ (801643c <USBD_LL_Init+0x94>)
 8016408:	f7f9 fdb7 	bl	800ff7a <HAL_PCD_Init>
 801640c:	4603      	mov	r3, r0
 801640e:	2b00      	cmp	r3, #0
 8016410:	d001      	beq.n	8016416 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016412:	f7f7 fb4f 	bl	800dab4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016416:	2180      	movs	r1, #128	@ 0x80
 8016418:	4808      	ldr	r0, [pc, #32]	@ (801643c <USBD_LL_Init+0x94>)
 801641a:	f7fa ff14 	bl	8011246 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801641e:	2240      	movs	r2, #64	@ 0x40
 8016420:	2100      	movs	r1, #0
 8016422:	4806      	ldr	r0, [pc, #24]	@ (801643c <USBD_LL_Init+0x94>)
 8016424:	f7fa fec8 	bl	80111b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016428:	2280      	movs	r2, #128	@ 0x80
 801642a:	2101      	movs	r1, #1
 801642c:	4803      	ldr	r0, [pc, #12]	@ (801643c <USBD_LL_Init+0x94>)
 801642e:	f7fa fec3 	bl	80111b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016432:	2300      	movs	r3, #0
}
 8016434:	4618      	mov	r0, r3
 8016436:	3708      	adds	r7, #8
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}
 801643c:	20002ecc 	.word	0x20002ecc

08016440 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b084      	sub	sp, #16
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016448:	2300      	movs	r3, #0
 801644a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801644c:	2300      	movs	r3, #0
 801644e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016456:	4618      	mov	r0, r3
 8016458:	f7f9 feac 	bl	80101b4 <HAL_PCD_Start>
 801645c:	4603      	mov	r3, r0
 801645e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016460:	7bfb      	ldrb	r3, [r7, #15]
 8016462:	4618      	mov	r0, r3
 8016464:	f000 f942 	bl	80166ec <USBD_Get_USB_Status>
 8016468:	4603      	mov	r3, r0
 801646a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801646c:	7bbb      	ldrb	r3, [r7, #14]
}
 801646e:	4618      	mov	r0, r3
 8016470:	3710      	adds	r7, #16
 8016472:	46bd      	mov	sp, r7
 8016474:	bd80      	pop	{r7, pc}

08016476 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016476:	b580      	push	{r7, lr}
 8016478:	b084      	sub	sp, #16
 801647a:	af00      	add	r7, sp, #0
 801647c:	6078      	str	r0, [r7, #4]
 801647e:	4608      	mov	r0, r1
 8016480:	4611      	mov	r1, r2
 8016482:	461a      	mov	r2, r3
 8016484:	4603      	mov	r3, r0
 8016486:	70fb      	strb	r3, [r7, #3]
 8016488:	460b      	mov	r3, r1
 801648a:	70bb      	strb	r3, [r7, #2]
 801648c:	4613      	mov	r3, r2
 801648e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016490:	2300      	movs	r3, #0
 8016492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016494:	2300      	movs	r3, #0
 8016496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801649e:	78bb      	ldrb	r3, [r7, #2]
 80164a0:	883a      	ldrh	r2, [r7, #0]
 80164a2:	78f9      	ldrb	r1, [r7, #3]
 80164a4:	f7fa fa90 	bl	80109c8 <HAL_PCD_EP_Open>
 80164a8:	4603      	mov	r3, r0
 80164aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80164ac:	7bfb      	ldrb	r3, [r7, #15]
 80164ae:	4618      	mov	r0, r3
 80164b0:	f000 f91c 	bl	80166ec <USBD_Get_USB_Status>
 80164b4:	4603      	mov	r3, r0
 80164b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80164b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}

080164c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80164c2:	b580      	push	{r7, lr}
 80164c4:	b084      	sub	sp, #16
 80164c6:	af00      	add	r7, sp, #0
 80164c8:	6078      	str	r0, [r7, #4]
 80164ca:	460b      	mov	r3, r1
 80164cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164ce:	2300      	movs	r3, #0
 80164d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164d2:	2300      	movs	r3, #0
 80164d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80164dc:	78fa      	ldrb	r2, [r7, #3]
 80164de:	4611      	mov	r1, r2
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7fa fad9 	bl	8010a98 <HAL_PCD_EP_Close>
 80164e6:	4603      	mov	r3, r0
 80164e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80164ea:	7bfb      	ldrb	r3, [r7, #15]
 80164ec:	4618      	mov	r0, r3
 80164ee:	f000 f8fd 	bl	80166ec <USBD_Get_USB_Status>
 80164f2:	4603      	mov	r3, r0
 80164f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80164f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	3710      	adds	r7, #16
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}

08016500 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
 8016508:	460b      	mov	r3, r1
 801650a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801650c:	2300      	movs	r3, #0
 801650e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016510:	2300      	movs	r3, #0
 8016512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801651a:	78fa      	ldrb	r2, [r7, #3]
 801651c:	4611      	mov	r1, r2
 801651e:	4618      	mov	r0, r3
 8016520:	f7fa fbb1 	bl	8010c86 <HAL_PCD_EP_SetStall>
 8016524:	4603      	mov	r3, r0
 8016526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016528:	7bfb      	ldrb	r3, [r7, #15]
 801652a:	4618      	mov	r0, r3
 801652c:	f000 f8de 	bl	80166ec <USBD_Get_USB_Status>
 8016530:	4603      	mov	r3, r0
 8016532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016534:	7bbb      	ldrb	r3, [r7, #14]
}
 8016536:	4618      	mov	r0, r3
 8016538:	3710      	adds	r7, #16
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}

0801653e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801653e:	b580      	push	{r7, lr}
 8016540:	b084      	sub	sp, #16
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
 8016546:	460b      	mov	r3, r1
 8016548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801654a:	2300      	movs	r3, #0
 801654c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801654e:	2300      	movs	r3, #0
 8016550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016558:	78fa      	ldrb	r2, [r7, #3]
 801655a:	4611      	mov	r1, r2
 801655c:	4618      	mov	r0, r3
 801655e:	f7fa fbf6 	bl	8010d4e <HAL_PCD_EP_ClrStall>
 8016562:	4603      	mov	r3, r0
 8016564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016566:	7bfb      	ldrb	r3, [r7, #15]
 8016568:	4618      	mov	r0, r3
 801656a:	f000 f8bf 	bl	80166ec <USBD_Get_USB_Status>
 801656e:	4603      	mov	r3, r0
 8016570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016572:	7bbb      	ldrb	r3, [r7, #14]
}
 8016574:	4618      	mov	r0, r3
 8016576:	3710      	adds	r7, #16
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}

0801657c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801657c:	b480      	push	{r7}
 801657e:	b085      	sub	sp, #20
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
 8016584:	460b      	mov	r3, r1
 8016586:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801658e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016594:	2b00      	cmp	r3, #0
 8016596:	da0b      	bge.n	80165b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016598:	78fb      	ldrb	r3, [r7, #3]
 801659a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801659e:	68f9      	ldr	r1, [r7, #12]
 80165a0:	4613      	mov	r3, r2
 80165a2:	00db      	lsls	r3, r3, #3
 80165a4:	1a9b      	subs	r3, r3, r2
 80165a6:	009b      	lsls	r3, r3, #2
 80165a8:	440b      	add	r3, r1
 80165aa:	333e      	adds	r3, #62	@ 0x3e
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	e00b      	b.n	80165c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80165b0:	78fb      	ldrb	r3, [r7, #3]
 80165b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80165b6:	68f9      	ldr	r1, [r7, #12]
 80165b8:	4613      	mov	r3, r2
 80165ba:	00db      	lsls	r3, r3, #3
 80165bc:	1a9b      	subs	r3, r3, r2
 80165be:	009b      	lsls	r3, r3, #2
 80165c0:	440b      	add	r3, r1
 80165c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80165c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3714      	adds	r7, #20
 80165cc:	46bd      	mov	sp, r7
 80165ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d2:	4770      	bx	lr

080165d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	460b      	mov	r3, r1
 80165de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165e0:	2300      	movs	r3, #0
 80165e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165e4:	2300      	movs	r3, #0
 80165e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80165ee:	78fa      	ldrb	r2, [r7, #3]
 80165f0:	4611      	mov	r1, r2
 80165f2:	4618      	mov	r0, r3
 80165f4:	f7fa f9c3 	bl	801097e <HAL_PCD_SetAddress>
 80165f8:	4603      	mov	r3, r0
 80165fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165fc:	7bfb      	ldrb	r3, [r7, #15]
 80165fe:	4618      	mov	r0, r3
 8016600:	f000 f874 	bl	80166ec <USBD_Get_USB_Status>
 8016604:	4603      	mov	r3, r0
 8016606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016608:	7bbb      	ldrb	r3, [r7, #14]
}
 801660a:	4618      	mov	r0, r3
 801660c:	3710      	adds	r7, #16
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}

08016612 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016612:	b580      	push	{r7, lr}
 8016614:	b086      	sub	sp, #24
 8016616:	af00      	add	r7, sp, #0
 8016618:	60f8      	str	r0, [r7, #12]
 801661a:	607a      	str	r2, [r7, #4]
 801661c:	603b      	str	r3, [r7, #0]
 801661e:	460b      	mov	r3, r1
 8016620:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016622:	2300      	movs	r3, #0
 8016624:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016626:	2300      	movs	r3, #0
 8016628:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016630:	7af9      	ldrb	r1, [r7, #11]
 8016632:	683b      	ldr	r3, [r7, #0]
 8016634:	687a      	ldr	r2, [r7, #4]
 8016636:	f7fa fadc 	bl	8010bf2 <HAL_PCD_EP_Transmit>
 801663a:	4603      	mov	r3, r0
 801663c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801663e:	7dfb      	ldrb	r3, [r7, #23]
 8016640:	4618      	mov	r0, r3
 8016642:	f000 f853 	bl	80166ec <USBD_Get_USB_Status>
 8016646:	4603      	mov	r3, r0
 8016648:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801664a:	7dbb      	ldrb	r3, [r7, #22]
}
 801664c:	4618      	mov	r0, r3
 801664e:	3718      	adds	r7, #24
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b086      	sub	sp, #24
 8016658:	af00      	add	r7, sp, #0
 801665a:	60f8      	str	r0, [r7, #12]
 801665c:	607a      	str	r2, [r7, #4]
 801665e:	603b      	str	r3, [r7, #0]
 8016660:	460b      	mov	r3, r1
 8016662:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016664:	2300      	movs	r3, #0
 8016666:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016668:	2300      	movs	r3, #0
 801666a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016672:	7af9      	ldrb	r1, [r7, #11]
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	f7fa fa58 	bl	8010b2c <HAL_PCD_EP_Receive>
 801667c:	4603      	mov	r3, r0
 801667e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016680:	7dfb      	ldrb	r3, [r7, #23]
 8016682:	4618      	mov	r0, r3
 8016684:	f000 f832 	bl	80166ec <USBD_Get_USB_Status>
 8016688:	4603      	mov	r3, r0
 801668a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801668c:	7dbb      	ldrb	r3, [r7, #22]
}
 801668e:	4618      	mov	r0, r3
 8016690:	3718      	adds	r7, #24
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}

08016696 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016696:	b580      	push	{r7, lr}
 8016698:	b082      	sub	sp, #8
 801669a:	af00      	add	r7, sp, #0
 801669c:	6078      	str	r0, [r7, #4]
 801669e:	460b      	mov	r3, r1
 80166a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80166a8:	78fa      	ldrb	r2, [r7, #3]
 80166aa:	4611      	mov	r1, r2
 80166ac:	4618      	mov	r0, r3
 80166ae:	f7fa fa88 	bl	8010bc2 <HAL_PCD_EP_GetRxCount>
 80166b2:	4603      	mov	r3, r0
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3708      	adds	r7, #8
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}

080166bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80166bc:	b480      	push	{r7}
 80166be:	b083      	sub	sp, #12
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80166c4:	4b03      	ldr	r3, [pc, #12]	@ (80166d4 <USBD_static_malloc+0x18>)
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	370c      	adds	r7, #12
 80166ca:	46bd      	mov	sp, r7
 80166cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d0:	4770      	bx	lr
 80166d2:	bf00      	nop
 80166d4:	200032d4 	.word	0x200032d4

080166d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80166d8:	b480      	push	{r7}
 80166da:	b083      	sub	sp, #12
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]

}
 80166e0:	bf00      	nop
 80166e2:	370c      	adds	r7, #12
 80166e4:	46bd      	mov	sp, r7
 80166e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ea:	4770      	bx	lr

080166ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80166ec:	b480      	push	{r7}
 80166ee:	b085      	sub	sp, #20
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	4603      	mov	r3, r0
 80166f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166f6:	2300      	movs	r3, #0
 80166f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80166fa:	79fb      	ldrb	r3, [r7, #7]
 80166fc:	2b03      	cmp	r3, #3
 80166fe:	d817      	bhi.n	8016730 <USBD_Get_USB_Status+0x44>
 8016700:	a201      	add	r2, pc, #4	@ (adr r2, 8016708 <USBD_Get_USB_Status+0x1c>)
 8016702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016706:	bf00      	nop
 8016708:	08016719 	.word	0x08016719
 801670c:	0801671f 	.word	0x0801671f
 8016710:	08016725 	.word	0x08016725
 8016714:	0801672b 	.word	0x0801672b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016718:	2300      	movs	r3, #0
 801671a:	73fb      	strb	r3, [r7, #15]
    break;
 801671c:	e00b      	b.n	8016736 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801671e:	2303      	movs	r3, #3
 8016720:	73fb      	strb	r3, [r7, #15]
    break;
 8016722:	e008      	b.n	8016736 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016724:	2301      	movs	r3, #1
 8016726:	73fb      	strb	r3, [r7, #15]
    break;
 8016728:	e005      	b.n	8016736 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801672a:	2303      	movs	r3, #3
 801672c:	73fb      	strb	r3, [r7, #15]
    break;
 801672e:	e002      	b.n	8016736 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016730:	2303      	movs	r3, #3
 8016732:	73fb      	strb	r3, [r7, #15]
    break;
 8016734:	bf00      	nop
  }
  return usb_status;
 8016736:	7bfb      	ldrb	r3, [r7, #15]
}
 8016738:	4618      	mov	r0, r3
 801673a:	3714      	adds	r7, #20
 801673c:	46bd      	mov	sp, r7
 801673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016742:	4770      	bx	lr

08016744 <malloc>:
 8016744:	4b02      	ldr	r3, [pc, #8]	@ (8016750 <malloc+0xc>)
 8016746:	4601      	mov	r1, r0
 8016748:	6818      	ldr	r0, [r3, #0]
 801674a:	f000 b82d 	b.w	80167a8 <_malloc_r>
 801674e:	bf00      	nop
 8016750:	200001d8 	.word	0x200001d8

08016754 <free>:
 8016754:	4b02      	ldr	r3, [pc, #8]	@ (8016760 <free+0xc>)
 8016756:	4601      	mov	r1, r0
 8016758:	6818      	ldr	r0, [r3, #0]
 801675a:	f001 bd51 	b.w	8018200 <_free_r>
 801675e:	bf00      	nop
 8016760:	200001d8 	.word	0x200001d8

08016764 <sbrk_aligned>:
 8016764:	b570      	push	{r4, r5, r6, lr}
 8016766:	4e0f      	ldr	r6, [pc, #60]	@ (80167a4 <sbrk_aligned+0x40>)
 8016768:	460c      	mov	r4, r1
 801676a:	6831      	ldr	r1, [r6, #0]
 801676c:	4605      	mov	r5, r0
 801676e:	b911      	cbnz	r1, 8016776 <sbrk_aligned+0x12>
 8016770:	f000 fe64 	bl	801743c <_sbrk_r>
 8016774:	6030      	str	r0, [r6, #0]
 8016776:	4621      	mov	r1, r4
 8016778:	4628      	mov	r0, r5
 801677a:	f000 fe5f 	bl	801743c <_sbrk_r>
 801677e:	1c43      	adds	r3, r0, #1
 8016780:	d103      	bne.n	801678a <sbrk_aligned+0x26>
 8016782:	f04f 34ff 	mov.w	r4, #4294967295
 8016786:	4620      	mov	r0, r4
 8016788:	bd70      	pop	{r4, r5, r6, pc}
 801678a:	1cc4      	adds	r4, r0, #3
 801678c:	f024 0403 	bic.w	r4, r4, #3
 8016790:	42a0      	cmp	r0, r4
 8016792:	d0f8      	beq.n	8016786 <sbrk_aligned+0x22>
 8016794:	1a21      	subs	r1, r4, r0
 8016796:	4628      	mov	r0, r5
 8016798:	f000 fe50 	bl	801743c <_sbrk_r>
 801679c:	3001      	adds	r0, #1
 801679e:	d1f2      	bne.n	8016786 <sbrk_aligned+0x22>
 80167a0:	e7ef      	b.n	8016782 <sbrk_aligned+0x1e>
 80167a2:	bf00      	nop
 80167a4:	200034f4 	.word	0x200034f4

080167a8 <_malloc_r>:
 80167a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167ac:	1ccd      	adds	r5, r1, #3
 80167ae:	f025 0503 	bic.w	r5, r5, #3
 80167b2:	3508      	adds	r5, #8
 80167b4:	2d0c      	cmp	r5, #12
 80167b6:	bf38      	it	cc
 80167b8:	250c      	movcc	r5, #12
 80167ba:	2d00      	cmp	r5, #0
 80167bc:	4606      	mov	r6, r0
 80167be:	db01      	blt.n	80167c4 <_malloc_r+0x1c>
 80167c0:	42a9      	cmp	r1, r5
 80167c2:	d904      	bls.n	80167ce <_malloc_r+0x26>
 80167c4:	230c      	movs	r3, #12
 80167c6:	6033      	str	r3, [r6, #0]
 80167c8:	2000      	movs	r0, #0
 80167ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80168a4 <_malloc_r+0xfc>
 80167d2:	f000 f869 	bl	80168a8 <__malloc_lock>
 80167d6:	f8d8 3000 	ldr.w	r3, [r8]
 80167da:	461c      	mov	r4, r3
 80167dc:	bb44      	cbnz	r4, 8016830 <_malloc_r+0x88>
 80167de:	4629      	mov	r1, r5
 80167e0:	4630      	mov	r0, r6
 80167e2:	f7ff ffbf 	bl	8016764 <sbrk_aligned>
 80167e6:	1c43      	adds	r3, r0, #1
 80167e8:	4604      	mov	r4, r0
 80167ea:	d158      	bne.n	801689e <_malloc_r+0xf6>
 80167ec:	f8d8 4000 	ldr.w	r4, [r8]
 80167f0:	4627      	mov	r7, r4
 80167f2:	2f00      	cmp	r7, #0
 80167f4:	d143      	bne.n	801687e <_malloc_r+0xd6>
 80167f6:	2c00      	cmp	r4, #0
 80167f8:	d04b      	beq.n	8016892 <_malloc_r+0xea>
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	4639      	mov	r1, r7
 80167fe:	4630      	mov	r0, r6
 8016800:	eb04 0903 	add.w	r9, r4, r3
 8016804:	f000 fe1a 	bl	801743c <_sbrk_r>
 8016808:	4581      	cmp	r9, r0
 801680a:	d142      	bne.n	8016892 <_malloc_r+0xea>
 801680c:	6821      	ldr	r1, [r4, #0]
 801680e:	1a6d      	subs	r5, r5, r1
 8016810:	4629      	mov	r1, r5
 8016812:	4630      	mov	r0, r6
 8016814:	f7ff ffa6 	bl	8016764 <sbrk_aligned>
 8016818:	3001      	adds	r0, #1
 801681a:	d03a      	beq.n	8016892 <_malloc_r+0xea>
 801681c:	6823      	ldr	r3, [r4, #0]
 801681e:	442b      	add	r3, r5
 8016820:	6023      	str	r3, [r4, #0]
 8016822:	f8d8 3000 	ldr.w	r3, [r8]
 8016826:	685a      	ldr	r2, [r3, #4]
 8016828:	bb62      	cbnz	r2, 8016884 <_malloc_r+0xdc>
 801682a:	f8c8 7000 	str.w	r7, [r8]
 801682e:	e00f      	b.n	8016850 <_malloc_r+0xa8>
 8016830:	6822      	ldr	r2, [r4, #0]
 8016832:	1b52      	subs	r2, r2, r5
 8016834:	d420      	bmi.n	8016878 <_malloc_r+0xd0>
 8016836:	2a0b      	cmp	r2, #11
 8016838:	d917      	bls.n	801686a <_malloc_r+0xc2>
 801683a:	1961      	adds	r1, r4, r5
 801683c:	42a3      	cmp	r3, r4
 801683e:	6025      	str	r5, [r4, #0]
 8016840:	bf18      	it	ne
 8016842:	6059      	strne	r1, [r3, #4]
 8016844:	6863      	ldr	r3, [r4, #4]
 8016846:	bf08      	it	eq
 8016848:	f8c8 1000 	streq.w	r1, [r8]
 801684c:	5162      	str	r2, [r4, r5]
 801684e:	604b      	str	r3, [r1, #4]
 8016850:	4630      	mov	r0, r6
 8016852:	f000 f82f 	bl	80168b4 <__malloc_unlock>
 8016856:	f104 000b 	add.w	r0, r4, #11
 801685a:	1d23      	adds	r3, r4, #4
 801685c:	f020 0007 	bic.w	r0, r0, #7
 8016860:	1ac2      	subs	r2, r0, r3
 8016862:	bf1c      	itt	ne
 8016864:	1a1b      	subne	r3, r3, r0
 8016866:	50a3      	strne	r3, [r4, r2]
 8016868:	e7af      	b.n	80167ca <_malloc_r+0x22>
 801686a:	6862      	ldr	r2, [r4, #4]
 801686c:	42a3      	cmp	r3, r4
 801686e:	bf0c      	ite	eq
 8016870:	f8c8 2000 	streq.w	r2, [r8]
 8016874:	605a      	strne	r2, [r3, #4]
 8016876:	e7eb      	b.n	8016850 <_malloc_r+0xa8>
 8016878:	4623      	mov	r3, r4
 801687a:	6864      	ldr	r4, [r4, #4]
 801687c:	e7ae      	b.n	80167dc <_malloc_r+0x34>
 801687e:	463c      	mov	r4, r7
 8016880:	687f      	ldr	r7, [r7, #4]
 8016882:	e7b6      	b.n	80167f2 <_malloc_r+0x4a>
 8016884:	461a      	mov	r2, r3
 8016886:	685b      	ldr	r3, [r3, #4]
 8016888:	42a3      	cmp	r3, r4
 801688a:	d1fb      	bne.n	8016884 <_malloc_r+0xdc>
 801688c:	2300      	movs	r3, #0
 801688e:	6053      	str	r3, [r2, #4]
 8016890:	e7de      	b.n	8016850 <_malloc_r+0xa8>
 8016892:	230c      	movs	r3, #12
 8016894:	6033      	str	r3, [r6, #0]
 8016896:	4630      	mov	r0, r6
 8016898:	f000 f80c 	bl	80168b4 <__malloc_unlock>
 801689c:	e794      	b.n	80167c8 <_malloc_r+0x20>
 801689e:	6005      	str	r5, [r0, #0]
 80168a0:	e7d6      	b.n	8016850 <_malloc_r+0xa8>
 80168a2:	bf00      	nop
 80168a4:	200034f8 	.word	0x200034f8

080168a8 <__malloc_lock>:
 80168a8:	4801      	ldr	r0, [pc, #4]	@ (80168b0 <__malloc_lock+0x8>)
 80168aa:	f000 be14 	b.w	80174d6 <__retarget_lock_acquire_recursive>
 80168ae:	bf00      	nop
 80168b0:	2000363c 	.word	0x2000363c

080168b4 <__malloc_unlock>:
 80168b4:	4801      	ldr	r0, [pc, #4]	@ (80168bc <__malloc_unlock+0x8>)
 80168b6:	f000 be0f 	b.w	80174d8 <__retarget_lock_release_recursive>
 80168ba:	bf00      	nop
 80168bc:	2000363c 	.word	0x2000363c

080168c0 <__cvt>:
 80168c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80168c4:	ec57 6b10 	vmov	r6, r7, d0
 80168c8:	2f00      	cmp	r7, #0
 80168ca:	460c      	mov	r4, r1
 80168cc:	4619      	mov	r1, r3
 80168ce:	463b      	mov	r3, r7
 80168d0:	bfbb      	ittet	lt
 80168d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80168d6:	461f      	movlt	r7, r3
 80168d8:	2300      	movge	r3, #0
 80168da:	232d      	movlt	r3, #45	@ 0x2d
 80168dc:	700b      	strb	r3, [r1, #0]
 80168de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80168e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80168e4:	4691      	mov	r9, r2
 80168e6:	f023 0820 	bic.w	r8, r3, #32
 80168ea:	bfbc      	itt	lt
 80168ec:	4632      	movlt	r2, r6
 80168ee:	4616      	movlt	r6, r2
 80168f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80168f4:	d005      	beq.n	8016902 <__cvt+0x42>
 80168f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80168fa:	d100      	bne.n	80168fe <__cvt+0x3e>
 80168fc:	3401      	adds	r4, #1
 80168fe:	2102      	movs	r1, #2
 8016900:	e000      	b.n	8016904 <__cvt+0x44>
 8016902:	2103      	movs	r1, #3
 8016904:	ab03      	add	r3, sp, #12
 8016906:	9301      	str	r3, [sp, #4]
 8016908:	ab02      	add	r3, sp, #8
 801690a:	9300      	str	r3, [sp, #0]
 801690c:	ec47 6b10 	vmov	d0, r6, r7
 8016910:	4653      	mov	r3, sl
 8016912:	4622      	mov	r2, r4
 8016914:	f000 feb0 	bl	8017678 <_dtoa_r>
 8016918:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801691c:	4605      	mov	r5, r0
 801691e:	d119      	bne.n	8016954 <__cvt+0x94>
 8016920:	f019 0f01 	tst.w	r9, #1
 8016924:	d00e      	beq.n	8016944 <__cvt+0x84>
 8016926:	eb00 0904 	add.w	r9, r0, r4
 801692a:	2200      	movs	r2, #0
 801692c:	2300      	movs	r3, #0
 801692e:	4630      	mov	r0, r6
 8016930:	4639      	mov	r1, r7
 8016932:	f7ea f8d1 	bl	8000ad8 <__aeabi_dcmpeq>
 8016936:	b108      	cbz	r0, 801693c <__cvt+0x7c>
 8016938:	f8cd 900c 	str.w	r9, [sp, #12]
 801693c:	2230      	movs	r2, #48	@ 0x30
 801693e:	9b03      	ldr	r3, [sp, #12]
 8016940:	454b      	cmp	r3, r9
 8016942:	d31e      	bcc.n	8016982 <__cvt+0xc2>
 8016944:	9b03      	ldr	r3, [sp, #12]
 8016946:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016948:	1b5b      	subs	r3, r3, r5
 801694a:	4628      	mov	r0, r5
 801694c:	6013      	str	r3, [r2, #0]
 801694e:	b004      	add	sp, #16
 8016950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016954:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016958:	eb00 0904 	add.w	r9, r0, r4
 801695c:	d1e5      	bne.n	801692a <__cvt+0x6a>
 801695e:	7803      	ldrb	r3, [r0, #0]
 8016960:	2b30      	cmp	r3, #48	@ 0x30
 8016962:	d10a      	bne.n	801697a <__cvt+0xba>
 8016964:	2200      	movs	r2, #0
 8016966:	2300      	movs	r3, #0
 8016968:	4630      	mov	r0, r6
 801696a:	4639      	mov	r1, r7
 801696c:	f7ea f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8016970:	b918      	cbnz	r0, 801697a <__cvt+0xba>
 8016972:	f1c4 0401 	rsb	r4, r4, #1
 8016976:	f8ca 4000 	str.w	r4, [sl]
 801697a:	f8da 3000 	ldr.w	r3, [sl]
 801697e:	4499      	add	r9, r3
 8016980:	e7d3      	b.n	801692a <__cvt+0x6a>
 8016982:	1c59      	adds	r1, r3, #1
 8016984:	9103      	str	r1, [sp, #12]
 8016986:	701a      	strb	r2, [r3, #0]
 8016988:	e7d9      	b.n	801693e <__cvt+0x7e>

0801698a <__exponent>:
 801698a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801698c:	2900      	cmp	r1, #0
 801698e:	bfba      	itte	lt
 8016990:	4249      	neglt	r1, r1
 8016992:	232d      	movlt	r3, #45	@ 0x2d
 8016994:	232b      	movge	r3, #43	@ 0x2b
 8016996:	2909      	cmp	r1, #9
 8016998:	7002      	strb	r2, [r0, #0]
 801699a:	7043      	strb	r3, [r0, #1]
 801699c:	dd29      	ble.n	80169f2 <__exponent+0x68>
 801699e:	f10d 0307 	add.w	r3, sp, #7
 80169a2:	461d      	mov	r5, r3
 80169a4:	270a      	movs	r7, #10
 80169a6:	461a      	mov	r2, r3
 80169a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80169ac:	fb07 1416 	mls	r4, r7, r6, r1
 80169b0:	3430      	adds	r4, #48	@ 0x30
 80169b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80169b6:	460c      	mov	r4, r1
 80169b8:	2c63      	cmp	r4, #99	@ 0x63
 80169ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80169be:	4631      	mov	r1, r6
 80169c0:	dcf1      	bgt.n	80169a6 <__exponent+0x1c>
 80169c2:	3130      	adds	r1, #48	@ 0x30
 80169c4:	1e94      	subs	r4, r2, #2
 80169c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80169ca:	1c41      	adds	r1, r0, #1
 80169cc:	4623      	mov	r3, r4
 80169ce:	42ab      	cmp	r3, r5
 80169d0:	d30a      	bcc.n	80169e8 <__exponent+0x5e>
 80169d2:	f10d 0309 	add.w	r3, sp, #9
 80169d6:	1a9b      	subs	r3, r3, r2
 80169d8:	42ac      	cmp	r4, r5
 80169da:	bf88      	it	hi
 80169dc:	2300      	movhi	r3, #0
 80169de:	3302      	adds	r3, #2
 80169e0:	4403      	add	r3, r0
 80169e2:	1a18      	subs	r0, r3, r0
 80169e4:	b003      	add	sp, #12
 80169e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80169ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80169f0:	e7ed      	b.n	80169ce <__exponent+0x44>
 80169f2:	2330      	movs	r3, #48	@ 0x30
 80169f4:	3130      	adds	r1, #48	@ 0x30
 80169f6:	7083      	strb	r3, [r0, #2]
 80169f8:	70c1      	strb	r1, [r0, #3]
 80169fa:	1d03      	adds	r3, r0, #4
 80169fc:	e7f1      	b.n	80169e2 <__exponent+0x58>
	...

08016a00 <_printf_float>:
 8016a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a04:	b08d      	sub	sp, #52	@ 0x34
 8016a06:	460c      	mov	r4, r1
 8016a08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016a0c:	4616      	mov	r6, r2
 8016a0e:	461f      	mov	r7, r3
 8016a10:	4605      	mov	r5, r0
 8016a12:	f000 fcdb 	bl	80173cc <_localeconv_r>
 8016a16:	6803      	ldr	r3, [r0, #0]
 8016a18:	9304      	str	r3, [sp, #16]
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7e9 fc30 	bl	8000280 <strlen>
 8016a20:	2300      	movs	r3, #0
 8016a22:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a24:	f8d8 3000 	ldr.w	r3, [r8]
 8016a28:	9005      	str	r0, [sp, #20]
 8016a2a:	3307      	adds	r3, #7
 8016a2c:	f023 0307 	bic.w	r3, r3, #7
 8016a30:	f103 0208 	add.w	r2, r3, #8
 8016a34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016a38:	f8d4 b000 	ldr.w	fp, [r4]
 8016a3c:	f8c8 2000 	str.w	r2, [r8]
 8016a40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016a44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016a48:	9307      	str	r3, [sp, #28]
 8016a4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8016a4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8016a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a56:	4b9c      	ldr	r3, [pc, #624]	@ (8016cc8 <_printf_float+0x2c8>)
 8016a58:	f04f 32ff 	mov.w	r2, #4294967295
 8016a5c:	f7ea f86e 	bl	8000b3c <__aeabi_dcmpun>
 8016a60:	bb70      	cbnz	r0, 8016ac0 <_printf_float+0xc0>
 8016a62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a66:	4b98      	ldr	r3, [pc, #608]	@ (8016cc8 <_printf_float+0x2c8>)
 8016a68:	f04f 32ff 	mov.w	r2, #4294967295
 8016a6c:	f7ea f848 	bl	8000b00 <__aeabi_dcmple>
 8016a70:	bb30      	cbnz	r0, 8016ac0 <_printf_float+0xc0>
 8016a72:	2200      	movs	r2, #0
 8016a74:	2300      	movs	r3, #0
 8016a76:	4640      	mov	r0, r8
 8016a78:	4649      	mov	r1, r9
 8016a7a:	f7ea f837 	bl	8000aec <__aeabi_dcmplt>
 8016a7e:	b110      	cbz	r0, 8016a86 <_printf_float+0x86>
 8016a80:	232d      	movs	r3, #45	@ 0x2d
 8016a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016a86:	4a91      	ldr	r2, [pc, #580]	@ (8016ccc <_printf_float+0x2cc>)
 8016a88:	4b91      	ldr	r3, [pc, #580]	@ (8016cd0 <_printf_float+0x2d0>)
 8016a8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016a8e:	bf94      	ite	ls
 8016a90:	4690      	movls	r8, r2
 8016a92:	4698      	movhi	r8, r3
 8016a94:	2303      	movs	r3, #3
 8016a96:	6123      	str	r3, [r4, #16]
 8016a98:	f02b 0304 	bic.w	r3, fp, #4
 8016a9c:	6023      	str	r3, [r4, #0]
 8016a9e:	f04f 0900 	mov.w	r9, #0
 8016aa2:	9700      	str	r7, [sp, #0]
 8016aa4:	4633      	mov	r3, r6
 8016aa6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016aa8:	4621      	mov	r1, r4
 8016aaa:	4628      	mov	r0, r5
 8016aac:	f000 f9d2 	bl	8016e54 <_printf_common>
 8016ab0:	3001      	adds	r0, #1
 8016ab2:	f040 808d 	bne.w	8016bd0 <_printf_float+0x1d0>
 8016ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8016aba:	b00d      	add	sp, #52	@ 0x34
 8016abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac0:	4642      	mov	r2, r8
 8016ac2:	464b      	mov	r3, r9
 8016ac4:	4640      	mov	r0, r8
 8016ac6:	4649      	mov	r1, r9
 8016ac8:	f7ea f838 	bl	8000b3c <__aeabi_dcmpun>
 8016acc:	b140      	cbz	r0, 8016ae0 <_printf_float+0xe0>
 8016ace:	464b      	mov	r3, r9
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	bfbc      	itt	lt
 8016ad4:	232d      	movlt	r3, #45	@ 0x2d
 8016ad6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016ada:	4a7e      	ldr	r2, [pc, #504]	@ (8016cd4 <_printf_float+0x2d4>)
 8016adc:	4b7e      	ldr	r3, [pc, #504]	@ (8016cd8 <_printf_float+0x2d8>)
 8016ade:	e7d4      	b.n	8016a8a <_printf_float+0x8a>
 8016ae0:	6863      	ldr	r3, [r4, #4]
 8016ae2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8016ae6:	9206      	str	r2, [sp, #24]
 8016ae8:	1c5a      	adds	r2, r3, #1
 8016aea:	d13b      	bne.n	8016b64 <_printf_float+0x164>
 8016aec:	2306      	movs	r3, #6
 8016aee:	6063      	str	r3, [r4, #4]
 8016af0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8016af4:	2300      	movs	r3, #0
 8016af6:	6022      	str	r2, [r4, #0]
 8016af8:	9303      	str	r3, [sp, #12]
 8016afa:	ab0a      	add	r3, sp, #40	@ 0x28
 8016afc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8016b00:	ab09      	add	r3, sp, #36	@ 0x24
 8016b02:	9300      	str	r3, [sp, #0]
 8016b04:	6861      	ldr	r1, [r4, #4]
 8016b06:	ec49 8b10 	vmov	d0, r8, r9
 8016b0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016b0e:	4628      	mov	r0, r5
 8016b10:	f7ff fed6 	bl	80168c0 <__cvt>
 8016b14:	9b06      	ldr	r3, [sp, #24]
 8016b16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016b18:	2b47      	cmp	r3, #71	@ 0x47
 8016b1a:	4680      	mov	r8, r0
 8016b1c:	d129      	bne.n	8016b72 <_printf_float+0x172>
 8016b1e:	1cc8      	adds	r0, r1, #3
 8016b20:	db02      	blt.n	8016b28 <_printf_float+0x128>
 8016b22:	6863      	ldr	r3, [r4, #4]
 8016b24:	4299      	cmp	r1, r3
 8016b26:	dd41      	ble.n	8016bac <_printf_float+0x1ac>
 8016b28:	f1aa 0a02 	sub.w	sl, sl, #2
 8016b2c:	fa5f fa8a 	uxtb.w	sl, sl
 8016b30:	3901      	subs	r1, #1
 8016b32:	4652      	mov	r2, sl
 8016b34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016b38:	9109      	str	r1, [sp, #36]	@ 0x24
 8016b3a:	f7ff ff26 	bl	801698a <__exponent>
 8016b3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016b40:	1813      	adds	r3, r2, r0
 8016b42:	2a01      	cmp	r2, #1
 8016b44:	4681      	mov	r9, r0
 8016b46:	6123      	str	r3, [r4, #16]
 8016b48:	dc02      	bgt.n	8016b50 <_printf_float+0x150>
 8016b4a:	6822      	ldr	r2, [r4, #0]
 8016b4c:	07d2      	lsls	r2, r2, #31
 8016b4e:	d501      	bpl.n	8016b54 <_printf_float+0x154>
 8016b50:	3301      	adds	r3, #1
 8016b52:	6123      	str	r3, [r4, #16]
 8016b54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d0a2      	beq.n	8016aa2 <_printf_float+0xa2>
 8016b5c:	232d      	movs	r3, #45	@ 0x2d
 8016b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016b62:	e79e      	b.n	8016aa2 <_printf_float+0xa2>
 8016b64:	9a06      	ldr	r2, [sp, #24]
 8016b66:	2a47      	cmp	r2, #71	@ 0x47
 8016b68:	d1c2      	bne.n	8016af0 <_printf_float+0xf0>
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d1c0      	bne.n	8016af0 <_printf_float+0xf0>
 8016b6e:	2301      	movs	r3, #1
 8016b70:	e7bd      	b.n	8016aee <_printf_float+0xee>
 8016b72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016b76:	d9db      	bls.n	8016b30 <_printf_float+0x130>
 8016b78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016b7c:	d118      	bne.n	8016bb0 <_printf_float+0x1b0>
 8016b7e:	2900      	cmp	r1, #0
 8016b80:	6863      	ldr	r3, [r4, #4]
 8016b82:	dd0b      	ble.n	8016b9c <_printf_float+0x19c>
 8016b84:	6121      	str	r1, [r4, #16]
 8016b86:	b913      	cbnz	r3, 8016b8e <_printf_float+0x18e>
 8016b88:	6822      	ldr	r2, [r4, #0]
 8016b8a:	07d0      	lsls	r0, r2, #31
 8016b8c:	d502      	bpl.n	8016b94 <_printf_float+0x194>
 8016b8e:	3301      	adds	r3, #1
 8016b90:	440b      	add	r3, r1
 8016b92:	6123      	str	r3, [r4, #16]
 8016b94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8016b96:	f04f 0900 	mov.w	r9, #0
 8016b9a:	e7db      	b.n	8016b54 <_printf_float+0x154>
 8016b9c:	b913      	cbnz	r3, 8016ba4 <_printf_float+0x1a4>
 8016b9e:	6822      	ldr	r2, [r4, #0]
 8016ba0:	07d2      	lsls	r2, r2, #31
 8016ba2:	d501      	bpl.n	8016ba8 <_printf_float+0x1a8>
 8016ba4:	3302      	adds	r3, #2
 8016ba6:	e7f4      	b.n	8016b92 <_printf_float+0x192>
 8016ba8:	2301      	movs	r3, #1
 8016baa:	e7f2      	b.n	8016b92 <_printf_float+0x192>
 8016bac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016bb2:	4299      	cmp	r1, r3
 8016bb4:	db05      	blt.n	8016bc2 <_printf_float+0x1c2>
 8016bb6:	6823      	ldr	r3, [r4, #0]
 8016bb8:	6121      	str	r1, [r4, #16]
 8016bba:	07d8      	lsls	r0, r3, #31
 8016bbc:	d5ea      	bpl.n	8016b94 <_printf_float+0x194>
 8016bbe:	1c4b      	adds	r3, r1, #1
 8016bc0:	e7e7      	b.n	8016b92 <_printf_float+0x192>
 8016bc2:	2900      	cmp	r1, #0
 8016bc4:	bfd4      	ite	le
 8016bc6:	f1c1 0202 	rsble	r2, r1, #2
 8016bca:	2201      	movgt	r2, #1
 8016bcc:	4413      	add	r3, r2
 8016bce:	e7e0      	b.n	8016b92 <_printf_float+0x192>
 8016bd0:	6823      	ldr	r3, [r4, #0]
 8016bd2:	055a      	lsls	r2, r3, #21
 8016bd4:	d407      	bmi.n	8016be6 <_printf_float+0x1e6>
 8016bd6:	6923      	ldr	r3, [r4, #16]
 8016bd8:	4642      	mov	r2, r8
 8016bda:	4631      	mov	r1, r6
 8016bdc:	4628      	mov	r0, r5
 8016bde:	47b8      	blx	r7
 8016be0:	3001      	adds	r0, #1
 8016be2:	d12b      	bne.n	8016c3c <_printf_float+0x23c>
 8016be4:	e767      	b.n	8016ab6 <_printf_float+0xb6>
 8016be6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016bea:	f240 80dd 	bls.w	8016da8 <_printf_float+0x3a8>
 8016bee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	f7e9 ff6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8016bfa:	2800      	cmp	r0, #0
 8016bfc:	d033      	beq.n	8016c66 <_printf_float+0x266>
 8016bfe:	4a37      	ldr	r2, [pc, #220]	@ (8016cdc <_printf_float+0x2dc>)
 8016c00:	2301      	movs	r3, #1
 8016c02:	4631      	mov	r1, r6
 8016c04:	4628      	mov	r0, r5
 8016c06:	47b8      	blx	r7
 8016c08:	3001      	adds	r0, #1
 8016c0a:	f43f af54 	beq.w	8016ab6 <_printf_float+0xb6>
 8016c0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016c12:	4543      	cmp	r3, r8
 8016c14:	db02      	blt.n	8016c1c <_printf_float+0x21c>
 8016c16:	6823      	ldr	r3, [r4, #0]
 8016c18:	07d8      	lsls	r0, r3, #31
 8016c1a:	d50f      	bpl.n	8016c3c <_printf_float+0x23c>
 8016c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c20:	4631      	mov	r1, r6
 8016c22:	4628      	mov	r0, r5
 8016c24:	47b8      	blx	r7
 8016c26:	3001      	adds	r0, #1
 8016c28:	f43f af45 	beq.w	8016ab6 <_printf_float+0xb6>
 8016c2c:	f04f 0900 	mov.w	r9, #0
 8016c30:	f108 38ff 	add.w	r8, r8, #4294967295
 8016c34:	f104 0a1a 	add.w	sl, r4, #26
 8016c38:	45c8      	cmp	r8, r9
 8016c3a:	dc09      	bgt.n	8016c50 <_printf_float+0x250>
 8016c3c:	6823      	ldr	r3, [r4, #0]
 8016c3e:	079b      	lsls	r3, r3, #30
 8016c40:	f100 8103 	bmi.w	8016e4a <_printf_float+0x44a>
 8016c44:	68e0      	ldr	r0, [r4, #12]
 8016c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c48:	4298      	cmp	r0, r3
 8016c4a:	bfb8      	it	lt
 8016c4c:	4618      	movlt	r0, r3
 8016c4e:	e734      	b.n	8016aba <_printf_float+0xba>
 8016c50:	2301      	movs	r3, #1
 8016c52:	4652      	mov	r2, sl
 8016c54:	4631      	mov	r1, r6
 8016c56:	4628      	mov	r0, r5
 8016c58:	47b8      	blx	r7
 8016c5a:	3001      	adds	r0, #1
 8016c5c:	f43f af2b 	beq.w	8016ab6 <_printf_float+0xb6>
 8016c60:	f109 0901 	add.w	r9, r9, #1
 8016c64:	e7e8      	b.n	8016c38 <_printf_float+0x238>
 8016c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	dc39      	bgt.n	8016ce0 <_printf_float+0x2e0>
 8016c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8016cdc <_printf_float+0x2dc>)
 8016c6e:	2301      	movs	r3, #1
 8016c70:	4631      	mov	r1, r6
 8016c72:	4628      	mov	r0, r5
 8016c74:	47b8      	blx	r7
 8016c76:	3001      	adds	r0, #1
 8016c78:	f43f af1d 	beq.w	8016ab6 <_printf_float+0xb6>
 8016c7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016c80:	ea59 0303 	orrs.w	r3, r9, r3
 8016c84:	d102      	bne.n	8016c8c <_printf_float+0x28c>
 8016c86:	6823      	ldr	r3, [r4, #0]
 8016c88:	07d9      	lsls	r1, r3, #31
 8016c8a:	d5d7      	bpl.n	8016c3c <_printf_float+0x23c>
 8016c8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c90:	4631      	mov	r1, r6
 8016c92:	4628      	mov	r0, r5
 8016c94:	47b8      	blx	r7
 8016c96:	3001      	adds	r0, #1
 8016c98:	f43f af0d 	beq.w	8016ab6 <_printf_float+0xb6>
 8016c9c:	f04f 0a00 	mov.w	sl, #0
 8016ca0:	f104 0b1a 	add.w	fp, r4, #26
 8016ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ca6:	425b      	negs	r3, r3
 8016ca8:	4553      	cmp	r3, sl
 8016caa:	dc01      	bgt.n	8016cb0 <_printf_float+0x2b0>
 8016cac:	464b      	mov	r3, r9
 8016cae:	e793      	b.n	8016bd8 <_printf_float+0x1d8>
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	465a      	mov	r2, fp
 8016cb4:	4631      	mov	r1, r6
 8016cb6:	4628      	mov	r0, r5
 8016cb8:	47b8      	blx	r7
 8016cba:	3001      	adds	r0, #1
 8016cbc:	f43f aefb 	beq.w	8016ab6 <_printf_float+0xb6>
 8016cc0:	f10a 0a01 	add.w	sl, sl, #1
 8016cc4:	e7ee      	b.n	8016ca4 <_printf_float+0x2a4>
 8016cc6:	bf00      	nop
 8016cc8:	7fefffff 	.word	0x7fefffff
 8016ccc:	0801e064 	.word	0x0801e064
 8016cd0:	0801e068 	.word	0x0801e068
 8016cd4:	0801e06c 	.word	0x0801e06c
 8016cd8:	0801e070 	.word	0x0801e070
 8016cdc:	0801e074 	.word	0x0801e074
 8016ce0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016ce2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016ce6:	4553      	cmp	r3, sl
 8016ce8:	bfa8      	it	ge
 8016cea:	4653      	movge	r3, sl
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	4699      	mov	r9, r3
 8016cf0:	dc36      	bgt.n	8016d60 <_printf_float+0x360>
 8016cf2:	f04f 0b00 	mov.w	fp, #0
 8016cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016cfa:	f104 021a 	add.w	r2, r4, #26
 8016cfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016d00:	9306      	str	r3, [sp, #24]
 8016d02:	eba3 0309 	sub.w	r3, r3, r9
 8016d06:	455b      	cmp	r3, fp
 8016d08:	dc31      	bgt.n	8016d6e <_printf_float+0x36e>
 8016d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d0c:	459a      	cmp	sl, r3
 8016d0e:	dc3a      	bgt.n	8016d86 <_printf_float+0x386>
 8016d10:	6823      	ldr	r3, [r4, #0]
 8016d12:	07da      	lsls	r2, r3, #31
 8016d14:	d437      	bmi.n	8016d86 <_printf_float+0x386>
 8016d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d18:	ebaa 0903 	sub.w	r9, sl, r3
 8016d1c:	9b06      	ldr	r3, [sp, #24]
 8016d1e:	ebaa 0303 	sub.w	r3, sl, r3
 8016d22:	4599      	cmp	r9, r3
 8016d24:	bfa8      	it	ge
 8016d26:	4699      	movge	r9, r3
 8016d28:	f1b9 0f00 	cmp.w	r9, #0
 8016d2c:	dc33      	bgt.n	8016d96 <_printf_float+0x396>
 8016d2e:	f04f 0800 	mov.w	r8, #0
 8016d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016d36:	f104 0b1a 	add.w	fp, r4, #26
 8016d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d3c:	ebaa 0303 	sub.w	r3, sl, r3
 8016d40:	eba3 0309 	sub.w	r3, r3, r9
 8016d44:	4543      	cmp	r3, r8
 8016d46:	f77f af79 	ble.w	8016c3c <_printf_float+0x23c>
 8016d4a:	2301      	movs	r3, #1
 8016d4c:	465a      	mov	r2, fp
 8016d4e:	4631      	mov	r1, r6
 8016d50:	4628      	mov	r0, r5
 8016d52:	47b8      	blx	r7
 8016d54:	3001      	adds	r0, #1
 8016d56:	f43f aeae 	beq.w	8016ab6 <_printf_float+0xb6>
 8016d5a:	f108 0801 	add.w	r8, r8, #1
 8016d5e:	e7ec      	b.n	8016d3a <_printf_float+0x33a>
 8016d60:	4642      	mov	r2, r8
 8016d62:	4631      	mov	r1, r6
 8016d64:	4628      	mov	r0, r5
 8016d66:	47b8      	blx	r7
 8016d68:	3001      	adds	r0, #1
 8016d6a:	d1c2      	bne.n	8016cf2 <_printf_float+0x2f2>
 8016d6c:	e6a3      	b.n	8016ab6 <_printf_float+0xb6>
 8016d6e:	2301      	movs	r3, #1
 8016d70:	4631      	mov	r1, r6
 8016d72:	4628      	mov	r0, r5
 8016d74:	9206      	str	r2, [sp, #24]
 8016d76:	47b8      	blx	r7
 8016d78:	3001      	adds	r0, #1
 8016d7a:	f43f ae9c 	beq.w	8016ab6 <_printf_float+0xb6>
 8016d7e:	9a06      	ldr	r2, [sp, #24]
 8016d80:	f10b 0b01 	add.w	fp, fp, #1
 8016d84:	e7bb      	b.n	8016cfe <_printf_float+0x2fe>
 8016d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016d8a:	4631      	mov	r1, r6
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	47b8      	blx	r7
 8016d90:	3001      	adds	r0, #1
 8016d92:	d1c0      	bne.n	8016d16 <_printf_float+0x316>
 8016d94:	e68f      	b.n	8016ab6 <_printf_float+0xb6>
 8016d96:	9a06      	ldr	r2, [sp, #24]
 8016d98:	464b      	mov	r3, r9
 8016d9a:	4442      	add	r2, r8
 8016d9c:	4631      	mov	r1, r6
 8016d9e:	4628      	mov	r0, r5
 8016da0:	47b8      	blx	r7
 8016da2:	3001      	adds	r0, #1
 8016da4:	d1c3      	bne.n	8016d2e <_printf_float+0x32e>
 8016da6:	e686      	b.n	8016ab6 <_printf_float+0xb6>
 8016da8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016dac:	f1ba 0f01 	cmp.w	sl, #1
 8016db0:	dc01      	bgt.n	8016db6 <_printf_float+0x3b6>
 8016db2:	07db      	lsls	r3, r3, #31
 8016db4:	d536      	bpl.n	8016e24 <_printf_float+0x424>
 8016db6:	2301      	movs	r3, #1
 8016db8:	4642      	mov	r2, r8
 8016dba:	4631      	mov	r1, r6
 8016dbc:	4628      	mov	r0, r5
 8016dbe:	47b8      	blx	r7
 8016dc0:	3001      	adds	r0, #1
 8016dc2:	f43f ae78 	beq.w	8016ab6 <_printf_float+0xb6>
 8016dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016dca:	4631      	mov	r1, r6
 8016dcc:	4628      	mov	r0, r5
 8016dce:	47b8      	blx	r7
 8016dd0:	3001      	adds	r0, #1
 8016dd2:	f43f ae70 	beq.w	8016ab6 <_printf_float+0xb6>
 8016dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016dda:	2200      	movs	r2, #0
 8016ddc:	2300      	movs	r3, #0
 8016dde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016de2:	f7e9 fe79 	bl	8000ad8 <__aeabi_dcmpeq>
 8016de6:	b9c0      	cbnz	r0, 8016e1a <_printf_float+0x41a>
 8016de8:	4653      	mov	r3, sl
 8016dea:	f108 0201 	add.w	r2, r8, #1
 8016dee:	4631      	mov	r1, r6
 8016df0:	4628      	mov	r0, r5
 8016df2:	47b8      	blx	r7
 8016df4:	3001      	adds	r0, #1
 8016df6:	d10c      	bne.n	8016e12 <_printf_float+0x412>
 8016df8:	e65d      	b.n	8016ab6 <_printf_float+0xb6>
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	465a      	mov	r2, fp
 8016dfe:	4631      	mov	r1, r6
 8016e00:	4628      	mov	r0, r5
 8016e02:	47b8      	blx	r7
 8016e04:	3001      	adds	r0, #1
 8016e06:	f43f ae56 	beq.w	8016ab6 <_printf_float+0xb6>
 8016e0a:	f108 0801 	add.w	r8, r8, #1
 8016e0e:	45d0      	cmp	r8, sl
 8016e10:	dbf3      	blt.n	8016dfa <_printf_float+0x3fa>
 8016e12:	464b      	mov	r3, r9
 8016e14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016e18:	e6df      	b.n	8016bda <_printf_float+0x1da>
 8016e1a:	f04f 0800 	mov.w	r8, #0
 8016e1e:	f104 0b1a 	add.w	fp, r4, #26
 8016e22:	e7f4      	b.n	8016e0e <_printf_float+0x40e>
 8016e24:	2301      	movs	r3, #1
 8016e26:	4642      	mov	r2, r8
 8016e28:	e7e1      	b.n	8016dee <_printf_float+0x3ee>
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	464a      	mov	r2, r9
 8016e2e:	4631      	mov	r1, r6
 8016e30:	4628      	mov	r0, r5
 8016e32:	47b8      	blx	r7
 8016e34:	3001      	adds	r0, #1
 8016e36:	f43f ae3e 	beq.w	8016ab6 <_printf_float+0xb6>
 8016e3a:	f108 0801 	add.w	r8, r8, #1
 8016e3e:	68e3      	ldr	r3, [r4, #12]
 8016e40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016e42:	1a5b      	subs	r3, r3, r1
 8016e44:	4543      	cmp	r3, r8
 8016e46:	dcf0      	bgt.n	8016e2a <_printf_float+0x42a>
 8016e48:	e6fc      	b.n	8016c44 <_printf_float+0x244>
 8016e4a:	f04f 0800 	mov.w	r8, #0
 8016e4e:	f104 0919 	add.w	r9, r4, #25
 8016e52:	e7f4      	b.n	8016e3e <_printf_float+0x43e>

08016e54 <_printf_common>:
 8016e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e58:	4616      	mov	r6, r2
 8016e5a:	4698      	mov	r8, r3
 8016e5c:	688a      	ldr	r2, [r1, #8]
 8016e5e:	690b      	ldr	r3, [r1, #16]
 8016e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016e64:	4293      	cmp	r3, r2
 8016e66:	bfb8      	it	lt
 8016e68:	4613      	movlt	r3, r2
 8016e6a:	6033      	str	r3, [r6, #0]
 8016e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016e70:	4607      	mov	r7, r0
 8016e72:	460c      	mov	r4, r1
 8016e74:	b10a      	cbz	r2, 8016e7a <_printf_common+0x26>
 8016e76:	3301      	adds	r3, #1
 8016e78:	6033      	str	r3, [r6, #0]
 8016e7a:	6823      	ldr	r3, [r4, #0]
 8016e7c:	0699      	lsls	r1, r3, #26
 8016e7e:	bf42      	ittt	mi
 8016e80:	6833      	ldrmi	r3, [r6, #0]
 8016e82:	3302      	addmi	r3, #2
 8016e84:	6033      	strmi	r3, [r6, #0]
 8016e86:	6825      	ldr	r5, [r4, #0]
 8016e88:	f015 0506 	ands.w	r5, r5, #6
 8016e8c:	d106      	bne.n	8016e9c <_printf_common+0x48>
 8016e8e:	f104 0a19 	add.w	sl, r4, #25
 8016e92:	68e3      	ldr	r3, [r4, #12]
 8016e94:	6832      	ldr	r2, [r6, #0]
 8016e96:	1a9b      	subs	r3, r3, r2
 8016e98:	42ab      	cmp	r3, r5
 8016e9a:	dc26      	bgt.n	8016eea <_printf_common+0x96>
 8016e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016ea0:	6822      	ldr	r2, [r4, #0]
 8016ea2:	3b00      	subs	r3, #0
 8016ea4:	bf18      	it	ne
 8016ea6:	2301      	movne	r3, #1
 8016ea8:	0692      	lsls	r2, r2, #26
 8016eaa:	d42b      	bmi.n	8016f04 <_printf_common+0xb0>
 8016eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016eb0:	4641      	mov	r1, r8
 8016eb2:	4638      	mov	r0, r7
 8016eb4:	47c8      	blx	r9
 8016eb6:	3001      	adds	r0, #1
 8016eb8:	d01e      	beq.n	8016ef8 <_printf_common+0xa4>
 8016eba:	6823      	ldr	r3, [r4, #0]
 8016ebc:	6922      	ldr	r2, [r4, #16]
 8016ebe:	f003 0306 	and.w	r3, r3, #6
 8016ec2:	2b04      	cmp	r3, #4
 8016ec4:	bf02      	ittt	eq
 8016ec6:	68e5      	ldreq	r5, [r4, #12]
 8016ec8:	6833      	ldreq	r3, [r6, #0]
 8016eca:	1aed      	subeq	r5, r5, r3
 8016ecc:	68a3      	ldr	r3, [r4, #8]
 8016ece:	bf0c      	ite	eq
 8016ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016ed4:	2500      	movne	r5, #0
 8016ed6:	4293      	cmp	r3, r2
 8016ed8:	bfc4      	itt	gt
 8016eda:	1a9b      	subgt	r3, r3, r2
 8016edc:	18ed      	addgt	r5, r5, r3
 8016ede:	2600      	movs	r6, #0
 8016ee0:	341a      	adds	r4, #26
 8016ee2:	42b5      	cmp	r5, r6
 8016ee4:	d11a      	bne.n	8016f1c <_printf_common+0xc8>
 8016ee6:	2000      	movs	r0, #0
 8016ee8:	e008      	b.n	8016efc <_printf_common+0xa8>
 8016eea:	2301      	movs	r3, #1
 8016eec:	4652      	mov	r2, sl
 8016eee:	4641      	mov	r1, r8
 8016ef0:	4638      	mov	r0, r7
 8016ef2:	47c8      	blx	r9
 8016ef4:	3001      	adds	r0, #1
 8016ef6:	d103      	bne.n	8016f00 <_printf_common+0xac>
 8016ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8016efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f00:	3501      	adds	r5, #1
 8016f02:	e7c6      	b.n	8016e92 <_printf_common+0x3e>
 8016f04:	18e1      	adds	r1, r4, r3
 8016f06:	1c5a      	adds	r2, r3, #1
 8016f08:	2030      	movs	r0, #48	@ 0x30
 8016f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016f0e:	4422      	add	r2, r4
 8016f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016f18:	3302      	adds	r3, #2
 8016f1a:	e7c7      	b.n	8016eac <_printf_common+0x58>
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	4622      	mov	r2, r4
 8016f20:	4641      	mov	r1, r8
 8016f22:	4638      	mov	r0, r7
 8016f24:	47c8      	blx	r9
 8016f26:	3001      	adds	r0, #1
 8016f28:	d0e6      	beq.n	8016ef8 <_printf_common+0xa4>
 8016f2a:	3601      	adds	r6, #1
 8016f2c:	e7d9      	b.n	8016ee2 <_printf_common+0x8e>
	...

08016f30 <_printf_i>:
 8016f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016f34:	7e0f      	ldrb	r7, [r1, #24]
 8016f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016f38:	2f78      	cmp	r7, #120	@ 0x78
 8016f3a:	4691      	mov	r9, r2
 8016f3c:	4680      	mov	r8, r0
 8016f3e:	460c      	mov	r4, r1
 8016f40:	469a      	mov	sl, r3
 8016f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016f46:	d807      	bhi.n	8016f58 <_printf_i+0x28>
 8016f48:	2f62      	cmp	r7, #98	@ 0x62
 8016f4a:	d80a      	bhi.n	8016f62 <_printf_i+0x32>
 8016f4c:	2f00      	cmp	r7, #0
 8016f4e:	f000 80d2 	beq.w	80170f6 <_printf_i+0x1c6>
 8016f52:	2f58      	cmp	r7, #88	@ 0x58
 8016f54:	f000 80b9 	beq.w	80170ca <_printf_i+0x19a>
 8016f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016f60:	e03a      	b.n	8016fd8 <_printf_i+0xa8>
 8016f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016f66:	2b15      	cmp	r3, #21
 8016f68:	d8f6      	bhi.n	8016f58 <_printf_i+0x28>
 8016f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8016f70 <_printf_i+0x40>)
 8016f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016f70:	08016fc9 	.word	0x08016fc9
 8016f74:	08016fdd 	.word	0x08016fdd
 8016f78:	08016f59 	.word	0x08016f59
 8016f7c:	08016f59 	.word	0x08016f59
 8016f80:	08016f59 	.word	0x08016f59
 8016f84:	08016f59 	.word	0x08016f59
 8016f88:	08016fdd 	.word	0x08016fdd
 8016f8c:	08016f59 	.word	0x08016f59
 8016f90:	08016f59 	.word	0x08016f59
 8016f94:	08016f59 	.word	0x08016f59
 8016f98:	08016f59 	.word	0x08016f59
 8016f9c:	080170dd 	.word	0x080170dd
 8016fa0:	08017007 	.word	0x08017007
 8016fa4:	08017097 	.word	0x08017097
 8016fa8:	08016f59 	.word	0x08016f59
 8016fac:	08016f59 	.word	0x08016f59
 8016fb0:	080170ff 	.word	0x080170ff
 8016fb4:	08016f59 	.word	0x08016f59
 8016fb8:	08017007 	.word	0x08017007
 8016fbc:	08016f59 	.word	0x08016f59
 8016fc0:	08016f59 	.word	0x08016f59
 8016fc4:	0801709f 	.word	0x0801709f
 8016fc8:	6833      	ldr	r3, [r6, #0]
 8016fca:	1d1a      	adds	r2, r3, #4
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	6032      	str	r2, [r6, #0]
 8016fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016fd8:	2301      	movs	r3, #1
 8016fda:	e09d      	b.n	8017118 <_printf_i+0x1e8>
 8016fdc:	6833      	ldr	r3, [r6, #0]
 8016fde:	6820      	ldr	r0, [r4, #0]
 8016fe0:	1d19      	adds	r1, r3, #4
 8016fe2:	6031      	str	r1, [r6, #0]
 8016fe4:	0606      	lsls	r6, r0, #24
 8016fe6:	d501      	bpl.n	8016fec <_printf_i+0xbc>
 8016fe8:	681d      	ldr	r5, [r3, #0]
 8016fea:	e003      	b.n	8016ff4 <_printf_i+0xc4>
 8016fec:	0645      	lsls	r5, r0, #25
 8016fee:	d5fb      	bpl.n	8016fe8 <_printf_i+0xb8>
 8016ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016ff4:	2d00      	cmp	r5, #0
 8016ff6:	da03      	bge.n	8017000 <_printf_i+0xd0>
 8016ff8:	232d      	movs	r3, #45	@ 0x2d
 8016ffa:	426d      	negs	r5, r5
 8016ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017000:	4859      	ldr	r0, [pc, #356]	@ (8017168 <_printf_i+0x238>)
 8017002:	230a      	movs	r3, #10
 8017004:	e011      	b.n	801702a <_printf_i+0xfa>
 8017006:	6821      	ldr	r1, [r4, #0]
 8017008:	6833      	ldr	r3, [r6, #0]
 801700a:	0608      	lsls	r0, r1, #24
 801700c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017010:	d402      	bmi.n	8017018 <_printf_i+0xe8>
 8017012:	0649      	lsls	r1, r1, #25
 8017014:	bf48      	it	mi
 8017016:	b2ad      	uxthmi	r5, r5
 8017018:	2f6f      	cmp	r7, #111	@ 0x6f
 801701a:	4853      	ldr	r0, [pc, #332]	@ (8017168 <_printf_i+0x238>)
 801701c:	6033      	str	r3, [r6, #0]
 801701e:	bf14      	ite	ne
 8017020:	230a      	movne	r3, #10
 8017022:	2308      	moveq	r3, #8
 8017024:	2100      	movs	r1, #0
 8017026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801702a:	6866      	ldr	r6, [r4, #4]
 801702c:	60a6      	str	r6, [r4, #8]
 801702e:	2e00      	cmp	r6, #0
 8017030:	bfa2      	ittt	ge
 8017032:	6821      	ldrge	r1, [r4, #0]
 8017034:	f021 0104 	bicge.w	r1, r1, #4
 8017038:	6021      	strge	r1, [r4, #0]
 801703a:	b90d      	cbnz	r5, 8017040 <_printf_i+0x110>
 801703c:	2e00      	cmp	r6, #0
 801703e:	d04b      	beq.n	80170d8 <_printf_i+0x1a8>
 8017040:	4616      	mov	r6, r2
 8017042:	fbb5 f1f3 	udiv	r1, r5, r3
 8017046:	fb03 5711 	mls	r7, r3, r1, r5
 801704a:	5dc7      	ldrb	r7, [r0, r7]
 801704c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017050:	462f      	mov	r7, r5
 8017052:	42bb      	cmp	r3, r7
 8017054:	460d      	mov	r5, r1
 8017056:	d9f4      	bls.n	8017042 <_printf_i+0x112>
 8017058:	2b08      	cmp	r3, #8
 801705a:	d10b      	bne.n	8017074 <_printf_i+0x144>
 801705c:	6823      	ldr	r3, [r4, #0]
 801705e:	07df      	lsls	r7, r3, #31
 8017060:	d508      	bpl.n	8017074 <_printf_i+0x144>
 8017062:	6923      	ldr	r3, [r4, #16]
 8017064:	6861      	ldr	r1, [r4, #4]
 8017066:	4299      	cmp	r1, r3
 8017068:	bfde      	ittt	le
 801706a:	2330      	movle	r3, #48	@ 0x30
 801706c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017074:	1b92      	subs	r2, r2, r6
 8017076:	6122      	str	r2, [r4, #16]
 8017078:	f8cd a000 	str.w	sl, [sp]
 801707c:	464b      	mov	r3, r9
 801707e:	aa03      	add	r2, sp, #12
 8017080:	4621      	mov	r1, r4
 8017082:	4640      	mov	r0, r8
 8017084:	f7ff fee6 	bl	8016e54 <_printf_common>
 8017088:	3001      	adds	r0, #1
 801708a:	d14a      	bne.n	8017122 <_printf_i+0x1f2>
 801708c:	f04f 30ff 	mov.w	r0, #4294967295
 8017090:	b004      	add	sp, #16
 8017092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017096:	6823      	ldr	r3, [r4, #0]
 8017098:	f043 0320 	orr.w	r3, r3, #32
 801709c:	6023      	str	r3, [r4, #0]
 801709e:	4833      	ldr	r0, [pc, #204]	@ (801716c <_printf_i+0x23c>)
 80170a0:	2778      	movs	r7, #120	@ 0x78
 80170a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80170a6:	6823      	ldr	r3, [r4, #0]
 80170a8:	6831      	ldr	r1, [r6, #0]
 80170aa:	061f      	lsls	r7, r3, #24
 80170ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80170b0:	d402      	bmi.n	80170b8 <_printf_i+0x188>
 80170b2:	065f      	lsls	r7, r3, #25
 80170b4:	bf48      	it	mi
 80170b6:	b2ad      	uxthmi	r5, r5
 80170b8:	6031      	str	r1, [r6, #0]
 80170ba:	07d9      	lsls	r1, r3, #31
 80170bc:	bf44      	itt	mi
 80170be:	f043 0320 	orrmi.w	r3, r3, #32
 80170c2:	6023      	strmi	r3, [r4, #0]
 80170c4:	b11d      	cbz	r5, 80170ce <_printf_i+0x19e>
 80170c6:	2310      	movs	r3, #16
 80170c8:	e7ac      	b.n	8017024 <_printf_i+0xf4>
 80170ca:	4827      	ldr	r0, [pc, #156]	@ (8017168 <_printf_i+0x238>)
 80170cc:	e7e9      	b.n	80170a2 <_printf_i+0x172>
 80170ce:	6823      	ldr	r3, [r4, #0]
 80170d0:	f023 0320 	bic.w	r3, r3, #32
 80170d4:	6023      	str	r3, [r4, #0]
 80170d6:	e7f6      	b.n	80170c6 <_printf_i+0x196>
 80170d8:	4616      	mov	r6, r2
 80170da:	e7bd      	b.n	8017058 <_printf_i+0x128>
 80170dc:	6833      	ldr	r3, [r6, #0]
 80170de:	6825      	ldr	r5, [r4, #0]
 80170e0:	6961      	ldr	r1, [r4, #20]
 80170e2:	1d18      	adds	r0, r3, #4
 80170e4:	6030      	str	r0, [r6, #0]
 80170e6:	062e      	lsls	r6, r5, #24
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	d501      	bpl.n	80170f0 <_printf_i+0x1c0>
 80170ec:	6019      	str	r1, [r3, #0]
 80170ee:	e002      	b.n	80170f6 <_printf_i+0x1c6>
 80170f0:	0668      	lsls	r0, r5, #25
 80170f2:	d5fb      	bpl.n	80170ec <_printf_i+0x1bc>
 80170f4:	8019      	strh	r1, [r3, #0]
 80170f6:	2300      	movs	r3, #0
 80170f8:	6123      	str	r3, [r4, #16]
 80170fa:	4616      	mov	r6, r2
 80170fc:	e7bc      	b.n	8017078 <_printf_i+0x148>
 80170fe:	6833      	ldr	r3, [r6, #0]
 8017100:	1d1a      	adds	r2, r3, #4
 8017102:	6032      	str	r2, [r6, #0]
 8017104:	681e      	ldr	r6, [r3, #0]
 8017106:	6862      	ldr	r2, [r4, #4]
 8017108:	2100      	movs	r1, #0
 801710a:	4630      	mov	r0, r6
 801710c:	f7e9 f868 	bl	80001e0 <memchr>
 8017110:	b108      	cbz	r0, 8017116 <_printf_i+0x1e6>
 8017112:	1b80      	subs	r0, r0, r6
 8017114:	6060      	str	r0, [r4, #4]
 8017116:	6863      	ldr	r3, [r4, #4]
 8017118:	6123      	str	r3, [r4, #16]
 801711a:	2300      	movs	r3, #0
 801711c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017120:	e7aa      	b.n	8017078 <_printf_i+0x148>
 8017122:	6923      	ldr	r3, [r4, #16]
 8017124:	4632      	mov	r2, r6
 8017126:	4649      	mov	r1, r9
 8017128:	4640      	mov	r0, r8
 801712a:	47d0      	blx	sl
 801712c:	3001      	adds	r0, #1
 801712e:	d0ad      	beq.n	801708c <_printf_i+0x15c>
 8017130:	6823      	ldr	r3, [r4, #0]
 8017132:	079b      	lsls	r3, r3, #30
 8017134:	d413      	bmi.n	801715e <_printf_i+0x22e>
 8017136:	68e0      	ldr	r0, [r4, #12]
 8017138:	9b03      	ldr	r3, [sp, #12]
 801713a:	4298      	cmp	r0, r3
 801713c:	bfb8      	it	lt
 801713e:	4618      	movlt	r0, r3
 8017140:	e7a6      	b.n	8017090 <_printf_i+0x160>
 8017142:	2301      	movs	r3, #1
 8017144:	4632      	mov	r2, r6
 8017146:	4649      	mov	r1, r9
 8017148:	4640      	mov	r0, r8
 801714a:	47d0      	blx	sl
 801714c:	3001      	adds	r0, #1
 801714e:	d09d      	beq.n	801708c <_printf_i+0x15c>
 8017150:	3501      	adds	r5, #1
 8017152:	68e3      	ldr	r3, [r4, #12]
 8017154:	9903      	ldr	r1, [sp, #12]
 8017156:	1a5b      	subs	r3, r3, r1
 8017158:	42ab      	cmp	r3, r5
 801715a:	dcf2      	bgt.n	8017142 <_printf_i+0x212>
 801715c:	e7eb      	b.n	8017136 <_printf_i+0x206>
 801715e:	2500      	movs	r5, #0
 8017160:	f104 0619 	add.w	r6, r4, #25
 8017164:	e7f5      	b.n	8017152 <_printf_i+0x222>
 8017166:	bf00      	nop
 8017168:	0801e076 	.word	0x0801e076
 801716c:	0801e087 	.word	0x0801e087

08017170 <std>:
 8017170:	2300      	movs	r3, #0
 8017172:	b510      	push	{r4, lr}
 8017174:	4604      	mov	r4, r0
 8017176:	e9c0 3300 	strd	r3, r3, [r0]
 801717a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801717e:	6083      	str	r3, [r0, #8]
 8017180:	8181      	strh	r1, [r0, #12]
 8017182:	6643      	str	r3, [r0, #100]	@ 0x64
 8017184:	81c2      	strh	r2, [r0, #14]
 8017186:	6183      	str	r3, [r0, #24]
 8017188:	4619      	mov	r1, r3
 801718a:	2208      	movs	r2, #8
 801718c:	305c      	adds	r0, #92	@ 0x5c
 801718e:	f000 f914 	bl	80173ba <memset>
 8017192:	4b0d      	ldr	r3, [pc, #52]	@ (80171c8 <std+0x58>)
 8017194:	6263      	str	r3, [r4, #36]	@ 0x24
 8017196:	4b0d      	ldr	r3, [pc, #52]	@ (80171cc <std+0x5c>)
 8017198:	62a3      	str	r3, [r4, #40]	@ 0x28
 801719a:	4b0d      	ldr	r3, [pc, #52]	@ (80171d0 <std+0x60>)
 801719c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801719e:	4b0d      	ldr	r3, [pc, #52]	@ (80171d4 <std+0x64>)
 80171a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80171a2:	4b0d      	ldr	r3, [pc, #52]	@ (80171d8 <std+0x68>)
 80171a4:	6224      	str	r4, [r4, #32]
 80171a6:	429c      	cmp	r4, r3
 80171a8:	d006      	beq.n	80171b8 <std+0x48>
 80171aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80171ae:	4294      	cmp	r4, r2
 80171b0:	d002      	beq.n	80171b8 <std+0x48>
 80171b2:	33d0      	adds	r3, #208	@ 0xd0
 80171b4:	429c      	cmp	r4, r3
 80171b6:	d105      	bne.n	80171c4 <std+0x54>
 80171b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80171bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171c0:	f000 b988 	b.w	80174d4 <__retarget_lock_init_recursive>
 80171c4:	bd10      	pop	{r4, pc}
 80171c6:	bf00      	nop
 80171c8:	08017335 	.word	0x08017335
 80171cc:	08017357 	.word	0x08017357
 80171d0:	0801738f 	.word	0x0801738f
 80171d4:	080173b3 	.word	0x080173b3
 80171d8:	200034fc 	.word	0x200034fc

080171dc <stdio_exit_handler>:
 80171dc:	4a02      	ldr	r2, [pc, #8]	@ (80171e8 <stdio_exit_handler+0xc>)
 80171de:	4903      	ldr	r1, [pc, #12]	@ (80171ec <stdio_exit_handler+0x10>)
 80171e0:	4803      	ldr	r0, [pc, #12]	@ (80171f0 <stdio_exit_handler+0x14>)
 80171e2:	f000 b869 	b.w	80172b8 <_fwalk_sglue>
 80171e6:	bf00      	nop
 80171e8:	200001cc 	.word	0x200001cc
 80171ec:	08018d51 	.word	0x08018d51
 80171f0:	200001dc 	.word	0x200001dc

080171f4 <cleanup_stdio>:
 80171f4:	6841      	ldr	r1, [r0, #4]
 80171f6:	4b0c      	ldr	r3, [pc, #48]	@ (8017228 <cleanup_stdio+0x34>)
 80171f8:	4299      	cmp	r1, r3
 80171fa:	b510      	push	{r4, lr}
 80171fc:	4604      	mov	r4, r0
 80171fe:	d001      	beq.n	8017204 <cleanup_stdio+0x10>
 8017200:	f001 fda6 	bl	8018d50 <_fflush_r>
 8017204:	68a1      	ldr	r1, [r4, #8]
 8017206:	4b09      	ldr	r3, [pc, #36]	@ (801722c <cleanup_stdio+0x38>)
 8017208:	4299      	cmp	r1, r3
 801720a:	d002      	beq.n	8017212 <cleanup_stdio+0x1e>
 801720c:	4620      	mov	r0, r4
 801720e:	f001 fd9f 	bl	8018d50 <_fflush_r>
 8017212:	68e1      	ldr	r1, [r4, #12]
 8017214:	4b06      	ldr	r3, [pc, #24]	@ (8017230 <cleanup_stdio+0x3c>)
 8017216:	4299      	cmp	r1, r3
 8017218:	d004      	beq.n	8017224 <cleanup_stdio+0x30>
 801721a:	4620      	mov	r0, r4
 801721c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017220:	f001 bd96 	b.w	8018d50 <_fflush_r>
 8017224:	bd10      	pop	{r4, pc}
 8017226:	bf00      	nop
 8017228:	200034fc 	.word	0x200034fc
 801722c:	20003564 	.word	0x20003564
 8017230:	200035cc 	.word	0x200035cc

08017234 <global_stdio_init.part.0>:
 8017234:	b510      	push	{r4, lr}
 8017236:	4b0b      	ldr	r3, [pc, #44]	@ (8017264 <global_stdio_init.part.0+0x30>)
 8017238:	4c0b      	ldr	r4, [pc, #44]	@ (8017268 <global_stdio_init.part.0+0x34>)
 801723a:	4a0c      	ldr	r2, [pc, #48]	@ (801726c <global_stdio_init.part.0+0x38>)
 801723c:	601a      	str	r2, [r3, #0]
 801723e:	4620      	mov	r0, r4
 8017240:	2200      	movs	r2, #0
 8017242:	2104      	movs	r1, #4
 8017244:	f7ff ff94 	bl	8017170 <std>
 8017248:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801724c:	2201      	movs	r2, #1
 801724e:	2109      	movs	r1, #9
 8017250:	f7ff ff8e 	bl	8017170 <std>
 8017254:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017258:	2202      	movs	r2, #2
 801725a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801725e:	2112      	movs	r1, #18
 8017260:	f7ff bf86 	b.w	8017170 <std>
 8017264:	20003634 	.word	0x20003634
 8017268:	200034fc 	.word	0x200034fc
 801726c:	080171dd 	.word	0x080171dd

08017270 <__sfp_lock_acquire>:
 8017270:	4801      	ldr	r0, [pc, #4]	@ (8017278 <__sfp_lock_acquire+0x8>)
 8017272:	f000 b930 	b.w	80174d6 <__retarget_lock_acquire_recursive>
 8017276:	bf00      	nop
 8017278:	2000363d 	.word	0x2000363d

0801727c <__sfp_lock_release>:
 801727c:	4801      	ldr	r0, [pc, #4]	@ (8017284 <__sfp_lock_release+0x8>)
 801727e:	f000 b92b 	b.w	80174d8 <__retarget_lock_release_recursive>
 8017282:	bf00      	nop
 8017284:	2000363d 	.word	0x2000363d

08017288 <__sinit>:
 8017288:	b510      	push	{r4, lr}
 801728a:	4604      	mov	r4, r0
 801728c:	f7ff fff0 	bl	8017270 <__sfp_lock_acquire>
 8017290:	6a23      	ldr	r3, [r4, #32]
 8017292:	b11b      	cbz	r3, 801729c <__sinit+0x14>
 8017294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017298:	f7ff bff0 	b.w	801727c <__sfp_lock_release>
 801729c:	4b04      	ldr	r3, [pc, #16]	@ (80172b0 <__sinit+0x28>)
 801729e:	6223      	str	r3, [r4, #32]
 80172a0:	4b04      	ldr	r3, [pc, #16]	@ (80172b4 <__sinit+0x2c>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d1f5      	bne.n	8017294 <__sinit+0xc>
 80172a8:	f7ff ffc4 	bl	8017234 <global_stdio_init.part.0>
 80172ac:	e7f2      	b.n	8017294 <__sinit+0xc>
 80172ae:	bf00      	nop
 80172b0:	080171f5 	.word	0x080171f5
 80172b4:	20003634 	.word	0x20003634

080172b8 <_fwalk_sglue>:
 80172b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172bc:	4607      	mov	r7, r0
 80172be:	4688      	mov	r8, r1
 80172c0:	4614      	mov	r4, r2
 80172c2:	2600      	movs	r6, #0
 80172c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80172c8:	f1b9 0901 	subs.w	r9, r9, #1
 80172cc:	d505      	bpl.n	80172da <_fwalk_sglue+0x22>
 80172ce:	6824      	ldr	r4, [r4, #0]
 80172d0:	2c00      	cmp	r4, #0
 80172d2:	d1f7      	bne.n	80172c4 <_fwalk_sglue+0xc>
 80172d4:	4630      	mov	r0, r6
 80172d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172da:	89ab      	ldrh	r3, [r5, #12]
 80172dc:	2b01      	cmp	r3, #1
 80172de:	d907      	bls.n	80172f0 <_fwalk_sglue+0x38>
 80172e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172e4:	3301      	adds	r3, #1
 80172e6:	d003      	beq.n	80172f0 <_fwalk_sglue+0x38>
 80172e8:	4629      	mov	r1, r5
 80172ea:	4638      	mov	r0, r7
 80172ec:	47c0      	blx	r8
 80172ee:	4306      	orrs	r6, r0
 80172f0:	3568      	adds	r5, #104	@ 0x68
 80172f2:	e7e9      	b.n	80172c8 <_fwalk_sglue+0x10>

080172f4 <siprintf>:
 80172f4:	b40e      	push	{r1, r2, r3}
 80172f6:	b500      	push	{lr}
 80172f8:	b09c      	sub	sp, #112	@ 0x70
 80172fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80172fc:	9002      	str	r0, [sp, #8]
 80172fe:	9006      	str	r0, [sp, #24]
 8017300:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017304:	4809      	ldr	r0, [pc, #36]	@ (801732c <siprintf+0x38>)
 8017306:	9107      	str	r1, [sp, #28]
 8017308:	9104      	str	r1, [sp, #16]
 801730a:	4909      	ldr	r1, [pc, #36]	@ (8017330 <siprintf+0x3c>)
 801730c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017310:	9105      	str	r1, [sp, #20]
 8017312:	6800      	ldr	r0, [r0, #0]
 8017314:	9301      	str	r3, [sp, #4]
 8017316:	a902      	add	r1, sp, #8
 8017318:	f001 fb9a 	bl	8018a50 <_svfiprintf_r>
 801731c:	9b02      	ldr	r3, [sp, #8]
 801731e:	2200      	movs	r2, #0
 8017320:	701a      	strb	r2, [r3, #0]
 8017322:	b01c      	add	sp, #112	@ 0x70
 8017324:	f85d eb04 	ldr.w	lr, [sp], #4
 8017328:	b003      	add	sp, #12
 801732a:	4770      	bx	lr
 801732c:	200001d8 	.word	0x200001d8
 8017330:	ffff0208 	.word	0xffff0208

08017334 <__sread>:
 8017334:	b510      	push	{r4, lr}
 8017336:	460c      	mov	r4, r1
 8017338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801733c:	f000 f86c 	bl	8017418 <_read_r>
 8017340:	2800      	cmp	r0, #0
 8017342:	bfab      	itete	ge
 8017344:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017346:	89a3      	ldrhlt	r3, [r4, #12]
 8017348:	181b      	addge	r3, r3, r0
 801734a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801734e:	bfac      	ite	ge
 8017350:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017352:	81a3      	strhlt	r3, [r4, #12]
 8017354:	bd10      	pop	{r4, pc}

08017356 <__swrite>:
 8017356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801735a:	461f      	mov	r7, r3
 801735c:	898b      	ldrh	r3, [r1, #12]
 801735e:	05db      	lsls	r3, r3, #23
 8017360:	4605      	mov	r5, r0
 8017362:	460c      	mov	r4, r1
 8017364:	4616      	mov	r6, r2
 8017366:	d505      	bpl.n	8017374 <__swrite+0x1e>
 8017368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801736c:	2302      	movs	r3, #2
 801736e:	2200      	movs	r2, #0
 8017370:	f000 f840 	bl	80173f4 <_lseek_r>
 8017374:	89a3      	ldrh	r3, [r4, #12]
 8017376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801737a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801737e:	81a3      	strh	r3, [r4, #12]
 8017380:	4632      	mov	r2, r6
 8017382:	463b      	mov	r3, r7
 8017384:	4628      	mov	r0, r5
 8017386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801738a:	f000 b867 	b.w	801745c <_write_r>

0801738e <__sseek>:
 801738e:	b510      	push	{r4, lr}
 8017390:	460c      	mov	r4, r1
 8017392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017396:	f000 f82d 	bl	80173f4 <_lseek_r>
 801739a:	1c43      	adds	r3, r0, #1
 801739c:	89a3      	ldrh	r3, [r4, #12]
 801739e:	bf15      	itete	ne
 80173a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80173a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80173a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80173aa:	81a3      	strheq	r3, [r4, #12]
 80173ac:	bf18      	it	ne
 80173ae:	81a3      	strhne	r3, [r4, #12]
 80173b0:	bd10      	pop	{r4, pc}

080173b2 <__sclose>:
 80173b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173b6:	f000 b80d 	b.w	80173d4 <_close_r>

080173ba <memset>:
 80173ba:	4402      	add	r2, r0
 80173bc:	4603      	mov	r3, r0
 80173be:	4293      	cmp	r3, r2
 80173c0:	d100      	bne.n	80173c4 <memset+0xa>
 80173c2:	4770      	bx	lr
 80173c4:	f803 1b01 	strb.w	r1, [r3], #1
 80173c8:	e7f9      	b.n	80173be <memset+0x4>
	...

080173cc <_localeconv_r>:
 80173cc:	4800      	ldr	r0, [pc, #0]	@ (80173d0 <_localeconv_r+0x4>)
 80173ce:	4770      	bx	lr
 80173d0:	20000318 	.word	0x20000318

080173d4 <_close_r>:
 80173d4:	b538      	push	{r3, r4, r5, lr}
 80173d6:	4d06      	ldr	r5, [pc, #24]	@ (80173f0 <_close_r+0x1c>)
 80173d8:	2300      	movs	r3, #0
 80173da:	4604      	mov	r4, r0
 80173dc:	4608      	mov	r0, r1
 80173de:	602b      	str	r3, [r5, #0]
 80173e0:	f7f6 fd78 	bl	800ded4 <_close>
 80173e4:	1c43      	adds	r3, r0, #1
 80173e6:	d102      	bne.n	80173ee <_close_r+0x1a>
 80173e8:	682b      	ldr	r3, [r5, #0]
 80173ea:	b103      	cbz	r3, 80173ee <_close_r+0x1a>
 80173ec:	6023      	str	r3, [r4, #0]
 80173ee:	bd38      	pop	{r3, r4, r5, pc}
 80173f0:	20003638 	.word	0x20003638

080173f4 <_lseek_r>:
 80173f4:	b538      	push	{r3, r4, r5, lr}
 80173f6:	4d07      	ldr	r5, [pc, #28]	@ (8017414 <_lseek_r+0x20>)
 80173f8:	4604      	mov	r4, r0
 80173fa:	4608      	mov	r0, r1
 80173fc:	4611      	mov	r1, r2
 80173fe:	2200      	movs	r2, #0
 8017400:	602a      	str	r2, [r5, #0]
 8017402:	461a      	mov	r2, r3
 8017404:	f7f6 fd8d 	bl	800df22 <_lseek>
 8017408:	1c43      	adds	r3, r0, #1
 801740a:	d102      	bne.n	8017412 <_lseek_r+0x1e>
 801740c:	682b      	ldr	r3, [r5, #0]
 801740e:	b103      	cbz	r3, 8017412 <_lseek_r+0x1e>
 8017410:	6023      	str	r3, [r4, #0]
 8017412:	bd38      	pop	{r3, r4, r5, pc}
 8017414:	20003638 	.word	0x20003638

08017418 <_read_r>:
 8017418:	b538      	push	{r3, r4, r5, lr}
 801741a:	4d07      	ldr	r5, [pc, #28]	@ (8017438 <_read_r+0x20>)
 801741c:	4604      	mov	r4, r0
 801741e:	4608      	mov	r0, r1
 8017420:	4611      	mov	r1, r2
 8017422:	2200      	movs	r2, #0
 8017424:	602a      	str	r2, [r5, #0]
 8017426:	461a      	mov	r2, r3
 8017428:	f7f6 fd1b 	bl	800de62 <_read>
 801742c:	1c43      	adds	r3, r0, #1
 801742e:	d102      	bne.n	8017436 <_read_r+0x1e>
 8017430:	682b      	ldr	r3, [r5, #0]
 8017432:	b103      	cbz	r3, 8017436 <_read_r+0x1e>
 8017434:	6023      	str	r3, [r4, #0]
 8017436:	bd38      	pop	{r3, r4, r5, pc}
 8017438:	20003638 	.word	0x20003638

0801743c <_sbrk_r>:
 801743c:	b538      	push	{r3, r4, r5, lr}
 801743e:	4d06      	ldr	r5, [pc, #24]	@ (8017458 <_sbrk_r+0x1c>)
 8017440:	2300      	movs	r3, #0
 8017442:	4604      	mov	r4, r0
 8017444:	4608      	mov	r0, r1
 8017446:	602b      	str	r3, [r5, #0]
 8017448:	f7f6 fd78 	bl	800df3c <_sbrk>
 801744c:	1c43      	adds	r3, r0, #1
 801744e:	d102      	bne.n	8017456 <_sbrk_r+0x1a>
 8017450:	682b      	ldr	r3, [r5, #0]
 8017452:	b103      	cbz	r3, 8017456 <_sbrk_r+0x1a>
 8017454:	6023      	str	r3, [r4, #0]
 8017456:	bd38      	pop	{r3, r4, r5, pc}
 8017458:	20003638 	.word	0x20003638

0801745c <_write_r>:
 801745c:	b538      	push	{r3, r4, r5, lr}
 801745e:	4d07      	ldr	r5, [pc, #28]	@ (801747c <_write_r+0x20>)
 8017460:	4604      	mov	r4, r0
 8017462:	4608      	mov	r0, r1
 8017464:	4611      	mov	r1, r2
 8017466:	2200      	movs	r2, #0
 8017468:	602a      	str	r2, [r5, #0]
 801746a:	461a      	mov	r2, r3
 801746c:	f7f6 fd16 	bl	800de9c <_write>
 8017470:	1c43      	adds	r3, r0, #1
 8017472:	d102      	bne.n	801747a <_write_r+0x1e>
 8017474:	682b      	ldr	r3, [r5, #0]
 8017476:	b103      	cbz	r3, 801747a <_write_r+0x1e>
 8017478:	6023      	str	r3, [r4, #0]
 801747a:	bd38      	pop	{r3, r4, r5, pc}
 801747c:	20003638 	.word	0x20003638

08017480 <__errno>:
 8017480:	4b01      	ldr	r3, [pc, #4]	@ (8017488 <__errno+0x8>)
 8017482:	6818      	ldr	r0, [r3, #0]
 8017484:	4770      	bx	lr
 8017486:	bf00      	nop
 8017488:	200001d8 	.word	0x200001d8

0801748c <__libc_init_array>:
 801748c:	b570      	push	{r4, r5, r6, lr}
 801748e:	4d0d      	ldr	r5, [pc, #52]	@ (80174c4 <__libc_init_array+0x38>)
 8017490:	4c0d      	ldr	r4, [pc, #52]	@ (80174c8 <__libc_init_array+0x3c>)
 8017492:	1b64      	subs	r4, r4, r5
 8017494:	10a4      	asrs	r4, r4, #2
 8017496:	2600      	movs	r6, #0
 8017498:	42a6      	cmp	r6, r4
 801749a:	d109      	bne.n	80174b0 <__libc_init_array+0x24>
 801749c:	4d0b      	ldr	r5, [pc, #44]	@ (80174cc <__libc_init_array+0x40>)
 801749e:	4c0c      	ldr	r4, [pc, #48]	@ (80174d0 <__libc_init_array+0x44>)
 80174a0:	f004 f904 	bl	801b6ac <_init>
 80174a4:	1b64      	subs	r4, r4, r5
 80174a6:	10a4      	asrs	r4, r4, #2
 80174a8:	2600      	movs	r6, #0
 80174aa:	42a6      	cmp	r6, r4
 80174ac:	d105      	bne.n	80174ba <__libc_init_array+0x2e>
 80174ae:	bd70      	pop	{r4, r5, r6, pc}
 80174b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80174b4:	4798      	blx	r3
 80174b6:	3601      	adds	r6, #1
 80174b8:	e7ee      	b.n	8017498 <__libc_init_array+0xc>
 80174ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80174be:	4798      	blx	r3
 80174c0:	3601      	adds	r6, #1
 80174c2:	e7f2      	b.n	80174aa <__libc_init_array+0x1e>
 80174c4:	0801e7e0 	.word	0x0801e7e0
 80174c8:	0801e7e0 	.word	0x0801e7e0
 80174cc:	0801e7e0 	.word	0x0801e7e0
 80174d0:	0801e7e4 	.word	0x0801e7e4

080174d4 <__retarget_lock_init_recursive>:
 80174d4:	4770      	bx	lr

080174d6 <__retarget_lock_acquire_recursive>:
 80174d6:	4770      	bx	lr

080174d8 <__retarget_lock_release_recursive>:
 80174d8:	4770      	bx	lr

080174da <memcpy>:
 80174da:	440a      	add	r2, r1
 80174dc:	4291      	cmp	r1, r2
 80174de:	f100 33ff 	add.w	r3, r0, #4294967295
 80174e2:	d100      	bne.n	80174e6 <memcpy+0xc>
 80174e4:	4770      	bx	lr
 80174e6:	b510      	push	{r4, lr}
 80174e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80174f0:	4291      	cmp	r1, r2
 80174f2:	d1f9      	bne.n	80174e8 <memcpy+0xe>
 80174f4:	bd10      	pop	{r4, pc}
	...

080174f8 <frexp>:
 80174f8:	b570      	push	{r4, r5, r6, lr}
 80174fa:	2100      	movs	r1, #0
 80174fc:	ec55 4b10 	vmov	r4, r5, d0
 8017500:	6001      	str	r1, [r0, #0]
 8017502:	4915      	ldr	r1, [pc, #84]	@ (8017558 <frexp+0x60>)
 8017504:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8017508:	428a      	cmp	r2, r1
 801750a:	4606      	mov	r6, r0
 801750c:	462b      	mov	r3, r5
 801750e:	d820      	bhi.n	8017552 <frexp+0x5a>
 8017510:	4621      	mov	r1, r4
 8017512:	4311      	orrs	r1, r2
 8017514:	d01d      	beq.n	8017552 <frexp+0x5a>
 8017516:	4911      	ldr	r1, [pc, #68]	@ (801755c <frexp+0x64>)
 8017518:	4029      	ands	r1, r5
 801751a:	b961      	cbnz	r1, 8017536 <frexp+0x3e>
 801751c:	4b10      	ldr	r3, [pc, #64]	@ (8017560 <frexp+0x68>)
 801751e:	2200      	movs	r2, #0
 8017520:	4620      	mov	r0, r4
 8017522:	4629      	mov	r1, r5
 8017524:	f7e9 f870 	bl	8000608 <__aeabi_dmul>
 8017528:	460b      	mov	r3, r1
 801752a:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801752e:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8017532:	4604      	mov	r4, r0
 8017534:	6031      	str	r1, [r6, #0]
 8017536:	6831      	ldr	r1, [r6, #0]
 8017538:	1512      	asrs	r2, r2, #20
 801753a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801753e:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8017542:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017546:	4411      	add	r1, r2
 8017548:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801754c:	6031      	str	r1, [r6, #0]
 801754e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8017552:	ec45 4b10 	vmov	d0, r4, r5
 8017556:	bd70      	pop	{r4, r5, r6, pc}
 8017558:	7fefffff 	.word	0x7fefffff
 801755c:	7ff00000 	.word	0x7ff00000
 8017560:	43500000 	.word	0x43500000

08017564 <quorem>:
 8017564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017568:	6903      	ldr	r3, [r0, #16]
 801756a:	690c      	ldr	r4, [r1, #16]
 801756c:	42a3      	cmp	r3, r4
 801756e:	4607      	mov	r7, r0
 8017570:	db7e      	blt.n	8017670 <quorem+0x10c>
 8017572:	3c01      	subs	r4, #1
 8017574:	f101 0814 	add.w	r8, r1, #20
 8017578:	00a3      	lsls	r3, r4, #2
 801757a:	f100 0514 	add.w	r5, r0, #20
 801757e:	9300      	str	r3, [sp, #0]
 8017580:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017584:	9301      	str	r3, [sp, #4]
 8017586:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801758a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801758e:	3301      	adds	r3, #1
 8017590:	429a      	cmp	r2, r3
 8017592:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017596:	fbb2 f6f3 	udiv	r6, r2, r3
 801759a:	d32e      	bcc.n	80175fa <quorem+0x96>
 801759c:	f04f 0a00 	mov.w	sl, #0
 80175a0:	46c4      	mov	ip, r8
 80175a2:	46ae      	mov	lr, r5
 80175a4:	46d3      	mov	fp, sl
 80175a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80175aa:	b298      	uxth	r0, r3
 80175ac:	fb06 a000 	mla	r0, r6, r0, sl
 80175b0:	0c02      	lsrs	r2, r0, #16
 80175b2:	0c1b      	lsrs	r3, r3, #16
 80175b4:	fb06 2303 	mla	r3, r6, r3, r2
 80175b8:	f8de 2000 	ldr.w	r2, [lr]
 80175bc:	b280      	uxth	r0, r0
 80175be:	b292      	uxth	r2, r2
 80175c0:	1a12      	subs	r2, r2, r0
 80175c2:	445a      	add	r2, fp
 80175c4:	f8de 0000 	ldr.w	r0, [lr]
 80175c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80175cc:	b29b      	uxth	r3, r3
 80175ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80175d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80175d6:	b292      	uxth	r2, r2
 80175d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80175dc:	45e1      	cmp	r9, ip
 80175de:	f84e 2b04 	str.w	r2, [lr], #4
 80175e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80175e6:	d2de      	bcs.n	80175a6 <quorem+0x42>
 80175e8:	9b00      	ldr	r3, [sp, #0]
 80175ea:	58eb      	ldr	r3, [r5, r3]
 80175ec:	b92b      	cbnz	r3, 80175fa <quorem+0x96>
 80175ee:	9b01      	ldr	r3, [sp, #4]
 80175f0:	3b04      	subs	r3, #4
 80175f2:	429d      	cmp	r5, r3
 80175f4:	461a      	mov	r2, r3
 80175f6:	d32f      	bcc.n	8017658 <quorem+0xf4>
 80175f8:	613c      	str	r4, [r7, #16]
 80175fa:	4638      	mov	r0, r7
 80175fc:	f001 f8c4 	bl	8018788 <__mcmp>
 8017600:	2800      	cmp	r0, #0
 8017602:	db25      	blt.n	8017650 <quorem+0xec>
 8017604:	4629      	mov	r1, r5
 8017606:	2000      	movs	r0, #0
 8017608:	f858 2b04 	ldr.w	r2, [r8], #4
 801760c:	f8d1 c000 	ldr.w	ip, [r1]
 8017610:	fa1f fe82 	uxth.w	lr, r2
 8017614:	fa1f f38c 	uxth.w	r3, ip
 8017618:	eba3 030e 	sub.w	r3, r3, lr
 801761c:	4403      	add	r3, r0
 801761e:	0c12      	lsrs	r2, r2, #16
 8017620:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017624:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017628:	b29b      	uxth	r3, r3
 801762a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801762e:	45c1      	cmp	r9, r8
 8017630:	f841 3b04 	str.w	r3, [r1], #4
 8017634:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017638:	d2e6      	bcs.n	8017608 <quorem+0xa4>
 801763a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801763e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017642:	b922      	cbnz	r2, 801764e <quorem+0xea>
 8017644:	3b04      	subs	r3, #4
 8017646:	429d      	cmp	r5, r3
 8017648:	461a      	mov	r2, r3
 801764a:	d30b      	bcc.n	8017664 <quorem+0x100>
 801764c:	613c      	str	r4, [r7, #16]
 801764e:	3601      	adds	r6, #1
 8017650:	4630      	mov	r0, r6
 8017652:	b003      	add	sp, #12
 8017654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017658:	6812      	ldr	r2, [r2, #0]
 801765a:	3b04      	subs	r3, #4
 801765c:	2a00      	cmp	r2, #0
 801765e:	d1cb      	bne.n	80175f8 <quorem+0x94>
 8017660:	3c01      	subs	r4, #1
 8017662:	e7c6      	b.n	80175f2 <quorem+0x8e>
 8017664:	6812      	ldr	r2, [r2, #0]
 8017666:	3b04      	subs	r3, #4
 8017668:	2a00      	cmp	r2, #0
 801766a:	d1ef      	bne.n	801764c <quorem+0xe8>
 801766c:	3c01      	subs	r4, #1
 801766e:	e7ea      	b.n	8017646 <quorem+0xe2>
 8017670:	2000      	movs	r0, #0
 8017672:	e7ee      	b.n	8017652 <quorem+0xee>
 8017674:	0000      	movs	r0, r0
	...

08017678 <_dtoa_r>:
 8017678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801767c:	69c7      	ldr	r7, [r0, #28]
 801767e:	b099      	sub	sp, #100	@ 0x64
 8017680:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017684:	ec55 4b10 	vmov	r4, r5, d0
 8017688:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801768a:	9109      	str	r1, [sp, #36]	@ 0x24
 801768c:	4683      	mov	fp, r0
 801768e:	920e      	str	r2, [sp, #56]	@ 0x38
 8017690:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017692:	b97f      	cbnz	r7, 80176b4 <_dtoa_r+0x3c>
 8017694:	2010      	movs	r0, #16
 8017696:	f7ff f855 	bl	8016744 <malloc>
 801769a:	4602      	mov	r2, r0
 801769c:	f8cb 001c 	str.w	r0, [fp, #28]
 80176a0:	b920      	cbnz	r0, 80176ac <_dtoa_r+0x34>
 80176a2:	4ba7      	ldr	r3, [pc, #668]	@ (8017940 <_dtoa_r+0x2c8>)
 80176a4:	21ef      	movs	r1, #239	@ 0xef
 80176a6:	48a7      	ldr	r0, [pc, #668]	@ (8017944 <_dtoa_r+0x2cc>)
 80176a8:	f001 fb94 	bl	8018dd4 <__assert_func>
 80176ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80176b0:	6007      	str	r7, [r0, #0]
 80176b2:	60c7      	str	r7, [r0, #12]
 80176b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80176b8:	6819      	ldr	r1, [r3, #0]
 80176ba:	b159      	cbz	r1, 80176d4 <_dtoa_r+0x5c>
 80176bc:	685a      	ldr	r2, [r3, #4]
 80176be:	604a      	str	r2, [r1, #4]
 80176c0:	2301      	movs	r3, #1
 80176c2:	4093      	lsls	r3, r2
 80176c4:	608b      	str	r3, [r1, #8]
 80176c6:	4658      	mov	r0, fp
 80176c8:	f000 fe24 	bl	8018314 <_Bfree>
 80176cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80176d0:	2200      	movs	r2, #0
 80176d2:	601a      	str	r2, [r3, #0]
 80176d4:	1e2b      	subs	r3, r5, #0
 80176d6:	bfb9      	ittee	lt
 80176d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80176dc:	9303      	strlt	r3, [sp, #12]
 80176de:	2300      	movge	r3, #0
 80176e0:	6033      	strge	r3, [r6, #0]
 80176e2:	9f03      	ldr	r7, [sp, #12]
 80176e4:	4b98      	ldr	r3, [pc, #608]	@ (8017948 <_dtoa_r+0x2d0>)
 80176e6:	bfbc      	itt	lt
 80176e8:	2201      	movlt	r2, #1
 80176ea:	6032      	strlt	r2, [r6, #0]
 80176ec:	43bb      	bics	r3, r7
 80176ee:	d112      	bne.n	8017716 <_dtoa_r+0x9e>
 80176f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80176f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80176f6:	6013      	str	r3, [r2, #0]
 80176f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80176fc:	4323      	orrs	r3, r4
 80176fe:	f000 854d 	beq.w	801819c <_dtoa_r+0xb24>
 8017702:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017704:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801795c <_dtoa_r+0x2e4>
 8017708:	2b00      	cmp	r3, #0
 801770a:	f000 854f 	beq.w	80181ac <_dtoa_r+0xb34>
 801770e:	f10a 0303 	add.w	r3, sl, #3
 8017712:	f000 bd49 	b.w	80181a8 <_dtoa_r+0xb30>
 8017716:	ed9d 7b02 	vldr	d7, [sp, #8]
 801771a:	2200      	movs	r2, #0
 801771c:	ec51 0b17 	vmov	r0, r1, d7
 8017720:	2300      	movs	r3, #0
 8017722:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8017726:	f7e9 f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 801772a:	4680      	mov	r8, r0
 801772c:	b158      	cbz	r0, 8017746 <_dtoa_r+0xce>
 801772e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017730:	2301      	movs	r3, #1
 8017732:	6013      	str	r3, [r2, #0]
 8017734:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017736:	b113      	cbz	r3, 801773e <_dtoa_r+0xc6>
 8017738:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801773a:	4b84      	ldr	r3, [pc, #528]	@ (801794c <_dtoa_r+0x2d4>)
 801773c:	6013      	str	r3, [r2, #0]
 801773e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8017960 <_dtoa_r+0x2e8>
 8017742:	f000 bd33 	b.w	80181ac <_dtoa_r+0xb34>
 8017746:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801774a:	aa16      	add	r2, sp, #88	@ 0x58
 801774c:	a917      	add	r1, sp, #92	@ 0x5c
 801774e:	4658      	mov	r0, fp
 8017750:	f001 f8ca 	bl	80188e8 <__d2b>
 8017754:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8017758:	4681      	mov	r9, r0
 801775a:	2e00      	cmp	r6, #0
 801775c:	d077      	beq.n	801784e <_dtoa_r+0x1d6>
 801775e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017760:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8017764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801776c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8017770:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8017774:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8017778:	4619      	mov	r1, r3
 801777a:	2200      	movs	r2, #0
 801777c:	4b74      	ldr	r3, [pc, #464]	@ (8017950 <_dtoa_r+0x2d8>)
 801777e:	f7e8 fd8b 	bl	8000298 <__aeabi_dsub>
 8017782:	a369      	add	r3, pc, #420	@ (adr r3, 8017928 <_dtoa_r+0x2b0>)
 8017784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017788:	f7e8 ff3e 	bl	8000608 <__aeabi_dmul>
 801778c:	a368      	add	r3, pc, #416	@ (adr r3, 8017930 <_dtoa_r+0x2b8>)
 801778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017792:	f7e8 fd83 	bl	800029c <__adddf3>
 8017796:	4604      	mov	r4, r0
 8017798:	4630      	mov	r0, r6
 801779a:	460d      	mov	r5, r1
 801779c:	f7e8 feca 	bl	8000534 <__aeabi_i2d>
 80177a0:	a365      	add	r3, pc, #404	@ (adr r3, 8017938 <_dtoa_r+0x2c0>)
 80177a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177a6:	f7e8 ff2f 	bl	8000608 <__aeabi_dmul>
 80177aa:	4602      	mov	r2, r0
 80177ac:	460b      	mov	r3, r1
 80177ae:	4620      	mov	r0, r4
 80177b0:	4629      	mov	r1, r5
 80177b2:	f7e8 fd73 	bl	800029c <__adddf3>
 80177b6:	4604      	mov	r4, r0
 80177b8:	460d      	mov	r5, r1
 80177ba:	f7e9 f9d5 	bl	8000b68 <__aeabi_d2iz>
 80177be:	2200      	movs	r2, #0
 80177c0:	4607      	mov	r7, r0
 80177c2:	2300      	movs	r3, #0
 80177c4:	4620      	mov	r0, r4
 80177c6:	4629      	mov	r1, r5
 80177c8:	f7e9 f990 	bl	8000aec <__aeabi_dcmplt>
 80177cc:	b140      	cbz	r0, 80177e0 <_dtoa_r+0x168>
 80177ce:	4638      	mov	r0, r7
 80177d0:	f7e8 feb0 	bl	8000534 <__aeabi_i2d>
 80177d4:	4622      	mov	r2, r4
 80177d6:	462b      	mov	r3, r5
 80177d8:	f7e9 f97e 	bl	8000ad8 <__aeabi_dcmpeq>
 80177dc:	b900      	cbnz	r0, 80177e0 <_dtoa_r+0x168>
 80177de:	3f01      	subs	r7, #1
 80177e0:	2f16      	cmp	r7, #22
 80177e2:	d851      	bhi.n	8017888 <_dtoa_r+0x210>
 80177e4:	4b5b      	ldr	r3, [pc, #364]	@ (8017954 <_dtoa_r+0x2dc>)
 80177e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80177ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80177f2:	f7e9 f97b 	bl	8000aec <__aeabi_dcmplt>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	d048      	beq.n	801788c <_dtoa_r+0x214>
 80177fa:	3f01      	subs	r7, #1
 80177fc:	2300      	movs	r3, #0
 80177fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8017800:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017802:	1b9b      	subs	r3, r3, r6
 8017804:	1e5a      	subs	r2, r3, #1
 8017806:	bf44      	itt	mi
 8017808:	f1c3 0801 	rsbmi	r8, r3, #1
 801780c:	2300      	movmi	r3, #0
 801780e:	9208      	str	r2, [sp, #32]
 8017810:	bf54      	ite	pl
 8017812:	f04f 0800 	movpl.w	r8, #0
 8017816:	9308      	strmi	r3, [sp, #32]
 8017818:	2f00      	cmp	r7, #0
 801781a:	db39      	blt.n	8017890 <_dtoa_r+0x218>
 801781c:	9b08      	ldr	r3, [sp, #32]
 801781e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8017820:	443b      	add	r3, r7
 8017822:	9308      	str	r3, [sp, #32]
 8017824:	2300      	movs	r3, #0
 8017826:	930a      	str	r3, [sp, #40]	@ 0x28
 8017828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801782a:	2b09      	cmp	r3, #9
 801782c:	d864      	bhi.n	80178f8 <_dtoa_r+0x280>
 801782e:	2b05      	cmp	r3, #5
 8017830:	bfc4      	itt	gt
 8017832:	3b04      	subgt	r3, #4
 8017834:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8017836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017838:	f1a3 0302 	sub.w	r3, r3, #2
 801783c:	bfcc      	ite	gt
 801783e:	2400      	movgt	r4, #0
 8017840:	2401      	movle	r4, #1
 8017842:	2b03      	cmp	r3, #3
 8017844:	d863      	bhi.n	801790e <_dtoa_r+0x296>
 8017846:	e8df f003 	tbb	[pc, r3]
 801784a:	372a      	.short	0x372a
 801784c:	5535      	.short	0x5535
 801784e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8017852:	441e      	add	r6, r3
 8017854:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8017858:	2b20      	cmp	r3, #32
 801785a:	bfc1      	itttt	gt
 801785c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8017860:	409f      	lslgt	r7, r3
 8017862:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8017866:	fa24 f303 	lsrgt.w	r3, r4, r3
 801786a:	bfd6      	itet	le
 801786c:	f1c3 0320 	rsble	r3, r3, #32
 8017870:	ea47 0003 	orrgt.w	r0, r7, r3
 8017874:	fa04 f003 	lslle.w	r0, r4, r3
 8017878:	f7e8 fe4c 	bl	8000514 <__aeabi_ui2d>
 801787c:	2201      	movs	r2, #1
 801787e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8017882:	3e01      	subs	r6, #1
 8017884:	9214      	str	r2, [sp, #80]	@ 0x50
 8017886:	e777      	b.n	8017778 <_dtoa_r+0x100>
 8017888:	2301      	movs	r3, #1
 801788a:	e7b8      	b.n	80177fe <_dtoa_r+0x186>
 801788c:	9012      	str	r0, [sp, #72]	@ 0x48
 801788e:	e7b7      	b.n	8017800 <_dtoa_r+0x188>
 8017890:	427b      	negs	r3, r7
 8017892:	930a      	str	r3, [sp, #40]	@ 0x28
 8017894:	2300      	movs	r3, #0
 8017896:	eba8 0807 	sub.w	r8, r8, r7
 801789a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801789c:	e7c4      	b.n	8017828 <_dtoa_r+0x1b0>
 801789e:	2300      	movs	r3, #0
 80178a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80178a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	dc35      	bgt.n	8017914 <_dtoa_r+0x29c>
 80178a8:	2301      	movs	r3, #1
 80178aa:	9300      	str	r3, [sp, #0]
 80178ac:	9307      	str	r3, [sp, #28]
 80178ae:	461a      	mov	r2, r3
 80178b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80178b2:	e00b      	b.n	80178cc <_dtoa_r+0x254>
 80178b4:	2301      	movs	r3, #1
 80178b6:	e7f3      	b.n	80178a0 <_dtoa_r+0x228>
 80178b8:	2300      	movs	r3, #0
 80178ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80178bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178be:	18fb      	adds	r3, r7, r3
 80178c0:	9300      	str	r3, [sp, #0]
 80178c2:	3301      	adds	r3, #1
 80178c4:	2b01      	cmp	r3, #1
 80178c6:	9307      	str	r3, [sp, #28]
 80178c8:	bfb8      	it	lt
 80178ca:	2301      	movlt	r3, #1
 80178cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80178d0:	2100      	movs	r1, #0
 80178d2:	2204      	movs	r2, #4
 80178d4:	f102 0514 	add.w	r5, r2, #20
 80178d8:	429d      	cmp	r5, r3
 80178da:	d91f      	bls.n	801791c <_dtoa_r+0x2a4>
 80178dc:	6041      	str	r1, [r0, #4]
 80178de:	4658      	mov	r0, fp
 80178e0:	f000 fcd8 	bl	8018294 <_Balloc>
 80178e4:	4682      	mov	sl, r0
 80178e6:	2800      	cmp	r0, #0
 80178e8:	d13c      	bne.n	8017964 <_dtoa_r+0x2ec>
 80178ea:	4b1b      	ldr	r3, [pc, #108]	@ (8017958 <_dtoa_r+0x2e0>)
 80178ec:	4602      	mov	r2, r0
 80178ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80178f2:	e6d8      	b.n	80176a6 <_dtoa_r+0x2e>
 80178f4:	2301      	movs	r3, #1
 80178f6:	e7e0      	b.n	80178ba <_dtoa_r+0x242>
 80178f8:	2401      	movs	r4, #1
 80178fa:	2300      	movs	r3, #0
 80178fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80178fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017900:	f04f 33ff 	mov.w	r3, #4294967295
 8017904:	9300      	str	r3, [sp, #0]
 8017906:	9307      	str	r3, [sp, #28]
 8017908:	2200      	movs	r2, #0
 801790a:	2312      	movs	r3, #18
 801790c:	e7d0      	b.n	80178b0 <_dtoa_r+0x238>
 801790e:	2301      	movs	r3, #1
 8017910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017912:	e7f5      	b.n	8017900 <_dtoa_r+0x288>
 8017914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017916:	9300      	str	r3, [sp, #0]
 8017918:	9307      	str	r3, [sp, #28]
 801791a:	e7d7      	b.n	80178cc <_dtoa_r+0x254>
 801791c:	3101      	adds	r1, #1
 801791e:	0052      	lsls	r2, r2, #1
 8017920:	e7d8      	b.n	80178d4 <_dtoa_r+0x25c>
 8017922:	bf00      	nop
 8017924:	f3af 8000 	nop.w
 8017928:	636f4361 	.word	0x636f4361
 801792c:	3fd287a7 	.word	0x3fd287a7
 8017930:	8b60c8b3 	.word	0x8b60c8b3
 8017934:	3fc68a28 	.word	0x3fc68a28
 8017938:	509f79fb 	.word	0x509f79fb
 801793c:	3fd34413 	.word	0x3fd34413
 8017940:	0801e0a5 	.word	0x0801e0a5
 8017944:	0801e0bc 	.word	0x0801e0bc
 8017948:	7ff00000 	.word	0x7ff00000
 801794c:	0801e075 	.word	0x0801e075
 8017950:	3ff80000 	.word	0x3ff80000
 8017954:	0801e1b8 	.word	0x0801e1b8
 8017958:	0801e114 	.word	0x0801e114
 801795c:	0801e0a1 	.word	0x0801e0a1
 8017960:	0801e074 	.word	0x0801e074
 8017964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017968:	6018      	str	r0, [r3, #0]
 801796a:	9b07      	ldr	r3, [sp, #28]
 801796c:	2b0e      	cmp	r3, #14
 801796e:	f200 80a4 	bhi.w	8017aba <_dtoa_r+0x442>
 8017972:	2c00      	cmp	r4, #0
 8017974:	f000 80a1 	beq.w	8017aba <_dtoa_r+0x442>
 8017978:	2f00      	cmp	r7, #0
 801797a:	dd33      	ble.n	80179e4 <_dtoa_r+0x36c>
 801797c:	4bad      	ldr	r3, [pc, #692]	@ (8017c34 <_dtoa_r+0x5bc>)
 801797e:	f007 020f 	and.w	r2, r7, #15
 8017982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017986:	ed93 7b00 	vldr	d7, [r3]
 801798a:	05f8      	lsls	r0, r7, #23
 801798c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017990:	ea4f 1427 	mov.w	r4, r7, asr #4
 8017994:	d516      	bpl.n	80179c4 <_dtoa_r+0x34c>
 8017996:	4ba8      	ldr	r3, [pc, #672]	@ (8017c38 <_dtoa_r+0x5c0>)
 8017998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801799c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80179a0:	f7e8 ff5c 	bl	800085c <__aeabi_ddiv>
 80179a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80179a8:	f004 040f 	and.w	r4, r4, #15
 80179ac:	2603      	movs	r6, #3
 80179ae:	4da2      	ldr	r5, [pc, #648]	@ (8017c38 <_dtoa_r+0x5c0>)
 80179b0:	b954      	cbnz	r4, 80179c8 <_dtoa_r+0x350>
 80179b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80179b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80179ba:	f7e8 ff4f 	bl	800085c <__aeabi_ddiv>
 80179be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80179c2:	e028      	b.n	8017a16 <_dtoa_r+0x39e>
 80179c4:	2602      	movs	r6, #2
 80179c6:	e7f2      	b.n	80179ae <_dtoa_r+0x336>
 80179c8:	07e1      	lsls	r1, r4, #31
 80179ca:	d508      	bpl.n	80179de <_dtoa_r+0x366>
 80179cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80179d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80179d4:	f7e8 fe18 	bl	8000608 <__aeabi_dmul>
 80179d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80179dc:	3601      	adds	r6, #1
 80179de:	1064      	asrs	r4, r4, #1
 80179e0:	3508      	adds	r5, #8
 80179e2:	e7e5      	b.n	80179b0 <_dtoa_r+0x338>
 80179e4:	f000 80d2 	beq.w	8017b8c <_dtoa_r+0x514>
 80179e8:	427c      	negs	r4, r7
 80179ea:	4b92      	ldr	r3, [pc, #584]	@ (8017c34 <_dtoa_r+0x5bc>)
 80179ec:	4d92      	ldr	r5, [pc, #584]	@ (8017c38 <_dtoa_r+0x5c0>)
 80179ee:	f004 020f 	and.w	r2, r4, #15
 80179f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80179f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80179fe:	f7e8 fe03 	bl	8000608 <__aeabi_dmul>
 8017a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a06:	1124      	asrs	r4, r4, #4
 8017a08:	2300      	movs	r3, #0
 8017a0a:	2602      	movs	r6, #2
 8017a0c:	2c00      	cmp	r4, #0
 8017a0e:	f040 80b2 	bne.w	8017b76 <_dtoa_r+0x4fe>
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d1d3      	bne.n	80179be <_dtoa_r+0x346>
 8017a16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017a18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	f000 80b7 	beq.w	8017b90 <_dtoa_r+0x518>
 8017a22:	4b86      	ldr	r3, [pc, #536]	@ (8017c3c <_dtoa_r+0x5c4>)
 8017a24:	2200      	movs	r2, #0
 8017a26:	4620      	mov	r0, r4
 8017a28:	4629      	mov	r1, r5
 8017a2a:	f7e9 f85f 	bl	8000aec <__aeabi_dcmplt>
 8017a2e:	2800      	cmp	r0, #0
 8017a30:	f000 80ae 	beq.w	8017b90 <_dtoa_r+0x518>
 8017a34:	9b07      	ldr	r3, [sp, #28]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	f000 80aa 	beq.w	8017b90 <_dtoa_r+0x518>
 8017a3c:	9b00      	ldr	r3, [sp, #0]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	dd37      	ble.n	8017ab2 <_dtoa_r+0x43a>
 8017a42:	1e7b      	subs	r3, r7, #1
 8017a44:	9304      	str	r3, [sp, #16]
 8017a46:	4620      	mov	r0, r4
 8017a48:	4b7d      	ldr	r3, [pc, #500]	@ (8017c40 <_dtoa_r+0x5c8>)
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	4629      	mov	r1, r5
 8017a4e:	f7e8 fddb 	bl	8000608 <__aeabi_dmul>
 8017a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a56:	9c00      	ldr	r4, [sp, #0]
 8017a58:	3601      	adds	r6, #1
 8017a5a:	4630      	mov	r0, r6
 8017a5c:	f7e8 fd6a 	bl	8000534 <__aeabi_i2d>
 8017a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a64:	f7e8 fdd0 	bl	8000608 <__aeabi_dmul>
 8017a68:	4b76      	ldr	r3, [pc, #472]	@ (8017c44 <_dtoa_r+0x5cc>)
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	f7e8 fc16 	bl	800029c <__adddf3>
 8017a70:	4605      	mov	r5, r0
 8017a72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8017a76:	2c00      	cmp	r4, #0
 8017a78:	f040 808d 	bne.w	8017b96 <_dtoa_r+0x51e>
 8017a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a80:	4b71      	ldr	r3, [pc, #452]	@ (8017c48 <_dtoa_r+0x5d0>)
 8017a82:	2200      	movs	r2, #0
 8017a84:	f7e8 fc08 	bl	8000298 <__aeabi_dsub>
 8017a88:	4602      	mov	r2, r0
 8017a8a:	460b      	mov	r3, r1
 8017a8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017a90:	462a      	mov	r2, r5
 8017a92:	4633      	mov	r3, r6
 8017a94:	f7e9 f848 	bl	8000b28 <__aeabi_dcmpgt>
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	f040 828b 	bne.w	8017fb4 <_dtoa_r+0x93c>
 8017a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017aa2:	462a      	mov	r2, r5
 8017aa4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017aa8:	f7e9 f820 	bl	8000aec <__aeabi_dcmplt>
 8017aac:	2800      	cmp	r0, #0
 8017aae:	f040 8128 	bne.w	8017d02 <_dtoa_r+0x68a>
 8017ab2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8017ab6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017aba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	f2c0 815a 	blt.w	8017d76 <_dtoa_r+0x6fe>
 8017ac2:	2f0e      	cmp	r7, #14
 8017ac4:	f300 8157 	bgt.w	8017d76 <_dtoa_r+0x6fe>
 8017ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8017c34 <_dtoa_r+0x5bc>)
 8017aca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017ace:	ed93 7b00 	vldr	d7, [r3]
 8017ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	ed8d 7b00 	vstr	d7, [sp]
 8017ada:	da03      	bge.n	8017ae4 <_dtoa_r+0x46c>
 8017adc:	9b07      	ldr	r3, [sp, #28]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	f340 8101 	ble.w	8017ce6 <_dtoa_r+0x66e>
 8017ae4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017ae8:	4656      	mov	r6, sl
 8017aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017aee:	4620      	mov	r0, r4
 8017af0:	4629      	mov	r1, r5
 8017af2:	f7e8 feb3 	bl	800085c <__aeabi_ddiv>
 8017af6:	f7e9 f837 	bl	8000b68 <__aeabi_d2iz>
 8017afa:	4680      	mov	r8, r0
 8017afc:	f7e8 fd1a 	bl	8000534 <__aeabi_i2d>
 8017b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b04:	f7e8 fd80 	bl	8000608 <__aeabi_dmul>
 8017b08:	4602      	mov	r2, r0
 8017b0a:	460b      	mov	r3, r1
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	4629      	mov	r1, r5
 8017b10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8017b14:	f7e8 fbc0 	bl	8000298 <__aeabi_dsub>
 8017b18:	f806 4b01 	strb.w	r4, [r6], #1
 8017b1c:	9d07      	ldr	r5, [sp, #28]
 8017b1e:	eba6 040a 	sub.w	r4, r6, sl
 8017b22:	42a5      	cmp	r5, r4
 8017b24:	4602      	mov	r2, r0
 8017b26:	460b      	mov	r3, r1
 8017b28:	f040 8117 	bne.w	8017d5a <_dtoa_r+0x6e2>
 8017b2c:	f7e8 fbb6 	bl	800029c <__adddf3>
 8017b30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b34:	4604      	mov	r4, r0
 8017b36:	460d      	mov	r5, r1
 8017b38:	f7e8 fff6 	bl	8000b28 <__aeabi_dcmpgt>
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	f040 80f9 	bne.w	8017d34 <_dtoa_r+0x6bc>
 8017b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b46:	4620      	mov	r0, r4
 8017b48:	4629      	mov	r1, r5
 8017b4a:	f7e8 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8017b4e:	b118      	cbz	r0, 8017b58 <_dtoa_r+0x4e0>
 8017b50:	f018 0f01 	tst.w	r8, #1
 8017b54:	f040 80ee 	bne.w	8017d34 <_dtoa_r+0x6bc>
 8017b58:	4649      	mov	r1, r9
 8017b5a:	4658      	mov	r0, fp
 8017b5c:	f000 fbda 	bl	8018314 <_Bfree>
 8017b60:	2300      	movs	r3, #0
 8017b62:	7033      	strb	r3, [r6, #0]
 8017b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017b66:	3701      	adds	r7, #1
 8017b68:	601f      	str	r7, [r3, #0]
 8017b6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	f000 831d 	beq.w	80181ac <_dtoa_r+0xb34>
 8017b72:	601e      	str	r6, [r3, #0]
 8017b74:	e31a      	b.n	80181ac <_dtoa_r+0xb34>
 8017b76:	07e2      	lsls	r2, r4, #31
 8017b78:	d505      	bpl.n	8017b86 <_dtoa_r+0x50e>
 8017b7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017b7e:	f7e8 fd43 	bl	8000608 <__aeabi_dmul>
 8017b82:	3601      	adds	r6, #1
 8017b84:	2301      	movs	r3, #1
 8017b86:	1064      	asrs	r4, r4, #1
 8017b88:	3508      	adds	r5, #8
 8017b8a:	e73f      	b.n	8017a0c <_dtoa_r+0x394>
 8017b8c:	2602      	movs	r6, #2
 8017b8e:	e742      	b.n	8017a16 <_dtoa_r+0x39e>
 8017b90:	9c07      	ldr	r4, [sp, #28]
 8017b92:	9704      	str	r7, [sp, #16]
 8017b94:	e761      	b.n	8017a5a <_dtoa_r+0x3e2>
 8017b96:	4b27      	ldr	r3, [pc, #156]	@ (8017c34 <_dtoa_r+0x5bc>)
 8017b98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017b9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017b9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017ba2:	4454      	add	r4, sl
 8017ba4:	2900      	cmp	r1, #0
 8017ba6:	d053      	beq.n	8017c50 <_dtoa_r+0x5d8>
 8017ba8:	4928      	ldr	r1, [pc, #160]	@ (8017c4c <_dtoa_r+0x5d4>)
 8017baa:	2000      	movs	r0, #0
 8017bac:	f7e8 fe56 	bl	800085c <__aeabi_ddiv>
 8017bb0:	4633      	mov	r3, r6
 8017bb2:	462a      	mov	r2, r5
 8017bb4:	f7e8 fb70 	bl	8000298 <__aeabi_dsub>
 8017bb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017bbc:	4656      	mov	r6, sl
 8017bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017bc2:	f7e8 ffd1 	bl	8000b68 <__aeabi_d2iz>
 8017bc6:	4605      	mov	r5, r0
 8017bc8:	f7e8 fcb4 	bl	8000534 <__aeabi_i2d>
 8017bcc:	4602      	mov	r2, r0
 8017bce:	460b      	mov	r3, r1
 8017bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017bd4:	f7e8 fb60 	bl	8000298 <__aeabi_dsub>
 8017bd8:	3530      	adds	r5, #48	@ 0x30
 8017bda:	4602      	mov	r2, r0
 8017bdc:	460b      	mov	r3, r1
 8017bde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017be2:	f806 5b01 	strb.w	r5, [r6], #1
 8017be6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017bea:	f7e8 ff7f 	bl	8000aec <__aeabi_dcmplt>
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d171      	bne.n	8017cd6 <_dtoa_r+0x65e>
 8017bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bf6:	4911      	ldr	r1, [pc, #68]	@ (8017c3c <_dtoa_r+0x5c4>)
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	f7e8 fb4d 	bl	8000298 <__aeabi_dsub>
 8017bfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017c02:	f7e8 ff73 	bl	8000aec <__aeabi_dcmplt>
 8017c06:	2800      	cmp	r0, #0
 8017c08:	f040 8095 	bne.w	8017d36 <_dtoa_r+0x6be>
 8017c0c:	42a6      	cmp	r6, r4
 8017c0e:	f43f af50 	beq.w	8017ab2 <_dtoa_r+0x43a>
 8017c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017c16:	4b0a      	ldr	r3, [pc, #40]	@ (8017c40 <_dtoa_r+0x5c8>)
 8017c18:	2200      	movs	r2, #0
 8017c1a:	f7e8 fcf5 	bl	8000608 <__aeabi_dmul>
 8017c1e:	4b08      	ldr	r3, [pc, #32]	@ (8017c40 <_dtoa_r+0x5c8>)
 8017c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017c24:	2200      	movs	r2, #0
 8017c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c2a:	f7e8 fced 	bl	8000608 <__aeabi_dmul>
 8017c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c32:	e7c4      	b.n	8017bbe <_dtoa_r+0x546>
 8017c34:	0801e1b8 	.word	0x0801e1b8
 8017c38:	0801e190 	.word	0x0801e190
 8017c3c:	3ff00000 	.word	0x3ff00000
 8017c40:	40240000 	.word	0x40240000
 8017c44:	401c0000 	.word	0x401c0000
 8017c48:	40140000 	.word	0x40140000
 8017c4c:	3fe00000 	.word	0x3fe00000
 8017c50:	4631      	mov	r1, r6
 8017c52:	4628      	mov	r0, r5
 8017c54:	f7e8 fcd8 	bl	8000608 <__aeabi_dmul>
 8017c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017c5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8017c5e:	4656      	mov	r6, sl
 8017c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c64:	f7e8 ff80 	bl	8000b68 <__aeabi_d2iz>
 8017c68:	4605      	mov	r5, r0
 8017c6a:	f7e8 fc63 	bl	8000534 <__aeabi_i2d>
 8017c6e:	4602      	mov	r2, r0
 8017c70:	460b      	mov	r3, r1
 8017c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c76:	f7e8 fb0f 	bl	8000298 <__aeabi_dsub>
 8017c7a:	3530      	adds	r5, #48	@ 0x30
 8017c7c:	f806 5b01 	strb.w	r5, [r6], #1
 8017c80:	4602      	mov	r2, r0
 8017c82:	460b      	mov	r3, r1
 8017c84:	42a6      	cmp	r6, r4
 8017c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017c8a:	f04f 0200 	mov.w	r2, #0
 8017c8e:	d124      	bne.n	8017cda <_dtoa_r+0x662>
 8017c90:	4bac      	ldr	r3, [pc, #688]	@ (8017f44 <_dtoa_r+0x8cc>)
 8017c92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017c96:	f7e8 fb01 	bl	800029c <__adddf3>
 8017c9a:	4602      	mov	r2, r0
 8017c9c:	460b      	mov	r3, r1
 8017c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ca2:	f7e8 ff41 	bl	8000b28 <__aeabi_dcmpgt>
 8017ca6:	2800      	cmp	r0, #0
 8017ca8:	d145      	bne.n	8017d36 <_dtoa_r+0x6be>
 8017caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017cae:	49a5      	ldr	r1, [pc, #660]	@ (8017f44 <_dtoa_r+0x8cc>)
 8017cb0:	2000      	movs	r0, #0
 8017cb2:	f7e8 faf1 	bl	8000298 <__aeabi_dsub>
 8017cb6:	4602      	mov	r2, r0
 8017cb8:	460b      	mov	r3, r1
 8017cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017cbe:	f7e8 ff15 	bl	8000aec <__aeabi_dcmplt>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	f43f aef5 	beq.w	8017ab2 <_dtoa_r+0x43a>
 8017cc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8017cca:	1e73      	subs	r3, r6, #1
 8017ccc:	9315      	str	r3, [sp, #84]	@ 0x54
 8017cce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017cd2:	2b30      	cmp	r3, #48	@ 0x30
 8017cd4:	d0f8      	beq.n	8017cc8 <_dtoa_r+0x650>
 8017cd6:	9f04      	ldr	r7, [sp, #16]
 8017cd8:	e73e      	b.n	8017b58 <_dtoa_r+0x4e0>
 8017cda:	4b9b      	ldr	r3, [pc, #620]	@ (8017f48 <_dtoa_r+0x8d0>)
 8017cdc:	f7e8 fc94 	bl	8000608 <__aeabi_dmul>
 8017ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ce4:	e7bc      	b.n	8017c60 <_dtoa_r+0x5e8>
 8017ce6:	d10c      	bne.n	8017d02 <_dtoa_r+0x68a>
 8017ce8:	4b98      	ldr	r3, [pc, #608]	@ (8017f4c <_dtoa_r+0x8d4>)
 8017cea:	2200      	movs	r2, #0
 8017cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017cf0:	f7e8 fc8a 	bl	8000608 <__aeabi_dmul>
 8017cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cf8:	f7e8 ff0c 	bl	8000b14 <__aeabi_dcmpge>
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	f000 8157 	beq.w	8017fb0 <_dtoa_r+0x938>
 8017d02:	2400      	movs	r4, #0
 8017d04:	4625      	mov	r5, r4
 8017d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d08:	43db      	mvns	r3, r3
 8017d0a:	9304      	str	r3, [sp, #16]
 8017d0c:	4656      	mov	r6, sl
 8017d0e:	2700      	movs	r7, #0
 8017d10:	4621      	mov	r1, r4
 8017d12:	4658      	mov	r0, fp
 8017d14:	f000 fafe 	bl	8018314 <_Bfree>
 8017d18:	2d00      	cmp	r5, #0
 8017d1a:	d0dc      	beq.n	8017cd6 <_dtoa_r+0x65e>
 8017d1c:	b12f      	cbz	r7, 8017d2a <_dtoa_r+0x6b2>
 8017d1e:	42af      	cmp	r7, r5
 8017d20:	d003      	beq.n	8017d2a <_dtoa_r+0x6b2>
 8017d22:	4639      	mov	r1, r7
 8017d24:	4658      	mov	r0, fp
 8017d26:	f000 faf5 	bl	8018314 <_Bfree>
 8017d2a:	4629      	mov	r1, r5
 8017d2c:	4658      	mov	r0, fp
 8017d2e:	f000 faf1 	bl	8018314 <_Bfree>
 8017d32:	e7d0      	b.n	8017cd6 <_dtoa_r+0x65e>
 8017d34:	9704      	str	r7, [sp, #16]
 8017d36:	4633      	mov	r3, r6
 8017d38:	461e      	mov	r6, r3
 8017d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017d3e:	2a39      	cmp	r2, #57	@ 0x39
 8017d40:	d107      	bne.n	8017d52 <_dtoa_r+0x6da>
 8017d42:	459a      	cmp	sl, r3
 8017d44:	d1f8      	bne.n	8017d38 <_dtoa_r+0x6c0>
 8017d46:	9a04      	ldr	r2, [sp, #16]
 8017d48:	3201      	adds	r2, #1
 8017d4a:	9204      	str	r2, [sp, #16]
 8017d4c:	2230      	movs	r2, #48	@ 0x30
 8017d4e:	f88a 2000 	strb.w	r2, [sl]
 8017d52:	781a      	ldrb	r2, [r3, #0]
 8017d54:	3201      	adds	r2, #1
 8017d56:	701a      	strb	r2, [r3, #0]
 8017d58:	e7bd      	b.n	8017cd6 <_dtoa_r+0x65e>
 8017d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8017f48 <_dtoa_r+0x8d0>)
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	f7e8 fc53 	bl	8000608 <__aeabi_dmul>
 8017d62:	2200      	movs	r2, #0
 8017d64:	2300      	movs	r3, #0
 8017d66:	4604      	mov	r4, r0
 8017d68:	460d      	mov	r5, r1
 8017d6a:	f7e8 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8017d6e:	2800      	cmp	r0, #0
 8017d70:	f43f aebb 	beq.w	8017aea <_dtoa_r+0x472>
 8017d74:	e6f0      	b.n	8017b58 <_dtoa_r+0x4e0>
 8017d76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017d78:	2a00      	cmp	r2, #0
 8017d7a:	f000 80db 	beq.w	8017f34 <_dtoa_r+0x8bc>
 8017d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d80:	2a01      	cmp	r2, #1
 8017d82:	f300 80bf 	bgt.w	8017f04 <_dtoa_r+0x88c>
 8017d86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017d88:	2a00      	cmp	r2, #0
 8017d8a:	f000 80b7 	beq.w	8017efc <_dtoa_r+0x884>
 8017d8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8017d92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017d94:	4646      	mov	r6, r8
 8017d96:	9a08      	ldr	r2, [sp, #32]
 8017d98:	2101      	movs	r1, #1
 8017d9a:	441a      	add	r2, r3
 8017d9c:	4658      	mov	r0, fp
 8017d9e:	4498      	add	r8, r3
 8017da0:	9208      	str	r2, [sp, #32]
 8017da2:	f000 fb6b 	bl	801847c <__i2b>
 8017da6:	4605      	mov	r5, r0
 8017da8:	b15e      	cbz	r6, 8017dc2 <_dtoa_r+0x74a>
 8017daa:	9b08      	ldr	r3, [sp, #32]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	dd08      	ble.n	8017dc2 <_dtoa_r+0x74a>
 8017db0:	42b3      	cmp	r3, r6
 8017db2:	9a08      	ldr	r2, [sp, #32]
 8017db4:	bfa8      	it	ge
 8017db6:	4633      	movge	r3, r6
 8017db8:	eba8 0803 	sub.w	r8, r8, r3
 8017dbc:	1af6      	subs	r6, r6, r3
 8017dbe:	1ad3      	subs	r3, r2, r3
 8017dc0:	9308      	str	r3, [sp, #32]
 8017dc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017dc4:	b1f3      	cbz	r3, 8017e04 <_dtoa_r+0x78c>
 8017dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	f000 80b7 	beq.w	8017f3c <_dtoa_r+0x8c4>
 8017dce:	b18c      	cbz	r4, 8017df4 <_dtoa_r+0x77c>
 8017dd0:	4629      	mov	r1, r5
 8017dd2:	4622      	mov	r2, r4
 8017dd4:	4658      	mov	r0, fp
 8017dd6:	f000 fc11 	bl	80185fc <__pow5mult>
 8017dda:	464a      	mov	r2, r9
 8017ddc:	4601      	mov	r1, r0
 8017dde:	4605      	mov	r5, r0
 8017de0:	4658      	mov	r0, fp
 8017de2:	f000 fb61 	bl	80184a8 <__multiply>
 8017de6:	4649      	mov	r1, r9
 8017de8:	9004      	str	r0, [sp, #16]
 8017dea:	4658      	mov	r0, fp
 8017dec:	f000 fa92 	bl	8018314 <_Bfree>
 8017df0:	9b04      	ldr	r3, [sp, #16]
 8017df2:	4699      	mov	r9, r3
 8017df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017df6:	1b1a      	subs	r2, r3, r4
 8017df8:	d004      	beq.n	8017e04 <_dtoa_r+0x78c>
 8017dfa:	4649      	mov	r1, r9
 8017dfc:	4658      	mov	r0, fp
 8017dfe:	f000 fbfd 	bl	80185fc <__pow5mult>
 8017e02:	4681      	mov	r9, r0
 8017e04:	2101      	movs	r1, #1
 8017e06:	4658      	mov	r0, fp
 8017e08:	f000 fb38 	bl	801847c <__i2b>
 8017e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e0e:	4604      	mov	r4, r0
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	f000 81cf 	beq.w	80181b4 <_dtoa_r+0xb3c>
 8017e16:	461a      	mov	r2, r3
 8017e18:	4601      	mov	r1, r0
 8017e1a:	4658      	mov	r0, fp
 8017e1c:	f000 fbee 	bl	80185fc <__pow5mult>
 8017e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e22:	2b01      	cmp	r3, #1
 8017e24:	4604      	mov	r4, r0
 8017e26:	f300 8095 	bgt.w	8017f54 <_dtoa_r+0x8dc>
 8017e2a:	9b02      	ldr	r3, [sp, #8]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f040 8087 	bne.w	8017f40 <_dtoa_r+0x8c8>
 8017e32:	9b03      	ldr	r3, [sp, #12]
 8017e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	f040 8089 	bne.w	8017f50 <_dtoa_r+0x8d8>
 8017e3e:	9b03      	ldr	r3, [sp, #12]
 8017e40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017e44:	0d1b      	lsrs	r3, r3, #20
 8017e46:	051b      	lsls	r3, r3, #20
 8017e48:	b12b      	cbz	r3, 8017e56 <_dtoa_r+0x7de>
 8017e4a:	9b08      	ldr	r3, [sp, #32]
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	9308      	str	r3, [sp, #32]
 8017e50:	f108 0801 	add.w	r8, r8, #1
 8017e54:	2301      	movs	r3, #1
 8017e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	f000 81b0 	beq.w	80181c0 <_dtoa_r+0xb48>
 8017e60:	6923      	ldr	r3, [r4, #16]
 8017e62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017e66:	6918      	ldr	r0, [r3, #16]
 8017e68:	f000 fabc 	bl	80183e4 <__hi0bits>
 8017e6c:	f1c0 0020 	rsb	r0, r0, #32
 8017e70:	9b08      	ldr	r3, [sp, #32]
 8017e72:	4418      	add	r0, r3
 8017e74:	f010 001f 	ands.w	r0, r0, #31
 8017e78:	d077      	beq.n	8017f6a <_dtoa_r+0x8f2>
 8017e7a:	f1c0 0320 	rsb	r3, r0, #32
 8017e7e:	2b04      	cmp	r3, #4
 8017e80:	dd6b      	ble.n	8017f5a <_dtoa_r+0x8e2>
 8017e82:	9b08      	ldr	r3, [sp, #32]
 8017e84:	f1c0 001c 	rsb	r0, r0, #28
 8017e88:	4403      	add	r3, r0
 8017e8a:	4480      	add	r8, r0
 8017e8c:	4406      	add	r6, r0
 8017e8e:	9308      	str	r3, [sp, #32]
 8017e90:	f1b8 0f00 	cmp.w	r8, #0
 8017e94:	dd05      	ble.n	8017ea2 <_dtoa_r+0x82a>
 8017e96:	4649      	mov	r1, r9
 8017e98:	4642      	mov	r2, r8
 8017e9a:	4658      	mov	r0, fp
 8017e9c:	f000 fc08 	bl	80186b0 <__lshift>
 8017ea0:	4681      	mov	r9, r0
 8017ea2:	9b08      	ldr	r3, [sp, #32]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	dd05      	ble.n	8017eb4 <_dtoa_r+0x83c>
 8017ea8:	4621      	mov	r1, r4
 8017eaa:	461a      	mov	r2, r3
 8017eac:	4658      	mov	r0, fp
 8017eae:	f000 fbff 	bl	80186b0 <__lshift>
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d059      	beq.n	8017f6e <_dtoa_r+0x8f6>
 8017eba:	4621      	mov	r1, r4
 8017ebc:	4648      	mov	r0, r9
 8017ebe:	f000 fc63 	bl	8018788 <__mcmp>
 8017ec2:	2800      	cmp	r0, #0
 8017ec4:	da53      	bge.n	8017f6e <_dtoa_r+0x8f6>
 8017ec6:	1e7b      	subs	r3, r7, #1
 8017ec8:	9304      	str	r3, [sp, #16]
 8017eca:	4649      	mov	r1, r9
 8017ecc:	2300      	movs	r3, #0
 8017ece:	220a      	movs	r2, #10
 8017ed0:	4658      	mov	r0, fp
 8017ed2:	f000 fa41 	bl	8018358 <__multadd>
 8017ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017ed8:	4681      	mov	r9, r0
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	f000 8172 	beq.w	80181c4 <_dtoa_r+0xb4c>
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	4629      	mov	r1, r5
 8017ee4:	220a      	movs	r2, #10
 8017ee6:	4658      	mov	r0, fp
 8017ee8:	f000 fa36 	bl	8018358 <__multadd>
 8017eec:	9b00      	ldr	r3, [sp, #0]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	4605      	mov	r5, r0
 8017ef2:	dc67      	bgt.n	8017fc4 <_dtoa_r+0x94c>
 8017ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ef6:	2b02      	cmp	r3, #2
 8017ef8:	dc41      	bgt.n	8017f7e <_dtoa_r+0x906>
 8017efa:	e063      	b.n	8017fc4 <_dtoa_r+0x94c>
 8017efc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017efe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8017f02:	e746      	b.n	8017d92 <_dtoa_r+0x71a>
 8017f04:	9b07      	ldr	r3, [sp, #28]
 8017f06:	1e5c      	subs	r4, r3, #1
 8017f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017f0a:	42a3      	cmp	r3, r4
 8017f0c:	bfbf      	itttt	lt
 8017f0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017f10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8017f12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8017f14:	1ae3      	sublt	r3, r4, r3
 8017f16:	bfb4      	ite	lt
 8017f18:	18d2      	addlt	r2, r2, r3
 8017f1a:	1b1c      	subge	r4, r3, r4
 8017f1c:	9b07      	ldr	r3, [sp, #28]
 8017f1e:	bfbc      	itt	lt
 8017f20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8017f22:	2400      	movlt	r4, #0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	bfb5      	itete	lt
 8017f28:	eba8 0603 	sublt.w	r6, r8, r3
 8017f2c:	9b07      	ldrge	r3, [sp, #28]
 8017f2e:	2300      	movlt	r3, #0
 8017f30:	4646      	movge	r6, r8
 8017f32:	e730      	b.n	8017d96 <_dtoa_r+0x71e>
 8017f34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017f36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017f38:	4646      	mov	r6, r8
 8017f3a:	e735      	b.n	8017da8 <_dtoa_r+0x730>
 8017f3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f3e:	e75c      	b.n	8017dfa <_dtoa_r+0x782>
 8017f40:	2300      	movs	r3, #0
 8017f42:	e788      	b.n	8017e56 <_dtoa_r+0x7de>
 8017f44:	3fe00000 	.word	0x3fe00000
 8017f48:	40240000 	.word	0x40240000
 8017f4c:	40140000 	.word	0x40140000
 8017f50:	9b02      	ldr	r3, [sp, #8]
 8017f52:	e780      	b.n	8017e56 <_dtoa_r+0x7de>
 8017f54:	2300      	movs	r3, #0
 8017f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8017f58:	e782      	b.n	8017e60 <_dtoa_r+0x7e8>
 8017f5a:	d099      	beq.n	8017e90 <_dtoa_r+0x818>
 8017f5c:	9a08      	ldr	r2, [sp, #32]
 8017f5e:	331c      	adds	r3, #28
 8017f60:	441a      	add	r2, r3
 8017f62:	4498      	add	r8, r3
 8017f64:	441e      	add	r6, r3
 8017f66:	9208      	str	r2, [sp, #32]
 8017f68:	e792      	b.n	8017e90 <_dtoa_r+0x818>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	e7f6      	b.n	8017f5c <_dtoa_r+0x8e4>
 8017f6e:	9b07      	ldr	r3, [sp, #28]
 8017f70:	9704      	str	r7, [sp, #16]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	dc20      	bgt.n	8017fb8 <_dtoa_r+0x940>
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f7a:	2b02      	cmp	r3, #2
 8017f7c:	dd1e      	ble.n	8017fbc <_dtoa_r+0x944>
 8017f7e:	9b00      	ldr	r3, [sp, #0]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	f47f aec0 	bne.w	8017d06 <_dtoa_r+0x68e>
 8017f86:	4621      	mov	r1, r4
 8017f88:	2205      	movs	r2, #5
 8017f8a:	4658      	mov	r0, fp
 8017f8c:	f000 f9e4 	bl	8018358 <__multadd>
 8017f90:	4601      	mov	r1, r0
 8017f92:	4604      	mov	r4, r0
 8017f94:	4648      	mov	r0, r9
 8017f96:	f000 fbf7 	bl	8018788 <__mcmp>
 8017f9a:	2800      	cmp	r0, #0
 8017f9c:	f77f aeb3 	ble.w	8017d06 <_dtoa_r+0x68e>
 8017fa0:	4656      	mov	r6, sl
 8017fa2:	2331      	movs	r3, #49	@ 0x31
 8017fa4:	f806 3b01 	strb.w	r3, [r6], #1
 8017fa8:	9b04      	ldr	r3, [sp, #16]
 8017faa:	3301      	adds	r3, #1
 8017fac:	9304      	str	r3, [sp, #16]
 8017fae:	e6ae      	b.n	8017d0e <_dtoa_r+0x696>
 8017fb0:	9c07      	ldr	r4, [sp, #28]
 8017fb2:	9704      	str	r7, [sp, #16]
 8017fb4:	4625      	mov	r5, r4
 8017fb6:	e7f3      	b.n	8017fa0 <_dtoa_r+0x928>
 8017fb8:	9b07      	ldr	r3, [sp, #28]
 8017fba:	9300      	str	r3, [sp, #0]
 8017fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	f000 8104 	beq.w	80181cc <_dtoa_r+0xb54>
 8017fc4:	2e00      	cmp	r6, #0
 8017fc6:	dd05      	ble.n	8017fd4 <_dtoa_r+0x95c>
 8017fc8:	4629      	mov	r1, r5
 8017fca:	4632      	mov	r2, r6
 8017fcc:	4658      	mov	r0, fp
 8017fce:	f000 fb6f 	bl	80186b0 <__lshift>
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d05a      	beq.n	8018090 <_dtoa_r+0xa18>
 8017fda:	6869      	ldr	r1, [r5, #4]
 8017fdc:	4658      	mov	r0, fp
 8017fde:	f000 f959 	bl	8018294 <_Balloc>
 8017fe2:	4606      	mov	r6, r0
 8017fe4:	b928      	cbnz	r0, 8017ff2 <_dtoa_r+0x97a>
 8017fe6:	4b84      	ldr	r3, [pc, #528]	@ (80181f8 <_dtoa_r+0xb80>)
 8017fe8:	4602      	mov	r2, r0
 8017fea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017fee:	f7ff bb5a 	b.w	80176a6 <_dtoa_r+0x2e>
 8017ff2:	692a      	ldr	r2, [r5, #16]
 8017ff4:	3202      	adds	r2, #2
 8017ff6:	0092      	lsls	r2, r2, #2
 8017ff8:	f105 010c 	add.w	r1, r5, #12
 8017ffc:	300c      	adds	r0, #12
 8017ffe:	f7ff fa6c 	bl	80174da <memcpy>
 8018002:	2201      	movs	r2, #1
 8018004:	4631      	mov	r1, r6
 8018006:	4658      	mov	r0, fp
 8018008:	f000 fb52 	bl	80186b0 <__lshift>
 801800c:	f10a 0301 	add.w	r3, sl, #1
 8018010:	9307      	str	r3, [sp, #28]
 8018012:	9b00      	ldr	r3, [sp, #0]
 8018014:	4453      	add	r3, sl
 8018016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018018:	9b02      	ldr	r3, [sp, #8]
 801801a:	f003 0301 	and.w	r3, r3, #1
 801801e:	462f      	mov	r7, r5
 8018020:	930a      	str	r3, [sp, #40]	@ 0x28
 8018022:	4605      	mov	r5, r0
 8018024:	9b07      	ldr	r3, [sp, #28]
 8018026:	4621      	mov	r1, r4
 8018028:	3b01      	subs	r3, #1
 801802a:	4648      	mov	r0, r9
 801802c:	9300      	str	r3, [sp, #0]
 801802e:	f7ff fa99 	bl	8017564 <quorem>
 8018032:	4639      	mov	r1, r7
 8018034:	9002      	str	r0, [sp, #8]
 8018036:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801803a:	4648      	mov	r0, r9
 801803c:	f000 fba4 	bl	8018788 <__mcmp>
 8018040:	462a      	mov	r2, r5
 8018042:	9008      	str	r0, [sp, #32]
 8018044:	4621      	mov	r1, r4
 8018046:	4658      	mov	r0, fp
 8018048:	f000 fbba 	bl	80187c0 <__mdiff>
 801804c:	68c2      	ldr	r2, [r0, #12]
 801804e:	4606      	mov	r6, r0
 8018050:	bb02      	cbnz	r2, 8018094 <_dtoa_r+0xa1c>
 8018052:	4601      	mov	r1, r0
 8018054:	4648      	mov	r0, r9
 8018056:	f000 fb97 	bl	8018788 <__mcmp>
 801805a:	4602      	mov	r2, r0
 801805c:	4631      	mov	r1, r6
 801805e:	4658      	mov	r0, fp
 8018060:	920e      	str	r2, [sp, #56]	@ 0x38
 8018062:	f000 f957 	bl	8018314 <_Bfree>
 8018066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018068:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801806a:	9e07      	ldr	r6, [sp, #28]
 801806c:	ea43 0102 	orr.w	r1, r3, r2
 8018070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018072:	4319      	orrs	r1, r3
 8018074:	d110      	bne.n	8018098 <_dtoa_r+0xa20>
 8018076:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801807a:	d029      	beq.n	80180d0 <_dtoa_r+0xa58>
 801807c:	9b08      	ldr	r3, [sp, #32]
 801807e:	2b00      	cmp	r3, #0
 8018080:	dd02      	ble.n	8018088 <_dtoa_r+0xa10>
 8018082:	9b02      	ldr	r3, [sp, #8]
 8018084:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8018088:	9b00      	ldr	r3, [sp, #0]
 801808a:	f883 8000 	strb.w	r8, [r3]
 801808e:	e63f      	b.n	8017d10 <_dtoa_r+0x698>
 8018090:	4628      	mov	r0, r5
 8018092:	e7bb      	b.n	801800c <_dtoa_r+0x994>
 8018094:	2201      	movs	r2, #1
 8018096:	e7e1      	b.n	801805c <_dtoa_r+0x9e4>
 8018098:	9b08      	ldr	r3, [sp, #32]
 801809a:	2b00      	cmp	r3, #0
 801809c:	db04      	blt.n	80180a8 <_dtoa_r+0xa30>
 801809e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80180a0:	430b      	orrs	r3, r1
 80180a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80180a4:	430b      	orrs	r3, r1
 80180a6:	d120      	bne.n	80180ea <_dtoa_r+0xa72>
 80180a8:	2a00      	cmp	r2, #0
 80180aa:	dded      	ble.n	8018088 <_dtoa_r+0xa10>
 80180ac:	4649      	mov	r1, r9
 80180ae:	2201      	movs	r2, #1
 80180b0:	4658      	mov	r0, fp
 80180b2:	f000 fafd 	bl	80186b0 <__lshift>
 80180b6:	4621      	mov	r1, r4
 80180b8:	4681      	mov	r9, r0
 80180ba:	f000 fb65 	bl	8018788 <__mcmp>
 80180be:	2800      	cmp	r0, #0
 80180c0:	dc03      	bgt.n	80180ca <_dtoa_r+0xa52>
 80180c2:	d1e1      	bne.n	8018088 <_dtoa_r+0xa10>
 80180c4:	f018 0f01 	tst.w	r8, #1
 80180c8:	d0de      	beq.n	8018088 <_dtoa_r+0xa10>
 80180ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80180ce:	d1d8      	bne.n	8018082 <_dtoa_r+0xa0a>
 80180d0:	9a00      	ldr	r2, [sp, #0]
 80180d2:	2339      	movs	r3, #57	@ 0x39
 80180d4:	7013      	strb	r3, [r2, #0]
 80180d6:	4633      	mov	r3, r6
 80180d8:	461e      	mov	r6, r3
 80180da:	3b01      	subs	r3, #1
 80180dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80180e0:	2a39      	cmp	r2, #57	@ 0x39
 80180e2:	d052      	beq.n	801818a <_dtoa_r+0xb12>
 80180e4:	3201      	adds	r2, #1
 80180e6:	701a      	strb	r2, [r3, #0]
 80180e8:	e612      	b.n	8017d10 <_dtoa_r+0x698>
 80180ea:	2a00      	cmp	r2, #0
 80180ec:	dd07      	ble.n	80180fe <_dtoa_r+0xa86>
 80180ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80180f2:	d0ed      	beq.n	80180d0 <_dtoa_r+0xa58>
 80180f4:	9a00      	ldr	r2, [sp, #0]
 80180f6:	f108 0301 	add.w	r3, r8, #1
 80180fa:	7013      	strb	r3, [r2, #0]
 80180fc:	e608      	b.n	8017d10 <_dtoa_r+0x698>
 80180fe:	9b07      	ldr	r3, [sp, #28]
 8018100:	9a07      	ldr	r2, [sp, #28]
 8018102:	f803 8c01 	strb.w	r8, [r3, #-1]
 8018106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018108:	4293      	cmp	r3, r2
 801810a:	d028      	beq.n	801815e <_dtoa_r+0xae6>
 801810c:	4649      	mov	r1, r9
 801810e:	2300      	movs	r3, #0
 8018110:	220a      	movs	r2, #10
 8018112:	4658      	mov	r0, fp
 8018114:	f000 f920 	bl	8018358 <__multadd>
 8018118:	42af      	cmp	r7, r5
 801811a:	4681      	mov	r9, r0
 801811c:	f04f 0300 	mov.w	r3, #0
 8018120:	f04f 020a 	mov.w	r2, #10
 8018124:	4639      	mov	r1, r7
 8018126:	4658      	mov	r0, fp
 8018128:	d107      	bne.n	801813a <_dtoa_r+0xac2>
 801812a:	f000 f915 	bl	8018358 <__multadd>
 801812e:	4607      	mov	r7, r0
 8018130:	4605      	mov	r5, r0
 8018132:	9b07      	ldr	r3, [sp, #28]
 8018134:	3301      	adds	r3, #1
 8018136:	9307      	str	r3, [sp, #28]
 8018138:	e774      	b.n	8018024 <_dtoa_r+0x9ac>
 801813a:	f000 f90d 	bl	8018358 <__multadd>
 801813e:	4629      	mov	r1, r5
 8018140:	4607      	mov	r7, r0
 8018142:	2300      	movs	r3, #0
 8018144:	220a      	movs	r2, #10
 8018146:	4658      	mov	r0, fp
 8018148:	f000 f906 	bl	8018358 <__multadd>
 801814c:	4605      	mov	r5, r0
 801814e:	e7f0      	b.n	8018132 <_dtoa_r+0xaba>
 8018150:	9b00      	ldr	r3, [sp, #0]
 8018152:	2b00      	cmp	r3, #0
 8018154:	bfcc      	ite	gt
 8018156:	461e      	movgt	r6, r3
 8018158:	2601      	movle	r6, #1
 801815a:	4456      	add	r6, sl
 801815c:	2700      	movs	r7, #0
 801815e:	4649      	mov	r1, r9
 8018160:	2201      	movs	r2, #1
 8018162:	4658      	mov	r0, fp
 8018164:	f000 faa4 	bl	80186b0 <__lshift>
 8018168:	4621      	mov	r1, r4
 801816a:	4681      	mov	r9, r0
 801816c:	f000 fb0c 	bl	8018788 <__mcmp>
 8018170:	2800      	cmp	r0, #0
 8018172:	dcb0      	bgt.n	80180d6 <_dtoa_r+0xa5e>
 8018174:	d102      	bne.n	801817c <_dtoa_r+0xb04>
 8018176:	f018 0f01 	tst.w	r8, #1
 801817a:	d1ac      	bne.n	80180d6 <_dtoa_r+0xa5e>
 801817c:	4633      	mov	r3, r6
 801817e:	461e      	mov	r6, r3
 8018180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018184:	2a30      	cmp	r2, #48	@ 0x30
 8018186:	d0fa      	beq.n	801817e <_dtoa_r+0xb06>
 8018188:	e5c2      	b.n	8017d10 <_dtoa_r+0x698>
 801818a:	459a      	cmp	sl, r3
 801818c:	d1a4      	bne.n	80180d8 <_dtoa_r+0xa60>
 801818e:	9b04      	ldr	r3, [sp, #16]
 8018190:	3301      	adds	r3, #1
 8018192:	9304      	str	r3, [sp, #16]
 8018194:	2331      	movs	r3, #49	@ 0x31
 8018196:	f88a 3000 	strb.w	r3, [sl]
 801819a:	e5b9      	b.n	8017d10 <_dtoa_r+0x698>
 801819c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801819e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80181fc <_dtoa_r+0xb84>
 80181a2:	b11b      	cbz	r3, 80181ac <_dtoa_r+0xb34>
 80181a4:	f10a 0308 	add.w	r3, sl, #8
 80181a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80181aa:	6013      	str	r3, [r2, #0]
 80181ac:	4650      	mov	r0, sl
 80181ae:	b019      	add	sp, #100	@ 0x64
 80181b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181b6:	2b01      	cmp	r3, #1
 80181b8:	f77f ae37 	ble.w	8017e2a <_dtoa_r+0x7b2>
 80181bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181be:	930a      	str	r3, [sp, #40]	@ 0x28
 80181c0:	2001      	movs	r0, #1
 80181c2:	e655      	b.n	8017e70 <_dtoa_r+0x7f8>
 80181c4:	9b00      	ldr	r3, [sp, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	f77f aed6 	ble.w	8017f78 <_dtoa_r+0x900>
 80181cc:	4656      	mov	r6, sl
 80181ce:	4621      	mov	r1, r4
 80181d0:	4648      	mov	r0, r9
 80181d2:	f7ff f9c7 	bl	8017564 <quorem>
 80181d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80181da:	f806 8b01 	strb.w	r8, [r6], #1
 80181de:	9b00      	ldr	r3, [sp, #0]
 80181e0:	eba6 020a 	sub.w	r2, r6, sl
 80181e4:	4293      	cmp	r3, r2
 80181e6:	ddb3      	ble.n	8018150 <_dtoa_r+0xad8>
 80181e8:	4649      	mov	r1, r9
 80181ea:	2300      	movs	r3, #0
 80181ec:	220a      	movs	r2, #10
 80181ee:	4658      	mov	r0, fp
 80181f0:	f000 f8b2 	bl	8018358 <__multadd>
 80181f4:	4681      	mov	r9, r0
 80181f6:	e7ea      	b.n	80181ce <_dtoa_r+0xb56>
 80181f8:	0801e114 	.word	0x0801e114
 80181fc:	0801e098 	.word	0x0801e098

08018200 <_free_r>:
 8018200:	b538      	push	{r3, r4, r5, lr}
 8018202:	4605      	mov	r5, r0
 8018204:	2900      	cmp	r1, #0
 8018206:	d041      	beq.n	801828c <_free_r+0x8c>
 8018208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801820c:	1f0c      	subs	r4, r1, #4
 801820e:	2b00      	cmp	r3, #0
 8018210:	bfb8      	it	lt
 8018212:	18e4      	addlt	r4, r4, r3
 8018214:	f7fe fb48 	bl	80168a8 <__malloc_lock>
 8018218:	4a1d      	ldr	r2, [pc, #116]	@ (8018290 <_free_r+0x90>)
 801821a:	6813      	ldr	r3, [r2, #0]
 801821c:	b933      	cbnz	r3, 801822c <_free_r+0x2c>
 801821e:	6063      	str	r3, [r4, #4]
 8018220:	6014      	str	r4, [r2, #0]
 8018222:	4628      	mov	r0, r5
 8018224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018228:	f7fe bb44 	b.w	80168b4 <__malloc_unlock>
 801822c:	42a3      	cmp	r3, r4
 801822e:	d908      	bls.n	8018242 <_free_r+0x42>
 8018230:	6820      	ldr	r0, [r4, #0]
 8018232:	1821      	adds	r1, r4, r0
 8018234:	428b      	cmp	r3, r1
 8018236:	bf01      	itttt	eq
 8018238:	6819      	ldreq	r1, [r3, #0]
 801823a:	685b      	ldreq	r3, [r3, #4]
 801823c:	1809      	addeq	r1, r1, r0
 801823e:	6021      	streq	r1, [r4, #0]
 8018240:	e7ed      	b.n	801821e <_free_r+0x1e>
 8018242:	461a      	mov	r2, r3
 8018244:	685b      	ldr	r3, [r3, #4]
 8018246:	b10b      	cbz	r3, 801824c <_free_r+0x4c>
 8018248:	42a3      	cmp	r3, r4
 801824a:	d9fa      	bls.n	8018242 <_free_r+0x42>
 801824c:	6811      	ldr	r1, [r2, #0]
 801824e:	1850      	adds	r0, r2, r1
 8018250:	42a0      	cmp	r0, r4
 8018252:	d10b      	bne.n	801826c <_free_r+0x6c>
 8018254:	6820      	ldr	r0, [r4, #0]
 8018256:	4401      	add	r1, r0
 8018258:	1850      	adds	r0, r2, r1
 801825a:	4283      	cmp	r3, r0
 801825c:	6011      	str	r1, [r2, #0]
 801825e:	d1e0      	bne.n	8018222 <_free_r+0x22>
 8018260:	6818      	ldr	r0, [r3, #0]
 8018262:	685b      	ldr	r3, [r3, #4]
 8018264:	6053      	str	r3, [r2, #4]
 8018266:	4408      	add	r0, r1
 8018268:	6010      	str	r0, [r2, #0]
 801826a:	e7da      	b.n	8018222 <_free_r+0x22>
 801826c:	d902      	bls.n	8018274 <_free_r+0x74>
 801826e:	230c      	movs	r3, #12
 8018270:	602b      	str	r3, [r5, #0]
 8018272:	e7d6      	b.n	8018222 <_free_r+0x22>
 8018274:	6820      	ldr	r0, [r4, #0]
 8018276:	1821      	adds	r1, r4, r0
 8018278:	428b      	cmp	r3, r1
 801827a:	bf04      	itt	eq
 801827c:	6819      	ldreq	r1, [r3, #0]
 801827e:	685b      	ldreq	r3, [r3, #4]
 8018280:	6063      	str	r3, [r4, #4]
 8018282:	bf04      	itt	eq
 8018284:	1809      	addeq	r1, r1, r0
 8018286:	6021      	streq	r1, [r4, #0]
 8018288:	6054      	str	r4, [r2, #4]
 801828a:	e7ca      	b.n	8018222 <_free_r+0x22>
 801828c:	bd38      	pop	{r3, r4, r5, pc}
 801828e:	bf00      	nop
 8018290:	200034f8 	.word	0x200034f8

08018294 <_Balloc>:
 8018294:	b570      	push	{r4, r5, r6, lr}
 8018296:	69c6      	ldr	r6, [r0, #28]
 8018298:	4604      	mov	r4, r0
 801829a:	460d      	mov	r5, r1
 801829c:	b976      	cbnz	r6, 80182bc <_Balloc+0x28>
 801829e:	2010      	movs	r0, #16
 80182a0:	f7fe fa50 	bl	8016744 <malloc>
 80182a4:	4602      	mov	r2, r0
 80182a6:	61e0      	str	r0, [r4, #28]
 80182a8:	b920      	cbnz	r0, 80182b4 <_Balloc+0x20>
 80182aa:	4b18      	ldr	r3, [pc, #96]	@ (801830c <_Balloc+0x78>)
 80182ac:	4818      	ldr	r0, [pc, #96]	@ (8018310 <_Balloc+0x7c>)
 80182ae:	216b      	movs	r1, #107	@ 0x6b
 80182b0:	f000 fd90 	bl	8018dd4 <__assert_func>
 80182b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80182b8:	6006      	str	r6, [r0, #0]
 80182ba:	60c6      	str	r6, [r0, #12]
 80182bc:	69e6      	ldr	r6, [r4, #28]
 80182be:	68f3      	ldr	r3, [r6, #12]
 80182c0:	b183      	cbz	r3, 80182e4 <_Balloc+0x50>
 80182c2:	69e3      	ldr	r3, [r4, #28]
 80182c4:	68db      	ldr	r3, [r3, #12]
 80182c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80182ca:	b9b8      	cbnz	r0, 80182fc <_Balloc+0x68>
 80182cc:	2101      	movs	r1, #1
 80182ce:	fa01 f605 	lsl.w	r6, r1, r5
 80182d2:	1d72      	adds	r2, r6, #5
 80182d4:	0092      	lsls	r2, r2, #2
 80182d6:	4620      	mov	r0, r4
 80182d8:	f000 fd9a 	bl	8018e10 <_calloc_r>
 80182dc:	b160      	cbz	r0, 80182f8 <_Balloc+0x64>
 80182de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80182e2:	e00e      	b.n	8018302 <_Balloc+0x6e>
 80182e4:	2221      	movs	r2, #33	@ 0x21
 80182e6:	2104      	movs	r1, #4
 80182e8:	4620      	mov	r0, r4
 80182ea:	f000 fd91 	bl	8018e10 <_calloc_r>
 80182ee:	69e3      	ldr	r3, [r4, #28]
 80182f0:	60f0      	str	r0, [r6, #12]
 80182f2:	68db      	ldr	r3, [r3, #12]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d1e4      	bne.n	80182c2 <_Balloc+0x2e>
 80182f8:	2000      	movs	r0, #0
 80182fa:	bd70      	pop	{r4, r5, r6, pc}
 80182fc:	6802      	ldr	r2, [r0, #0]
 80182fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018302:	2300      	movs	r3, #0
 8018304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018308:	e7f7      	b.n	80182fa <_Balloc+0x66>
 801830a:	bf00      	nop
 801830c:	0801e0a5 	.word	0x0801e0a5
 8018310:	0801e125 	.word	0x0801e125

08018314 <_Bfree>:
 8018314:	b570      	push	{r4, r5, r6, lr}
 8018316:	69c6      	ldr	r6, [r0, #28]
 8018318:	4605      	mov	r5, r0
 801831a:	460c      	mov	r4, r1
 801831c:	b976      	cbnz	r6, 801833c <_Bfree+0x28>
 801831e:	2010      	movs	r0, #16
 8018320:	f7fe fa10 	bl	8016744 <malloc>
 8018324:	4602      	mov	r2, r0
 8018326:	61e8      	str	r0, [r5, #28]
 8018328:	b920      	cbnz	r0, 8018334 <_Bfree+0x20>
 801832a:	4b09      	ldr	r3, [pc, #36]	@ (8018350 <_Bfree+0x3c>)
 801832c:	4809      	ldr	r0, [pc, #36]	@ (8018354 <_Bfree+0x40>)
 801832e:	218f      	movs	r1, #143	@ 0x8f
 8018330:	f000 fd50 	bl	8018dd4 <__assert_func>
 8018334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018338:	6006      	str	r6, [r0, #0]
 801833a:	60c6      	str	r6, [r0, #12]
 801833c:	b13c      	cbz	r4, 801834e <_Bfree+0x3a>
 801833e:	69eb      	ldr	r3, [r5, #28]
 8018340:	6862      	ldr	r2, [r4, #4]
 8018342:	68db      	ldr	r3, [r3, #12]
 8018344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018348:	6021      	str	r1, [r4, #0]
 801834a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801834e:	bd70      	pop	{r4, r5, r6, pc}
 8018350:	0801e0a5 	.word	0x0801e0a5
 8018354:	0801e125 	.word	0x0801e125

08018358 <__multadd>:
 8018358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801835c:	690d      	ldr	r5, [r1, #16]
 801835e:	4607      	mov	r7, r0
 8018360:	460c      	mov	r4, r1
 8018362:	461e      	mov	r6, r3
 8018364:	f101 0c14 	add.w	ip, r1, #20
 8018368:	2000      	movs	r0, #0
 801836a:	f8dc 3000 	ldr.w	r3, [ip]
 801836e:	b299      	uxth	r1, r3
 8018370:	fb02 6101 	mla	r1, r2, r1, r6
 8018374:	0c1e      	lsrs	r6, r3, #16
 8018376:	0c0b      	lsrs	r3, r1, #16
 8018378:	fb02 3306 	mla	r3, r2, r6, r3
 801837c:	b289      	uxth	r1, r1
 801837e:	3001      	adds	r0, #1
 8018380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018384:	4285      	cmp	r5, r0
 8018386:	f84c 1b04 	str.w	r1, [ip], #4
 801838a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801838e:	dcec      	bgt.n	801836a <__multadd+0x12>
 8018390:	b30e      	cbz	r6, 80183d6 <__multadd+0x7e>
 8018392:	68a3      	ldr	r3, [r4, #8]
 8018394:	42ab      	cmp	r3, r5
 8018396:	dc19      	bgt.n	80183cc <__multadd+0x74>
 8018398:	6861      	ldr	r1, [r4, #4]
 801839a:	4638      	mov	r0, r7
 801839c:	3101      	adds	r1, #1
 801839e:	f7ff ff79 	bl	8018294 <_Balloc>
 80183a2:	4680      	mov	r8, r0
 80183a4:	b928      	cbnz	r0, 80183b2 <__multadd+0x5a>
 80183a6:	4602      	mov	r2, r0
 80183a8:	4b0c      	ldr	r3, [pc, #48]	@ (80183dc <__multadd+0x84>)
 80183aa:	480d      	ldr	r0, [pc, #52]	@ (80183e0 <__multadd+0x88>)
 80183ac:	21ba      	movs	r1, #186	@ 0xba
 80183ae:	f000 fd11 	bl	8018dd4 <__assert_func>
 80183b2:	6922      	ldr	r2, [r4, #16]
 80183b4:	3202      	adds	r2, #2
 80183b6:	f104 010c 	add.w	r1, r4, #12
 80183ba:	0092      	lsls	r2, r2, #2
 80183bc:	300c      	adds	r0, #12
 80183be:	f7ff f88c 	bl	80174da <memcpy>
 80183c2:	4621      	mov	r1, r4
 80183c4:	4638      	mov	r0, r7
 80183c6:	f7ff ffa5 	bl	8018314 <_Bfree>
 80183ca:	4644      	mov	r4, r8
 80183cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80183d0:	3501      	adds	r5, #1
 80183d2:	615e      	str	r6, [r3, #20]
 80183d4:	6125      	str	r5, [r4, #16]
 80183d6:	4620      	mov	r0, r4
 80183d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183dc:	0801e114 	.word	0x0801e114
 80183e0:	0801e125 	.word	0x0801e125

080183e4 <__hi0bits>:
 80183e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80183e8:	4603      	mov	r3, r0
 80183ea:	bf36      	itet	cc
 80183ec:	0403      	lslcc	r3, r0, #16
 80183ee:	2000      	movcs	r0, #0
 80183f0:	2010      	movcc	r0, #16
 80183f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80183f6:	bf3c      	itt	cc
 80183f8:	021b      	lslcc	r3, r3, #8
 80183fa:	3008      	addcc	r0, #8
 80183fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018400:	bf3c      	itt	cc
 8018402:	011b      	lslcc	r3, r3, #4
 8018404:	3004      	addcc	r0, #4
 8018406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801840a:	bf3c      	itt	cc
 801840c:	009b      	lslcc	r3, r3, #2
 801840e:	3002      	addcc	r0, #2
 8018410:	2b00      	cmp	r3, #0
 8018412:	db05      	blt.n	8018420 <__hi0bits+0x3c>
 8018414:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018418:	f100 0001 	add.w	r0, r0, #1
 801841c:	bf08      	it	eq
 801841e:	2020      	moveq	r0, #32
 8018420:	4770      	bx	lr

08018422 <__lo0bits>:
 8018422:	6803      	ldr	r3, [r0, #0]
 8018424:	4602      	mov	r2, r0
 8018426:	f013 0007 	ands.w	r0, r3, #7
 801842a:	d00b      	beq.n	8018444 <__lo0bits+0x22>
 801842c:	07d9      	lsls	r1, r3, #31
 801842e:	d421      	bmi.n	8018474 <__lo0bits+0x52>
 8018430:	0798      	lsls	r0, r3, #30
 8018432:	bf49      	itett	mi
 8018434:	085b      	lsrmi	r3, r3, #1
 8018436:	089b      	lsrpl	r3, r3, #2
 8018438:	2001      	movmi	r0, #1
 801843a:	6013      	strmi	r3, [r2, #0]
 801843c:	bf5c      	itt	pl
 801843e:	6013      	strpl	r3, [r2, #0]
 8018440:	2002      	movpl	r0, #2
 8018442:	4770      	bx	lr
 8018444:	b299      	uxth	r1, r3
 8018446:	b909      	cbnz	r1, 801844c <__lo0bits+0x2a>
 8018448:	0c1b      	lsrs	r3, r3, #16
 801844a:	2010      	movs	r0, #16
 801844c:	b2d9      	uxtb	r1, r3
 801844e:	b909      	cbnz	r1, 8018454 <__lo0bits+0x32>
 8018450:	3008      	adds	r0, #8
 8018452:	0a1b      	lsrs	r3, r3, #8
 8018454:	0719      	lsls	r1, r3, #28
 8018456:	bf04      	itt	eq
 8018458:	091b      	lsreq	r3, r3, #4
 801845a:	3004      	addeq	r0, #4
 801845c:	0799      	lsls	r1, r3, #30
 801845e:	bf04      	itt	eq
 8018460:	089b      	lsreq	r3, r3, #2
 8018462:	3002      	addeq	r0, #2
 8018464:	07d9      	lsls	r1, r3, #31
 8018466:	d403      	bmi.n	8018470 <__lo0bits+0x4e>
 8018468:	085b      	lsrs	r3, r3, #1
 801846a:	f100 0001 	add.w	r0, r0, #1
 801846e:	d003      	beq.n	8018478 <__lo0bits+0x56>
 8018470:	6013      	str	r3, [r2, #0]
 8018472:	4770      	bx	lr
 8018474:	2000      	movs	r0, #0
 8018476:	4770      	bx	lr
 8018478:	2020      	movs	r0, #32
 801847a:	4770      	bx	lr

0801847c <__i2b>:
 801847c:	b510      	push	{r4, lr}
 801847e:	460c      	mov	r4, r1
 8018480:	2101      	movs	r1, #1
 8018482:	f7ff ff07 	bl	8018294 <_Balloc>
 8018486:	4602      	mov	r2, r0
 8018488:	b928      	cbnz	r0, 8018496 <__i2b+0x1a>
 801848a:	4b05      	ldr	r3, [pc, #20]	@ (80184a0 <__i2b+0x24>)
 801848c:	4805      	ldr	r0, [pc, #20]	@ (80184a4 <__i2b+0x28>)
 801848e:	f240 1145 	movw	r1, #325	@ 0x145
 8018492:	f000 fc9f 	bl	8018dd4 <__assert_func>
 8018496:	2301      	movs	r3, #1
 8018498:	6144      	str	r4, [r0, #20]
 801849a:	6103      	str	r3, [r0, #16]
 801849c:	bd10      	pop	{r4, pc}
 801849e:	bf00      	nop
 80184a0:	0801e114 	.word	0x0801e114
 80184a4:	0801e125 	.word	0x0801e125

080184a8 <__multiply>:
 80184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ac:	4614      	mov	r4, r2
 80184ae:	690a      	ldr	r2, [r1, #16]
 80184b0:	6923      	ldr	r3, [r4, #16]
 80184b2:	429a      	cmp	r2, r3
 80184b4:	bfa8      	it	ge
 80184b6:	4623      	movge	r3, r4
 80184b8:	460f      	mov	r7, r1
 80184ba:	bfa4      	itt	ge
 80184bc:	460c      	movge	r4, r1
 80184be:	461f      	movge	r7, r3
 80184c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80184c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80184c8:	68a3      	ldr	r3, [r4, #8]
 80184ca:	6861      	ldr	r1, [r4, #4]
 80184cc:	eb0a 0609 	add.w	r6, sl, r9
 80184d0:	42b3      	cmp	r3, r6
 80184d2:	b085      	sub	sp, #20
 80184d4:	bfb8      	it	lt
 80184d6:	3101      	addlt	r1, #1
 80184d8:	f7ff fedc 	bl	8018294 <_Balloc>
 80184dc:	b930      	cbnz	r0, 80184ec <__multiply+0x44>
 80184de:	4602      	mov	r2, r0
 80184e0:	4b44      	ldr	r3, [pc, #272]	@ (80185f4 <__multiply+0x14c>)
 80184e2:	4845      	ldr	r0, [pc, #276]	@ (80185f8 <__multiply+0x150>)
 80184e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80184e8:	f000 fc74 	bl	8018dd4 <__assert_func>
 80184ec:	f100 0514 	add.w	r5, r0, #20
 80184f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80184f4:	462b      	mov	r3, r5
 80184f6:	2200      	movs	r2, #0
 80184f8:	4543      	cmp	r3, r8
 80184fa:	d321      	bcc.n	8018540 <__multiply+0x98>
 80184fc:	f107 0114 	add.w	r1, r7, #20
 8018500:	f104 0214 	add.w	r2, r4, #20
 8018504:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018508:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801850c:	9302      	str	r3, [sp, #8]
 801850e:	1b13      	subs	r3, r2, r4
 8018510:	3b15      	subs	r3, #21
 8018512:	f023 0303 	bic.w	r3, r3, #3
 8018516:	3304      	adds	r3, #4
 8018518:	f104 0715 	add.w	r7, r4, #21
 801851c:	42ba      	cmp	r2, r7
 801851e:	bf38      	it	cc
 8018520:	2304      	movcc	r3, #4
 8018522:	9301      	str	r3, [sp, #4]
 8018524:	9b02      	ldr	r3, [sp, #8]
 8018526:	9103      	str	r1, [sp, #12]
 8018528:	428b      	cmp	r3, r1
 801852a:	d80c      	bhi.n	8018546 <__multiply+0x9e>
 801852c:	2e00      	cmp	r6, #0
 801852e:	dd03      	ble.n	8018538 <__multiply+0x90>
 8018530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018534:	2b00      	cmp	r3, #0
 8018536:	d05b      	beq.n	80185f0 <__multiply+0x148>
 8018538:	6106      	str	r6, [r0, #16]
 801853a:	b005      	add	sp, #20
 801853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018540:	f843 2b04 	str.w	r2, [r3], #4
 8018544:	e7d8      	b.n	80184f8 <__multiply+0x50>
 8018546:	f8b1 a000 	ldrh.w	sl, [r1]
 801854a:	f1ba 0f00 	cmp.w	sl, #0
 801854e:	d024      	beq.n	801859a <__multiply+0xf2>
 8018550:	f104 0e14 	add.w	lr, r4, #20
 8018554:	46a9      	mov	r9, r5
 8018556:	f04f 0c00 	mov.w	ip, #0
 801855a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801855e:	f8d9 3000 	ldr.w	r3, [r9]
 8018562:	fa1f fb87 	uxth.w	fp, r7
 8018566:	b29b      	uxth	r3, r3
 8018568:	fb0a 330b 	mla	r3, sl, fp, r3
 801856c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018570:	f8d9 7000 	ldr.w	r7, [r9]
 8018574:	4463      	add	r3, ip
 8018576:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801857a:	fb0a c70b 	mla	r7, sl, fp, ip
 801857e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018582:	b29b      	uxth	r3, r3
 8018584:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018588:	4572      	cmp	r2, lr
 801858a:	f849 3b04 	str.w	r3, [r9], #4
 801858e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018592:	d8e2      	bhi.n	801855a <__multiply+0xb2>
 8018594:	9b01      	ldr	r3, [sp, #4]
 8018596:	f845 c003 	str.w	ip, [r5, r3]
 801859a:	9b03      	ldr	r3, [sp, #12]
 801859c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80185a0:	3104      	adds	r1, #4
 80185a2:	f1b9 0f00 	cmp.w	r9, #0
 80185a6:	d021      	beq.n	80185ec <__multiply+0x144>
 80185a8:	682b      	ldr	r3, [r5, #0]
 80185aa:	f104 0c14 	add.w	ip, r4, #20
 80185ae:	46ae      	mov	lr, r5
 80185b0:	f04f 0a00 	mov.w	sl, #0
 80185b4:	f8bc b000 	ldrh.w	fp, [ip]
 80185b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80185bc:	fb09 770b 	mla	r7, r9, fp, r7
 80185c0:	4457      	add	r7, sl
 80185c2:	b29b      	uxth	r3, r3
 80185c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80185c8:	f84e 3b04 	str.w	r3, [lr], #4
 80185cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80185d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80185d4:	f8be 3000 	ldrh.w	r3, [lr]
 80185d8:	fb09 330a 	mla	r3, r9, sl, r3
 80185dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80185e0:	4562      	cmp	r2, ip
 80185e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80185e6:	d8e5      	bhi.n	80185b4 <__multiply+0x10c>
 80185e8:	9f01      	ldr	r7, [sp, #4]
 80185ea:	51eb      	str	r3, [r5, r7]
 80185ec:	3504      	adds	r5, #4
 80185ee:	e799      	b.n	8018524 <__multiply+0x7c>
 80185f0:	3e01      	subs	r6, #1
 80185f2:	e79b      	b.n	801852c <__multiply+0x84>
 80185f4:	0801e114 	.word	0x0801e114
 80185f8:	0801e125 	.word	0x0801e125

080185fc <__pow5mult>:
 80185fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018600:	4615      	mov	r5, r2
 8018602:	f012 0203 	ands.w	r2, r2, #3
 8018606:	4607      	mov	r7, r0
 8018608:	460e      	mov	r6, r1
 801860a:	d007      	beq.n	801861c <__pow5mult+0x20>
 801860c:	4c25      	ldr	r4, [pc, #148]	@ (80186a4 <__pow5mult+0xa8>)
 801860e:	3a01      	subs	r2, #1
 8018610:	2300      	movs	r3, #0
 8018612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018616:	f7ff fe9f 	bl	8018358 <__multadd>
 801861a:	4606      	mov	r6, r0
 801861c:	10ad      	asrs	r5, r5, #2
 801861e:	d03d      	beq.n	801869c <__pow5mult+0xa0>
 8018620:	69fc      	ldr	r4, [r7, #28]
 8018622:	b97c      	cbnz	r4, 8018644 <__pow5mult+0x48>
 8018624:	2010      	movs	r0, #16
 8018626:	f7fe f88d 	bl	8016744 <malloc>
 801862a:	4602      	mov	r2, r0
 801862c:	61f8      	str	r0, [r7, #28]
 801862e:	b928      	cbnz	r0, 801863c <__pow5mult+0x40>
 8018630:	4b1d      	ldr	r3, [pc, #116]	@ (80186a8 <__pow5mult+0xac>)
 8018632:	481e      	ldr	r0, [pc, #120]	@ (80186ac <__pow5mult+0xb0>)
 8018634:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018638:	f000 fbcc 	bl	8018dd4 <__assert_func>
 801863c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018640:	6004      	str	r4, [r0, #0]
 8018642:	60c4      	str	r4, [r0, #12]
 8018644:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801864c:	b94c      	cbnz	r4, 8018662 <__pow5mult+0x66>
 801864e:	f240 2171 	movw	r1, #625	@ 0x271
 8018652:	4638      	mov	r0, r7
 8018654:	f7ff ff12 	bl	801847c <__i2b>
 8018658:	2300      	movs	r3, #0
 801865a:	f8c8 0008 	str.w	r0, [r8, #8]
 801865e:	4604      	mov	r4, r0
 8018660:	6003      	str	r3, [r0, #0]
 8018662:	f04f 0900 	mov.w	r9, #0
 8018666:	07eb      	lsls	r3, r5, #31
 8018668:	d50a      	bpl.n	8018680 <__pow5mult+0x84>
 801866a:	4631      	mov	r1, r6
 801866c:	4622      	mov	r2, r4
 801866e:	4638      	mov	r0, r7
 8018670:	f7ff ff1a 	bl	80184a8 <__multiply>
 8018674:	4631      	mov	r1, r6
 8018676:	4680      	mov	r8, r0
 8018678:	4638      	mov	r0, r7
 801867a:	f7ff fe4b 	bl	8018314 <_Bfree>
 801867e:	4646      	mov	r6, r8
 8018680:	106d      	asrs	r5, r5, #1
 8018682:	d00b      	beq.n	801869c <__pow5mult+0xa0>
 8018684:	6820      	ldr	r0, [r4, #0]
 8018686:	b938      	cbnz	r0, 8018698 <__pow5mult+0x9c>
 8018688:	4622      	mov	r2, r4
 801868a:	4621      	mov	r1, r4
 801868c:	4638      	mov	r0, r7
 801868e:	f7ff ff0b 	bl	80184a8 <__multiply>
 8018692:	6020      	str	r0, [r4, #0]
 8018694:	f8c0 9000 	str.w	r9, [r0]
 8018698:	4604      	mov	r4, r0
 801869a:	e7e4      	b.n	8018666 <__pow5mult+0x6a>
 801869c:	4630      	mov	r0, r6
 801869e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186a2:	bf00      	nop
 80186a4:	0801e180 	.word	0x0801e180
 80186a8:	0801e0a5 	.word	0x0801e0a5
 80186ac:	0801e125 	.word	0x0801e125

080186b0 <__lshift>:
 80186b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186b4:	460c      	mov	r4, r1
 80186b6:	6849      	ldr	r1, [r1, #4]
 80186b8:	6923      	ldr	r3, [r4, #16]
 80186ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80186be:	68a3      	ldr	r3, [r4, #8]
 80186c0:	4607      	mov	r7, r0
 80186c2:	4691      	mov	r9, r2
 80186c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80186c8:	f108 0601 	add.w	r6, r8, #1
 80186cc:	42b3      	cmp	r3, r6
 80186ce:	db0b      	blt.n	80186e8 <__lshift+0x38>
 80186d0:	4638      	mov	r0, r7
 80186d2:	f7ff fddf 	bl	8018294 <_Balloc>
 80186d6:	4605      	mov	r5, r0
 80186d8:	b948      	cbnz	r0, 80186ee <__lshift+0x3e>
 80186da:	4602      	mov	r2, r0
 80186dc:	4b28      	ldr	r3, [pc, #160]	@ (8018780 <__lshift+0xd0>)
 80186de:	4829      	ldr	r0, [pc, #164]	@ (8018784 <__lshift+0xd4>)
 80186e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80186e4:	f000 fb76 	bl	8018dd4 <__assert_func>
 80186e8:	3101      	adds	r1, #1
 80186ea:	005b      	lsls	r3, r3, #1
 80186ec:	e7ee      	b.n	80186cc <__lshift+0x1c>
 80186ee:	2300      	movs	r3, #0
 80186f0:	f100 0114 	add.w	r1, r0, #20
 80186f4:	f100 0210 	add.w	r2, r0, #16
 80186f8:	4618      	mov	r0, r3
 80186fa:	4553      	cmp	r3, sl
 80186fc:	db33      	blt.n	8018766 <__lshift+0xb6>
 80186fe:	6920      	ldr	r0, [r4, #16]
 8018700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018704:	f104 0314 	add.w	r3, r4, #20
 8018708:	f019 091f 	ands.w	r9, r9, #31
 801870c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018714:	d02b      	beq.n	801876e <__lshift+0xbe>
 8018716:	f1c9 0e20 	rsb	lr, r9, #32
 801871a:	468a      	mov	sl, r1
 801871c:	2200      	movs	r2, #0
 801871e:	6818      	ldr	r0, [r3, #0]
 8018720:	fa00 f009 	lsl.w	r0, r0, r9
 8018724:	4310      	orrs	r0, r2
 8018726:	f84a 0b04 	str.w	r0, [sl], #4
 801872a:	f853 2b04 	ldr.w	r2, [r3], #4
 801872e:	459c      	cmp	ip, r3
 8018730:	fa22 f20e 	lsr.w	r2, r2, lr
 8018734:	d8f3      	bhi.n	801871e <__lshift+0x6e>
 8018736:	ebac 0304 	sub.w	r3, ip, r4
 801873a:	3b15      	subs	r3, #21
 801873c:	f023 0303 	bic.w	r3, r3, #3
 8018740:	3304      	adds	r3, #4
 8018742:	f104 0015 	add.w	r0, r4, #21
 8018746:	4584      	cmp	ip, r0
 8018748:	bf38      	it	cc
 801874a:	2304      	movcc	r3, #4
 801874c:	50ca      	str	r2, [r1, r3]
 801874e:	b10a      	cbz	r2, 8018754 <__lshift+0xa4>
 8018750:	f108 0602 	add.w	r6, r8, #2
 8018754:	3e01      	subs	r6, #1
 8018756:	4638      	mov	r0, r7
 8018758:	612e      	str	r6, [r5, #16]
 801875a:	4621      	mov	r1, r4
 801875c:	f7ff fdda 	bl	8018314 <_Bfree>
 8018760:	4628      	mov	r0, r5
 8018762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018766:	f842 0f04 	str.w	r0, [r2, #4]!
 801876a:	3301      	adds	r3, #1
 801876c:	e7c5      	b.n	80186fa <__lshift+0x4a>
 801876e:	3904      	subs	r1, #4
 8018770:	f853 2b04 	ldr.w	r2, [r3], #4
 8018774:	f841 2f04 	str.w	r2, [r1, #4]!
 8018778:	459c      	cmp	ip, r3
 801877a:	d8f9      	bhi.n	8018770 <__lshift+0xc0>
 801877c:	e7ea      	b.n	8018754 <__lshift+0xa4>
 801877e:	bf00      	nop
 8018780:	0801e114 	.word	0x0801e114
 8018784:	0801e125 	.word	0x0801e125

08018788 <__mcmp>:
 8018788:	690a      	ldr	r2, [r1, #16]
 801878a:	4603      	mov	r3, r0
 801878c:	6900      	ldr	r0, [r0, #16]
 801878e:	1a80      	subs	r0, r0, r2
 8018790:	b530      	push	{r4, r5, lr}
 8018792:	d10e      	bne.n	80187b2 <__mcmp+0x2a>
 8018794:	3314      	adds	r3, #20
 8018796:	3114      	adds	r1, #20
 8018798:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801879c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80187a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80187a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80187a8:	4295      	cmp	r5, r2
 80187aa:	d003      	beq.n	80187b4 <__mcmp+0x2c>
 80187ac:	d205      	bcs.n	80187ba <__mcmp+0x32>
 80187ae:	f04f 30ff 	mov.w	r0, #4294967295
 80187b2:	bd30      	pop	{r4, r5, pc}
 80187b4:	42a3      	cmp	r3, r4
 80187b6:	d3f3      	bcc.n	80187a0 <__mcmp+0x18>
 80187b8:	e7fb      	b.n	80187b2 <__mcmp+0x2a>
 80187ba:	2001      	movs	r0, #1
 80187bc:	e7f9      	b.n	80187b2 <__mcmp+0x2a>
	...

080187c0 <__mdiff>:
 80187c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187c4:	4689      	mov	r9, r1
 80187c6:	4606      	mov	r6, r0
 80187c8:	4611      	mov	r1, r2
 80187ca:	4648      	mov	r0, r9
 80187cc:	4614      	mov	r4, r2
 80187ce:	f7ff ffdb 	bl	8018788 <__mcmp>
 80187d2:	1e05      	subs	r5, r0, #0
 80187d4:	d112      	bne.n	80187fc <__mdiff+0x3c>
 80187d6:	4629      	mov	r1, r5
 80187d8:	4630      	mov	r0, r6
 80187da:	f7ff fd5b 	bl	8018294 <_Balloc>
 80187de:	4602      	mov	r2, r0
 80187e0:	b928      	cbnz	r0, 80187ee <__mdiff+0x2e>
 80187e2:	4b3f      	ldr	r3, [pc, #252]	@ (80188e0 <__mdiff+0x120>)
 80187e4:	f240 2137 	movw	r1, #567	@ 0x237
 80187e8:	483e      	ldr	r0, [pc, #248]	@ (80188e4 <__mdiff+0x124>)
 80187ea:	f000 faf3 	bl	8018dd4 <__assert_func>
 80187ee:	2301      	movs	r3, #1
 80187f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80187f4:	4610      	mov	r0, r2
 80187f6:	b003      	add	sp, #12
 80187f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187fc:	bfbc      	itt	lt
 80187fe:	464b      	movlt	r3, r9
 8018800:	46a1      	movlt	r9, r4
 8018802:	4630      	mov	r0, r6
 8018804:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018808:	bfba      	itte	lt
 801880a:	461c      	movlt	r4, r3
 801880c:	2501      	movlt	r5, #1
 801880e:	2500      	movge	r5, #0
 8018810:	f7ff fd40 	bl	8018294 <_Balloc>
 8018814:	4602      	mov	r2, r0
 8018816:	b918      	cbnz	r0, 8018820 <__mdiff+0x60>
 8018818:	4b31      	ldr	r3, [pc, #196]	@ (80188e0 <__mdiff+0x120>)
 801881a:	f240 2145 	movw	r1, #581	@ 0x245
 801881e:	e7e3      	b.n	80187e8 <__mdiff+0x28>
 8018820:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018824:	6926      	ldr	r6, [r4, #16]
 8018826:	60c5      	str	r5, [r0, #12]
 8018828:	f109 0310 	add.w	r3, r9, #16
 801882c:	f109 0514 	add.w	r5, r9, #20
 8018830:	f104 0e14 	add.w	lr, r4, #20
 8018834:	f100 0b14 	add.w	fp, r0, #20
 8018838:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801883c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018840:	9301      	str	r3, [sp, #4]
 8018842:	46d9      	mov	r9, fp
 8018844:	f04f 0c00 	mov.w	ip, #0
 8018848:	9b01      	ldr	r3, [sp, #4]
 801884a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801884e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018852:	9301      	str	r3, [sp, #4]
 8018854:	fa1f f38a 	uxth.w	r3, sl
 8018858:	4619      	mov	r1, r3
 801885a:	b283      	uxth	r3, r0
 801885c:	1acb      	subs	r3, r1, r3
 801885e:	0c00      	lsrs	r0, r0, #16
 8018860:	4463      	add	r3, ip
 8018862:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018866:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801886a:	b29b      	uxth	r3, r3
 801886c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018870:	4576      	cmp	r6, lr
 8018872:	f849 3b04 	str.w	r3, [r9], #4
 8018876:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801887a:	d8e5      	bhi.n	8018848 <__mdiff+0x88>
 801887c:	1b33      	subs	r3, r6, r4
 801887e:	3b15      	subs	r3, #21
 8018880:	f023 0303 	bic.w	r3, r3, #3
 8018884:	3415      	adds	r4, #21
 8018886:	3304      	adds	r3, #4
 8018888:	42a6      	cmp	r6, r4
 801888a:	bf38      	it	cc
 801888c:	2304      	movcc	r3, #4
 801888e:	441d      	add	r5, r3
 8018890:	445b      	add	r3, fp
 8018892:	461e      	mov	r6, r3
 8018894:	462c      	mov	r4, r5
 8018896:	4544      	cmp	r4, r8
 8018898:	d30e      	bcc.n	80188b8 <__mdiff+0xf8>
 801889a:	f108 0103 	add.w	r1, r8, #3
 801889e:	1b49      	subs	r1, r1, r5
 80188a0:	f021 0103 	bic.w	r1, r1, #3
 80188a4:	3d03      	subs	r5, #3
 80188a6:	45a8      	cmp	r8, r5
 80188a8:	bf38      	it	cc
 80188aa:	2100      	movcc	r1, #0
 80188ac:	440b      	add	r3, r1
 80188ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80188b2:	b191      	cbz	r1, 80188da <__mdiff+0x11a>
 80188b4:	6117      	str	r7, [r2, #16]
 80188b6:	e79d      	b.n	80187f4 <__mdiff+0x34>
 80188b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80188bc:	46e6      	mov	lr, ip
 80188be:	0c08      	lsrs	r0, r1, #16
 80188c0:	fa1c fc81 	uxtah	ip, ip, r1
 80188c4:	4471      	add	r1, lr
 80188c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80188ca:	b289      	uxth	r1, r1
 80188cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80188d0:	f846 1b04 	str.w	r1, [r6], #4
 80188d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80188d8:	e7dd      	b.n	8018896 <__mdiff+0xd6>
 80188da:	3f01      	subs	r7, #1
 80188dc:	e7e7      	b.n	80188ae <__mdiff+0xee>
 80188de:	bf00      	nop
 80188e0:	0801e114 	.word	0x0801e114
 80188e4:	0801e125 	.word	0x0801e125

080188e8 <__d2b>:
 80188e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80188ec:	460f      	mov	r7, r1
 80188ee:	2101      	movs	r1, #1
 80188f0:	ec59 8b10 	vmov	r8, r9, d0
 80188f4:	4616      	mov	r6, r2
 80188f6:	f7ff fccd 	bl	8018294 <_Balloc>
 80188fa:	4604      	mov	r4, r0
 80188fc:	b930      	cbnz	r0, 801890c <__d2b+0x24>
 80188fe:	4602      	mov	r2, r0
 8018900:	4b23      	ldr	r3, [pc, #140]	@ (8018990 <__d2b+0xa8>)
 8018902:	4824      	ldr	r0, [pc, #144]	@ (8018994 <__d2b+0xac>)
 8018904:	f240 310f 	movw	r1, #783	@ 0x30f
 8018908:	f000 fa64 	bl	8018dd4 <__assert_func>
 801890c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018914:	b10d      	cbz	r5, 801891a <__d2b+0x32>
 8018916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801891a:	9301      	str	r3, [sp, #4]
 801891c:	f1b8 0300 	subs.w	r3, r8, #0
 8018920:	d023      	beq.n	801896a <__d2b+0x82>
 8018922:	4668      	mov	r0, sp
 8018924:	9300      	str	r3, [sp, #0]
 8018926:	f7ff fd7c 	bl	8018422 <__lo0bits>
 801892a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801892e:	b1d0      	cbz	r0, 8018966 <__d2b+0x7e>
 8018930:	f1c0 0320 	rsb	r3, r0, #32
 8018934:	fa02 f303 	lsl.w	r3, r2, r3
 8018938:	430b      	orrs	r3, r1
 801893a:	40c2      	lsrs	r2, r0
 801893c:	6163      	str	r3, [r4, #20]
 801893e:	9201      	str	r2, [sp, #4]
 8018940:	9b01      	ldr	r3, [sp, #4]
 8018942:	61a3      	str	r3, [r4, #24]
 8018944:	2b00      	cmp	r3, #0
 8018946:	bf0c      	ite	eq
 8018948:	2201      	moveq	r2, #1
 801894a:	2202      	movne	r2, #2
 801894c:	6122      	str	r2, [r4, #16]
 801894e:	b1a5      	cbz	r5, 801897a <__d2b+0x92>
 8018950:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018954:	4405      	add	r5, r0
 8018956:	603d      	str	r5, [r7, #0]
 8018958:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801895c:	6030      	str	r0, [r6, #0]
 801895e:	4620      	mov	r0, r4
 8018960:	b003      	add	sp, #12
 8018962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018966:	6161      	str	r1, [r4, #20]
 8018968:	e7ea      	b.n	8018940 <__d2b+0x58>
 801896a:	a801      	add	r0, sp, #4
 801896c:	f7ff fd59 	bl	8018422 <__lo0bits>
 8018970:	9b01      	ldr	r3, [sp, #4]
 8018972:	6163      	str	r3, [r4, #20]
 8018974:	3020      	adds	r0, #32
 8018976:	2201      	movs	r2, #1
 8018978:	e7e8      	b.n	801894c <__d2b+0x64>
 801897a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801897e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018982:	6038      	str	r0, [r7, #0]
 8018984:	6918      	ldr	r0, [r3, #16]
 8018986:	f7ff fd2d 	bl	80183e4 <__hi0bits>
 801898a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801898e:	e7e5      	b.n	801895c <__d2b+0x74>
 8018990:	0801e114 	.word	0x0801e114
 8018994:	0801e125 	.word	0x0801e125

08018998 <__ssputs_r>:
 8018998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801899c:	688e      	ldr	r6, [r1, #8]
 801899e:	461f      	mov	r7, r3
 80189a0:	42be      	cmp	r6, r7
 80189a2:	680b      	ldr	r3, [r1, #0]
 80189a4:	4682      	mov	sl, r0
 80189a6:	460c      	mov	r4, r1
 80189a8:	4690      	mov	r8, r2
 80189aa:	d82d      	bhi.n	8018a08 <__ssputs_r+0x70>
 80189ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80189b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80189b4:	d026      	beq.n	8018a04 <__ssputs_r+0x6c>
 80189b6:	6965      	ldr	r5, [r4, #20]
 80189b8:	6909      	ldr	r1, [r1, #16]
 80189ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189be:	eba3 0901 	sub.w	r9, r3, r1
 80189c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80189c6:	1c7b      	adds	r3, r7, #1
 80189c8:	444b      	add	r3, r9
 80189ca:	106d      	asrs	r5, r5, #1
 80189cc:	429d      	cmp	r5, r3
 80189ce:	bf38      	it	cc
 80189d0:	461d      	movcc	r5, r3
 80189d2:	0553      	lsls	r3, r2, #21
 80189d4:	d527      	bpl.n	8018a26 <__ssputs_r+0x8e>
 80189d6:	4629      	mov	r1, r5
 80189d8:	f7fd fee6 	bl	80167a8 <_malloc_r>
 80189dc:	4606      	mov	r6, r0
 80189de:	b360      	cbz	r0, 8018a3a <__ssputs_r+0xa2>
 80189e0:	6921      	ldr	r1, [r4, #16]
 80189e2:	464a      	mov	r2, r9
 80189e4:	f7fe fd79 	bl	80174da <memcpy>
 80189e8:	89a3      	ldrh	r3, [r4, #12]
 80189ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80189ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80189f2:	81a3      	strh	r3, [r4, #12]
 80189f4:	6126      	str	r6, [r4, #16]
 80189f6:	6165      	str	r5, [r4, #20]
 80189f8:	444e      	add	r6, r9
 80189fa:	eba5 0509 	sub.w	r5, r5, r9
 80189fe:	6026      	str	r6, [r4, #0]
 8018a00:	60a5      	str	r5, [r4, #8]
 8018a02:	463e      	mov	r6, r7
 8018a04:	42be      	cmp	r6, r7
 8018a06:	d900      	bls.n	8018a0a <__ssputs_r+0x72>
 8018a08:	463e      	mov	r6, r7
 8018a0a:	6820      	ldr	r0, [r4, #0]
 8018a0c:	4632      	mov	r2, r6
 8018a0e:	4641      	mov	r1, r8
 8018a10:	f000 f9c6 	bl	8018da0 <memmove>
 8018a14:	68a3      	ldr	r3, [r4, #8]
 8018a16:	1b9b      	subs	r3, r3, r6
 8018a18:	60a3      	str	r3, [r4, #8]
 8018a1a:	6823      	ldr	r3, [r4, #0]
 8018a1c:	4433      	add	r3, r6
 8018a1e:	6023      	str	r3, [r4, #0]
 8018a20:	2000      	movs	r0, #0
 8018a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a26:	462a      	mov	r2, r5
 8018a28:	f000 fa18 	bl	8018e5c <_realloc_r>
 8018a2c:	4606      	mov	r6, r0
 8018a2e:	2800      	cmp	r0, #0
 8018a30:	d1e0      	bne.n	80189f4 <__ssputs_r+0x5c>
 8018a32:	6921      	ldr	r1, [r4, #16]
 8018a34:	4650      	mov	r0, sl
 8018a36:	f7ff fbe3 	bl	8018200 <_free_r>
 8018a3a:	230c      	movs	r3, #12
 8018a3c:	f8ca 3000 	str.w	r3, [sl]
 8018a40:	89a3      	ldrh	r3, [r4, #12]
 8018a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a46:	81a3      	strh	r3, [r4, #12]
 8018a48:	f04f 30ff 	mov.w	r0, #4294967295
 8018a4c:	e7e9      	b.n	8018a22 <__ssputs_r+0x8a>
	...

08018a50 <_svfiprintf_r>:
 8018a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a54:	4698      	mov	r8, r3
 8018a56:	898b      	ldrh	r3, [r1, #12]
 8018a58:	061b      	lsls	r3, r3, #24
 8018a5a:	b09d      	sub	sp, #116	@ 0x74
 8018a5c:	4607      	mov	r7, r0
 8018a5e:	460d      	mov	r5, r1
 8018a60:	4614      	mov	r4, r2
 8018a62:	d510      	bpl.n	8018a86 <_svfiprintf_r+0x36>
 8018a64:	690b      	ldr	r3, [r1, #16]
 8018a66:	b973      	cbnz	r3, 8018a86 <_svfiprintf_r+0x36>
 8018a68:	2140      	movs	r1, #64	@ 0x40
 8018a6a:	f7fd fe9d 	bl	80167a8 <_malloc_r>
 8018a6e:	6028      	str	r0, [r5, #0]
 8018a70:	6128      	str	r0, [r5, #16]
 8018a72:	b930      	cbnz	r0, 8018a82 <_svfiprintf_r+0x32>
 8018a74:	230c      	movs	r3, #12
 8018a76:	603b      	str	r3, [r7, #0]
 8018a78:	f04f 30ff 	mov.w	r0, #4294967295
 8018a7c:	b01d      	add	sp, #116	@ 0x74
 8018a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a82:	2340      	movs	r3, #64	@ 0x40
 8018a84:	616b      	str	r3, [r5, #20]
 8018a86:	2300      	movs	r3, #0
 8018a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a8a:	2320      	movs	r3, #32
 8018a8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a94:	2330      	movs	r3, #48	@ 0x30
 8018a96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018c34 <_svfiprintf_r+0x1e4>
 8018a9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018a9e:	f04f 0901 	mov.w	r9, #1
 8018aa2:	4623      	mov	r3, r4
 8018aa4:	469a      	mov	sl, r3
 8018aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018aaa:	b10a      	cbz	r2, 8018ab0 <_svfiprintf_r+0x60>
 8018aac:	2a25      	cmp	r2, #37	@ 0x25
 8018aae:	d1f9      	bne.n	8018aa4 <_svfiprintf_r+0x54>
 8018ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8018ab4:	d00b      	beq.n	8018ace <_svfiprintf_r+0x7e>
 8018ab6:	465b      	mov	r3, fp
 8018ab8:	4622      	mov	r2, r4
 8018aba:	4629      	mov	r1, r5
 8018abc:	4638      	mov	r0, r7
 8018abe:	f7ff ff6b 	bl	8018998 <__ssputs_r>
 8018ac2:	3001      	adds	r0, #1
 8018ac4:	f000 80a7 	beq.w	8018c16 <_svfiprintf_r+0x1c6>
 8018ac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018aca:	445a      	add	r2, fp
 8018acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8018ace:	f89a 3000 	ldrb.w	r3, [sl]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	f000 809f 	beq.w	8018c16 <_svfiprintf_r+0x1c6>
 8018ad8:	2300      	movs	r3, #0
 8018ada:	f04f 32ff 	mov.w	r2, #4294967295
 8018ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ae2:	f10a 0a01 	add.w	sl, sl, #1
 8018ae6:	9304      	str	r3, [sp, #16]
 8018ae8:	9307      	str	r3, [sp, #28]
 8018aea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018aee:	931a      	str	r3, [sp, #104]	@ 0x68
 8018af0:	4654      	mov	r4, sl
 8018af2:	2205      	movs	r2, #5
 8018af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018af8:	484e      	ldr	r0, [pc, #312]	@ (8018c34 <_svfiprintf_r+0x1e4>)
 8018afa:	f7e7 fb71 	bl	80001e0 <memchr>
 8018afe:	9a04      	ldr	r2, [sp, #16]
 8018b00:	b9d8      	cbnz	r0, 8018b3a <_svfiprintf_r+0xea>
 8018b02:	06d0      	lsls	r0, r2, #27
 8018b04:	bf44      	itt	mi
 8018b06:	2320      	movmi	r3, #32
 8018b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b0c:	0711      	lsls	r1, r2, #28
 8018b0e:	bf44      	itt	mi
 8018b10:	232b      	movmi	r3, #43	@ 0x2b
 8018b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b16:	f89a 3000 	ldrb.w	r3, [sl]
 8018b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b1c:	d015      	beq.n	8018b4a <_svfiprintf_r+0xfa>
 8018b1e:	9a07      	ldr	r2, [sp, #28]
 8018b20:	4654      	mov	r4, sl
 8018b22:	2000      	movs	r0, #0
 8018b24:	f04f 0c0a 	mov.w	ip, #10
 8018b28:	4621      	mov	r1, r4
 8018b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b2e:	3b30      	subs	r3, #48	@ 0x30
 8018b30:	2b09      	cmp	r3, #9
 8018b32:	d94b      	bls.n	8018bcc <_svfiprintf_r+0x17c>
 8018b34:	b1b0      	cbz	r0, 8018b64 <_svfiprintf_r+0x114>
 8018b36:	9207      	str	r2, [sp, #28]
 8018b38:	e014      	b.n	8018b64 <_svfiprintf_r+0x114>
 8018b3a:	eba0 0308 	sub.w	r3, r0, r8
 8018b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8018b42:	4313      	orrs	r3, r2
 8018b44:	9304      	str	r3, [sp, #16]
 8018b46:	46a2      	mov	sl, r4
 8018b48:	e7d2      	b.n	8018af0 <_svfiprintf_r+0xa0>
 8018b4a:	9b03      	ldr	r3, [sp, #12]
 8018b4c:	1d19      	adds	r1, r3, #4
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	9103      	str	r1, [sp, #12]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	bfbb      	ittet	lt
 8018b56:	425b      	neglt	r3, r3
 8018b58:	f042 0202 	orrlt.w	r2, r2, #2
 8018b5c:	9307      	strge	r3, [sp, #28]
 8018b5e:	9307      	strlt	r3, [sp, #28]
 8018b60:	bfb8      	it	lt
 8018b62:	9204      	strlt	r2, [sp, #16]
 8018b64:	7823      	ldrb	r3, [r4, #0]
 8018b66:	2b2e      	cmp	r3, #46	@ 0x2e
 8018b68:	d10a      	bne.n	8018b80 <_svfiprintf_r+0x130>
 8018b6a:	7863      	ldrb	r3, [r4, #1]
 8018b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b6e:	d132      	bne.n	8018bd6 <_svfiprintf_r+0x186>
 8018b70:	9b03      	ldr	r3, [sp, #12]
 8018b72:	1d1a      	adds	r2, r3, #4
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	9203      	str	r2, [sp, #12]
 8018b78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018b7c:	3402      	adds	r4, #2
 8018b7e:	9305      	str	r3, [sp, #20]
 8018b80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018c44 <_svfiprintf_r+0x1f4>
 8018b84:	7821      	ldrb	r1, [r4, #0]
 8018b86:	2203      	movs	r2, #3
 8018b88:	4650      	mov	r0, sl
 8018b8a:	f7e7 fb29 	bl	80001e0 <memchr>
 8018b8e:	b138      	cbz	r0, 8018ba0 <_svfiprintf_r+0x150>
 8018b90:	9b04      	ldr	r3, [sp, #16]
 8018b92:	eba0 000a 	sub.w	r0, r0, sl
 8018b96:	2240      	movs	r2, #64	@ 0x40
 8018b98:	4082      	lsls	r2, r0
 8018b9a:	4313      	orrs	r3, r2
 8018b9c:	3401      	adds	r4, #1
 8018b9e:	9304      	str	r3, [sp, #16]
 8018ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ba4:	4824      	ldr	r0, [pc, #144]	@ (8018c38 <_svfiprintf_r+0x1e8>)
 8018ba6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018baa:	2206      	movs	r2, #6
 8018bac:	f7e7 fb18 	bl	80001e0 <memchr>
 8018bb0:	2800      	cmp	r0, #0
 8018bb2:	d036      	beq.n	8018c22 <_svfiprintf_r+0x1d2>
 8018bb4:	4b21      	ldr	r3, [pc, #132]	@ (8018c3c <_svfiprintf_r+0x1ec>)
 8018bb6:	bb1b      	cbnz	r3, 8018c00 <_svfiprintf_r+0x1b0>
 8018bb8:	9b03      	ldr	r3, [sp, #12]
 8018bba:	3307      	adds	r3, #7
 8018bbc:	f023 0307 	bic.w	r3, r3, #7
 8018bc0:	3308      	adds	r3, #8
 8018bc2:	9303      	str	r3, [sp, #12]
 8018bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bc6:	4433      	add	r3, r6
 8018bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8018bca:	e76a      	b.n	8018aa2 <_svfiprintf_r+0x52>
 8018bcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8018bd0:	460c      	mov	r4, r1
 8018bd2:	2001      	movs	r0, #1
 8018bd4:	e7a8      	b.n	8018b28 <_svfiprintf_r+0xd8>
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	3401      	adds	r4, #1
 8018bda:	9305      	str	r3, [sp, #20]
 8018bdc:	4619      	mov	r1, r3
 8018bde:	f04f 0c0a 	mov.w	ip, #10
 8018be2:	4620      	mov	r0, r4
 8018be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018be8:	3a30      	subs	r2, #48	@ 0x30
 8018bea:	2a09      	cmp	r2, #9
 8018bec:	d903      	bls.n	8018bf6 <_svfiprintf_r+0x1a6>
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d0c6      	beq.n	8018b80 <_svfiprintf_r+0x130>
 8018bf2:	9105      	str	r1, [sp, #20]
 8018bf4:	e7c4      	b.n	8018b80 <_svfiprintf_r+0x130>
 8018bf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bfa:	4604      	mov	r4, r0
 8018bfc:	2301      	movs	r3, #1
 8018bfe:	e7f0      	b.n	8018be2 <_svfiprintf_r+0x192>
 8018c00:	ab03      	add	r3, sp, #12
 8018c02:	9300      	str	r3, [sp, #0]
 8018c04:	462a      	mov	r2, r5
 8018c06:	4b0e      	ldr	r3, [pc, #56]	@ (8018c40 <_svfiprintf_r+0x1f0>)
 8018c08:	a904      	add	r1, sp, #16
 8018c0a:	4638      	mov	r0, r7
 8018c0c:	f7fd fef8 	bl	8016a00 <_printf_float>
 8018c10:	1c42      	adds	r2, r0, #1
 8018c12:	4606      	mov	r6, r0
 8018c14:	d1d6      	bne.n	8018bc4 <_svfiprintf_r+0x174>
 8018c16:	89ab      	ldrh	r3, [r5, #12]
 8018c18:	065b      	lsls	r3, r3, #25
 8018c1a:	f53f af2d 	bmi.w	8018a78 <_svfiprintf_r+0x28>
 8018c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018c20:	e72c      	b.n	8018a7c <_svfiprintf_r+0x2c>
 8018c22:	ab03      	add	r3, sp, #12
 8018c24:	9300      	str	r3, [sp, #0]
 8018c26:	462a      	mov	r2, r5
 8018c28:	4b05      	ldr	r3, [pc, #20]	@ (8018c40 <_svfiprintf_r+0x1f0>)
 8018c2a:	a904      	add	r1, sp, #16
 8018c2c:	4638      	mov	r0, r7
 8018c2e:	f7fe f97f 	bl	8016f30 <_printf_i>
 8018c32:	e7ed      	b.n	8018c10 <_svfiprintf_r+0x1c0>
 8018c34:	0801e280 	.word	0x0801e280
 8018c38:	0801e28a 	.word	0x0801e28a
 8018c3c:	08016a01 	.word	0x08016a01
 8018c40:	08018999 	.word	0x08018999
 8018c44:	0801e286 	.word	0x0801e286

08018c48 <__sflush_r>:
 8018c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c50:	0716      	lsls	r6, r2, #28
 8018c52:	4605      	mov	r5, r0
 8018c54:	460c      	mov	r4, r1
 8018c56:	d454      	bmi.n	8018d02 <__sflush_r+0xba>
 8018c58:	684b      	ldr	r3, [r1, #4]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	dc02      	bgt.n	8018c64 <__sflush_r+0x1c>
 8018c5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	dd48      	ble.n	8018cf6 <__sflush_r+0xae>
 8018c64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c66:	2e00      	cmp	r6, #0
 8018c68:	d045      	beq.n	8018cf6 <__sflush_r+0xae>
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018c70:	682f      	ldr	r7, [r5, #0]
 8018c72:	6a21      	ldr	r1, [r4, #32]
 8018c74:	602b      	str	r3, [r5, #0]
 8018c76:	d030      	beq.n	8018cda <__sflush_r+0x92>
 8018c78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018c7a:	89a3      	ldrh	r3, [r4, #12]
 8018c7c:	0759      	lsls	r1, r3, #29
 8018c7e:	d505      	bpl.n	8018c8c <__sflush_r+0x44>
 8018c80:	6863      	ldr	r3, [r4, #4]
 8018c82:	1ad2      	subs	r2, r2, r3
 8018c84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018c86:	b10b      	cbz	r3, 8018c8c <__sflush_r+0x44>
 8018c88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018c8a:	1ad2      	subs	r2, r2, r3
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c90:	6a21      	ldr	r1, [r4, #32]
 8018c92:	4628      	mov	r0, r5
 8018c94:	47b0      	blx	r6
 8018c96:	1c43      	adds	r3, r0, #1
 8018c98:	89a3      	ldrh	r3, [r4, #12]
 8018c9a:	d106      	bne.n	8018caa <__sflush_r+0x62>
 8018c9c:	6829      	ldr	r1, [r5, #0]
 8018c9e:	291d      	cmp	r1, #29
 8018ca0:	d82b      	bhi.n	8018cfa <__sflush_r+0xb2>
 8018ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8018d4c <__sflush_r+0x104>)
 8018ca4:	410a      	asrs	r2, r1
 8018ca6:	07d6      	lsls	r6, r2, #31
 8018ca8:	d427      	bmi.n	8018cfa <__sflush_r+0xb2>
 8018caa:	2200      	movs	r2, #0
 8018cac:	6062      	str	r2, [r4, #4]
 8018cae:	04d9      	lsls	r1, r3, #19
 8018cb0:	6922      	ldr	r2, [r4, #16]
 8018cb2:	6022      	str	r2, [r4, #0]
 8018cb4:	d504      	bpl.n	8018cc0 <__sflush_r+0x78>
 8018cb6:	1c42      	adds	r2, r0, #1
 8018cb8:	d101      	bne.n	8018cbe <__sflush_r+0x76>
 8018cba:	682b      	ldr	r3, [r5, #0]
 8018cbc:	b903      	cbnz	r3, 8018cc0 <__sflush_r+0x78>
 8018cbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8018cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018cc2:	602f      	str	r7, [r5, #0]
 8018cc4:	b1b9      	cbz	r1, 8018cf6 <__sflush_r+0xae>
 8018cc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018cca:	4299      	cmp	r1, r3
 8018ccc:	d002      	beq.n	8018cd4 <__sflush_r+0x8c>
 8018cce:	4628      	mov	r0, r5
 8018cd0:	f7ff fa96 	bl	8018200 <_free_r>
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8018cd8:	e00d      	b.n	8018cf6 <__sflush_r+0xae>
 8018cda:	2301      	movs	r3, #1
 8018cdc:	4628      	mov	r0, r5
 8018cde:	47b0      	blx	r6
 8018ce0:	4602      	mov	r2, r0
 8018ce2:	1c50      	adds	r0, r2, #1
 8018ce4:	d1c9      	bne.n	8018c7a <__sflush_r+0x32>
 8018ce6:	682b      	ldr	r3, [r5, #0]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d0c6      	beq.n	8018c7a <__sflush_r+0x32>
 8018cec:	2b1d      	cmp	r3, #29
 8018cee:	d001      	beq.n	8018cf4 <__sflush_r+0xac>
 8018cf0:	2b16      	cmp	r3, #22
 8018cf2:	d11e      	bne.n	8018d32 <__sflush_r+0xea>
 8018cf4:	602f      	str	r7, [r5, #0]
 8018cf6:	2000      	movs	r0, #0
 8018cf8:	e022      	b.n	8018d40 <__sflush_r+0xf8>
 8018cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018cfe:	b21b      	sxth	r3, r3
 8018d00:	e01b      	b.n	8018d3a <__sflush_r+0xf2>
 8018d02:	690f      	ldr	r7, [r1, #16]
 8018d04:	2f00      	cmp	r7, #0
 8018d06:	d0f6      	beq.n	8018cf6 <__sflush_r+0xae>
 8018d08:	0793      	lsls	r3, r2, #30
 8018d0a:	680e      	ldr	r6, [r1, #0]
 8018d0c:	bf08      	it	eq
 8018d0e:	694b      	ldreq	r3, [r1, #20]
 8018d10:	600f      	str	r7, [r1, #0]
 8018d12:	bf18      	it	ne
 8018d14:	2300      	movne	r3, #0
 8018d16:	eba6 0807 	sub.w	r8, r6, r7
 8018d1a:	608b      	str	r3, [r1, #8]
 8018d1c:	f1b8 0f00 	cmp.w	r8, #0
 8018d20:	dde9      	ble.n	8018cf6 <__sflush_r+0xae>
 8018d22:	6a21      	ldr	r1, [r4, #32]
 8018d24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018d26:	4643      	mov	r3, r8
 8018d28:	463a      	mov	r2, r7
 8018d2a:	4628      	mov	r0, r5
 8018d2c:	47b0      	blx	r6
 8018d2e:	2800      	cmp	r0, #0
 8018d30:	dc08      	bgt.n	8018d44 <__sflush_r+0xfc>
 8018d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d3a:	81a3      	strh	r3, [r4, #12]
 8018d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8018d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d44:	4407      	add	r7, r0
 8018d46:	eba8 0800 	sub.w	r8, r8, r0
 8018d4a:	e7e7      	b.n	8018d1c <__sflush_r+0xd4>
 8018d4c:	dfbffffe 	.word	0xdfbffffe

08018d50 <_fflush_r>:
 8018d50:	b538      	push	{r3, r4, r5, lr}
 8018d52:	690b      	ldr	r3, [r1, #16]
 8018d54:	4605      	mov	r5, r0
 8018d56:	460c      	mov	r4, r1
 8018d58:	b913      	cbnz	r3, 8018d60 <_fflush_r+0x10>
 8018d5a:	2500      	movs	r5, #0
 8018d5c:	4628      	mov	r0, r5
 8018d5e:	bd38      	pop	{r3, r4, r5, pc}
 8018d60:	b118      	cbz	r0, 8018d6a <_fflush_r+0x1a>
 8018d62:	6a03      	ldr	r3, [r0, #32]
 8018d64:	b90b      	cbnz	r3, 8018d6a <_fflush_r+0x1a>
 8018d66:	f7fe fa8f 	bl	8017288 <__sinit>
 8018d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d0f3      	beq.n	8018d5a <_fflush_r+0xa>
 8018d72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018d74:	07d0      	lsls	r0, r2, #31
 8018d76:	d404      	bmi.n	8018d82 <_fflush_r+0x32>
 8018d78:	0599      	lsls	r1, r3, #22
 8018d7a:	d402      	bmi.n	8018d82 <_fflush_r+0x32>
 8018d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d7e:	f7fe fbaa 	bl	80174d6 <__retarget_lock_acquire_recursive>
 8018d82:	4628      	mov	r0, r5
 8018d84:	4621      	mov	r1, r4
 8018d86:	f7ff ff5f 	bl	8018c48 <__sflush_r>
 8018d8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d8c:	07da      	lsls	r2, r3, #31
 8018d8e:	4605      	mov	r5, r0
 8018d90:	d4e4      	bmi.n	8018d5c <_fflush_r+0xc>
 8018d92:	89a3      	ldrh	r3, [r4, #12]
 8018d94:	059b      	lsls	r3, r3, #22
 8018d96:	d4e1      	bmi.n	8018d5c <_fflush_r+0xc>
 8018d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d9a:	f7fe fb9d 	bl	80174d8 <__retarget_lock_release_recursive>
 8018d9e:	e7dd      	b.n	8018d5c <_fflush_r+0xc>

08018da0 <memmove>:
 8018da0:	4288      	cmp	r0, r1
 8018da2:	b510      	push	{r4, lr}
 8018da4:	eb01 0402 	add.w	r4, r1, r2
 8018da8:	d902      	bls.n	8018db0 <memmove+0x10>
 8018daa:	4284      	cmp	r4, r0
 8018dac:	4623      	mov	r3, r4
 8018dae:	d807      	bhi.n	8018dc0 <memmove+0x20>
 8018db0:	1e43      	subs	r3, r0, #1
 8018db2:	42a1      	cmp	r1, r4
 8018db4:	d008      	beq.n	8018dc8 <memmove+0x28>
 8018db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018dbe:	e7f8      	b.n	8018db2 <memmove+0x12>
 8018dc0:	4402      	add	r2, r0
 8018dc2:	4601      	mov	r1, r0
 8018dc4:	428a      	cmp	r2, r1
 8018dc6:	d100      	bne.n	8018dca <memmove+0x2a>
 8018dc8:	bd10      	pop	{r4, pc}
 8018dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018dd2:	e7f7      	b.n	8018dc4 <memmove+0x24>

08018dd4 <__assert_func>:
 8018dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018dd6:	4614      	mov	r4, r2
 8018dd8:	461a      	mov	r2, r3
 8018dda:	4b09      	ldr	r3, [pc, #36]	@ (8018e00 <__assert_func+0x2c>)
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	4605      	mov	r5, r0
 8018de0:	68d8      	ldr	r0, [r3, #12]
 8018de2:	b954      	cbnz	r4, 8018dfa <__assert_func+0x26>
 8018de4:	4b07      	ldr	r3, [pc, #28]	@ (8018e04 <__assert_func+0x30>)
 8018de6:	461c      	mov	r4, r3
 8018de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018dec:	9100      	str	r1, [sp, #0]
 8018dee:	462b      	mov	r3, r5
 8018df0:	4905      	ldr	r1, [pc, #20]	@ (8018e08 <__assert_func+0x34>)
 8018df2:	f000 f86f 	bl	8018ed4 <fiprintf>
 8018df6:	f000 f87f 	bl	8018ef8 <abort>
 8018dfa:	4b04      	ldr	r3, [pc, #16]	@ (8018e0c <__assert_func+0x38>)
 8018dfc:	e7f4      	b.n	8018de8 <__assert_func+0x14>
 8018dfe:	bf00      	nop
 8018e00:	200001d8 	.word	0x200001d8
 8018e04:	0801e2d6 	.word	0x0801e2d6
 8018e08:	0801e2a8 	.word	0x0801e2a8
 8018e0c:	0801e29b 	.word	0x0801e29b

08018e10 <_calloc_r>:
 8018e10:	b570      	push	{r4, r5, r6, lr}
 8018e12:	fba1 5402 	umull	r5, r4, r1, r2
 8018e16:	b93c      	cbnz	r4, 8018e28 <_calloc_r+0x18>
 8018e18:	4629      	mov	r1, r5
 8018e1a:	f7fd fcc5 	bl	80167a8 <_malloc_r>
 8018e1e:	4606      	mov	r6, r0
 8018e20:	b928      	cbnz	r0, 8018e2e <_calloc_r+0x1e>
 8018e22:	2600      	movs	r6, #0
 8018e24:	4630      	mov	r0, r6
 8018e26:	bd70      	pop	{r4, r5, r6, pc}
 8018e28:	220c      	movs	r2, #12
 8018e2a:	6002      	str	r2, [r0, #0]
 8018e2c:	e7f9      	b.n	8018e22 <_calloc_r+0x12>
 8018e2e:	462a      	mov	r2, r5
 8018e30:	4621      	mov	r1, r4
 8018e32:	f7fe fac2 	bl	80173ba <memset>
 8018e36:	e7f5      	b.n	8018e24 <_calloc_r+0x14>

08018e38 <__ascii_mbtowc>:
 8018e38:	b082      	sub	sp, #8
 8018e3a:	b901      	cbnz	r1, 8018e3e <__ascii_mbtowc+0x6>
 8018e3c:	a901      	add	r1, sp, #4
 8018e3e:	b142      	cbz	r2, 8018e52 <__ascii_mbtowc+0x1a>
 8018e40:	b14b      	cbz	r3, 8018e56 <__ascii_mbtowc+0x1e>
 8018e42:	7813      	ldrb	r3, [r2, #0]
 8018e44:	600b      	str	r3, [r1, #0]
 8018e46:	7812      	ldrb	r2, [r2, #0]
 8018e48:	1e10      	subs	r0, r2, #0
 8018e4a:	bf18      	it	ne
 8018e4c:	2001      	movne	r0, #1
 8018e4e:	b002      	add	sp, #8
 8018e50:	4770      	bx	lr
 8018e52:	4610      	mov	r0, r2
 8018e54:	e7fb      	b.n	8018e4e <__ascii_mbtowc+0x16>
 8018e56:	f06f 0001 	mvn.w	r0, #1
 8018e5a:	e7f8      	b.n	8018e4e <__ascii_mbtowc+0x16>

08018e5c <_realloc_r>:
 8018e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e60:	4680      	mov	r8, r0
 8018e62:	4615      	mov	r5, r2
 8018e64:	460c      	mov	r4, r1
 8018e66:	b921      	cbnz	r1, 8018e72 <_realloc_r+0x16>
 8018e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e6c:	4611      	mov	r1, r2
 8018e6e:	f7fd bc9b 	b.w	80167a8 <_malloc_r>
 8018e72:	b92a      	cbnz	r2, 8018e80 <_realloc_r+0x24>
 8018e74:	f7ff f9c4 	bl	8018200 <_free_r>
 8018e78:	2400      	movs	r4, #0
 8018e7a:	4620      	mov	r0, r4
 8018e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e80:	f000 f841 	bl	8018f06 <_malloc_usable_size_r>
 8018e84:	4285      	cmp	r5, r0
 8018e86:	4606      	mov	r6, r0
 8018e88:	d802      	bhi.n	8018e90 <_realloc_r+0x34>
 8018e8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018e8e:	d8f4      	bhi.n	8018e7a <_realloc_r+0x1e>
 8018e90:	4629      	mov	r1, r5
 8018e92:	4640      	mov	r0, r8
 8018e94:	f7fd fc88 	bl	80167a8 <_malloc_r>
 8018e98:	4607      	mov	r7, r0
 8018e9a:	2800      	cmp	r0, #0
 8018e9c:	d0ec      	beq.n	8018e78 <_realloc_r+0x1c>
 8018e9e:	42b5      	cmp	r5, r6
 8018ea0:	462a      	mov	r2, r5
 8018ea2:	4621      	mov	r1, r4
 8018ea4:	bf28      	it	cs
 8018ea6:	4632      	movcs	r2, r6
 8018ea8:	f7fe fb17 	bl	80174da <memcpy>
 8018eac:	4621      	mov	r1, r4
 8018eae:	4640      	mov	r0, r8
 8018eb0:	f7ff f9a6 	bl	8018200 <_free_r>
 8018eb4:	463c      	mov	r4, r7
 8018eb6:	e7e0      	b.n	8018e7a <_realloc_r+0x1e>

08018eb8 <__ascii_wctomb>:
 8018eb8:	4603      	mov	r3, r0
 8018eba:	4608      	mov	r0, r1
 8018ebc:	b141      	cbz	r1, 8018ed0 <__ascii_wctomb+0x18>
 8018ebe:	2aff      	cmp	r2, #255	@ 0xff
 8018ec0:	d904      	bls.n	8018ecc <__ascii_wctomb+0x14>
 8018ec2:	228a      	movs	r2, #138	@ 0x8a
 8018ec4:	601a      	str	r2, [r3, #0]
 8018ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8018eca:	4770      	bx	lr
 8018ecc:	700a      	strb	r2, [r1, #0]
 8018ece:	2001      	movs	r0, #1
 8018ed0:	4770      	bx	lr
	...

08018ed4 <fiprintf>:
 8018ed4:	b40e      	push	{r1, r2, r3}
 8018ed6:	b503      	push	{r0, r1, lr}
 8018ed8:	4601      	mov	r1, r0
 8018eda:	ab03      	add	r3, sp, #12
 8018edc:	4805      	ldr	r0, [pc, #20]	@ (8018ef4 <fiprintf+0x20>)
 8018ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ee2:	6800      	ldr	r0, [r0, #0]
 8018ee4:	9301      	str	r3, [sp, #4]
 8018ee6:	f000 f83f 	bl	8018f68 <_vfiprintf_r>
 8018eea:	b002      	add	sp, #8
 8018eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ef0:	b003      	add	sp, #12
 8018ef2:	4770      	bx	lr
 8018ef4:	200001d8 	.word	0x200001d8

08018ef8 <abort>:
 8018ef8:	b508      	push	{r3, lr}
 8018efa:	2006      	movs	r0, #6
 8018efc:	f000 fa08 	bl	8019310 <raise>
 8018f00:	2001      	movs	r0, #1
 8018f02:	f7f4 ffa3 	bl	800de4c <_exit>

08018f06 <_malloc_usable_size_r>:
 8018f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f0a:	1f18      	subs	r0, r3, #4
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	bfbc      	itt	lt
 8018f10:	580b      	ldrlt	r3, [r1, r0]
 8018f12:	18c0      	addlt	r0, r0, r3
 8018f14:	4770      	bx	lr

08018f16 <__sfputc_r>:
 8018f16:	6893      	ldr	r3, [r2, #8]
 8018f18:	3b01      	subs	r3, #1
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	b410      	push	{r4}
 8018f1e:	6093      	str	r3, [r2, #8]
 8018f20:	da08      	bge.n	8018f34 <__sfputc_r+0x1e>
 8018f22:	6994      	ldr	r4, [r2, #24]
 8018f24:	42a3      	cmp	r3, r4
 8018f26:	db01      	blt.n	8018f2c <__sfputc_r+0x16>
 8018f28:	290a      	cmp	r1, #10
 8018f2a:	d103      	bne.n	8018f34 <__sfputc_r+0x1e>
 8018f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f30:	f000 b932 	b.w	8019198 <__swbuf_r>
 8018f34:	6813      	ldr	r3, [r2, #0]
 8018f36:	1c58      	adds	r0, r3, #1
 8018f38:	6010      	str	r0, [r2, #0]
 8018f3a:	7019      	strb	r1, [r3, #0]
 8018f3c:	4608      	mov	r0, r1
 8018f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f42:	4770      	bx	lr

08018f44 <__sfputs_r>:
 8018f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f46:	4606      	mov	r6, r0
 8018f48:	460f      	mov	r7, r1
 8018f4a:	4614      	mov	r4, r2
 8018f4c:	18d5      	adds	r5, r2, r3
 8018f4e:	42ac      	cmp	r4, r5
 8018f50:	d101      	bne.n	8018f56 <__sfputs_r+0x12>
 8018f52:	2000      	movs	r0, #0
 8018f54:	e007      	b.n	8018f66 <__sfputs_r+0x22>
 8018f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f5a:	463a      	mov	r2, r7
 8018f5c:	4630      	mov	r0, r6
 8018f5e:	f7ff ffda 	bl	8018f16 <__sfputc_r>
 8018f62:	1c43      	adds	r3, r0, #1
 8018f64:	d1f3      	bne.n	8018f4e <__sfputs_r+0xa>
 8018f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018f68 <_vfiprintf_r>:
 8018f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f6c:	460d      	mov	r5, r1
 8018f6e:	b09d      	sub	sp, #116	@ 0x74
 8018f70:	4614      	mov	r4, r2
 8018f72:	4698      	mov	r8, r3
 8018f74:	4606      	mov	r6, r0
 8018f76:	b118      	cbz	r0, 8018f80 <_vfiprintf_r+0x18>
 8018f78:	6a03      	ldr	r3, [r0, #32]
 8018f7a:	b90b      	cbnz	r3, 8018f80 <_vfiprintf_r+0x18>
 8018f7c:	f7fe f984 	bl	8017288 <__sinit>
 8018f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018f82:	07d9      	lsls	r1, r3, #31
 8018f84:	d405      	bmi.n	8018f92 <_vfiprintf_r+0x2a>
 8018f86:	89ab      	ldrh	r3, [r5, #12]
 8018f88:	059a      	lsls	r2, r3, #22
 8018f8a:	d402      	bmi.n	8018f92 <_vfiprintf_r+0x2a>
 8018f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018f8e:	f7fe faa2 	bl	80174d6 <__retarget_lock_acquire_recursive>
 8018f92:	89ab      	ldrh	r3, [r5, #12]
 8018f94:	071b      	lsls	r3, r3, #28
 8018f96:	d501      	bpl.n	8018f9c <_vfiprintf_r+0x34>
 8018f98:	692b      	ldr	r3, [r5, #16]
 8018f9a:	b99b      	cbnz	r3, 8018fc4 <_vfiprintf_r+0x5c>
 8018f9c:	4629      	mov	r1, r5
 8018f9e:	4630      	mov	r0, r6
 8018fa0:	f000 f938 	bl	8019214 <__swsetup_r>
 8018fa4:	b170      	cbz	r0, 8018fc4 <_vfiprintf_r+0x5c>
 8018fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018fa8:	07dc      	lsls	r4, r3, #31
 8018faa:	d504      	bpl.n	8018fb6 <_vfiprintf_r+0x4e>
 8018fac:	f04f 30ff 	mov.w	r0, #4294967295
 8018fb0:	b01d      	add	sp, #116	@ 0x74
 8018fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb6:	89ab      	ldrh	r3, [r5, #12]
 8018fb8:	0598      	lsls	r0, r3, #22
 8018fba:	d4f7      	bmi.n	8018fac <_vfiprintf_r+0x44>
 8018fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018fbe:	f7fe fa8b 	bl	80174d8 <__retarget_lock_release_recursive>
 8018fc2:	e7f3      	b.n	8018fac <_vfiprintf_r+0x44>
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8018fc8:	2320      	movs	r3, #32
 8018fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8018fd2:	2330      	movs	r3, #48	@ 0x30
 8018fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019184 <_vfiprintf_r+0x21c>
 8018fd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018fdc:	f04f 0901 	mov.w	r9, #1
 8018fe0:	4623      	mov	r3, r4
 8018fe2:	469a      	mov	sl, r3
 8018fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018fe8:	b10a      	cbz	r2, 8018fee <_vfiprintf_r+0x86>
 8018fea:	2a25      	cmp	r2, #37	@ 0x25
 8018fec:	d1f9      	bne.n	8018fe2 <_vfiprintf_r+0x7a>
 8018fee:	ebba 0b04 	subs.w	fp, sl, r4
 8018ff2:	d00b      	beq.n	801900c <_vfiprintf_r+0xa4>
 8018ff4:	465b      	mov	r3, fp
 8018ff6:	4622      	mov	r2, r4
 8018ff8:	4629      	mov	r1, r5
 8018ffa:	4630      	mov	r0, r6
 8018ffc:	f7ff ffa2 	bl	8018f44 <__sfputs_r>
 8019000:	3001      	adds	r0, #1
 8019002:	f000 80a7 	beq.w	8019154 <_vfiprintf_r+0x1ec>
 8019006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019008:	445a      	add	r2, fp
 801900a:	9209      	str	r2, [sp, #36]	@ 0x24
 801900c:	f89a 3000 	ldrb.w	r3, [sl]
 8019010:	2b00      	cmp	r3, #0
 8019012:	f000 809f 	beq.w	8019154 <_vfiprintf_r+0x1ec>
 8019016:	2300      	movs	r3, #0
 8019018:	f04f 32ff 	mov.w	r2, #4294967295
 801901c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019020:	f10a 0a01 	add.w	sl, sl, #1
 8019024:	9304      	str	r3, [sp, #16]
 8019026:	9307      	str	r3, [sp, #28]
 8019028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801902c:	931a      	str	r3, [sp, #104]	@ 0x68
 801902e:	4654      	mov	r4, sl
 8019030:	2205      	movs	r2, #5
 8019032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019036:	4853      	ldr	r0, [pc, #332]	@ (8019184 <_vfiprintf_r+0x21c>)
 8019038:	f7e7 f8d2 	bl	80001e0 <memchr>
 801903c:	9a04      	ldr	r2, [sp, #16]
 801903e:	b9d8      	cbnz	r0, 8019078 <_vfiprintf_r+0x110>
 8019040:	06d1      	lsls	r1, r2, #27
 8019042:	bf44      	itt	mi
 8019044:	2320      	movmi	r3, #32
 8019046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801904a:	0713      	lsls	r3, r2, #28
 801904c:	bf44      	itt	mi
 801904e:	232b      	movmi	r3, #43	@ 0x2b
 8019050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019054:	f89a 3000 	ldrb.w	r3, [sl]
 8019058:	2b2a      	cmp	r3, #42	@ 0x2a
 801905a:	d015      	beq.n	8019088 <_vfiprintf_r+0x120>
 801905c:	9a07      	ldr	r2, [sp, #28]
 801905e:	4654      	mov	r4, sl
 8019060:	2000      	movs	r0, #0
 8019062:	f04f 0c0a 	mov.w	ip, #10
 8019066:	4621      	mov	r1, r4
 8019068:	f811 3b01 	ldrb.w	r3, [r1], #1
 801906c:	3b30      	subs	r3, #48	@ 0x30
 801906e:	2b09      	cmp	r3, #9
 8019070:	d94b      	bls.n	801910a <_vfiprintf_r+0x1a2>
 8019072:	b1b0      	cbz	r0, 80190a2 <_vfiprintf_r+0x13a>
 8019074:	9207      	str	r2, [sp, #28]
 8019076:	e014      	b.n	80190a2 <_vfiprintf_r+0x13a>
 8019078:	eba0 0308 	sub.w	r3, r0, r8
 801907c:	fa09 f303 	lsl.w	r3, r9, r3
 8019080:	4313      	orrs	r3, r2
 8019082:	9304      	str	r3, [sp, #16]
 8019084:	46a2      	mov	sl, r4
 8019086:	e7d2      	b.n	801902e <_vfiprintf_r+0xc6>
 8019088:	9b03      	ldr	r3, [sp, #12]
 801908a:	1d19      	adds	r1, r3, #4
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	9103      	str	r1, [sp, #12]
 8019090:	2b00      	cmp	r3, #0
 8019092:	bfbb      	ittet	lt
 8019094:	425b      	neglt	r3, r3
 8019096:	f042 0202 	orrlt.w	r2, r2, #2
 801909a:	9307      	strge	r3, [sp, #28]
 801909c:	9307      	strlt	r3, [sp, #28]
 801909e:	bfb8      	it	lt
 80190a0:	9204      	strlt	r2, [sp, #16]
 80190a2:	7823      	ldrb	r3, [r4, #0]
 80190a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80190a6:	d10a      	bne.n	80190be <_vfiprintf_r+0x156>
 80190a8:	7863      	ldrb	r3, [r4, #1]
 80190aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80190ac:	d132      	bne.n	8019114 <_vfiprintf_r+0x1ac>
 80190ae:	9b03      	ldr	r3, [sp, #12]
 80190b0:	1d1a      	adds	r2, r3, #4
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	9203      	str	r2, [sp, #12]
 80190b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80190ba:	3402      	adds	r4, #2
 80190bc:	9305      	str	r3, [sp, #20]
 80190be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019194 <_vfiprintf_r+0x22c>
 80190c2:	7821      	ldrb	r1, [r4, #0]
 80190c4:	2203      	movs	r2, #3
 80190c6:	4650      	mov	r0, sl
 80190c8:	f7e7 f88a 	bl	80001e0 <memchr>
 80190cc:	b138      	cbz	r0, 80190de <_vfiprintf_r+0x176>
 80190ce:	9b04      	ldr	r3, [sp, #16]
 80190d0:	eba0 000a 	sub.w	r0, r0, sl
 80190d4:	2240      	movs	r2, #64	@ 0x40
 80190d6:	4082      	lsls	r2, r0
 80190d8:	4313      	orrs	r3, r2
 80190da:	3401      	adds	r4, #1
 80190dc:	9304      	str	r3, [sp, #16]
 80190de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190e2:	4829      	ldr	r0, [pc, #164]	@ (8019188 <_vfiprintf_r+0x220>)
 80190e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80190e8:	2206      	movs	r2, #6
 80190ea:	f7e7 f879 	bl	80001e0 <memchr>
 80190ee:	2800      	cmp	r0, #0
 80190f0:	d03f      	beq.n	8019172 <_vfiprintf_r+0x20a>
 80190f2:	4b26      	ldr	r3, [pc, #152]	@ (801918c <_vfiprintf_r+0x224>)
 80190f4:	bb1b      	cbnz	r3, 801913e <_vfiprintf_r+0x1d6>
 80190f6:	9b03      	ldr	r3, [sp, #12]
 80190f8:	3307      	adds	r3, #7
 80190fa:	f023 0307 	bic.w	r3, r3, #7
 80190fe:	3308      	adds	r3, #8
 8019100:	9303      	str	r3, [sp, #12]
 8019102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019104:	443b      	add	r3, r7
 8019106:	9309      	str	r3, [sp, #36]	@ 0x24
 8019108:	e76a      	b.n	8018fe0 <_vfiprintf_r+0x78>
 801910a:	fb0c 3202 	mla	r2, ip, r2, r3
 801910e:	460c      	mov	r4, r1
 8019110:	2001      	movs	r0, #1
 8019112:	e7a8      	b.n	8019066 <_vfiprintf_r+0xfe>
 8019114:	2300      	movs	r3, #0
 8019116:	3401      	adds	r4, #1
 8019118:	9305      	str	r3, [sp, #20]
 801911a:	4619      	mov	r1, r3
 801911c:	f04f 0c0a 	mov.w	ip, #10
 8019120:	4620      	mov	r0, r4
 8019122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019126:	3a30      	subs	r2, #48	@ 0x30
 8019128:	2a09      	cmp	r2, #9
 801912a:	d903      	bls.n	8019134 <_vfiprintf_r+0x1cc>
 801912c:	2b00      	cmp	r3, #0
 801912e:	d0c6      	beq.n	80190be <_vfiprintf_r+0x156>
 8019130:	9105      	str	r1, [sp, #20]
 8019132:	e7c4      	b.n	80190be <_vfiprintf_r+0x156>
 8019134:	fb0c 2101 	mla	r1, ip, r1, r2
 8019138:	4604      	mov	r4, r0
 801913a:	2301      	movs	r3, #1
 801913c:	e7f0      	b.n	8019120 <_vfiprintf_r+0x1b8>
 801913e:	ab03      	add	r3, sp, #12
 8019140:	9300      	str	r3, [sp, #0]
 8019142:	462a      	mov	r2, r5
 8019144:	4b12      	ldr	r3, [pc, #72]	@ (8019190 <_vfiprintf_r+0x228>)
 8019146:	a904      	add	r1, sp, #16
 8019148:	4630      	mov	r0, r6
 801914a:	f7fd fc59 	bl	8016a00 <_printf_float>
 801914e:	4607      	mov	r7, r0
 8019150:	1c78      	adds	r0, r7, #1
 8019152:	d1d6      	bne.n	8019102 <_vfiprintf_r+0x19a>
 8019154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019156:	07d9      	lsls	r1, r3, #31
 8019158:	d405      	bmi.n	8019166 <_vfiprintf_r+0x1fe>
 801915a:	89ab      	ldrh	r3, [r5, #12]
 801915c:	059a      	lsls	r2, r3, #22
 801915e:	d402      	bmi.n	8019166 <_vfiprintf_r+0x1fe>
 8019160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019162:	f7fe f9b9 	bl	80174d8 <__retarget_lock_release_recursive>
 8019166:	89ab      	ldrh	r3, [r5, #12]
 8019168:	065b      	lsls	r3, r3, #25
 801916a:	f53f af1f 	bmi.w	8018fac <_vfiprintf_r+0x44>
 801916e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019170:	e71e      	b.n	8018fb0 <_vfiprintf_r+0x48>
 8019172:	ab03      	add	r3, sp, #12
 8019174:	9300      	str	r3, [sp, #0]
 8019176:	462a      	mov	r2, r5
 8019178:	4b05      	ldr	r3, [pc, #20]	@ (8019190 <_vfiprintf_r+0x228>)
 801917a:	a904      	add	r1, sp, #16
 801917c:	4630      	mov	r0, r6
 801917e:	f7fd fed7 	bl	8016f30 <_printf_i>
 8019182:	e7e4      	b.n	801914e <_vfiprintf_r+0x1e6>
 8019184:	0801e280 	.word	0x0801e280
 8019188:	0801e28a 	.word	0x0801e28a
 801918c:	08016a01 	.word	0x08016a01
 8019190:	08018f45 	.word	0x08018f45
 8019194:	0801e286 	.word	0x0801e286

08019198 <__swbuf_r>:
 8019198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801919a:	460e      	mov	r6, r1
 801919c:	4614      	mov	r4, r2
 801919e:	4605      	mov	r5, r0
 80191a0:	b118      	cbz	r0, 80191aa <__swbuf_r+0x12>
 80191a2:	6a03      	ldr	r3, [r0, #32]
 80191a4:	b90b      	cbnz	r3, 80191aa <__swbuf_r+0x12>
 80191a6:	f7fe f86f 	bl	8017288 <__sinit>
 80191aa:	69a3      	ldr	r3, [r4, #24]
 80191ac:	60a3      	str	r3, [r4, #8]
 80191ae:	89a3      	ldrh	r3, [r4, #12]
 80191b0:	071a      	lsls	r2, r3, #28
 80191b2:	d501      	bpl.n	80191b8 <__swbuf_r+0x20>
 80191b4:	6923      	ldr	r3, [r4, #16]
 80191b6:	b943      	cbnz	r3, 80191ca <__swbuf_r+0x32>
 80191b8:	4621      	mov	r1, r4
 80191ba:	4628      	mov	r0, r5
 80191bc:	f000 f82a 	bl	8019214 <__swsetup_r>
 80191c0:	b118      	cbz	r0, 80191ca <__swbuf_r+0x32>
 80191c2:	f04f 37ff 	mov.w	r7, #4294967295
 80191c6:	4638      	mov	r0, r7
 80191c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ca:	6823      	ldr	r3, [r4, #0]
 80191cc:	6922      	ldr	r2, [r4, #16]
 80191ce:	1a98      	subs	r0, r3, r2
 80191d0:	6963      	ldr	r3, [r4, #20]
 80191d2:	b2f6      	uxtb	r6, r6
 80191d4:	4283      	cmp	r3, r0
 80191d6:	4637      	mov	r7, r6
 80191d8:	dc05      	bgt.n	80191e6 <__swbuf_r+0x4e>
 80191da:	4621      	mov	r1, r4
 80191dc:	4628      	mov	r0, r5
 80191de:	f7ff fdb7 	bl	8018d50 <_fflush_r>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	d1ed      	bne.n	80191c2 <__swbuf_r+0x2a>
 80191e6:	68a3      	ldr	r3, [r4, #8]
 80191e8:	3b01      	subs	r3, #1
 80191ea:	60a3      	str	r3, [r4, #8]
 80191ec:	6823      	ldr	r3, [r4, #0]
 80191ee:	1c5a      	adds	r2, r3, #1
 80191f0:	6022      	str	r2, [r4, #0]
 80191f2:	701e      	strb	r6, [r3, #0]
 80191f4:	6962      	ldr	r2, [r4, #20]
 80191f6:	1c43      	adds	r3, r0, #1
 80191f8:	429a      	cmp	r2, r3
 80191fa:	d004      	beq.n	8019206 <__swbuf_r+0x6e>
 80191fc:	89a3      	ldrh	r3, [r4, #12]
 80191fe:	07db      	lsls	r3, r3, #31
 8019200:	d5e1      	bpl.n	80191c6 <__swbuf_r+0x2e>
 8019202:	2e0a      	cmp	r6, #10
 8019204:	d1df      	bne.n	80191c6 <__swbuf_r+0x2e>
 8019206:	4621      	mov	r1, r4
 8019208:	4628      	mov	r0, r5
 801920a:	f7ff fda1 	bl	8018d50 <_fflush_r>
 801920e:	2800      	cmp	r0, #0
 8019210:	d0d9      	beq.n	80191c6 <__swbuf_r+0x2e>
 8019212:	e7d6      	b.n	80191c2 <__swbuf_r+0x2a>

08019214 <__swsetup_r>:
 8019214:	b538      	push	{r3, r4, r5, lr}
 8019216:	4b29      	ldr	r3, [pc, #164]	@ (80192bc <__swsetup_r+0xa8>)
 8019218:	4605      	mov	r5, r0
 801921a:	6818      	ldr	r0, [r3, #0]
 801921c:	460c      	mov	r4, r1
 801921e:	b118      	cbz	r0, 8019228 <__swsetup_r+0x14>
 8019220:	6a03      	ldr	r3, [r0, #32]
 8019222:	b90b      	cbnz	r3, 8019228 <__swsetup_r+0x14>
 8019224:	f7fe f830 	bl	8017288 <__sinit>
 8019228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801922c:	0719      	lsls	r1, r3, #28
 801922e:	d422      	bmi.n	8019276 <__swsetup_r+0x62>
 8019230:	06da      	lsls	r2, r3, #27
 8019232:	d407      	bmi.n	8019244 <__swsetup_r+0x30>
 8019234:	2209      	movs	r2, #9
 8019236:	602a      	str	r2, [r5, #0]
 8019238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801923c:	81a3      	strh	r3, [r4, #12]
 801923e:	f04f 30ff 	mov.w	r0, #4294967295
 8019242:	e033      	b.n	80192ac <__swsetup_r+0x98>
 8019244:	0758      	lsls	r0, r3, #29
 8019246:	d512      	bpl.n	801926e <__swsetup_r+0x5a>
 8019248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801924a:	b141      	cbz	r1, 801925e <__swsetup_r+0x4a>
 801924c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019250:	4299      	cmp	r1, r3
 8019252:	d002      	beq.n	801925a <__swsetup_r+0x46>
 8019254:	4628      	mov	r0, r5
 8019256:	f7fe ffd3 	bl	8018200 <_free_r>
 801925a:	2300      	movs	r3, #0
 801925c:	6363      	str	r3, [r4, #52]	@ 0x34
 801925e:	89a3      	ldrh	r3, [r4, #12]
 8019260:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019264:	81a3      	strh	r3, [r4, #12]
 8019266:	2300      	movs	r3, #0
 8019268:	6063      	str	r3, [r4, #4]
 801926a:	6923      	ldr	r3, [r4, #16]
 801926c:	6023      	str	r3, [r4, #0]
 801926e:	89a3      	ldrh	r3, [r4, #12]
 8019270:	f043 0308 	orr.w	r3, r3, #8
 8019274:	81a3      	strh	r3, [r4, #12]
 8019276:	6923      	ldr	r3, [r4, #16]
 8019278:	b94b      	cbnz	r3, 801928e <__swsetup_r+0x7a>
 801927a:	89a3      	ldrh	r3, [r4, #12]
 801927c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019284:	d003      	beq.n	801928e <__swsetup_r+0x7a>
 8019286:	4621      	mov	r1, r4
 8019288:	4628      	mov	r0, r5
 801928a:	f000 f883 	bl	8019394 <__smakebuf_r>
 801928e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019292:	f013 0201 	ands.w	r2, r3, #1
 8019296:	d00a      	beq.n	80192ae <__swsetup_r+0x9a>
 8019298:	2200      	movs	r2, #0
 801929a:	60a2      	str	r2, [r4, #8]
 801929c:	6962      	ldr	r2, [r4, #20]
 801929e:	4252      	negs	r2, r2
 80192a0:	61a2      	str	r2, [r4, #24]
 80192a2:	6922      	ldr	r2, [r4, #16]
 80192a4:	b942      	cbnz	r2, 80192b8 <__swsetup_r+0xa4>
 80192a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80192aa:	d1c5      	bne.n	8019238 <__swsetup_r+0x24>
 80192ac:	bd38      	pop	{r3, r4, r5, pc}
 80192ae:	0799      	lsls	r1, r3, #30
 80192b0:	bf58      	it	pl
 80192b2:	6962      	ldrpl	r2, [r4, #20]
 80192b4:	60a2      	str	r2, [r4, #8]
 80192b6:	e7f4      	b.n	80192a2 <__swsetup_r+0x8e>
 80192b8:	2000      	movs	r0, #0
 80192ba:	e7f7      	b.n	80192ac <__swsetup_r+0x98>
 80192bc:	200001d8 	.word	0x200001d8

080192c0 <_raise_r>:
 80192c0:	291f      	cmp	r1, #31
 80192c2:	b538      	push	{r3, r4, r5, lr}
 80192c4:	4605      	mov	r5, r0
 80192c6:	460c      	mov	r4, r1
 80192c8:	d904      	bls.n	80192d4 <_raise_r+0x14>
 80192ca:	2316      	movs	r3, #22
 80192cc:	6003      	str	r3, [r0, #0]
 80192ce:	f04f 30ff 	mov.w	r0, #4294967295
 80192d2:	bd38      	pop	{r3, r4, r5, pc}
 80192d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80192d6:	b112      	cbz	r2, 80192de <_raise_r+0x1e>
 80192d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80192dc:	b94b      	cbnz	r3, 80192f2 <_raise_r+0x32>
 80192de:	4628      	mov	r0, r5
 80192e0:	f000 f830 	bl	8019344 <_getpid_r>
 80192e4:	4622      	mov	r2, r4
 80192e6:	4601      	mov	r1, r0
 80192e8:	4628      	mov	r0, r5
 80192ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192ee:	f000 b817 	b.w	8019320 <_kill_r>
 80192f2:	2b01      	cmp	r3, #1
 80192f4:	d00a      	beq.n	801930c <_raise_r+0x4c>
 80192f6:	1c59      	adds	r1, r3, #1
 80192f8:	d103      	bne.n	8019302 <_raise_r+0x42>
 80192fa:	2316      	movs	r3, #22
 80192fc:	6003      	str	r3, [r0, #0]
 80192fe:	2001      	movs	r0, #1
 8019300:	e7e7      	b.n	80192d2 <_raise_r+0x12>
 8019302:	2100      	movs	r1, #0
 8019304:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019308:	4620      	mov	r0, r4
 801930a:	4798      	blx	r3
 801930c:	2000      	movs	r0, #0
 801930e:	e7e0      	b.n	80192d2 <_raise_r+0x12>

08019310 <raise>:
 8019310:	4b02      	ldr	r3, [pc, #8]	@ (801931c <raise+0xc>)
 8019312:	4601      	mov	r1, r0
 8019314:	6818      	ldr	r0, [r3, #0]
 8019316:	f7ff bfd3 	b.w	80192c0 <_raise_r>
 801931a:	bf00      	nop
 801931c:	200001d8 	.word	0x200001d8

08019320 <_kill_r>:
 8019320:	b538      	push	{r3, r4, r5, lr}
 8019322:	4d07      	ldr	r5, [pc, #28]	@ (8019340 <_kill_r+0x20>)
 8019324:	2300      	movs	r3, #0
 8019326:	4604      	mov	r4, r0
 8019328:	4608      	mov	r0, r1
 801932a:	4611      	mov	r1, r2
 801932c:	602b      	str	r3, [r5, #0]
 801932e:	f7f4 fd7d 	bl	800de2c <_kill>
 8019332:	1c43      	adds	r3, r0, #1
 8019334:	d102      	bne.n	801933c <_kill_r+0x1c>
 8019336:	682b      	ldr	r3, [r5, #0]
 8019338:	b103      	cbz	r3, 801933c <_kill_r+0x1c>
 801933a:	6023      	str	r3, [r4, #0]
 801933c:	bd38      	pop	{r3, r4, r5, pc}
 801933e:	bf00      	nop
 8019340:	20003638 	.word	0x20003638

08019344 <_getpid_r>:
 8019344:	f7f4 bd6a 	b.w	800de1c <_getpid>

08019348 <__swhatbuf_r>:
 8019348:	b570      	push	{r4, r5, r6, lr}
 801934a:	460c      	mov	r4, r1
 801934c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019350:	2900      	cmp	r1, #0
 8019352:	b096      	sub	sp, #88	@ 0x58
 8019354:	4615      	mov	r5, r2
 8019356:	461e      	mov	r6, r3
 8019358:	da0d      	bge.n	8019376 <__swhatbuf_r+0x2e>
 801935a:	89a3      	ldrh	r3, [r4, #12]
 801935c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019360:	f04f 0100 	mov.w	r1, #0
 8019364:	bf14      	ite	ne
 8019366:	2340      	movne	r3, #64	@ 0x40
 8019368:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801936c:	2000      	movs	r0, #0
 801936e:	6031      	str	r1, [r6, #0]
 8019370:	602b      	str	r3, [r5, #0]
 8019372:	b016      	add	sp, #88	@ 0x58
 8019374:	bd70      	pop	{r4, r5, r6, pc}
 8019376:	466a      	mov	r2, sp
 8019378:	f000 f848 	bl	801940c <_fstat_r>
 801937c:	2800      	cmp	r0, #0
 801937e:	dbec      	blt.n	801935a <__swhatbuf_r+0x12>
 8019380:	9901      	ldr	r1, [sp, #4]
 8019382:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019386:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801938a:	4259      	negs	r1, r3
 801938c:	4159      	adcs	r1, r3
 801938e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019392:	e7eb      	b.n	801936c <__swhatbuf_r+0x24>

08019394 <__smakebuf_r>:
 8019394:	898b      	ldrh	r3, [r1, #12]
 8019396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019398:	079d      	lsls	r5, r3, #30
 801939a:	4606      	mov	r6, r0
 801939c:	460c      	mov	r4, r1
 801939e:	d507      	bpl.n	80193b0 <__smakebuf_r+0x1c>
 80193a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80193a4:	6023      	str	r3, [r4, #0]
 80193a6:	6123      	str	r3, [r4, #16]
 80193a8:	2301      	movs	r3, #1
 80193aa:	6163      	str	r3, [r4, #20]
 80193ac:	b003      	add	sp, #12
 80193ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193b0:	ab01      	add	r3, sp, #4
 80193b2:	466a      	mov	r2, sp
 80193b4:	f7ff ffc8 	bl	8019348 <__swhatbuf_r>
 80193b8:	9f00      	ldr	r7, [sp, #0]
 80193ba:	4605      	mov	r5, r0
 80193bc:	4639      	mov	r1, r7
 80193be:	4630      	mov	r0, r6
 80193c0:	f7fd f9f2 	bl	80167a8 <_malloc_r>
 80193c4:	b948      	cbnz	r0, 80193da <__smakebuf_r+0x46>
 80193c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193ca:	059a      	lsls	r2, r3, #22
 80193cc:	d4ee      	bmi.n	80193ac <__smakebuf_r+0x18>
 80193ce:	f023 0303 	bic.w	r3, r3, #3
 80193d2:	f043 0302 	orr.w	r3, r3, #2
 80193d6:	81a3      	strh	r3, [r4, #12]
 80193d8:	e7e2      	b.n	80193a0 <__smakebuf_r+0xc>
 80193da:	89a3      	ldrh	r3, [r4, #12]
 80193dc:	6020      	str	r0, [r4, #0]
 80193de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80193e2:	81a3      	strh	r3, [r4, #12]
 80193e4:	9b01      	ldr	r3, [sp, #4]
 80193e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80193ea:	b15b      	cbz	r3, 8019404 <__smakebuf_r+0x70>
 80193ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80193f0:	4630      	mov	r0, r6
 80193f2:	f000 f81d 	bl	8019430 <_isatty_r>
 80193f6:	b128      	cbz	r0, 8019404 <__smakebuf_r+0x70>
 80193f8:	89a3      	ldrh	r3, [r4, #12]
 80193fa:	f023 0303 	bic.w	r3, r3, #3
 80193fe:	f043 0301 	orr.w	r3, r3, #1
 8019402:	81a3      	strh	r3, [r4, #12]
 8019404:	89a3      	ldrh	r3, [r4, #12]
 8019406:	431d      	orrs	r5, r3
 8019408:	81a5      	strh	r5, [r4, #12]
 801940a:	e7cf      	b.n	80193ac <__smakebuf_r+0x18>

0801940c <_fstat_r>:
 801940c:	b538      	push	{r3, r4, r5, lr}
 801940e:	4d07      	ldr	r5, [pc, #28]	@ (801942c <_fstat_r+0x20>)
 8019410:	2300      	movs	r3, #0
 8019412:	4604      	mov	r4, r0
 8019414:	4608      	mov	r0, r1
 8019416:	4611      	mov	r1, r2
 8019418:	602b      	str	r3, [r5, #0]
 801941a:	f7f4 fd67 	bl	800deec <_fstat>
 801941e:	1c43      	adds	r3, r0, #1
 8019420:	d102      	bne.n	8019428 <_fstat_r+0x1c>
 8019422:	682b      	ldr	r3, [r5, #0]
 8019424:	b103      	cbz	r3, 8019428 <_fstat_r+0x1c>
 8019426:	6023      	str	r3, [r4, #0]
 8019428:	bd38      	pop	{r3, r4, r5, pc}
 801942a:	bf00      	nop
 801942c:	20003638 	.word	0x20003638

08019430 <_isatty_r>:
 8019430:	b538      	push	{r3, r4, r5, lr}
 8019432:	4d06      	ldr	r5, [pc, #24]	@ (801944c <_isatty_r+0x1c>)
 8019434:	2300      	movs	r3, #0
 8019436:	4604      	mov	r4, r0
 8019438:	4608      	mov	r0, r1
 801943a:	602b      	str	r3, [r5, #0]
 801943c:	f7f4 fd66 	bl	800df0c <_isatty>
 8019440:	1c43      	adds	r3, r0, #1
 8019442:	d102      	bne.n	801944a <_isatty_r+0x1a>
 8019444:	682b      	ldr	r3, [r5, #0]
 8019446:	b103      	cbz	r3, 801944a <_isatty_r+0x1a>
 8019448:	6023      	str	r3, [r4, #0]
 801944a:	bd38      	pop	{r3, r4, r5, pc}
 801944c:	20003638 	.word	0x20003638

08019450 <pow>:
 8019450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019452:	ed2d 8b02 	vpush	{d8}
 8019456:	eeb0 8a40 	vmov.f32	s16, s0
 801945a:	eef0 8a60 	vmov.f32	s17, s1
 801945e:	ec55 4b11 	vmov	r4, r5, d1
 8019462:	f000 fcf1 	bl	8019e48 <__ieee754_pow>
 8019466:	4622      	mov	r2, r4
 8019468:	462b      	mov	r3, r5
 801946a:	4620      	mov	r0, r4
 801946c:	4629      	mov	r1, r5
 801946e:	ec57 6b10 	vmov	r6, r7, d0
 8019472:	f7e7 fb63 	bl	8000b3c <__aeabi_dcmpun>
 8019476:	2800      	cmp	r0, #0
 8019478:	d13b      	bne.n	80194f2 <pow+0xa2>
 801947a:	ec51 0b18 	vmov	r0, r1, d8
 801947e:	2200      	movs	r2, #0
 8019480:	2300      	movs	r3, #0
 8019482:	f7e7 fb29 	bl	8000ad8 <__aeabi_dcmpeq>
 8019486:	b1b8      	cbz	r0, 80194b8 <pow+0x68>
 8019488:	2200      	movs	r2, #0
 801948a:	2300      	movs	r3, #0
 801948c:	4620      	mov	r0, r4
 801948e:	4629      	mov	r1, r5
 8019490:	f7e7 fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 8019494:	2800      	cmp	r0, #0
 8019496:	d146      	bne.n	8019526 <pow+0xd6>
 8019498:	ec45 4b10 	vmov	d0, r4, r5
 801949c:	f000 f91c 	bl	80196d8 <finite>
 80194a0:	b338      	cbz	r0, 80194f2 <pow+0xa2>
 80194a2:	2200      	movs	r2, #0
 80194a4:	2300      	movs	r3, #0
 80194a6:	4620      	mov	r0, r4
 80194a8:	4629      	mov	r1, r5
 80194aa:	f7e7 fb1f 	bl	8000aec <__aeabi_dcmplt>
 80194ae:	b300      	cbz	r0, 80194f2 <pow+0xa2>
 80194b0:	f7fd ffe6 	bl	8017480 <__errno>
 80194b4:	2322      	movs	r3, #34	@ 0x22
 80194b6:	e01b      	b.n	80194f0 <pow+0xa0>
 80194b8:	ec47 6b10 	vmov	d0, r6, r7
 80194bc:	f000 f90c 	bl	80196d8 <finite>
 80194c0:	b9e0      	cbnz	r0, 80194fc <pow+0xac>
 80194c2:	eeb0 0a48 	vmov.f32	s0, s16
 80194c6:	eef0 0a68 	vmov.f32	s1, s17
 80194ca:	f000 f905 	bl	80196d8 <finite>
 80194ce:	b1a8      	cbz	r0, 80194fc <pow+0xac>
 80194d0:	ec45 4b10 	vmov	d0, r4, r5
 80194d4:	f000 f900 	bl	80196d8 <finite>
 80194d8:	b180      	cbz	r0, 80194fc <pow+0xac>
 80194da:	4632      	mov	r2, r6
 80194dc:	463b      	mov	r3, r7
 80194de:	4630      	mov	r0, r6
 80194e0:	4639      	mov	r1, r7
 80194e2:	f7e7 fb2b 	bl	8000b3c <__aeabi_dcmpun>
 80194e6:	2800      	cmp	r0, #0
 80194e8:	d0e2      	beq.n	80194b0 <pow+0x60>
 80194ea:	f7fd ffc9 	bl	8017480 <__errno>
 80194ee:	2321      	movs	r3, #33	@ 0x21
 80194f0:	6003      	str	r3, [r0, #0]
 80194f2:	ecbd 8b02 	vpop	{d8}
 80194f6:	ec47 6b10 	vmov	d0, r6, r7
 80194fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194fc:	2200      	movs	r2, #0
 80194fe:	2300      	movs	r3, #0
 8019500:	4630      	mov	r0, r6
 8019502:	4639      	mov	r1, r7
 8019504:	f7e7 fae8 	bl	8000ad8 <__aeabi_dcmpeq>
 8019508:	2800      	cmp	r0, #0
 801950a:	d0f2      	beq.n	80194f2 <pow+0xa2>
 801950c:	eeb0 0a48 	vmov.f32	s0, s16
 8019510:	eef0 0a68 	vmov.f32	s1, s17
 8019514:	f000 f8e0 	bl	80196d8 <finite>
 8019518:	2800      	cmp	r0, #0
 801951a:	d0ea      	beq.n	80194f2 <pow+0xa2>
 801951c:	ec45 4b10 	vmov	d0, r4, r5
 8019520:	f000 f8da 	bl	80196d8 <finite>
 8019524:	e7c3      	b.n	80194ae <pow+0x5e>
 8019526:	4f01      	ldr	r7, [pc, #4]	@ (801952c <pow+0xdc>)
 8019528:	2600      	movs	r6, #0
 801952a:	e7e2      	b.n	80194f2 <pow+0xa2>
 801952c:	3ff00000 	.word	0x3ff00000

08019530 <sqrt>:
 8019530:	b538      	push	{r3, r4, r5, lr}
 8019532:	ed2d 8b02 	vpush	{d8}
 8019536:	ec55 4b10 	vmov	r4, r5, d0
 801953a:	f000 fae5 	bl	8019b08 <__ieee754_sqrt>
 801953e:	4622      	mov	r2, r4
 8019540:	462b      	mov	r3, r5
 8019542:	4620      	mov	r0, r4
 8019544:	4629      	mov	r1, r5
 8019546:	eeb0 8a40 	vmov.f32	s16, s0
 801954a:	eef0 8a60 	vmov.f32	s17, s1
 801954e:	f7e7 faf5 	bl	8000b3c <__aeabi_dcmpun>
 8019552:	b990      	cbnz	r0, 801957a <sqrt+0x4a>
 8019554:	2200      	movs	r2, #0
 8019556:	2300      	movs	r3, #0
 8019558:	4620      	mov	r0, r4
 801955a:	4629      	mov	r1, r5
 801955c:	f7e7 fac6 	bl	8000aec <__aeabi_dcmplt>
 8019560:	b158      	cbz	r0, 801957a <sqrt+0x4a>
 8019562:	f7fd ff8d 	bl	8017480 <__errno>
 8019566:	2321      	movs	r3, #33	@ 0x21
 8019568:	6003      	str	r3, [r0, #0]
 801956a:	2200      	movs	r2, #0
 801956c:	2300      	movs	r3, #0
 801956e:	4610      	mov	r0, r2
 8019570:	4619      	mov	r1, r3
 8019572:	f7e7 f973 	bl	800085c <__aeabi_ddiv>
 8019576:	ec41 0b18 	vmov	d8, r0, r1
 801957a:	eeb0 0a48 	vmov.f32	s0, s16
 801957e:	eef0 0a68 	vmov.f32	s1, s17
 8019582:	ecbd 8b02 	vpop	{d8}
 8019586:	bd38      	pop	{r3, r4, r5, pc}

08019588 <sqrtf>:
 8019588:	b508      	push	{r3, lr}
 801958a:	ed2d 8b02 	vpush	{d8}
 801958e:	eeb0 8a40 	vmov.f32	s16, s0
 8019592:	f000 fb93 	bl	8019cbc <__ieee754_sqrtf>
 8019596:	eeb4 8a48 	vcmp.f32	s16, s16
 801959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801959e:	d60c      	bvs.n	80195ba <sqrtf+0x32>
 80195a0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80195c0 <sqrtf+0x38>
 80195a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80195a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ac:	d505      	bpl.n	80195ba <sqrtf+0x32>
 80195ae:	f7fd ff67 	bl	8017480 <__errno>
 80195b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80195b6:	2321      	movs	r3, #33	@ 0x21
 80195b8:	6003      	str	r3, [r0, #0]
 80195ba:	ecbd 8b02 	vpop	{d8}
 80195be:	bd08      	pop	{r3, pc}
 80195c0:	00000000 	.word	0x00000000

080195c4 <cosf>:
 80195c4:	ee10 3a10 	vmov	r3, s0
 80195c8:	b507      	push	{r0, r1, r2, lr}
 80195ca:	4a1e      	ldr	r2, [pc, #120]	@ (8019644 <cosf+0x80>)
 80195cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80195d0:	4293      	cmp	r3, r2
 80195d2:	d806      	bhi.n	80195e2 <cosf+0x1e>
 80195d4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8019648 <cosf+0x84>
 80195d8:	b003      	add	sp, #12
 80195da:	f85d eb04 	ldr.w	lr, [sp], #4
 80195de:	f001 b97f 	b.w	801a8e0 <__kernel_cosf>
 80195e2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80195e6:	d304      	bcc.n	80195f2 <cosf+0x2e>
 80195e8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80195ec:	b003      	add	sp, #12
 80195ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80195f2:	4668      	mov	r0, sp
 80195f4:	f001 fa14 	bl	801aa20 <__ieee754_rem_pio2f>
 80195f8:	f000 0003 	and.w	r0, r0, #3
 80195fc:	2801      	cmp	r0, #1
 80195fe:	d009      	beq.n	8019614 <cosf+0x50>
 8019600:	2802      	cmp	r0, #2
 8019602:	d010      	beq.n	8019626 <cosf+0x62>
 8019604:	b9b0      	cbnz	r0, 8019634 <cosf+0x70>
 8019606:	eddd 0a01 	vldr	s1, [sp, #4]
 801960a:	ed9d 0a00 	vldr	s0, [sp]
 801960e:	f001 f967 	bl	801a8e0 <__kernel_cosf>
 8019612:	e7eb      	b.n	80195ec <cosf+0x28>
 8019614:	eddd 0a01 	vldr	s1, [sp, #4]
 8019618:	ed9d 0a00 	vldr	s0, [sp]
 801961c:	f001 f9b8 	bl	801a990 <__kernel_sinf>
 8019620:	eeb1 0a40 	vneg.f32	s0, s0
 8019624:	e7e2      	b.n	80195ec <cosf+0x28>
 8019626:	eddd 0a01 	vldr	s1, [sp, #4]
 801962a:	ed9d 0a00 	vldr	s0, [sp]
 801962e:	f001 f957 	bl	801a8e0 <__kernel_cosf>
 8019632:	e7f5      	b.n	8019620 <cosf+0x5c>
 8019634:	eddd 0a01 	vldr	s1, [sp, #4]
 8019638:	ed9d 0a00 	vldr	s0, [sp]
 801963c:	2001      	movs	r0, #1
 801963e:	f001 f9a7 	bl	801a990 <__kernel_sinf>
 8019642:	e7d3      	b.n	80195ec <cosf+0x28>
 8019644:	3f490fd8 	.word	0x3f490fd8
 8019648:	00000000 	.word	0x00000000

0801964c <sinf>:
 801964c:	ee10 3a10 	vmov	r3, s0
 8019650:	b507      	push	{r0, r1, r2, lr}
 8019652:	4a1f      	ldr	r2, [pc, #124]	@ (80196d0 <sinf+0x84>)
 8019654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019658:	4293      	cmp	r3, r2
 801965a:	d807      	bhi.n	801966c <sinf+0x20>
 801965c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80196d4 <sinf+0x88>
 8019660:	2000      	movs	r0, #0
 8019662:	b003      	add	sp, #12
 8019664:	f85d eb04 	ldr.w	lr, [sp], #4
 8019668:	f001 b992 	b.w	801a990 <__kernel_sinf>
 801966c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019670:	d304      	bcc.n	801967c <sinf+0x30>
 8019672:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019676:	b003      	add	sp, #12
 8019678:	f85d fb04 	ldr.w	pc, [sp], #4
 801967c:	4668      	mov	r0, sp
 801967e:	f001 f9cf 	bl	801aa20 <__ieee754_rem_pio2f>
 8019682:	f000 0003 	and.w	r0, r0, #3
 8019686:	2801      	cmp	r0, #1
 8019688:	d00a      	beq.n	80196a0 <sinf+0x54>
 801968a:	2802      	cmp	r0, #2
 801968c:	d00f      	beq.n	80196ae <sinf+0x62>
 801968e:	b9c0      	cbnz	r0, 80196c2 <sinf+0x76>
 8019690:	eddd 0a01 	vldr	s1, [sp, #4]
 8019694:	ed9d 0a00 	vldr	s0, [sp]
 8019698:	2001      	movs	r0, #1
 801969a:	f001 f979 	bl	801a990 <__kernel_sinf>
 801969e:	e7ea      	b.n	8019676 <sinf+0x2a>
 80196a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80196a4:	ed9d 0a00 	vldr	s0, [sp]
 80196a8:	f001 f91a 	bl	801a8e0 <__kernel_cosf>
 80196ac:	e7e3      	b.n	8019676 <sinf+0x2a>
 80196ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80196b2:	ed9d 0a00 	vldr	s0, [sp]
 80196b6:	2001      	movs	r0, #1
 80196b8:	f001 f96a 	bl	801a990 <__kernel_sinf>
 80196bc:	eeb1 0a40 	vneg.f32	s0, s0
 80196c0:	e7d9      	b.n	8019676 <sinf+0x2a>
 80196c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80196c6:	ed9d 0a00 	vldr	s0, [sp]
 80196ca:	f001 f909 	bl	801a8e0 <__kernel_cosf>
 80196ce:	e7f5      	b.n	80196bc <sinf+0x70>
 80196d0:	3f490fd8 	.word	0x3f490fd8
 80196d4:	00000000 	.word	0x00000000

080196d8 <finite>:
 80196d8:	b082      	sub	sp, #8
 80196da:	ed8d 0b00 	vstr	d0, [sp]
 80196de:	9801      	ldr	r0, [sp, #4]
 80196e0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80196e4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80196e8:	0fc0      	lsrs	r0, r0, #31
 80196ea:	b002      	add	sp, #8
 80196ec:	4770      	bx	lr

080196ee <fmax>:
 80196ee:	b508      	push	{r3, lr}
 80196f0:	ed2d 8b04 	vpush	{d8-d9}
 80196f4:	eeb0 8a40 	vmov.f32	s16, s0
 80196f8:	eef0 8a60 	vmov.f32	s17, s1
 80196fc:	eeb0 9a41 	vmov.f32	s18, s2
 8019700:	eef0 9a61 	vmov.f32	s19, s3
 8019704:	f000 f848 	bl	8019798 <__fpclassifyd>
 8019708:	b950      	cbnz	r0, 8019720 <fmax+0x32>
 801970a:	eeb0 8a49 	vmov.f32	s16, s18
 801970e:	eef0 8a69 	vmov.f32	s17, s19
 8019712:	eeb0 0a48 	vmov.f32	s0, s16
 8019716:	eef0 0a68 	vmov.f32	s1, s17
 801971a:	ecbd 8b04 	vpop	{d8-d9}
 801971e:	bd08      	pop	{r3, pc}
 8019720:	eeb0 0a49 	vmov.f32	s0, s18
 8019724:	eef0 0a69 	vmov.f32	s1, s19
 8019728:	f000 f836 	bl	8019798 <__fpclassifyd>
 801972c:	2800      	cmp	r0, #0
 801972e:	d0f0      	beq.n	8019712 <fmax+0x24>
 8019730:	ec53 2b19 	vmov	r2, r3, d9
 8019734:	ec51 0b18 	vmov	r0, r1, d8
 8019738:	f7e7 f9f6 	bl	8000b28 <__aeabi_dcmpgt>
 801973c:	2800      	cmp	r0, #0
 801973e:	d0e4      	beq.n	801970a <fmax+0x1c>
 8019740:	e7e7      	b.n	8019712 <fmax+0x24>

08019742 <fmin>:
 8019742:	b508      	push	{r3, lr}
 8019744:	ed2d 8b04 	vpush	{d8-d9}
 8019748:	eeb0 8a40 	vmov.f32	s16, s0
 801974c:	eef0 8a60 	vmov.f32	s17, s1
 8019750:	eeb0 9a41 	vmov.f32	s18, s2
 8019754:	eef0 9a61 	vmov.f32	s19, s3
 8019758:	f000 f81e 	bl	8019798 <__fpclassifyd>
 801975c:	b950      	cbnz	r0, 8019774 <fmin+0x32>
 801975e:	eeb0 8a49 	vmov.f32	s16, s18
 8019762:	eef0 8a69 	vmov.f32	s17, s19
 8019766:	eeb0 0a48 	vmov.f32	s0, s16
 801976a:	eef0 0a68 	vmov.f32	s1, s17
 801976e:	ecbd 8b04 	vpop	{d8-d9}
 8019772:	bd08      	pop	{r3, pc}
 8019774:	eeb0 0a49 	vmov.f32	s0, s18
 8019778:	eef0 0a69 	vmov.f32	s1, s19
 801977c:	f000 f80c 	bl	8019798 <__fpclassifyd>
 8019780:	2800      	cmp	r0, #0
 8019782:	d0f0      	beq.n	8019766 <fmin+0x24>
 8019784:	ec53 2b19 	vmov	r2, r3, d9
 8019788:	ec51 0b18 	vmov	r0, r1, d8
 801978c:	f7e7 f9ae 	bl	8000aec <__aeabi_dcmplt>
 8019790:	2800      	cmp	r0, #0
 8019792:	d0e4      	beq.n	801975e <fmin+0x1c>
 8019794:	e7e7      	b.n	8019766 <fmin+0x24>
	...

08019798 <__fpclassifyd>:
 8019798:	ec51 0b10 	vmov	r0, r1, d0
 801979c:	b510      	push	{r4, lr}
 801979e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80197a2:	460b      	mov	r3, r1
 80197a4:	d019      	beq.n	80197da <__fpclassifyd+0x42>
 80197a6:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80197aa:	490e      	ldr	r1, [pc, #56]	@ (80197e4 <__fpclassifyd+0x4c>)
 80197ac:	428a      	cmp	r2, r1
 80197ae:	d90e      	bls.n	80197ce <__fpclassifyd+0x36>
 80197b0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80197b4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80197b8:	428a      	cmp	r2, r1
 80197ba:	d908      	bls.n	80197ce <__fpclassifyd+0x36>
 80197bc:	4a0a      	ldr	r2, [pc, #40]	@ (80197e8 <__fpclassifyd+0x50>)
 80197be:	4213      	tst	r3, r2
 80197c0:	d007      	beq.n	80197d2 <__fpclassifyd+0x3a>
 80197c2:	4294      	cmp	r4, r2
 80197c4:	d107      	bne.n	80197d6 <__fpclassifyd+0x3e>
 80197c6:	fab0 f080 	clz	r0, r0
 80197ca:	0940      	lsrs	r0, r0, #5
 80197cc:	bd10      	pop	{r4, pc}
 80197ce:	2004      	movs	r0, #4
 80197d0:	e7fc      	b.n	80197cc <__fpclassifyd+0x34>
 80197d2:	2003      	movs	r0, #3
 80197d4:	e7fa      	b.n	80197cc <__fpclassifyd+0x34>
 80197d6:	2000      	movs	r0, #0
 80197d8:	e7f8      	b.n	80197cc <__fpclassifyd+0x34>
 80197da:	2800      	cmp	r0, #0
 80197dc:	d1ee      	bne.n	80197bc <__fpclassifyd+0x24>
 80197de:	2002      	movs	r0, #2
 80197e0:	e7f4      	b.n	80197cc <__fpclassifyd+0x34>
 80197e2:	bf00      	nop
 80197e4:	7fdfffff 	.word	0x7fdfffff
 80197e8:	7ff00000 	.word	0x7ff00000

080197ec <csqrt>:
 80197ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197f0:	ed2d 8b04 	vpush	{d8-d9}
 80197f4:	eeb0 9a40 	vmov.f32	s18, s0
 80197f8:	eef0 9a60 	vmov.f32	s19, s1
 80197fc:	eeb0 8a41 	vmov.f32	s16, s2
 8019800:	eef0 8a61 	vmov.f32	s17, s3
 8019804:	b081      	sub	sp, #4
 8019806:	f001 fb2d 	bl	801ae64 <creal>
 801980a:	eeb0 1a48 	vmov.f32	s2, s16
 801980e:	eef0 1a68 	vmov.f32	s3, s17
 8019812:	ec59 8b10 	vmov	r8, r9, d0
 8019816:	eeb0 0a49 	vmov.f32	s0, s18
 801981a:	eef0 0a69 	vmov.f32	s1, s19
 801981e:	f001 fb1c 	bl	801ae5a <cimag>
 8019822:	ec57 6b10 	vmov	r6, r7, d0
 8019826:	2200      	movs	r2, #0
 8019828:	2300      	movs	r3, #0
 801982a:	4630      	mov	r0, r6
 801982c:	4639      	mov	r1, r7
 801982e:	f7e7 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 8019832:	2200      	movs	r2, #0
 8019834:	2300      	movs	r3, #0
 8019836:	2800      	cmp	r0, #0
 8019838:	d044      	beq.n	80198c4 <csqrt+0xd8>
 801983a:	4640      	mov	r0, r8
 801983c:	4649      	mov	r1, r9
 801983e:	f7e7 f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 8019842:	b1d0      	cbz	r0, 801987a <csqrt+0x8e>
 8019844:	2200      	movs	r2, #0
 8019846:	2300      	movs	r3, #0
 8019848:	4630      	mov	r0, r6
 801984a:	4639      	mov	r1, r7
 801984c:	f7e6 fedc 	bl	8000608 <__aeabi_dmul>
 8019850:	2200      	movs	r2, #0
 8019852:	2300      	movs	r3, #0
 8019854:	f7e6 fd22 	bl	800029c <__adddf3>
 8019858:	ec47 6b17 	vmov	d7, r6, r7
 801985c:	ec41 0b16 	vmov	d6, r0, r1
 8019860:	eeb0 0a46 	vmov.f32	s0, s12
 8019864:	eef0 0a66 	vmov.f32	s1, s13
 8019868:	eeb0 1a47 	vmov.f32	s2, s14
 801986c:	eef0 1a67 	vmov.f32	s3, s15
 8019870:	b001      	add	sp, #4
 8019872:	ecbd 8b04 	vpop	{d8-d9}
 8019876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801987a:	ec49 8b10 	vmov	d0, r8, r9
 801987e:	f001 f827 	bl	801a8d0 <fabs>
 8019882:	f7ff fe55 	bl	8019530 <sqrt>
 8019886:	2200      	movs	r2, #0
 8019888:	2300      	movs	r3, #0
 801988a:	4640      	mov	r0, r8
 801988c:	4649      	mov	r1, r9
 801988e:	ec55 4b10 	vmov	r4, r5, d0
 8019892:	f7e7 f92b 	bl	8000aec <__aeabi_dcmplt>
 8019896:	2200      	movs	r2, #0
 8019898:	2300      	movs	r3, #0
 801989a:	b160      	cbz	r0, 80198b6 <csqrt+0xca>
 801989c:	4620      	mov	r0, r4
 801989e:	4629      	mov	r1, r5
 80198a0:	f7e6 feb2 	bl	8000608 <__aeabi_dmul>
 80198a4:	2200      	movs	r2, #0
 80198a6:	2300      	movs	r3, #0
 80198a8:	f7e6 fcf8 	bl	800029c <__adddf3>
 80198ac:	ec45 4b17 	vmov	d7, r4, r5
 80198b0:	ec41 0b16 	vmov	d6, r0, r1
 80198b4:	e7d4      	b.n	8019860 <csqrt+0x74>
 80198b6:	4630      	mov	r0, r6
 80198b8:	4639      	mov	r1, r7
 80198ba:	f7e6 fea5 	bl	8000608 <__aeabi_dmul>
 80198be:	4622      	mov	r2, r4
 80198c0:	462b      	mov	r3, r5
 80198c2:	e7c7      	b.n	8019854 <csqrt+0x68>
 80198c4:	4640      	mov	r0, r8
 80198c6:	4649      	mov	r1, r9
 80198c8:	f7e7 f906 	bl	8000ad8 <__aeabi_dcmpeq>
 80198cc:	b388      	cbz	r0, 8019932 <csqrt+0x146>
 80198ce:	ec47 6b10 	vmov	d0, r6, r7
 80198d2:	f000 fffd 	bl	801a8d0 <fabs>
 80198d6:	4b88      	ldr	r3, [pc, #544]	@ (8019af8 <csqrt+0x30c>)
 80198d8:	2200      	movs	r2, #0
 80198da:	ec51 0b10 	vmov	r0, r1, d0
 80198de:	f7e6 fe93 	bl	8000608 <__aeabi_dmul>
 80198e2:	ec41 0b10 	vmov	d0, r0, r1
 80198e6:	f7ff fe23 	bl	8019530 <sqrt>
 80198ea:	2200      	movs	r2, #0
 80198ec:	2300      	movs	r3, #0
 80198ee:	4630      	mov	r0, r6
 80198f0:	4639      	mov	r1, r7
 80198f2:	ec55 4b10 	vmov	r4, r5, d0
 80198f6:	f7e7 f917 	bl	8000b28 <__aeabi_dcmpgt>
 80198fa:	2200      	movs	r2, #0
 80198fc:	2300      	movs	r3, #0
 80198fe:	b130      	cbz	r0, 801990e <csqrt+0x122>
 8019900:	4620      	mov	r0, r4
 8019902:	4629      	mov	r1, r5
 8019904:	f7e6 fe80 	bl	8000608 <__aeabi_dmul>
 8019908:	4622      	mov	r2, r4
 801990a:	462b      	mov	r3, r5
 801990c:	e7cc      	b.n	80198a8 <csqrt+0xbc>
 801990e:	4620      	mov	r0, r4
 8019910:	4629      	mov	r1, r5
 8019912:	f7e6 fe79 	bl	8000608 <__aeabi_dmul>
 8019916:	4602      	mov	r2, r0
 8019918:	460b      	mov	r3, r1
 801991a:	4620      	mov	r0, r4
 801991c:	4629      	mov	r1, r5
 801991e:	f7e6 fcbb 	bl	8000298 <__aeabi_dsub>
 8019922:	4622      	mov	r2, r4
 8019924:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8019928:	ec41 0b16 	vmov	d6, r0, r1
 801992c:	ec43 2b17 	vmov	d7, r2, r3
 8019930:	e796      	b.n	8019860 <csqrt+0x74>
 8019932:	ec49 8b10 	vmov	d0, r8, r9
 8019936:	f000 ffcb 	bl	801a8d0 <fabs>
 801993a:	4b70      	ldr	r3, [pc, #448]	@ (8019afc <csqrt+0x310>)
 801993c:	ec51 0b10 	vmov	r0, r1, d0
 8019940:	2200      	movs	r2, #0
 8019942:	f7e7 f8f1 	bl	8000b28 <__aeabi_dcmpgt>
 8019946:	2800      	cmp	r0, #0
 8019948:	d07a      	beq.n	8019a40 <csqrt+0x254>
 801994a:	4b6d      	ldr	r3, [pc, #436]	@ (8019b00 <csqrt+0x314>)
 801994c:	2200      	movs	r2, #0
 801994e:	4640      	mov	r0, r8
 8019950:	4649      	mov	r1, r9
 8019952:	f7e6 fe59 	bl	8000608 <__aeabi_dmul>
 8019956:	4b6a      	ldr	r3, [pc, #424]	@ (8019b00 <csqrt+0x314>)
 8019958:	4604      	mov	r4, r0
 801995a:	460d      	mov	r5, r1
 801995c:	4630      	mov	r0, r6
 801995e:	4639      	mov	r1, r7
 8019960:	2200      	movs	r2, #0
 8019962:	f7e6 fe51 	bl	8000608 <__aeabi_dmul>
 8019966:	f04f 0800 	mov.w	r8, #0
 801996a:	4606      	mov	r6, r0
 801996c:	460f      	mov	r7, r1
 801996e:	f04f 4980 	mov.w	r9, #1073741824	@ 0x40000000
 8019972:	2200      	movs	r2, #0
 8019974:	2300      	movs	r3, #0
 8019976:	4630      	mov	r0, r6
 8019978:	4639      	mov	r1, r7
 801997a:	f7e6 fe45 	bl	8000608 <__aeabi_dmul>
 801997e:	4622      	mov	r2, r4
 8019980:	462b      	mov	r3, r5
 8019982:	f7e6 fc8b 	bl	800029c <__adddf3>
 8019986:	ec47 6b11 	vmov	d1, r6, r7
 801998a:	ec41 0b10 	vmov	d0, r0, r1
 801998e:	f001 fa3b 	bl	801ae08 <cabs>
 8019992:	2200      	movs	r2, #0
 8019994:	2300      	movs	r3, #0
 8019996:	4620      	mov	r0, r4
 8019998:	4629      	mov	r1, r5
 801999a:	ec5b ab10 	vmov	sl, fp, d0
 801999e:	f7e7 f8c3 	bl	8000b28 <__aeabi_dcmpgt>
 80199a2:	4b55      	ldr	r3, [pc, #340]	@ (8019af8 <csqrt+0x30c>)
 80199a4:	2200      	movs	r2, #0
 80199a6:	2800      	cmp	r0, #0
 80199a8:	d06c      	beq.n	8019a84 <csqrt+0x298>
 80199aa:	4650      	mov	r0, sl
 80199ac:	4659      	mov	r1, fp
 80199ae:	f7e6 fe2b 	bl	8000608 <__aeabi_dmul>
 80199b2:	4b51      	ldr	r3, [pc, #324]	@ (8019af8 <csqrt+0x30c>)
 80199b4:	4682      	mov	sl, r0
 80199b6:	468b      	mov	fp, r1
 80199b8:	2200      	movs	r2, #0
 80199ba:	4620      	mov	r0, r4
 80199bc:	4629      	mov	r1, r5
 80199be:	f7e6 fe23 	bl	8000608 <__aeabi_dmul>
 80199c2:	4602      	mov	r2, r0
 80199c4:	460b      	mov	r3, r1
 80199c6:	4650      	mov	r0, sl
 80199c8:	4659      	mov	r1, fp
 80199ca:	f7e6 fc67 	bl	800029c <__adddf3>
 80199ce:	ec41 0b10 	vmov	d0, r0, r1
 80199d2:	f7ff fdad 	bl	8019530 <sqrt>
 80199d6:	ec5b ab10 	vmov	sl, fp, d0
 80199da:	4b47      	ldr	r3, [pc, #284]	@ (8019af8 <csqrt+0x30c>)
 80199dc:	2200      	movs	r2, #0
 80199de:	4630      	mov	r0, r6
 80199e0:	4639      	mov	r1, r7
 80199e2:	f7e6 fe11 	bl	8000608 <__aeabi_dmul>
 80199e6:	4652      	mov	r2, sl
 80199e8:	465b      	mov	r3, fp
 80199ea:	f7e6 ff37 	bl	800085c <__aeabi_ddiv>
 80199ee:	ec41 0b10 	vmov	d0, r0, r1
 80199f2:	f000 ff6d 	bl	801a8d0 <fabs>
 80199f6:	4642      	mov	r2, r8
 80199f8:	ec51 0b10 	vmov	r0, r1, d0
 80199fc:	464b      	mov	r3, r9
 80199fe:	f7e6 fe03 	bl	8000608 <__aeabi_dmul>
 8019a02:	4652      	mov	r2, sl
 8019a04:	465b      	mov	r3, fp
 8019a06:	4604      	mov	r4, r0
 8019a08:	460d      	mov	r5, r1
 8019a0a:	4640      	mov	r0, r8
 8019a0c:	4649      	mov	r1, r9
 8019a0e:	f7e6 fdfb 	bl	8000608 <__aeabi_dmul>
 8019a12:	4682      	mov	sl, r0
 8019a14:	468b      	mov	fp, r1
 8019a16:	2200      	movs	r2, #0
 8019a18:	2300      	movs	r3, #0
 8019a1a:	4620      	mov	r0, r4
 8019a1c:	4629      	mov	r1, r5
 8019a1e:	f7e6 fdf3 	bl	8000608 <__aeabi_dmul>
 8019a22:	2200      	movs	r2, #0
 8019a24:	4680      	mov	r8, r0
 8019a26:	4689      	mov	r9, r1
 8019a28:	2300      	movs	r3, #0
 8019a2a:	4630      	mov	r0, r6
 8019a2c:	4639      	mov	r1, r7
 8019a2e:	f7e7 f85d 	bl	8000aec <__aeabi_dcmplt>
 8019a32:	4642      	mov	r2, r8
 8019a34:	464b      	mov	r3, r9
 8019a36:	2800      	cmp	r0, #0
 8019a38:	d05b      	beq.n	8019af2 <csqrt+0x306>
 8019a3a:	4650      	mov	r0, sl
 8019a3c:	4659      	mov	r1, fp
 8019a3e:	e76e      	b.n	801991e <csqrt+0x132>
 8019a40:	ec47 6b10 	vmov	d0, r6, r7
 8019a44:	f000 ff44 	bl	801a8d0 <fabs>
 8019a48:	4b2c      	ldr	r3, [pc, #176]	@ (8019afc <csqrt+0x310>)
 8019a4a:	ec51 0b10 	vmov	r0, r1, d0
 8019a4e:	2200      	movs	r2, #0
 8019a50:	f7e7 f86a 	bl	8000b28 <__aeabi_dcmpgt>
 8019a54:	2800      	cmp	r0, #0
 8019a56:	f47f af78 	bne.w	801994a <csqrt+0x15e>
 8019a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8019b04 <csqrt+0x318>)
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	4640      	mov	r0, r8
 8019a60:	4649      	mov	r1, r9
 8019a62:	f7e6 fdd1 	bl	8000608 <__aeabi_dmul>
 8019a66:	4b27      	ldr	r3, [pc, #156]	@ (8019b04 <csqrt+0x318>)
 8019a68:	4604      	mov	r4, r0
 8019a6a:	460d      	mov	r5, r1
 8019a6c:	4630      	mov	r0, r6
 8019a6e:	4639      	mov	r1, r7
 8019a70:	2200      	movs	r2, #0
 8019a72:	f7e6 fdc9 	bl	8000608 <__aeabi_dmul>
 8019a76:	f04f 0800 	mov.w	r8, #0
 8019a7a:	4606      	mov	r6, r0
 8019a7c:	460f      	mov	r7, r1
 8019a7e:	f04f 5979 	mov.w	r9, #1044381696	@ 0x3e400000
 8019a82:	e776      	b.n	8019972 <csqrt+0x186>
 8019a84:	4650      	mov	r0, sl
 8019a86:	4659      	mov	r1, fp
 8019a88:	f7e6 fdbe 	bl	8000608 <__aeabi_dmul>
 8019a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8019af8 <csqrt+0x30c>)
 8019a8e:	4682      	mov	sl, r0
 8019a90:	468b      	mov	fp, r1
 8019a92:	2200      	movs	r2, #0
 8019a94:	4620      	mov	r0, r4
 8019a96:	4629      	mov	r1, r5
 8019a98:	f7e6 fdb6 	bl	8000608 <__aeabi_dmul>
 8019a9c:	4602      	mov	r2, r0
 8019a9e:	460b      	mov	r3, r1
 8019aa0:	4650      	mov	r0, sl
 8019aa2:	4659      	mov	r1, fp
 8019aa4:	f7e6 fbf8 	bl	8000298 <__aeabi_dsub>
 8019aa8:	ec41 0b10 	vmov	d0, r0, r1
 8019aac:	f7ff fd40 	bl	8019530 <sqrt>
 8019ab0:	ec55 4b10 	vmov	r4, r5, d0
 8019ab4:	4b10      	ldr	r3, [pc, #64]	@ (8019af8 <csqrt+0x30c>)
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	4630      	mov	r0, r6
 8019aba:	4639      	mov	r1, r7
 8019abc:	f7e6 fda4 	bl	8000608 <__aeabi_dmul>
 8019ac0:	4622      	mov	r2, r4
 8019ac2:	462b      	mov	r3, r5
 8019ac4:	f7e6 feca 	bl	800085c <__aeabi_ddiv>
 8019ac8:	ec41 0b10 	vmov	d0, r0, r1
 8019acc:	f000 ff00 	bl	801a8d0 <fabs>
 8019ad0:	4642      	mov	r2, r8
 8019ad2:	ec51 0b10 	vmov	r0, r1, d0
 8019ad6:	464b      	mov	r3, r9
 8019ad8:	f7e6 fd96 	bl	8000608 <__aeabi_dmul>
 8019adc:	4622      	mov	r2, r4
 8019ade:	462b      	mov	r3, r5
 8019ae0:	4682      	mov	sl, r0
 8019ae2:	468b      	mov	fp, r1
 8019ae4:	4640      	mov	r0, r8
 8019ae6:	4649      	mov	r1, r9
 8019ae8:	f7e6 fd8e 	bl	8000608 <__aeabi_dmul>
 8019aec:	4604      	mov	r4, r0
 8019aee:	460d      	mov	r5, r1
 8019af0:	e791      	b.n	8019a16 <csqrt+0x22a>
 8019af2:	4650      	mov	r0, sl
 8019af4:	4659      	mov	r1, fp
 8019af6:	e6d7      	b.n	80198a8 <csqrt+0xbc>
 8019af8:	3fe00000 	.word	0x3fe00000
 8019afc:	40100000 	.word	0x40100000
 8019b00:	3fd00000 	.word	0x3fd00000
 8019b04:	43500000 	.word	0x43500000

08019b08 <__ieee754_sqrt>:
 8019b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b0c:	4a68      	ldr	r2, [pc, #416]	@ (8019cb0 <__ieee754_sqrt+0x1a8>)
 8019b0e:	ec55 4b10 	vmov	r4, r5, d0
 8019b12:	43aa      	bics	r2, r5
 8019b14:	462b      	mov	r3, r5
 8019b16:	4621      	mov	r1, r4
 8019b18:	d110      	bne.n	8019b3c <__ieee754_sqrt+0x34>
 8019b1a:	4622      	mov	r2, r4
 8019b1c:	4620      	mov	r0, r4
 8019b1e:	4629      	mov	r1, r5
 8019b20:	f7e6 fd72 	bl	8000608 <__aeabi_dmul>
 8019b24:	4602      	mov	r2, r0
 8019b26:	460b      	mov	r3, r1
 8019b28:	4620      	mov	r0, r4
 8019b2a:	4629      	mov	r1, r5
 8019b2c:	f7e6 fbb6 	bl	800029c <__adddf3>
 8019b30:	4604      	mov	r4, r0
 8019b32:	460d      	mov	r5, r1
 8019b34:	ec45 4b10 	vmov	d0, r4, r5
 8019b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b3c:	2d00      	cmp	r5, #0
 8019b3e:	dc0e      	bgt.n	8019b5e <__ieee754_sqrt+0x56>
 8019b40:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8019b44:	4322      	orrs	r2, r4
 8019b46:	d0f5      	beq.n	8019b34 <__ieee754_sqrt+0x2c>
 8019b48:	b19d      	cbz	r5, 8019b72 <__ieee754_sqrt+0x6a>
 8019b4a:	4622      	mov	r2, r4
 8019b4c:	4620      	mov	r0, r4
 8019b4e:	4629      	mov	r1, r5
 8019b50:	f7e6 fba2 	bl	8000298 <__aeabi_dsub>
 8019b54:	4602      	mov	r2, r0
 8019b56:	460b      	mov	r3, r1
 8019b58:	f7e6 fe80 	bl	800085c <__aeabi_ddiv>
 8019b5c:	e7e8      	b.n	8019b30 <__ieee754_sqrt+0x28>
 8019b5e:	152a      	asrs	r2, r5, #20
 8019b60:	d115      	bne.n	8019b8e <__ieee754_sqrt+0x86>
 8019b62:	2000      	movs	r0, #0
 8019b64:	e009      	b.n	8019b7a <__ieee754_sqrt+0x72>
 8019b66:	0acb      	lsrs	r3, r1, #11
 8019b68:	3a15      	subs	r2, #21
 8019b6a:	0549      	lsls	r1, r1, #21
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d0fa      	beq.n	8019b66 <__ieee754_sqrt+0x5e>
 8019b70:	e7f7      	b.n	8019b62 <__ieee754_sqrt+0x5a>
 8019b72:	462a      	mov	r2, r5
 8019b74:	e7fa      	b.n	8019b6c <__ieee754_sqrt+0x64>
 8019b76:	005b      	lsls	r3, r3, #1
 8019b78:	3001      	adds	r0, #1
 8019b7a:	02dc      	lsls	r4, r3, #11
 8019b7c:	d5fb      	bpl.n	8019b76 <__ieee754_sqrt+0x6e>
 8019b7e:	1e44      	subs	r4, r0, #1
 8019b80:	1b12      	subs	r2, r2, r4
 8019b82:	f1c0 0420 	rsb	r4, r0, #32
 8019b86:	fa21 f404 	lsr.w	r4, r1, r4
 8019b8a:	4323      	orrs	r3, r4
 8019b8c:	4081      	lsls	r1, r0
 8019b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019b92:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8019b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019b9a:	07d2      	lsls	r2, r2, #31
 8019b9c:	bf5c      	itt	pl
 8019b9e:	005b      	lslpl	r3, r3, #1
 8019ba0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8019ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019ba8:	bf58      	it	pl
 8019baa:	0049      	lslpl	r1, r1, #1
 8019bac:	2600      	movs	r6, #0
 8019bae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8019bb2:	106d      	asrs	r5, r5, #1
 8019bb4:	0049      	lsls	r1, r1, #1
 8019bb6:	2016      	movs	r0, #22
 8019bb8:	4632      	mov	r2, r6
 8019bba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8019bbe:	1917      	adds	r7, r2, r4
 8019bc0:	429f      	cmp	r7, r3
 8019bc2:	bfde      	ittt	le
 8019bc4:	193a      	addle	r2, r7, r4
 8019bc6:	1bdb      	suble	r3, r3, r7
 8019bc8:	1936      	addle	r6, r6, r4
 8019bca:	0fcf      	lsrs	r7, r1, #31
 8019bcc:	3801      	subs	r0, #1
 8019bce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019bd2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019bd6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019bda:	d1f0      	bne.n	8019bbe <__ieee754_sqrt+0xb6>
 8019bdc:	4604      	mov	r4, r0
 8019bde:	2720      	movs	r7, #32
 8019be0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8019be4:	429a      	cmp	r2, r3
 8019be6:	eb00 0e0c 	add.w	lr, r0, ip
 8019bea:	db02      	blt.n	8019bf2 <__ieee754_sqrt+0xea>
 8019bec:	d113      	bne.n	8019c16 <__ieee754_sqrt+0x10e>
 8019bee:	458e      	cmp	lr, r1
 8019bf0:	d811      	bhi.n	8019c16 <__ieee754_sqrt+0x10e>
 8019bf2:	f1be 0f00 	cmp.w	lr, #0
 8019bf6:	eb0e 000c 	add.w	r0, lr, ip
 8019bfa:	da42      	bge.n	8019c82 <__ieee754_sqrt+0x17a>
 8019bfc:	2800      	cmp	r0, #0
 8019bfe:	db40      	blt.n	8019c82 <__ieee754_sqrt+0x17a>
 8019c00:	f102 0801 	add.w	r8, r2, #1
 8019c04:	1a9b      	subs	r3, r3, r2
 8019c06:	458e      	cmp	lr, r1
 8019c08:	bf88      	it	hi
 8019c0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019c0e:	eba1 010e 	sub.w	r1, r1, lr
 8019c12:	4464      	add	r4, ip
 8019c14:	4642      	mov	r2, r8
 8019c16:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8019c1a:	3f01      	subs	r7, #1
 8019c1c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8019c20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019c24:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019c28:	d1dc      	bne.n	8019be4 <__ieee754_sqrt+0xdc>
 8019c2a:	4319      	orrs	r1, r3
 8019c2c:	d01b      	beq.n	8019c66 <__ieee754_sqrt+0x15e>
 8019c2e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8019cb4 <__ieee754_sqrt+0x1ac>
 8019c32:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8019cb8 <__ieee754_sqrt+0x1b0>
 8019c36:	e9da 0100 	ldrd	r0, r1, [sl]
 8019c3a:	e9db 2300 	ldrd	r2, r3, [fp]
 8019c3e:	f7e6 fb2b 	bl	8000298 <__aeabi_dsub>
 8019c42:	e9da 8900 	ldrd	r8, r9, [sl]
 8019c46:	4602      	mov	r2, r0
 8019c48:	460b      	mov	r3, r1
 8019c4a:	4640      	mov	r0, r8
 8019c4c:	4649      	mov	r1, r9
 8019c4e:	f7e6 ff57 	bl	8000b00 <__aeabi_dcmple>
 8019c52:	b140      	cbz	r0, 8019c66 <__ieee754_sqrt+0x15e>
 8019c54:	f1b4 3fff 	cmp.w	r4, #4294967295
 8019c58:	e9da 0100 	ldrd	r0, r1, [sl]
 8019c5c:	e9db 2300 	ldrd	r2, r3, [fp]
 8019c60:	d111      	bne.n	8019c86 <__ieee754_sqrt+0x17e>
 8019c62:	3601      	adds	r6, #1
 8019c64:	463c      	mov	r4, r7
 8019c66:	1072      	asrs	r2, r6, #1
 8019c68:	0863      	lsrs	r3, r4, #1
 8019c6a:	07f1      	lsls	r1, r6, #31
 8019c6c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8019c70:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8019c74:	bf48      	it	mi
 8019c76:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8019c7a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8019c7e:	4618      	mov	r0, r3
 8019c80:	e756      	b.n	8019b30 <__ieee754_sqrt+0x28>
 8019c82:	4690      	mov	r8, r2
 8019c84:	e7be      	b.n	8019c04 <__ieee754_sqrt+0xfc>
 8019c86:	f7e6 fb09 	bl	800029c <__adddf3>
 8019c8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8019c8e:	4602      	mov	r2, r0
 8019c90:	460b      	mov	r3, r1
 8019c92:	4640      	mov	r0, r8
 8019c94:	4649      	mov	r1, r9
 8019c96:	f7e6 ff29 	bl	8000aec <__aeabi_dcmplt>
 8019c9a:	b120      	cbz	r0, 8019ca6 <__ieee754_sqrt+0x19e>
 8019c9c:	1ca0      	adds	r0, r4, #2
 8019c9e:	bf08      	it	eq
 8019ca0:	3601      	addeq	r6, #1
 8019ca2:	3402      	adds	r4, #2
 8019ca4:	e7df      	b.n	8019c66 <__ieee754_sqrt+0x15e>
 8019ca6:	1c63      	adds	r3, r4, #1
 8019ca8:	f023 0401 	bic.w	r4, r3, #1
 8019cac:	e7db      	b.n	8019c66 <__ieee754_sqrt+0x15e>
 8019cae:	bf00      	nop
 8019cb0:	7ff00000 	.word	0x7ff00000
 8019cb4:	200003a0 	.word	0x200003a0
 8019cb8:	20000398 	.word	0x20000398

08019cbc <__ieee754_sqrtf>:
 8019cbc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019cc0:	4770      	bx	lr
 8019cc2:	0000      	movs	r0, r0
 8019cc4:	0000      	movs	r0, r0
	...

08019cc8 <floor>:
 8019cc8:	ec51 0b10 	vmov	r0, r1, d0
 8019ccc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cd4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8019cd8:	2e13      	cmp	r6, #19
 8019cda:	460c      	mov	r4, r1
 8019cdc:	4605      	mov	r5, r0
 8019cde:	4680      	mov	r8, r0
 8019ce0:	dc34      	bgt.n	8019d4c <floor+0x84>
 8019ce2:	2e00      	cmp	r6, #0
 8019ce4:	da17      	bge.n	8019d16 <floor+0x4e>
 8019ce6:	a332      	add	r3, pc, #200	@ (adr r3, 8019db0 <floor+0xe8>)
 8019ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cec:	f7e6 fad6 	bl	800029c <__adddf3>
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	f7e6 ff18 	bl	8000b28 <__aeabi_dcmpgt>
 8019cf8:	b150      	cbz	r0, 8019d10 <floor+0x48>
 8019cfa:	2c00      	cmp	r4, #0
 8019cfc:	da55      	bge.n	8019daa <floor+0xe2>
 8019cfe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8019d02:	432c      	orrs	r4, r5
 8019d04:	2500      	movs	r5, #0
 8019d06:	42ac      	cmp	r4, r5
 8019d08:	4c2b      	ldr	r4, [pc, #172]	@ (8019db8 <floor+0xf0>)
 8019d0a:	bf08      	it	eq
 8019d0c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8019d10:	4621      	mov	r1, r4
 8019d12:	4628      	mov	r0, r5
 8019d14:	e023      	b.n	8019d5e <floor+0x96>
 8019d16:	4f29      	ldr	r7, [pc, #164]	@ (8019dbc <floor+0xf4>)
 8019d18:	4137      	asrs	r7, r6
 8019d1a:	ea01 0307 	and.w	r3, r1, r7
 8019d1e:	4303      	orrs	r3, r0
 8019d20:	d01d      	beq.n	8019d5e <floor+0x96>
 8019d22:	a323      	add	r3, pc, #140	@ (adr r3, 8019db0 <floor+0xe8>)
 8019d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d28:	f7e6 fab8 	bl	800029c <__adddf3>
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	2300      	movs	r3, #0
 8019d30:	f7e6 fefa 	bl	8000b28 <__aeabi_dcmpgt>
 8019d34:	2800      	cmp	r0, #0
 8019d36:	d0eb      	beq.n	8019d10 <floor+0x48>
 8019d38:	2c00      	cmp	r4, #0
 8019d3a:	bfbe      	ittt	lt
 8019d3c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8019d40:	4133      	asrlt	r3, r6
 8019d42:	18e4      	addlt	r4, r4, r3
 8019d44:	ea24 0407 	bic.w	r4, r4, r7
 8019d48:	2500      	movs	r5, #0
 8019d4a:	e7e1      	b.n	8019d10 <floor+0x48>
 8019d4c:	2e33      	cmp	r6, #51	@ 0x33
 8019d4e:	dd0a      	ble.n	8019d66 <floor+0x9e>
 8019d50:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8019d54:	d103      	bne.n	8019d5e <floor+0x96>
 8019d56:	4602      	mov	r2, r0
 8019d58:	460b      	mov	r3, r1
 8019d5a:	f7e6 fa9f 	bl	800029c <__adddf3>
 8019d5e:	ec41 0b10 	vmov	d0, r0, r1
 8019d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d66:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8019d6a:	f04f 37ff 	mov.w	r7, #4294967295
 8019d6e:	40df      	lsrs	r7, r3
 8019d70:	4207      	tst	r7, r0
 8019d72:	d0f4      	beq.n	8019d5e <floor+0x96>
 8019d74:	a30e      	add	r3, pc, #56	@ (adr r3, 8019db0 <floor+0xe8>)
 8019d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d7a:	f7e6 fa8f 	bl	800029c <__adddf3>
 8019d7e:	2200      	movs	r2, #0
 8019d80:	2300      	movs	r3, #0
 8019d82:	f7e6 fed1 	bl	8000b28 <__aeabi_dcmpgt>
 8019d86:	2800      	cmp	r0, #0
 8019d88:	d0c2      	beq.n	8019d10 <floor+0x48>
 8019d8a:	2c00      	cmp	r4, #0
 8019d8c:	da0a      	bge.n	8019da4 <floor+0xdc>
 8019d8e:	2e14      	cmp	r6, #20
 8019d90:	d101      	bne.n	8019d96 <floor+0xce>
 8019d92:	3401      	adds	r4, #1
 8019d94:	e006      	b.n	8019da4 <floor+0xdc>
 8019d96:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8019d9a:	2301      	movs	r3, #1
 8019d9c:	40b3      	lsls	r3, r6
 8019d9e:	441d      	add	r5, r3
 8019da0:	4545      	cmp	r5, r8
 8019da2:	d3f6      	bcc.n	8019d92 <floor+0xca>
 8019da4:	ea25 0507 	bic.w	r5, r5, r7
 8019da8:	e7b2      	b.n	8019d10 <floor+0x48>
 8019daa:	2500      	movs	r5, #0
 8019dac:	462c      	mov	r4, r5
 8019dae:	e7af      	b.n	8019d10 <floor+0x48>
 8019db0:	8800759c 	.word	0x8800759c
 8019db4:	7e37e43c 	.word	0x7e37e43c
 8019db8:	bff00000 	.word	0xbff00000
 8019dbc:	000fffff 	.word	0x000fffff

08019dc0 <floorf>:
 8019dc0:	ee10 3a10 	vmov	r3, s0
 8019dc4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019dc8:	3a7f      	subs	r2, #127	@ 0x7f
 8019dca:	2a16      	cmp	r2, #22
 8019dcc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019dd0:	dc2b      	bgt.n	8019e2a <floorf+0x6a>
 8019dd2:	2a00      	cmp	r2, #0
 8019dd4:	da12      	bge.n	8019dfc <floorf+0x3c>
 8019dd6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019e3c <floorf+0x7c>
 8019dda:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019dde:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019de6:	dd06      	ble.n	8019df6 <floorf+0x36>
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	da24      	bge.n	8019e36 <floorf+0x76>
 8019dec:	2900      	cmp	r1, #0
 8019dee:	4b14      	ldr	r3, [pc, #80]	@ (8019e40 <floorf+0x80>)
 8019df0:	bf08      	it	eq
 8019df2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019df6:	ee00 3a10 	vmov	s0, r3
 8019dfa:	4770      	bx	lr
 8019dfc:	4911      	ldr	r1, [pc, #68]	@ (8019e44 <floorf+0x84>)
 8019dfe:	4111      	asrs	r1, r2
 8019e00:	420b      	tst	r3, r1
 8019e02:	d0fa      	beq.n	8019dfa <floorf+0x3a>
 8019e04:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8019e3c <floorf+0x7c>
 8019e08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019e0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e14:	ddef      	ble.n	8019df6 <floorf+0x36>
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	bfbe      	ittt	lt
 8019e1a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019e1e:	fa40 f202 	asrlt.w	r2, r0, r2
 8019e22:	189b      	addlt	r3, r3, r2
 8019e24:	ea23 0301 	bic.w	r3, r3, r1
 8019e28:	e7e5      	b.n	8019df6 <floorf+0x36>
 8019e2a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019e2e:	d3e4      	bcc.n	8019dfa <floorf+0x3a>
 8019e30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019e34:	4770      	bx	lr
 8019e36:	2300      	movs	r3, #0
 8019e38:	e7dd      	b.n	8019df6 <floorf+0x36>
 8019e3a:	bf00      	nop
 8019e3c:	7149f2ca 	.word	0x7149f2ca
 8019e40:	bf800000 	.word	0xbf800000
 8019e44:	007fffff 	.word	0x007fffff

08019e48 <__ieee754_pow>:
 8019e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e4c:	b091      	sub	sp, #68	@ 0x44
 8019e4e:	ed8d 1b00 	vstr	d1, [sp]
 8019e52:	e9dd 1900 	ldrd	r1, r9, [sp]
 8019e56:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8019e5a:	ea5a 0001 	orrs.w	r0, sl, r1
 8019e5e:	ec57 6b10 	vmov	r6, r7, d0
 8019e62:	d113      	bne.n	8019e8c <__ieee754_pow+0x44>
 8019e64:	19b3      	adds	r3, r6, r6
 8019e66:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8019e6a:	4152      	adcs	r2, r2
 8019e6c:	4298      	cmp	r0, r3
 8019e6e:	4b98      	ldr	r3, [pc, #608]	@ (801a0d0 <__ieee754_pow+0x288>)
 8019e70:	4193      	sbcs	r3, r2
 8019e72:	f080 84ea 	bcs.w	801a84a <__ieee754_pow+0xa02>
 8019e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e7a:	4630      	mov	r0, r6
 8019e7c:	4639      	mov	r1, r7
 8019e7e:	f7e6 fa0d 	bl	800029c <__adddf3>
 8019e82:	ec41 0b10 	vmov	d0, r0, r1
 8019e86:	b011      	add	sp, #68	@ 0x44
 8019e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e8c:	4a91      	ldr	r2, [pc, #580]	@ (801a0d4 <__ieee754_pow+0x28c>)
 8019e8e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8019e92:	4590      	cmp	r8, r2
 8019e94:	463d      	mov	r5, r7
 8019e96:	4633      	mov	r3, r6
 8019e98:	d806      	bhi.n	8019ea8 <__ieee754_pow+0x60>
 8019e9a:	d101      	bne.n	8019ea0 <__ieee754_pow+0x58>
 8019e9c:	2e00      	cmp	r6, #0
 8019e9e:	d1ea      	bne.n	8019e76 <__ieee754_pow+0x2e>
 8019ea0:	4592      	cmp	sl, r2
 8019ea2:	d801      	bhi.n	8019ea8 <__ieee754_pow+0x60>
 8019ea4:	d10e      	bne.n	8019ec4 <__ieee754_pow+0x7c>
 8019ea6:	b169      	cbz	r1, 8019ec4 <__ieee754_pow+0x7c>
 8019ea8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8019eac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8019eb0:	431d      	orrs	r5, r3
 8019eb2:	d1e0      	bne.n	8019e76 <__ieee754_pow+0x2e>
 8019eb4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019eb8:	18db      	adds	r3, r3, r3
 8019eba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8019ebe:	4152      	adcs	r2, r2
 8019ec0:	429d      	cmp	r5, r3
 8019ec2:	e7d4      	b.n	8019e6e <__ieee754_pow+0x26>
 8019ec4:	2d00      	cmp	r5, #0
 8019ec6:	46c3      	mov	fp, r8
 8019ec8:	da3a      	bge.n	8019f40 <__ieee754_pow+0xf8>
 8019eca:	4a83      	ldr	r2, [pc, #524]	@ (801a0d8 <__ieee754_pow+0x290>)
 8019ecc:	4592      	cmp	sl, r2
 8019ece:	d84d      	bhi.n	8019f6c <__ieee754_pow+0x124>
 8019ed0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8019ed4:	4592      	cmp	sl, r2
 8019ed6:	f240 84c7 	bls.w	801a868 <__ieee754_pow+0xa20>
 8019eda:	ea4f 522a 	mov.w	r2, sl, asr #20
 8019ede:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8019ee2:	2a14      	cmp	r2, #20
 8019ee4:	dd0f      	ble.n	8019f06 <__ieee754_pow+0xbe>
 8019ee6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8019eea:	fa21 f402 	lsr.w	r4, r1, r2
 8019eee:	fa04 f202 	lsl.w	r2, r4, r2
 8019ef2:	428a      	cmp	r2, r1
 8019ef4:	f040 84b8 	bne.w	801a868 <__ieee754_pow+0xa20>
 8019ef8:	f004 0401 	and.w	r4, r4, #1
 8019efc:	f1c4 0402 	rsb	r4, r4, #2
 8019f00:	2900      	cmp	r1, #0
 8019f02:	d158      	bne.n	8019fb6 <__ieee754_pow+0x16e>
 8019f04:	e00e      	b.n	8019f24 <__ieee754_pow+0xdc>
 8019f06:	2900      	cmp	r1, #0
 8019f08:	d154      	bne.n	8019fb4 <__ieee754_pow+0x16c>
 8019f0a:	f1c2 0214 	rsb	r2, r2, #20
 8019f0e:	fa4a f402 	asr.w	r4, sl, r2
 8019f12:	fa04 f202 	lsl.w	r2, r4, r2
 8019f16:	4552      	cmp	r2, sl
 8019f18:	f040 84a3 	bne.w	801a862 <__ieee754_pow+0xa1a>
 8019f1c:	f004 0401 	and.w	r4, r4, #1
 8019f20:	f1c4 0402 	rsb	r4, r4, #2
 8019f24:	4a6d      	ldr	r2, [pc, #436]	@ (801a0dc <__ieee754_pow+0x294>)
 8019f26:	4592      	cmp	sl, r2
 8019f28:	d12e      	bne.n	8019f88 <__ieee754_pow+0x140>
 8019f2a:	f1b9 0f00 	cmp.w	r9, #0
 8019f2e:	f280 8494 	bge.w	801a85a <__ieee754_pow+0xa12>
 8019f32:	496a      	ldr	r1, [pc, #424]	@ (801a0dc <__ieee754_pow+0x294>)
 8019f34:	4632      	mov	r2, r6
 8019f36:	463b      	mov	r3, r7
 8019f38:	2000      	movs	r0, #0
 8019f3a:	f7e6 fc8f 	bl	800085c <__aeabi_ddiv>
 8019f3e:	e7a0      	b.n	8019e82 <__ieee754_pow+0x3a>
 8019f40:	2400      	movs	r4, #0
 8019f42:	bbc1      	cbnz	r1, 8019fb6 <__ieee754_pow+0x16e>
 8019f44:	4a63      	ldr	r2, [pc, #396]	@ (801a0d4 <__ieee754_pow+0x28c>)
 8019f46:	4592      	cmp	sl, r2
 8019f48:	d1ec      	bne.n	8019f24 <__ieee754_pow+0xdc>
 8019f4a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8019f4e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8019f52:	431a      	orrs	r2, r3
 8019f54:	f000 8479 	beq.w	801a84a <__ieee754_pow+0xa02>
 8019f58:	4b61      	ldr	r3, [pc, #388]	@ (801a0e0 <__ieee754_pow+0x298>)
 8019f5a:	4598      	cmp	r8, r3
 8019f5c:	d908      	bls.n	8019f70 <__ieee754_pow+0x128>
 8019f5e:	f1b9 0f00 	cmp.w	r9, #0
 8019f62:	f2c0 8476 	blt.w	801a852 <__ieee754_pow+0xa0a>
 8019f66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019f6a:	e78a      	b.n	8019e82 <__ieee754_pow+0x3a>
 8019f6c:	2402      	movs	r4, #2
 8019f6e:	e7e8      	b.n	8019f42 <__ieee754_pow+0xfa>
 8019f70:	f1b9 0f00 	cmp.w	r9, #0
 8019f74:	f04f 0000 	mov.w	r0, #0
 8019f78:	f04f 0100 	mov.w	r1, #0
 8019f7c:	da81      	bge.n	8019e82 <__ieee754_pow+0x3a>
 8019f7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019f82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8019f86:	e77c      	b.n	8019e82 <__ieee754_pow+0x3a>
 8019f88:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8019f8c:	d106      	bne.n	8019f9c <__ieee754_pow+0x154>
 8019f8e:	4632      	mov	r2, r6
 8019f90:	463b      	mov	r3, r7
 8019f92:	4630      	mov	r0, r6
 8019f94:	4639      	mov	r1, r7
 8019f96:	f7e6 fb37 	bl	8000608 <__aeabi_dmul>
 8019f9a:	e772      	b.n	8019e82 <__ieee754_pow+0x3a>
 8019f9c:	4a51      	ldr	r2, [pc, #324]	@ (801a0e4 <__ieee754_pow+0x29c>)
 8019f9e:	4591      	cmp	r9, r2
 8019fa0:	d109      	bne.n	8019fb6 <__ieee754_pow+0x16e>
 8019fa2:	2d00      	cmp	r5, #0
 8019fa4:	db07      	blt.n	8019fb6 <__ieee754_pow+0x16e>
 8019fa6:	ec47 6b10 	vmov	d0, r6, r7
 8019faa:	b011      	add	sp, #68	@ 0x44
 8019fac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fb0:	f7ff bdaa 	b.w	8019b08 <__ieee754_sqrt>
 8019fb4:	2400      	movs	r4, #0
 8019fb6:	ec47 6b10 	vmov	d0, r6, r7
 8019fba:	9302      	str	r3, [sp, #8]
 8019fbc:	f000 fc88 	bl	801a8d0 <fabs>
 8019fc0:	9b02      	ldr	r3, [sp, #8]
 8019fc2:	ec51 0b10 	vmov	r0, r1, d0
 8019fc6:	bb53      	cbnz	r3, 801a01e <__ieee754_pow+0x1d6>
 8019fc8:	4b44      	ldr	r3, [pc, #272]	@ (801a0dc <__ieee754_pow+0x294>)
 8019fca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	d002      	beq.n	8019fd8 <__ieee754_pow+0x190>
 8019fd2:	f1b8 0f00 	cmp.w	r8, #0
 8019fd6:	d122      	bne.n	801a01e <__ieee754_pow+0x1d6>
 8019fd8:	f1b9 0f00 	cmp.w	r9, #0
 8019fdc:	da05      	bge.n	8019fea <__ieee754_pow+0x1a2>
 8019fde:	4602      	mov	r2, r0
 8019fe0:	460b      	mov	r3, r1
 8019fe2:	2000      	movs	r0, #0
 8019fe4:	493d      	ldr	r1, [pc, #244]	@ (801a0dc <__ieee754_pow+0x294>)
 8019fe6:	f7e6 fc39 	bl	800085c <__aeabi_ddiv>
 8019fea:	2d00      	cmp	r5, #0
 8019fec:	f6bf af49 	bge.w	8019e82 <__ieee754_pow+0x3a>
 8019ff0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8019ff4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8019ff8:	ea58 0804 	orrs.w	r8, r8, r4
 8019ffc:	d108      	bne.n	801a010 <__ieee754_pow+0x1c8>
 8019ffe:	4602      	mov	r2, r0
 801a000:	460b      	mov	r3, r1
 801a002:	4610      	mov	r0, r2
 801a004:	4619      	mov	r1, r3
 801a006:	f7e6 f947 	bl	8000298 <__aeabi_dsub>
 801a00a:	4602      	mov	r2, r0
 801a00c:	460b      	mov	r3, r1
 801a00e:	e794      	b.n	8019f3a <__ieee754_pow+0xf2>
 801a010:	2c01      	cmp	r4, #1
 801a012:	f47f af36 	bne.w	8019e82 <__ieee754_pow+0x3a>
 801a016:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a01a:	4619      	mov	r1, r3
 801a01c:	e731      	b.n	8019e82 <__ieee754_pow+0x3a>
 801a01e:	0feb      	lsrs	r3, r5, #31
 801a020:	3b01      	subs	r3, #1
 801a022:	ea53 0204 	orrs.w	r2, r3, r4
 801a026:	d102      	bne.n	801a02e <__ieee754_pow+0x1e6>
 801a028:	4632      	mov	r2, r6
 801a02a:	463b      	mov	r3, r7
 801a02c:	e7e9      	b.n	801a002 <__ieee754_pow+0x1ba>
 801a02e:	3c01      	subs	r4, #1
 801a030:	431c      	orrs	r4, r3
 801a032:	d016      	beq.n	801a062 <__ieee754_pow+0x21a>
 801a034:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801a0c0 <__ieee754_pow+0x278>
 801a038:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801a03c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a040:	f240 8112 	bls.w	801a268 <__ieee754_pow+0x420>
 801a044:	4b28      	ldr	r3, [pc, #160]	@ (801a0e8 <__ieee754_pow+0x2a0>)
 801a046:	459a      	cmp	sl, r3
 801a048:	4b25      	ldr	r3, [pc, #148]	@ (801a0e0 <__ieee754_pow+0x298>)
 801a04a:	d916      	bls.n	801a07a <__ieee754_pow+0x232>
 801a04c:	4598      	cmp	r8, r3
 801a04e:	d80b      	bhi.n	801a068 <__ieee754_pow+0x220>
 801a050:	f1b9 0f00 	cmp.w	r9, #0
 801a054:	da0b      	bge.n	801a06e <__ieee754_pow+0x226>
 801a056:	2000      	movs	r0, #0
 801a058:	b011      	add	sp, #68	@ 0x44
 801a05a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a05e:	f000 becb 	b.w	801adf8 <__math_oflow>
 801a062:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801a0c8 <__ieee754_pow+0x280>
 801a066:	e7e7      	b.n	801a038 <__ieee754_pow+0x1f0>
 801a068:	f1b9 0f00 	cmp.w	r9, #0
 801a06c:	dcf3      	bgt.n	801a056 <__ieee754_pow+0x20e>
 801a06e:	2000      	movs	r0, #0
 801a070:	b011      	add	sp, #68	@ 0x44
 801a072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a076:	f000 beb7 	b.w	801ade8 <__math_uflow>
 801a07a:	4598      	cmp	r8, r3
 801a07c:	d20c      	bcs.n	801a098 <__ieee754_pow+0x250>
 801a07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a082:	2200      	movs	r2, #0
 801a084:	2300      	movs	r3, #0
 801a086:	f7e6 fd31 	bl	8000aec <__aeabi_dcmplt>
 801a08a:	3800      	subs	r0, #0
 801a08c:	bf18      	it	ne
 801a08e:	2001      	movne	r0, #1
 801a090:	f1b9 0f00 	cmp.w	r9, #0
 801a094:	daec      	bge.n	801a070 <__ieee754_pow+0x228>
 801a096:	e7df      	b.n	801a058 <__ieee754_pow+0x210>
 801a098:	4b10      	ldr	r3, [pc, #64]	@ (801a0dc <__ieee754_pow+0x294>)
 801a09a:	4598      	cmp	r8, r3
 801a09c:	f04f 0200 	mov.w	r2, #0
 801a0a0:	d924      	bls.n	801a0ec <__ieee754_pow+0x2a4>
 801a0a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	f7e6 fd20 	bl	8000aec <__aeabi_dcmplt>
 801a0ac:	3800      	subs	r0, #0
 801a0ae:	bf18      	it	ne
 801a0b0:	2001      	movne	r0, #1
 801a0b2:	f1b9 0f00 	cmp.w	r9, #0
 801a0b6:	dccf      	bgt.n	801a058 <__ieee754_pow+0x210>
 801a0b8:	e7da      	b.n	801a070 <__ieee754_pow+0x228>
 801a0ba:	bf00      	nop
 801a0bc:	f3af 8000 	nop.w
 801a0c0:	00000000 	.word	0x00000000
 801a0c4:	3ff00000 	.word	0x3ff00000
 801a0c8:	00000000 	.word	0x00000000
 801a0cc:	bff00000 	.word	0xbff00000
 801a0d0:	fff00000 	.word	0xfff00000
 801a0d4:	7ff00000 	.word	0x7ff00000
 801a0d8:	433fffff 	.word	0x433fffff
 801a0dc:	3ff00000 	.word	0x3ff00000
 801a0e0:	3fefffff 	.word	0x3fefffff
 801a0e4:	3fe00000 	.word	0x3fe00000
 801a0e8:	43f00000 	.word	0x43f00000
 801a0ec:	4b5a      	ldr	r3, [pc, #360]	@ (801a258 <__ieee754_pow+0x410>)
 801a0ee:	f7e6 f8d3 	bl	8000298 <__aeabi_dsub>
 801a0f2:	a351      	add	r3, pc, #324	@ (adr r3, 801a238 <__ieee754_pow+0x3f0>)
 801a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f8:	4604      	mov	r4, r0
 801a0fa:	460d      	mov	r5, r1
 801a0fc:	f7e6 fa84 	bl	8000608 <__aeabi_dmul>
 801a100:	a34f      	add	r3, pc, #316	@ (adr r3, 801a240 <__ieee754_pow+0x3f8>)
 801a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a106:	4606      	mov	r6, r0
 801a108:	460f      	mov	r7, r1
 801a10a:	4620      	mov	r0, r4
 801a10c:	4629      	mov	r1, r5
 801a10e:	f7e6 fa7b 	bl	8000608 <__aeabi_dmul>
 801a112:	4b52      	ldr	r3, [pc, #328]	@ (801a25c <__ieee754_pow+0x414>)
 801a114:	4682      	mov	sl, r0
 801a116:	468b      	mov	fp, r1
 801a118:	2200      	movs	r2, #0
 801a11a:	4620      	mov	r0, r4
 801a11c:	4629      	mov	r1, r5
 801a11e:	f7e6 fa73 	bl	8000608 <__aeabi_dmul>
 801a122:	4602      	mov	r2, r0
 801a124:	460b      	mov	r3, r1
 801a126:	a148      	add	r1, pc, #288	@ (adr r1, 801a248 <__ieee754_pow+0x400>)
 801a128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a12c:	f7e6 f8b4 	bl	8000298 <__aeabi_dsub>
 801a130:	4622      	mov	r2, r4
 801a132:	462b      	mov	r3, r5
 801a134:	f7e6 fa68 	bl	8000608 <__aeabi_dmul>
 801a138:	4602      	mov	r2, r0
 801a13a:	460b      	mov	r3, r1
 801a13c:	2000      	movs	r0, #0
 801a13e:	4948      	ldr	r1, [pc, #288]	@ (801a260 <__ieee754_pow+0x418>)
 801a140:	f7e6 f8aa 	bl	8000298 <__aeabi_dsub>
 801a144:	4622      	mov	r2, r4
 801a146:	4680      	mov	r8, r0
 801a148:	4689      	mov	r9, r1
 801a14a:	462b      	mov	r3, r5
 801a14c:	4620      	mov	r0, r4
 801a14e:	4629      	mov	r1, r5
 801a150:	f7e6 fa5a 	bl	8000608 <__aeabi_dmul>
 801a154:	4602      	mov	r2, r0
 801a156:	460b      	mov	r3, r1
 801a158:	4640      	mov	r0, r8
 801a15a:	4649      	mov	r1, r9
 801a15c:	f7e6 fa54 	bl	8000608 <__aeabi_dmul>
 801a160:	a33b      	add	r3, pc, #236	@ (adr r3, 801a250 <__ieee754_pow+0x408>)
 801a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a166:	f7e6 fa4f 	bl	8000608 <__aeabi_dmul>
 801a16a:	4602      	mov	r2, r0
 801a16c:	460b      	mov	r3, r1
 801a16e:	4650      	mov	r0, sl
 801a170:	4659      	mov	r1, fp
 801a172:	f7e6 f891 	bl	8000298 <__aeabi_dsub>
 801a176:	4602      	mov	r2, r0
 801a178:	460b      	mov	r3, r1
 801a17a:	4680      	mov	r8, r0
 801a17c:	4689      	mov	r9, r1
 801a17e:	4630      	mov	r0, r6
 801a180:	4639      	mov	r1, r7
 801a182:	f7e6 f88b 	bl	800029c <__adddf3>
 801a186:	2400      	movs	r4, #0
 801a188:	4632      	mov	r2, r6
 801a18a:	463b      	mov	r3, r7
 801a18c:	4620      	mov	r0, r4
 801a18e:	460d      	mov	r5, r1
 801a190:	f7e6 f882 	bl	8000298 <__aeabi_dsub>
 801a194:	4602      	mov	r2, r0
 801a196:	460b      	mov	r3, r1
 801a198:	4640      	mov	r0, r8
 801a19a:	4649      	mov	r1, r9
 801a19c:	f7e6 f87c 	bl	8000298 <__aeabi_dsub>
 801a1a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a1a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	9304      	str	r3, [sp, #16]
 801a1ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a1b0:	4606      	mov	r6, r0
 801a1b2:	460f      	mov	r7, r1
 801a1b4:	4652      	mov	r2, sl
 801a1b6:	465b      	mov	r3, fp
 801a1b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a1bc:	f7e6 f86c 	bl	8000298 <__aeabi_dsub>
 801a1c0:	4622      	mov	r2, r4
 801a1c2:	462b      	mov	r3, r5
 801a1c4:	f7e6 fa20 	bl	8000608 <__aeabi_dmul>
 801a1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a1cc:	4680      	mov	r8, r0
 801a1ce:	4689      	mov	r9, r1
 801a1d0:	4630      	mov	r0, r6
 801a1d2:	4639      	mov	r1, r7
 801a1d4:	f7e6 fa18 	bl	8000608 <__aeabi_dmul>
 801a1d8:	4602      	mov	r2, r0
 801a1da:	460b      	mov	r3, r1
 801a1dc:	4640      	mov	r0, r8
 801a1de:	4649      	mov	r1, r9
 801a1e0:	f7e6 f85c 	bl	800029c <__adddf3>
 801a1e4:	4652      	mov	r2, sl
 801a1e6:	465b      	mov	r3, fp
 801a1e8:	4606      	mov	r6, r0
 801a1ea:	460f      	mov	r7, r1
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	4629      	mov	r1, r5
 801a1f0:	f7e6 fa0a 	bl	8000608 <__aeabi_dmul>
 801a1f4:	460b      	mov	r3, r1
 801a1f6:	4602      	mov	r2, r0
 801a1f8:	4680      	mov	r8, r0
 801a1fa:	4689      	mov	r9, r1
 801a1fc:	4630      	mov	r0, r6
 801a1fe:	4639      	mov	r1, r7
 801a200:	f7e6 f84c 	bl	800029c <__adddf3>
 801a204:	4b17      	ldr	r3, [pc, #92]	@ (801a264 <__ieee754_pow+0x41c>)
 801a206:	4299      	cmp	r1, r3
 801a208:	4604      	mov	r4, r0
 801a20a:	460d      	mov	r5, r1
 801a20c:	468a      	mov	sl, r1
 801a20e:	468b      	mov	fp, r1
 801a210:	f340 82ef 	ble.w	801a7f2 <__ieee754_pow+0x9aa>
 801a214:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801a218:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801a21c:	4303      	orrs	r3, r0
 801a21e:	f000 81e8 	beq.w	801a5f2 <__ieee754_pow+0x7aa>
 801a222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a226:	2200      	movs	r2, #0
 801a228:	2300      	movs	r3, #0
 801a22a:	f7e6 fc5f 	bl	8000aec <__aeabi_dcmplt>
 801a22e:	3800      	subs	r0, #0
 801a230:	bf18      	it	ne
 801a232:	2001      	movne	r0, #1
 801a234:	e710      	b.n	801a058 <__ieee754_pow+0x210>
 801a236:	bf00      	nop
 801a238:	60000000 	.word	0x60000000
 801a23c:	3ff71547 	.word	0x3ff71547
 801a240:	f85ddf44 	.word	0xf85ddf44
 801a244:	3e54ae0b 	.word	0x3e54ae0b
 801a248:	55555555 	.word	0x55555555
 801a24c:	3fd55555 	.word	0x3fd55555
 801a250:	652b82fe 	.word	0x652b82fe
 801a254:	3ff71547 	.word	0x3ff71547
 801a258:	3ff00000 	.word	0x3ff00000
 801a25c:	3fd00000 	.word	0x3fd00000
 801a260:	3fe00000 	.word	0x3fe00000
 801a264:	408fffff 	.word	0x408fffff
 801a268:	4bd5      	ldr	r3, [pc, #852]	@ (801a5c0 <__ieee754_pow+0x778>)
 801a26a:	402b      	ands	r3, r5
 801a26c:	2200      	movs	r2, #0
 801a26e:	b92b      	cbnz	r3, 801a27c <__ieee754_pow+0x434>
 801a270:	4bd4      	ldr	r3, [pc, #848]	@ (801a5c4 <__ieee754_pow+0x77c>)
 801a272:	f7e6 f9c9 	bl	8000608 <__aeabi_dmul>
 801a276:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801a27a:	468b      	mov	fp, r1
 801a27c:	ea4f 532b 	mov.w	r3, fp, asr #20
 801a280:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a284:	4413      	add	r3, r2
 801a286:	930a      	str	r3, [sp, #40]	@ 0x28
 801a288:	4bcf      	ldr	r3, [pc, #828]	@ (801a5c8 <__ieee754_pow+0x780>)
 801a28a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801a28e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801a292:	459b      	cmp	fp, r3
 801a294:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801a298:	dd08      	ble.n	801a2ac <__ieee754_pow+0x464>
 801a29a:	4bcc      	ldr	r3, [pc, #816]	@ (801a5cc <__ieee754_pow+0x784>)
 801a29c:	459b      	cmp	fp, r3
 801a29e:	f340 81a5 	ble.w	801a5ec <__ieee754_pow+0x7a4>
 801a2a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a2a4:	3301      	adds	r3, #1
 801a2a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801a2a8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801a2ac:	f04f 0a00 	mov.w	sl, #0
 801a2b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a2b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2b6:	4bc6      	ldr	r3, [pc, #792]	@ (801a5d0 <__ieee754_pow+0x788>)
 801a2b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a2bc:	ed93 7b00 	vldr	d7, [r3]
 801a2c0:	4629      	mov	r1, r5
 801a2c2:	ec53 2b17 	vmov	r2, r3, d7
 801a2c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a2ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a2ce:	f7e5 ffe3 	bl	8000298 <__aeabi_dsub>
 801a2d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a2d6:	4606      	mov	r6, r0
 801a2d8:	460f      	mov	r7, r1
 801a2da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a2de:	f7e5 ffdd 	bl	800029c <__adddf3>
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	460b      	mov	r3, r1
 801a2e6:	2000      	movs	r0, #0
 801a2e8:	49ba      	ldr	r1, [pc, #744]	@ (801a5d4 <__ieee754_pow+0x78c>)
 801a2ea:	f7e6 fab7 	bl	800085c <__aeabi_ddiv>
 801a2ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801a2f2:	4602      	mov	r2, r0
 801a2f4:	460b      	mov	r3, r1
 801a2f6:	4630      	mov	r0, r6
 801a2f8:	4639      	mov	r1, r7
 801a2fa:	f7e6 f985 	bl	8000608 <__aeabi_dmul>
 801a2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a302:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801a306:	106d      	asrs	r5, r5, #1
 801a308:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801a30c:	f04f 0b00 	mov.w	fp, #0
 801a310:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801a314:	4661      	mov	r1, ip
 801a316:	2200      	movs	r2, #0
 801a318:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801a31c:	4658      	mov	r0, fp
 801a31e:	46e1      	mov	r9, ip
 801a320:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801a324:	4614      	mov	r4, r2
 801a326:	461d      	mov	r5, r3
 801a328:	f7e6 f96e 	bl	8000608 <__aeabi_dmul>
 801a32c:	4602      	mov	r2, r0
 801a32e:	460b      	mov	r3, r1
 801a330:	4630      	mov	r0, r6
 801a332:	4639      	mov	r1, r7
 801a334:	f7e5 ffb0 	bl	8000298 <__aeabi_dsub>
 801a338:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a33c:	4606      	mov	r6, r0
 801a33e:	460f      	mov	r7, r1
 801a340:	4620      	mov	r0, r4
 801a342:	4629      	mov	r1, r5
 801a344:	f7e5 ffa8 	bl	8000298 <__aeabi_dsub>
 801a348:	4602      	mov	r2, r0
 801a34a:	460b      	mov	r3, r1
 801a34c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a350:	f7e5 ffa2 	bl	8000298 <__aeabi_dsub>
 801a354:	465a      	mov	r2, fp
 801a356:	464b      	mov	r3, r9
 801a358:	f7e6 f956 	bl	8000608 <__aeabi_dmul>
 801a35c:	4602      	mov	r2, r0
 801a35e:	460b      	mov	r3, r1
 801a360:	4630      	mov	r0, r6
 801a362:	4639      	mov	r1, r7
 801a364:	f7e5 ff98 	bl	8000298 <__aeabi_dsub>
 801a368:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a36c:	f7e6 f94c 	bl	8000608 <__aeabi_dmul>
 801a370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a374:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a378:	4610      	mov	r0, r2
 801a37a:	4619      	mov	r1, r3
 801a37c:	f7e6 f944 	bl	8000608 <__aeabi_dmul>
 801a380:	a37d      	add	r3, pc, #500	@ (adr r3, 801a578 <__ieee754_pow+0x730>)
 801a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a386:	4604      	mov	r4, r0
 801a388:	460d      	mov	r5, r1
 801a38a:	f7e6 f93d 	bl	8000608 <__aeabi_dmul>
 801a38e:	a37c      	add	r3, pc, #496	@ (adr r3, 801a580 <__ieee754_pow+0x738>)
 801a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a394:	f7e5 ff82 	bl	800029c <__adddf3>
 801a398:	4622      	mov	r2, r4
 801a39a:	462b      	mov	r3, r5
 801a39c:	f7e6 f934 	bl	8000608 <__aeabi_dmul>
 801a3a0:	a379      	add	r3, pc, #484	@ (adr r3, 801a588 <__ieee754_pow+0x740>)
 801a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a6:	f7e5 ff79 	bl	800029c <__adddf3>
 801a3aa:	4622      	mov	r2, r4
 801a3ac:	462b      	mov	r3, r5
 801a3ae:	f7e6 f92b 	bl	8000608 <__aeabi_dmul>
 801a3b2:	a377      	add	r3, pc, #476	@ (adr r3, 801a590 <__ieee754_pow+0x748>)
 801a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3b8:	f7e5 ff70 	bl	800029c <__adddf3>
 801a3bc:	4622      	mov	r2, r4
 801a3be:	462b      	mov	r3, r5
 801a3c0:	f7e6 f922 	bl	8000608 <__aeabi_dmul>
 801a3c4:	a374      	add	r3, pc, #464	@ (adr r3, 801a598 <__ieee754_pow+0x750>)
 801a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ca:	f7e5 ff67 	bl	800029c <__adddf3>
 801a3ce:	4622      	mov	r2, r4
 801a3d0:	462b      	mov	r3, r5
 801a3d2:	f7e6 f919 	bl	8000608 <__aeabi_dmul>
 801a3d6:	a372      	add	r3, pc, #456	@ (adr r3, 801a5a0 <__ieee754_pow+0x758>)
 801a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3dc:	f7e5 ff5e 	bl	800029c <__adddf3>
 801a3e0:	4622      	mov	r2, r4
 801a3e2:	4606      	mov	r6, r0
 801a3e4:	460f      	mov	r7, r1
 801a3e6:	462b      	mov	r3, r5
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	4629      	mov	r1, r5
 801a3ec:	f7e6 f90c 	bl	8000608 <__aeabi_dmul>
 801a3f0:	4602      	mov	r2, r0
 801a3f2:	460b      	mov	r3, r1
 801a3f4:	4630      	mov	r0, r6
 801a3f6:	4639      	mov	r1, r7
 801a3f8:	f7e6 f906 	bl	8000608 <__aeabi_dmul>
 801a3fc:	465a      	mov	r2, fp
 801a3fe:	4604      	mov	r4, r0
 801a400:	460d      	mov	r5, r1
 801a402:	464b      	mov	r3, r9
 801a404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a408:	f7e5 ff48 	bl	800029c <__adddf3>
 801a40c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a410:	f7e6 f8fa 	bl	8000608 <__aeabi_dmul>
 801a414:	4622      	mov	r2, r4
 801a416:	462b      	mov	r3, r5
 801a418:	f7e5 ff40 	bl	800029c <__adddf3>
 801a41c:	465a      	mov	r2, fp
 801a41e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a422:	464b      	mov	r3, r9
 801a424:	4658      	mov	r0, fp
 801a426:	4649      	mov	r1, r9
 801a428:	f7e6 f8ee 	bl	8000608 <__aeabi_dmul>
 801a42c:	4b6a      	ldr	r3, [pc, #424]	@ (801a5d8 <__ieee754_pow+0x790>)
 801a42e:	2200      	movs	r2, #0
 801a430:	4606      	mov	r6, r0
 801a432:	460f      	mov	r7, r1
 801a434:	f7e5 ff32 	bl	800029c <__adddf3>
 801a438:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a43c:	f7e5 ff2e 	bl	800029c <__adddf3>
 801a440:	46d8      	mov	r8, fp
 801a442:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801a446:	460d      	mov	r5, r1
 801a448:	465a      	mov	r2, fp
 801a44a:	460b      	mov	r3, r1
 801a44c:	4640      	mov	r0, r8
 801a44e:	4649      	mov	r1, r9
 801a450:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801a454:	f7e6 f8d8 	bl	8000608 <__aeabi_dmul>
 801a458:	465c      	mov	r4, fp
 801a45a:	4680      	mov	r8, r0
 801a45c:	4689      	mov	r9, r1
 801a45e:	4b5e      	ldr	r3, [pc, #376]	@ (801a5d8 <__ieee754_pow+0x790>)
 801a460:	2200      	movs	r2, #0
 801a462:	4620      	mov	r0, r4
 801a464:	4629      	mov	r1, r5
 801a466:	f7e5 ff17 	bl	8000298 <__aeabi_dsub>
 801a46a:	4632      	mov	r2, r6
 801a46c:	463b      	mov	r3, r7
 801a46e:	f7e5 ff13 	bl	8000298 <__aeabi_dsub>
 801a472:	4602      	mov	r2, r0
 801a474:	460b      	mov	r3, r1
 801a476:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a47a:	f7e5 ff0d 	bl	8000298 <__aeabi_dsub>
 801a47e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a482:	f7e6 f8c1 	bl	8000608 <__aeabi_dmul>
 801a486:	4622      	mov	r2, r4
 801a488:	4606      	mov	r6, r0
 801a48a:	460f      	mov	r7, r1
 801a48c:	462b      	mov	r3, r5
 801a48e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a492:	f7e6 f8b9 	bl	8000608 <__aeabi_dmul>
 801a496:	4602      	mov	r2, r0
 801a498:	460b      	mov	r3, r1
 801a49a:	4630      	mov	r0, r6
 801a49c:	4639      	mov	r1, r7
 801a49e:	f7e5 fefd 	bl	800029c <__adddf3>
 801a4a2:	4606      	mov	r6, r0
 801a4a4:	460f      	mov	r7, r1
 801a4a6:	4602      	mov	r2, r0
 801a4a8:	460b      	mov	r3, r1
 801a4aa:	4640      	mov	r0, r8
 801a4ac:	4649      	mov	r1, r9
 801a4ae:	f7e5 fef5 	bl	800029c <__adddf3>
 801a4b2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801a4b6:	a33c      	add	r3, pc, #240	@ (adr r3, 801a5a8 <__ieee754_pow+0x760>)
 801a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4bc:	4658      	mov	r0, fp
 801a4be:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801a4c2:	460d      	mov	r5, r1
 801a4c4:	f7e6 f8a0 	bl	8000608 <__aeabi_dmul>
 801a4c8:	465c      	mov	r4, fp
 801a4ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a4ce:	4642      	mov	r2, r8
 801a4d0:	464b      	mov	r3, r9
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	4629      	mov	r1, r5
 801a4d6:	f7e5 fedf 	bl	8000298 <__aeabi_dsub>
 801a4da:	4602      	mov	r2, r0
 801a4dc:	460b      	mov	r3, r1
 801a4de:	4630      	mov	r0, r6
 801a4e0:	4639      	mov	r1, r7
 801a4e2:	f7e5 fed9 	bl	8000298 <__aeabi_dsub>
 801a4e6:	a332      	add	r3, pc, #200	@ (adr r3, 801a5b0 <__ieee754_pow+0x768>)
 801a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ec:	f7e6 f88c 	bl	8000608 <__aeabi_dmul>
 801a4f0:	a331      	add	r3, pc, #196	@ (adr r3, 801a5b8 <__ieee754_pow+0x770>)
 801a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4f6:	4606      	mov	r6, r0
 801a4f8:	460f      	mov	r7, r1
 801a4fa:	4620      	mov	r0, r4
 801a4fc:	4629      	mov	r1, r5
 801a4fe:	f7e6 f883 	bl	8000608 <__aeabi_dmul>
 801a502:	4602      	mov	r2, r0
 801a504:	460b      	mov	r3, r1
 801a506:	4630      	mov	r0, r6
 801a508:	4639      	mov	r1, r7
 801a50a:	f7e5 fec7 	bl	800029c <__adddf3>
 801a50e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a510:	4b32      	ldr	r3, [pc, #200]	@ (801a5dc <__ieee754_pow+0x794>)
 801a512:	4413      	add	r3, r2
 801a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a518:	f7e5 fec0 	bl	800029c <__adddf3>
 801a51c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a520:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a522:	f7e6 f807 	bl	8000534 <__aeabi_i2d>
 801a526:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a528:	4b2d      	ldr	r3, [pc, #180]	@ (801a5e0 <__ieee754_pow+0x798>)
 801a52a:	4413      	add	r3, r2
 801a52c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a530:	4606      	mov	r6, r0
 801a532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a536:	460f      	mov	r7, r1
 801a538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a53c:	f7e5 feae 	bl	800029c <__adddf3>
 801a540:	4642      	mov	r2, r8
 801a542:	464b      	mov	r3, r9
 801a544:	f7e5 feaa 	bl	800029c <__adddf3>
 801a548:	4632      	mov	r2, r6
 801a54a:	463b      	mov	r3, r7
 801a54c:	f7e5 fea6 	bl	800029c <__adddf3>
 801a550:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801a554:	4632      	mov	r2, r6
 801a556:	463b      	mov	r3, r7
 801a558:	4658      	mov	r0, fp
 801a55a:	460d      	mov	r5, r1
 801a55c:	f7e5 fe9c 	bl	8000298 <__aeabi_dsub>
 801a560:	4642      	mov	r2, r8
 801a562:	464b      	mov	r3, r9
 801a564:	f7e5 fe98 	bl	8000298 <__aeabi_dsub>
 801a568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a56c:	f7e5 fe94 	bl	8000298 <__aeabi_dsub>
 801a570:	465c      	mov	r4, fp
 801a572:	4602      	mov	r2, r0
 801a574:	e036      	b.n	801a5e4 <__ieee754_pow+0x79c>
 801a576:	bf00      	nop
 801a578:	4a454eef 	.word	0x4a454eef
 801a57c:	3fca7e28 	.word	0x3fca7e28
 801a580:	93c9db65 	.word	0x93c9db65
 801a584:	3fcd864a 	.word	0x3fcd864a
 801a588:	a91d4101 	.word	0xa91d4101
 801a58c:	3fd17460 	.word	0x3fd17460
 801a590:	518f264d 	.word	0x518f264d
 801a594:	3fd55555 	.word	0x3fd55555
 801a598:	db6fabff 	.word	0xdb6fabff
 801a59c:	3fdb6db6 	.word	0x3fdb6db6
 801a5a0:	33333303 	.word	0x33333303
 801a5a4:	3fe33333 	.word	0x3fe33333
 801a5a8:	e0000000 	.word	0xe0000000
 801a5ac:	3feec709 	.word	0x3feec709
 801a5b0:	dc3a03fd 	.word	0xdc3a03fd
 801a5b4:	3feec709 	.word	0x3feec709
 801a5b8:	145b01f5 	.word	0x145b01f5
 801a5bc:	be3e2fe0 	.word	0xbe3e2fe0
 801a5c0:	7ff00000 	.word	0x7ff00000
 801a5c4:	43400000 	.word	0x43400000
 801a5c8:	0003988e 	.word	0x0003988e
 801a5cc:	000bb679 	.word	0x000bb679
 801a5d0:	0801e3f8 	.word	0x0801e3f8
 801a5d4:	3ff00000 	.word	0x3ff00000
 801a5d8:	40080000 	.word	0x40080000
 801a5dc:	0801e3d8 	.word	0x0801e3d8
 801a5e0:	0801e3e8 	.word	0x0801e3e8
 801a5e4:	460b      	mov	r3, r1
 801a5e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a5ea:	e5d7      	b.n	801a19c <__ieee754_pow+0x354>
 801a5ec:	f04f 0a01 	mov.w	sl, #1
 801a5f0:	e65e      	b.n	801a2b0 <__ieee754_pow+0x468>
 801a5f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 801a8c4 <__ieee754_pow+0xa7c>)
 801a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f8:	4630      	mov	r0, r6
 801a5fa:	4639      	mov	r1, r7
 801a5fc:	f7e5 fe4e 	bl	800029c <__adddf3>
 801a600:	4642      	mov	r2, r8
 801a602:	e9cd 0100 	strd	r0, r1, [sp]
 801a606:	464b      	mov	r3, r9
 801a608:	4620      	mov	r0, r4
 801a60a:	4629      	mov	r1, r5
 801a60c:	f7e5 fe44 	bl	8000298 <__aeabi_dsub>
 801a610:	4602      	mov	r2, r0
 801a612:	460b      	mov	r3, r1
 801a614:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a618:	f7e6 fa86 	bl	8000b28 <__aeabi_dcmpgt>
 801a61c:	2800      	cmp	r0, #0
 801a61e:	f47f ae00 	bne.w	801a222 <__ieee754_pow+0x3da>
 801a622:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801a626:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801a62a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801a62e:	fa43 fa0a 	asr.w	sl, r3, sl
 801a632:	44da      	add	sl, fp
 801a634:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a638:	489d      	ldr	r0, [pc, #628]	@ (801a8b0 <__ieee754_pow+0xa68>)
 801a63a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801a63e:	4108      	asrs	r0, r1
 801a640:	ea00 030a 	and.w	r3, r0, sl
 801a644:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a648:	f1c1 0114 	rsb	r1, r1, #20
 801a64c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801a650:	fa4a fa01 	asr.w	sl, sl, r1
 801a654:	f1bb 0f00 	cmp.w	fp, #0
 801a658:	4640      	mov	r0, r8
 801a65a:	4649      	mov	r1, r9
 801a65c:	f04f 0200 	mov.w	r2, #0
 801a660:	bfb8      	it	lt
 801a662:	f1ca 0a00 	rsblt	sl, sl, #0
 801a666:	f7e5 fe17 	bl	8000298 <__aeabi_dsub>
 801a66a:	4680      	mov	r8, r0
 801a66c:	4689      	mov	r9, r1
 801a66e:	4632      	mov	r2, r6
 801a670:	463b      	mov	r3, r7
 801a672:	4640      	mov	r0, r8
 801a674:	4649      	mov	r1, r9
 801a676:	f7e5 fe11 	bl	800029c <__adddf3>
 801a67a:	2400      	movs	r4, #0
 801a67c:	a37c      	add	r3, pc, #496	@ (adr r3, 801a870 <__ieee754_pow+0xa28>)
 801a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a682:	4620      	mov	r0, r4
 801a684:	460d      	mov	r5, r1
 801a686:	f7e5 ffbf 	bl	8000608 <__aeabi_dmul>
 801a68a:	4642      	mov	r2, r8
 801a68c:	e9cd 0100 	strd	r0, r1, [sp]
 801a690:	464b      	mov	r3, r9
 801a692:	4620      	mov	r0, r4
 801a694:	4629      	mov	r1, r5
 801a696:	f7e5 fdff 	bl	8000298 <__aeabi_dsub>
 801a69a:	4602      	mov	r2, r0
 801a69c:	460b      	mov	r3, r1
 801a69e:	4630      	mov	r0, r6
 801a6a0:	4639      	mov	r1, r7
 801a6a2:	f7e5 fdf9 	bl	8000298 <__aeabi_dsub>
 801a6a6:	a374      	add	r3, pc, #464	@ (adr r3, 801a878 <__ieee754_pow+0xa30>)
 801a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ac:	f7e5 ffac 	bl	8000608 <__aeabi_dmul>
 801a6b0:	a373      	add	r3, pc, #460	@ (adr r3, 801a880 <__ieee754_pow+0xa38>)
 801a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b6:	4680      	mov	r8, r0
 801a6b8:	4689      	mov	r9, r1
 801a6ba:	4620      	mov	r0, r4
 801a6bc:	4629      	mov	r1, r5
 801a6be:	f7e5 ffa3 	bl	8000608 <__aeabi_dmul>
 801a6c2:	4602      	mov	r2, r0
 801a6c4:	460b      	mov	r3, r1
 801a6c6:	4640      	mov	r0, r8
 801a6c8:	4649      	mov	r1, r9
 801a6ca:	f7e5 fde7 	bl	800029c <__adddf3>
 801a6ce:	4604      	mov	r4, r0
 801a6d0:	460d      	mov	r5, r1
 801a6d2:	4602      	mov	r2, r0
 801a6d4:	460b      	mov	r3, r1
 801a6d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a6da:	f7e5 fddf 	bl	800029c <__adddf3>
 801a6de:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a6e2:	4680      	mov	r8, r0
 801a6e4:	4689      	mov	r9, r1
 801a6e6:	f7e5 fdd7 	bl	8000298 <__aeabi_dsub>
 801a6ea:	4602      	mov	r2, r0
 801a6ec:	460b      	mov	r3, r1
 801a6ee:	4620      	mov	r0, r4
 801a6f0:	4629      	mov	r1, r5
 801a6f2:	f7e5 fdd1 	bl	8000298 <__aeabi_dsub>
 801a6f6:	4642      	mov	r2, r8
 801a6f8:	4606      	mov	r6, r0
 801a6fa:	460f      	mov	r7, r1
 801a6fc:	464b      	mov	r3, r9
 801a6fe:	4640      	mov	r0, r8
 801a700:	4649      	mov	r1, r9
 801a702:	f7e5 ff81 	bl	8000608 <__aeabi_dmul>
 801a706:	a360      	add	r3, pc, #384	@ (adr r3, 801a888 <__ieee754_pow+0xa40>)
 801a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a70c:	4604      	mov	r4, r0
 801a70e:	460d      	mov	r5, r1
 801a710:	f7e5 ff7a 	bl	8000608 <__aeabi_dmul>
 801a714:	a35e      	add	r3, pc, #376	@ (adr r3, 801a890 <__ieee754_pow+0xa48>)
 801a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a71a:	f7e5 fdbd 	bl	8000298 <__aeabi_dsub>
 801a71e:	4622      	mov	r2, r4
 801a720:	462b      	mov	r3, r5
 801a722:	f7e5 ff71 	bl	8000608 <__aeabi_dmul>
 801a726:	a35c      	add	r3, pc, #368	@ (adr r3, 801a898 <__ieee754_pow+0xa50>)
 801a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72c:	f7e5 fdb6 	bl	800029c <__adddf3>
 801a730:	4622      	mov	r2, r4
 801a732:	462b      	mov	r3, r5
 801a734:	f7e5 ff68 	bl	8000608 <__aeabi_dmul>
 801a738:	a359      	add	r3, pc, #356	@ (adr r3, 801a8a0 <__ieee754_pow+0xa58>)
 801a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73e:	f7e5 fdab 	bl	8000298 <__aeabi_dsub>
 801a742:	4622      	mov	r2, r4
 801a744:	462b      	mov	r3, r5
 801a746:	f7e5 ff5f 	bl	8000608 <__aeabi_dmul>
 801a74a:	a357      	add	r3, pc, #348	@ (adr r3, 801a8a8 <__ieee754_pow+0xa60>)
 801a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a750:	f7e5 fda4 	bl	800029c <__adddf3>
 801a754:	4622      	mov	r2, r4
 801a756:	462b      	mov	r3, r5
 801a758:	f7e5 ff56 	bl	8000608 <__aeabi_dmul>
 801a75c:	4602      	mov	r2, r0
 801a75e:	460b      	mov	r3, r1
 801a760:	4640      	mov	r0, r8
 801a762:	4649      	mov	r1, r9
 801a764:	f7e5 fd98 	bl	8000298 <__aeabi_dsub>
 801a768:	4604      	mov	r4, r0
 801a76a:	460d      	mov	r5, r1
 801a76c:	4602      	mov	r2, r0
 801a76e:	460b      	mov	r3, r1
 801a770:	4640      	mov	r0, r8
 801a772:	4649      	mov	r1, r9
 801a774:	f7e5 ff48 	bl	8000608 <__aeabi_dmul>
 801a778:	2200      	movs	r2, #0
 801a77a:	e9cd 0100 	strd	r0, r1, [sp]
 801a77e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a782:	4620      	mov	r0, r4
 801a784:	4629      	mov	r1, r5
 801a786:	f7e5 fd87 	bl	8000298 <__aeabi_dsub>
 801a78a:	4602      	mov	r2, r0
 801a78c:	460b      	mov	r3, r1
 801a78e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a792:	f7e6 f863 	bl	800085c <__aeabi_ddiv>
 801a796:	4632      	mov	r2, r6
 801a798:	4604      	mov	r4, r0
 801a79a:	460d      	mov	r5, r1
 801a79c:	463b      	mov	r3, r7
 801a79e:	4640      	mov	r0, r8
 801a7a0:	4649      	mov	r1, r9
 801a7a2:	f7e5 ff31 	bl	8000608 <__aeabi_dmul>
 801a7a6:	4632      	mov	r2, r6
 801a7a8:	463b      	mov	r3, r7
 801a7aa:	f7e5 fd77 	bl	800029c <__adddf3>
 801a7ae:	4602      	mov	r2, r0
 801a7b0:	460b      	mov	r3, r1
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	4629      	mov	r1, r5
 801a7b6:	f7e5 fd6f 	bl	8000298 <__aeabi_dsub>
 801a7ba:	4642      	mov	r2, r8
 801a7bc:	464b      	mov	r3, r9
 801a7be:	f7e5 fd6b 	bl	8000298 <__aeabi_dsub>
 801a7c2:	460b      	mov	r3, r1
 801a7c4:	4602      	mov	r2, r0
 801a7c6:	493b      	ldr	r1, [pc, #236]	@ (801a8b4 <__ieee754_pow+0xa6c>)
 801a7c8:	2000      	movs	r0, #0
 801a7ca:	f7e5 fd65 	bl	8000298 <__aeabi_dsub>
 801a7ce:	ec41 0b10 	vmov	d0, r0, r1
 801a7d2:	ee10 3a90 	vmov	r3, s1
 801a7d6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a7da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a7de:	da30      	bge.n	801a842 <__ieee754_pow+0x9fa>
 801a7e0:	4650      	mov	r0, sl
 801a7e2:	f000 fa55 	bl	801ac90 <scalbn>
 801a7e6:	ec51 0b10 	vmov	r0, r1, d0
 801a7ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a7ee:	f7ff bbd2 	b.w	8019f96 <__ieee754_pow+0x14e>
 801a7f2:	4c31      	ldr	r4, [pc, #196]	@ (801a8b8 <__ieee754_pow+0xa70>)
 801a7f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a7f8:	42a3      	cmp	r3, r4
 801a7fa:	d91a      	bls.n	801a832 <__ieee754_pow+0x9ea>
 801a7fc:	4b2f      	ldr	r3, [pc, #188]	@ (801a8bc <__ieee754_pow+0xa74>)
 801a7fe:	440b      	add	r3, r1
 801a800:	4303      	orrs	r3, r0
 801a802:	d009      	beq.n	801a818 <__ieee754_pow+0x9d0>
 801a804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a808:	2200      	movs	r2, #0
 801a80a:	2300      	movs	r3, #0
 801a80c:	f7e6 f96e 	bl	8000aec <__aeabi_dcmplt>
 801a810:	3800      	subs	r0, #0
 801a812:	bf18      	it	ne
 801a814:	2001      	movne	r0, #1
 801a816:	e42b      	b.n	801a070 <__ieee754_pow+0x228>
 801a818:	4642      	mov	r2, r8
 801a81a:	464b      	mov	r3, r9
 801a81c:	f7e5 fd3c 	bl	8000298 <__aeabi_dsub>
 801a820:	4632      	mov	r2, r6
 801a822:	463b      	mov	r3, r7
 801a824:	f7e6 f976 	bl	8000b14 <__aeabi_dcmpge>
 801a828:	2800      	cmp	r0, #0
 801a82a:	d1eb      	bne.n	801a804 <__ieee754_pow+0x9bc>
 801a82c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801a8cc <__ieee754_pow+0xa84>
 801a830:	e6f7      	b.n	801a622 <__ieee754_pow+0x7da>
 801a832:	469a      	mov	sl, r3
 801a834:	4b22      	ldr	r3, [pc, #136]	@ (801a8c0 <__ieee754_pow+0xa78>)
 801a836:	459a      	cmp	sl, r3
 801a838:	f63f aef3 	bhi.w	801a622 <__ieee754_pow+0x7da>
 801a83c:	f8dd a010 	ldr.w	sl, [sp, #16]
 801a840:	e715      	b.n	801a66e <__ieee754_pow+0x826>
 801a842:	ec51 0b10 	vmov	r0, r1, d0
 801a846:	4619      	mov	r1, r3
 801a848:	e7cf      	b.n	801a7ea <__ieee754_pow+0x9a2>
 801a84a:	491a      	ldr	r1, [pc, #104]	@ (801a8b4 <__ieee754_pow+0xa6c>)
 801a84c:	2000      	movs	r0, #0
 801a84e:	f7ff bb18 	b.w	8019e82 <__ieee754_pow+0x3a>
 801a852:	2000      	movs	r0, #0
 801a854:	2100      	movs	r1, #0
 801a856:	f7ff bb14 	b.w	8019e82 <__ieee754_pow+0x3a>
 801a85a:	4630      	mov	r0, r6
 801a85c:	4639      	mov	r1, r7
 801a85e:	f7ff bb10 	b.w	8019e82 <__ieee754_pow+0x3a>
 801a862:	460c      	mov	r4, r1
 801a864:	f7ff bb5e 	b.w	8019f24 <__ieee754_pow+0xdc>
 801a868:	2400      	movs	r4, #0
 801a86a:	f7ff bb49 	b.w	8019f00 <__ieee754_pow+0xb8>
 801a86e:	bf00      	nop
 801a870:	00000000 	.word	0x00000000
 801a874:	3fe62e43 	.word	0x3fe62e43
 801a878:	fefa39ef 	.word	0xfefa39ef
 801a87c:	3fe62e42 	.word	0x3fe62e42
 801a880:	0ca86c39 	.word	0x0ca86c39
 801a884:	be205c61 	.word	0xbe205c61
 801a888:	72bea4d0 	.word	0x72bea4d0
 801a88c:	3e663769 	.word	0x3e663769
 801a890:	c5d26bf1 	.word	0xc5d26bf1
 801a894:	3ebbbd41 	.word	0x3ebbbd41
 801a898:	af25de2c 	.word	0xaf25de2c
 801a89c:	3f11566a 	.word	0x3f11566a
 801a8a0:	16bebd93 	.word	0x16bebd93
 801a8a4:	3f66c16c 	.word	0x3f66c16c
 801a8a8:	5555553e 	.word	0x5555553e
 801a8ac:	3fc55555 	.word	0x3fc55555
 801a8b0:	fff00000 	.word	0xfff00000
 801a8b4:	3ff00000 	.word	0x3ff00000
 801a8b8:	4090cbff 	.word	0x4090cbff
 801a8bc:	3f6f3400 	.word	0x3f6f3400
 801a8c0:	3fe00000 	.word	0x3fe00000
 801a8c4:	652b82fe 	.word	0x652b82fe
 801a8c8:	3c971547 	.word	0x3c971547
 801a8cc:	4090cc00 	.word	0x4090cc00

0801a8d0 <fabs>:
 801a8d0:	ec51 0b10 	vmov	r0, r1, d0
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a8da:	ec43 2b10 	vmov	d0, r2, r3
 801a8de:	4770      	bx	lr

0801a8e0 <__kernel_cosf>:
 801a8e0:	ee10 3a10 	vmov	r3, s0
 801a8e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a8e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801a8ec:	eef0 6a40 	vmov.f32	s13, s0
 801a8f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a8f4:	d204      	bcs.n	801a900 <__kernel_cosf+0x20>
 801a8f6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801a8fa:	ee17 2a90 	vmov	r2, s15
 801a8fe:	b342      	cbz	r2, 801a952 <__kernel_cosf+0x72>
 801a900:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a904:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801a970 <__kernel_cosf+0x90>
 801a908:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801a974 <__kernel_cosf+0x94>
 801a90c:	4a1a      	ldr	r2, [pc, #104]	@ (801a978 <__kernel_cosf+0x98>)
 801a90e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a912:	4293      	cmp	r3, r2
 801a914:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a97c <__kernel_cosf+0x9c>
 801a918:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a91c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801a980 <__kernel_cosf+0xa0>
 801a920:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a924:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801a984 <__kernel_cosf+0xa4>
 801a928:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a92c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801a988 <__kernel_cosf+0xa8>
 801a930:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a934:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801a938:	ee26 6a07 	vmul.f32	s12, s12, s14
 801a93c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a940:	eee7 0a06 	vfma.f32	s1, s14, s12
 801a944:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a948:	d804      	bhi.n	801a954 <__kernel_cosf+0x74>
 801a94a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a94e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a952:	4770      	bx	lr
 801a954:	4a0d      	ldr	r2, [pc, #52]	@ (801a98c <__kernel_cosf+0xac>)
 801a956:	4293      	cmp	r3, r2
 801a958:	bf9a      	itte	ls
 801a95a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801a95e:	ee07 3a10 	vmovls	s14, r3
 801a962:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801a966:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a96a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a96e:	e7ec      	b.n	801a94a <__kernel_cosf+0x6a>
 801a970:	ad47d74e 	.word	0xad47d74e
 801a974:	310f74f6 	.word	0x310f74f6
 801a978:	3e999999 	.word	0x3e999999
 801a97c:	b493f27c 	.word	0xb493f27c
 801a980:	37d00d01 	.word	0x37d00d01
 801a984:	bab60b61 	.word	0xbab60b61
 801a988:	3d2aaaab 	.word	0x3d2aaaab
 801a98c:	3f480000 	.word	0x3f480000

0801a990 <__kernel_sinf>:
 801a990:	ee10 3a10 	vmov	r3, s0
 801a994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a998:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801a99c:	d204      	bcs.n	801a9a8 <__kernel_sinf+0x18>
 801a99e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a9a2:	ee17 3a90 	vmov	r3, s15
 801a9a6:	b35b      	cbz	r3, 801aa00 <__kernel_sinf+0x70>
 801a9a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a9ac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801aa04 <__kernel_sinf+0x74>
 801a9b0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801aa08 <__kernel_sinf+0x78>
 801a9b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a9b8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801aa0c <__kernel_sinf+0x7c>
 801a9bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a9c0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801aa10 <__kernel_sinf+0x80>
 801a9c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a9c8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801aa14 <__kernel_sinf+0x84>
 801a9cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a9d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a9d4:	b930      	cbnz	r0, 801a9e4 <__kernel_sinf+0x54>
 801a9d6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801aa18 <__kernel_sinf+0x88>
 801a9da:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a9de:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a9e2:	4770      	bx	lr
 801a9e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a9e8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801a9ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a9f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a9f4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801aa1c <__kernel_sinf+0x8c>
 801a9f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a9fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 801aa00:	4770      	bx	lr
 801aa02:	bf00      	nop
 801aa04:	2f2ec9d3 	.word	0x2f2ec9d3
 801aa08:	b2d72f34 	.word	0xb2d72f34
 801aa0c:	3638ef1b 	.word	0x3638ef1b
 801aa10:	b9500d01 	.word	0xb9500d01
 801aa14:	3c088889 	.word	0x3c088889
 801aa18:	be2aaaab 	.word	0xbe2aaaab
 801aa1c:	3e2aaaab 	.word	0x3e2aaaab

0801aa20 <__ieee754_rem_pio2f>:
 801aa20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa22:	ee10 6a10 	vmov	r6, s0
 801aa26:	4b88      	ldr	r3, [pc, #544]	@ (801ac48 <__ieee754_rem_pio2f+0x228>)
 801aa28:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801aa2c:	429d      	cmp	r5, r3
 801aa2e:	b087      	sub	sp, #28
 801aa30:	4604      	mov	r4, r0
 801aa32:	d805      	bhi.n	801aa40 <__ieee754_rem_pio2f+0x20>
 801aa34:	2300      	movs	r3, #0
 801aa36:	ed80 0a00 	vstr	s0, [r0]
 801aa3a:	6043      	str	r3, [r0, #4]
 801aa3c:	2000      	movs	r0, #0
 801aa3e:	e022      	b.n	801aa86 <__ieee754_rem_pio2f+0x66>
 801aa40:	4b82      	ldr	r3, [pc, #520]	@ (801ac4c <__ieee754_rem_pio2f+0x22c>)
 801aa42:	429d      	cmp	r5, r3
 801aa44:	d83a      	bhi.n	801aabc <__ieee754_rem_pio2f+0x9c>
 801aa46:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801aa4a:	2e00      	cmp	r6, #0
 801aa4c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801ac50 <__ieee754_rem_pio2f+0x230>
 801aa50:	4a80      	ldr	r2, [pc, #512]	@ (801ac54 <__ieee754_rem_pio2f+0x234>)
 801aa52:	f023 030f 	bic.w	r3, r3, #15
 801aa56:	dd18      	ble.n	801aa8a <__ieee754_rem_pio2f+0x6a>
 801aa58:	4293      	cmp	r3, r2
 801aa5a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801aa5e:	bf09      	itett	eq
 801aa60:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801ac58 <__ieee754_rem_pio2f+0x238>
 801aa64:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801ac5c <__ieee754_rem_pio2f+0x23c>
 801aa68:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801ac60 <__ieee754_rem_pio2f+0x240>
 801aa6c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801aa70:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801aa74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa78:	ed80 7a00 	vstr	s14, [r0]
 801aa7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aa80:	edc0 7a01 	vstr	s15, [r0, #4]
 801aa84:	2001      	movs	r0, #1
 801aa86:	b007      	add	sp, #28
 801aa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa8a:	4293      	cmp	r3, r2
 801aa8c:	ee70 7a07 	vadd.f32	s15, s0, s14
 801aa90:	bf09      	itett	eq
 801aa92:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801ac58 <__ieee754_rem_pio2f+0x238>
 801aa96:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801ac5c <__ieee754_rem_pio2f+0x23c>
 801aa9a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801ac60 <__ieee754_rem_pio2f+0x240>
 801aa9e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801aaa2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801aaa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aaaa:	ed80 7a00 	vstr	s14, [r0]
 801aaae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aab2:	edc0 7a01 	vstr	s15, [r0, #4]
 801aab6:	f04f 30ff 	mov.w	r0, #4294967295
 801aaba:	e7e4      	b.n	801aa86 <__ieee754_rem_pio2f+0x66>
 801aabc:	4b69      	ldr	r3, [pc, #420]	@ (801ac64 <__ieee754_rem_pio2f+0x244>)
 801aabe:	429d      	cmp	r5, r3
 801aac0:	d873      	bhi.n	801abaa <__ieee754_rem_pio2f+0x18a>
 801aac2:	f000 f8dd 	bl	801ac80 <fabsf>
 801aac6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801ac68 <__ieee754_rem_pio2f+0x248>
 801aaca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801aace:	eee0 7a07 	vfma.f32	s15, s0, s14
 801aad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801aada:	ee17 0a90 	vmov	r0, s15
 801aade:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801ac50 <__ieee754_rem_pio2f+0x230>
 801aae2:	eea7 0a67 	vfms.f32	s0, s14, s15
 801aae6:	281f      	cmp	r0, #31
 801aae8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801ac5c <__ieee754_rem_pio2f+0x23c>
 801aaec:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aaf0:	eeb1 6a47 	vneg.f32	s12, s14
 801aaf4:	ee70 6a67 	vsub.f32	s13, s0, s15
 801aaf8:	ee16 1a90 	vmov	r1, s13
 801aafc:	dc09      	bgt.n	801ab12 <__ieee754_rem_pio2f+0xf2>
 801aafe:	4a5b      	ldr	r2, [pc, #364]	@ (801ac6c <__ieee754_rem_pio2f+0x24c>)
 801ab00:	1e47      	subs	r7, r0, #1
 801ab02:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801ab06:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801ab0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801ab0e:	4293      	cmp	r3, r2
 801ab10:	d107      	bne.n	801ab22 <__ieee754_rem_pio2f+0x102>
 801ab12:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801ab16:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801ab1a:	2a08      	cmp	r2, #8
 801ab1c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801ab20:	dc14      	bgt.n	801ab4c <__ieee754_rem_pio2f+0x12c>
 801ab22:	6021      	str	r1, [r4, #0]
 801ab24:	ed94 7a00 	vldr	s14, [r4]
 801ab28:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ab2c:	2e00      	cmp	r6, #0
 801ab2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ab32:	ed84 0a01 	vstr	s0, [r4, #4]
 801ab36:	daa6      	bge.n	801aa86 <__ieee754_rem_pio2f+0x66>
 801ab38:	eeb1 7a47 	vneg.f32	s14, s14
 801ab3c:	eeb1 0a40 	vneg.f32	s0, s0
 801ab40:	ed84 7a00 	vstr	s14, [r4]
 801ab44:	ed84 0a01 	vstr	s0, [r4, #4]
 801ab48:	4240      	negs	r0, r0
 801ab4a:	e79c      	b.n	801aa86 <__ieee754_rem_pio2f+0x66>
 801ab4c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801ac58 <__ieee754_rem_pio2f+0x238>
 801ab50:	eef0 6a40 	vmov.f32	s13, s0
 801ab54:	eee6 6a25 	vfma.f32	s13, s12, s11
 801ab58:	ee70 7a66 	vsub.f32	s15, s0, s13
 801ab5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ab60:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801ac60 <__ieee754_rem_pio2f+0x240>
 801ab64:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801ab68:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801ab6c:	ee15 2a90 	vmov	r2, s11
 801ab70:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801ab74:	1a5b      	subs	r3, r3, r1
 801ab76:	2b19      	cmp	r3, #25
 801ab78:	dc04      	bgt.n	801ab84 <__ieee754_rem_pio2f+0x164>
 801ab7a:	edc4 5a00 	vstr	s11, [r4]
 801ab7e:	eeb0 0a66 	vmov.f32	s0, s13
 801ab82:	e7cf      	b.n	801ab24 <__ieee754_rem_pio2f+0x104>
 801ab84:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801ac70 <__ieee754_rem_pio2f+0x250>
 801ab88:	eeb0 0a66 	vmov.f32	s0, s13
 801ab8c:	eea6 0a25 	vfma.f32	s0, s12, s11
 801ab90:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801ab94:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801ac74 <__ieee754_rem_pio2f+0x254>
 801ab98:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ab9c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801aba0:	ee30 7a67 	vsub.f32	s14, s0, s15
 801aba4:	ed84 7a00 	vstr	s14, [r4]
 801aba8:	e7bc      	b.n	801ab24 <__ieee754_rem_pio2f+0x104>
 801abaa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801abae:	d306      	bcc.n	801abbe <__ieee754_rem_pio2f+0x19e>
 801abb0:	ee70 7a40 	vsub.f32	s15, s0, s0
 801abb4:	edc0 7a01 	vstr	s15, [r0, #4]
 801abb8:	edc0 7a00 	vstr	s15, [r0]
 801abbc:	e73e      	b.n	801aa3c <__ieee754_rem_pio2f+0x1c>
 801abbe:	15ea      	asrs	r2, r5, #23
 801abc0:	3a86      	subs	r2, #134	@ 0x86
 801abc2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801abc6:	ee07 3a90 	vmov	s15, r3
 801abca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801abce:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801ac78 <__ieee754_rem_pio2f+0x258>
 801abd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801abd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801abda:	ed8d 7a03 	vstr	s14, [sp, #12]
 801abde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801abe2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801abe6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801abea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801abee:	ed8d 7a04 	vstr	s14, [sp, #16]
 801abf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801abf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 801abfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abfe:	edcd 7a05 	vstr	s15, [sp, #20]
 801ac02:	d11e      	bne.n	801ac42 <__ieee754_rem_pio2f+0x222>
 801ac04:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801ac08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac0c:	bf0c      	ite	eq
 801ac0e:	2301      	moveq	r3, #1
 801ac10:	2302      	movne	r3, #2
 801ac12:	491a      	ldr	r1, [pc, #104]	@ (801ac7c <__ieee754_rem_pio2f+0x25c>)
 801ac14:	9101      	str	r1, [sp, #4]
 801ac16:	2102      	movs	r1, #2
 801ac18:	9100      	str	r1, [sp, #0]
 801ac1a:	a803      	add	r0, sp, #12
 801ac1c:	4621      	mov	r1, r4
 801ac1e:	f000 f957 	bl	801aed0 <__kernel_rem_pio2f>
 801ac22:	2e00      	cmp	r6, #0
 801ac24:	f6bf af2f 	bge.w	801aa86 <__ieee754_rem_pio2f+0x66>
 801ac28:	edd4 7a00 	vldr	s15, [r4]
 801ac2c:	eef1 7a67 	vneg.f32	s15, s15
 801ac30:	edc4 7a00 	vstr	s15, [r4]
 801ac34:	edd4 7a01 	vldr	s15, [r4, #4]
 801ac38:	eef1 7a67 	vneg.f32	s15, s15
 801ac3c:	edc4 7a01 	vstr	s15, [r4, #4]
 801ac40:	e782      	b.n	801ab48 <__ieee754_rem_pio2f+0x128>
 801ac42:	2303      	movs	r3, #3
 801ac44:	e7e5      	b.n	801ac12 <__ieee754_rem_pio2f+0x1f2>
 801ac46:	bf00      	nop
 801ac48:	3f490fd8 	.word	0x3f490fd8
 801ac4c:	4016cbe3 	.word	0x4016cbe3
 801ac50:	3fc90f80 	.word	0x3fc90f80
 801ac54:	3fc90fd0 	.word	0x3fc90fd0
 801ac58:	37354400 	.word	0x37354400
 801ac5c:	37354443 	.word	0x37354443
 801ac60:	2e85a308 	.word	0x2e85a308
 801ac64:	43490f80 	.word	0x43490f80
 801ac68:	3f22f984 	.word	0x3f22f984
 801ac6c:	0801e408 	.word	0x0801e408
 801ac70:	2e85a300 	.word	0x2e85a300
 801ac74:	248d3132 	.word	0x248d3132
 801ac78:	43800000 	.word	0x43800000
 801ac7c:	0801e488 	.word	0x0801e488

0801ac80 <fabsf>:
 801ac80:	ee10 3a10 	vmov	r3, s0
 801ac84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ac88:	ee00 3a10 	vmov	s0, r3
 801ac8c:	4770      	bx	lr
	...

0801ac90 <scalbn>:
 801ac90:	b570      	push	{r4, r5, r6, lr}
 801ac92:	ec55 4b10 	vmov	r4, r5, d0
 801ac96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801ac9a:	4606      	mov	r6, r0
 801ac9c:	462b      	mov	r3, r5
 801ac9e:	b991      	cbnz	r1, 801acc6 <scalbn+0x36>
 801aca0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801aca4:	4323      	orrs	r3, r4
 801aca6:	d03d      	beq.n	801ad24 <scalbn+0x94>
 801aca8:	4b35      	ldr	r3, [pc, #212]	@ (801ad80 <scalbn+0xf0>)
 801acaa:	4620      	mov	r0, r4
 801acac:	4629      	mov	r1, r5
 801acae:	2200      	movs	r2, #0
 801acb0:	f7e5 fcaa 	bl	8000608 <__aeabi_dmul>
 801acb4:	4b33      	ldr	r3, [pc, #204]	@ (801ad84 <scalbn+0xf4>)
 801acb6:	429e      	cmp	r6, r3
 801acb8:	4604      	mov	r4, r0
 801acba:	460d      	mov	r5, r1
 801acbc:	da0f      	bge.n	801acde <scalbn+0x4e>
 801acbe:	a328      	add	r3, pc, #160	@ (adr r3, 801ad60 <scalbn+0xd0>)
 801acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acc4:	e01e      	b.n	801ad04 <scalbn+0x74>
 801acc6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801acca:	4291      	cmp	r1, r2
 801accc:	d10b      	bne.n	801ace6 <scalbn+0x56>
 801acce:	4622      	mov	r2, r4
 801acd0:	4620      	mov	r0, r4
 801acd2:	4629      	mov	r1, r5
 801acd4:	f7e5 fae2 	bl	800029c <__adddf3>
 801acd8:	4604      	mov	r4, r0
 801acda:	460d      	mov	r5, r1
 801acdc:	e022      	b.n	801ad24 <scalbn+0x94>
 801acde:	460b      	mov	r3, r1
 801ace0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801ace4:	3936      	subs	r1, #54	@ 0x36
 801ace6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801acea:	4296      	cmp	r6, r2
 801acec:	dd0d      	ble.n	801ad0a <scalbn+0x7a>
 801acee:	2d00      	cmp	r5, #0
 801acf0:	a11d      	add	r1, pc, #116	@ (adr r1, 801ad68 <scalbn+0xd8>)
 801acf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acf6:	da02      	bge.n	801acfe <scalbn+0x6e>
 801acf8:	a11d      	add	r1, pc, #116	@ (adr r1, 801ad70 <scalbn+0xe0>)
 801acfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acfe:	a31a      	add	r3, pc, #104	@ (adr r3, 801ad68 <scalbn+0xd8>)
 801ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad04:	f7e5 fc80 	bl	8000608 <__aeabi_dmul>
 801ad08:	e7e6      	b.n	801acd8 <scalbn+0x48>
 801ad0a:	1872      	adds	r2, r6, r1
 801ad0c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801ad10:	428a      	cmp	r2, r1
 801ad12:	dcec      	bgt.n	801acee <scalbn+0x5e>
 801ad14:	2a00      	cmp	r2, #0
 801ad16:	dd08      	ble.n	801ad2a <scalbn+0x9a>
 801ad18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ad1c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801ad20:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ad24:	ec45 4b10 	vmov	d0, r4, r5
 801ad28:	bd70      	pop	{r4, r5, r6, pc}
 801ad2a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801ad2e:	da08      	bge.n	801ad42 <scalbn+0xb2>
 801ad30:	2d00      	cmp	r5, #0
 801ad32:	a10b      	add	r1, pc, #44	@ (adr r1, 801ad60 <scalbn+0xd0>)
 801ad34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad38:	dac1      	bge.n	801acbe <scalbn+0x2e>
 801ad3a:	a10f      	add	r1, pc, #60	@ (adr r1, 801ad78 <scalbn+0xe8>)
 801ad3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad40:	e7bd      	b.n	801acbe <scalbn+0x2e>
 801ad42:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ad46:	3236      	adds	r2, #54	@ 0x36
 801ad48:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801ad4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ad50:	4620      	mov	r0, r4
 801ad52:	4b0d      	ldr	r3, [pc, #52]	@ (801ad88 <scalbn+0xf8>)
 801ad54:	4629      	mov	r1, r5
 801ad56:	2200      	movs	r2, #0
 801ad58:	e7d4      	b.n	801ad04 <scalbn+0x74>
 801ad5a:	bf00      	nop
 801ad5c:	f3af 8000 	nop.w
 801ad60:	c2f8f359 	.word	0xc2f8f359
 801ad64:	01a56e1f 	.word	0x01a56e1f
 801ad68:	8800759c 	.word	0x8800759c
 801ad6c:	7e37e43c 	.word	0x7e37e43c
 801ad70:	8800759c 	.word	0x8800759c
 801ad74:	fe37e43c 	.word	0xfe37e43c
 801ad78:	c2f8f359 	.word	0xc2f8f359
 801ad7c:	81a56e1f 	.word	0x81a56e1f
 801ad80:	43500000 	.word	0x43500000
 801ad84:	ffff3cb0 	.word	0xffff3cb0
 801ad88:	3c900000 	.word	0x3c900000

0801ad8c <with_errno>:
 801ad8c:	b510      	push	{r4, lr}
 801ad8e:	ed2d 8b02 	vpush	{d8}
 801ad92:	eeb0 8a40 	vmov.f32	s16, s0
 801ad96:	eef0 8a60 	vmov.f32	s17, s1
 801ad9a:	4604      	mov	r4, r0
 801ad9c:	f7fc fb70 	bl	8017480 <__errno>
 801ada0:	eeb0 0a48 	vmov.f32	s0, s16
 801ada4:	eef0 0a68 	vmov.f32	s1, s17
 801ada8:	ecbd 8b02 	vpop	{d8}
 801adac:	6004      	str	r4, [r0, #0]
 801adae:	bd10      	pop	{r4, pc}

0801adb0 <xflow>:
 801adb0:	4603      	mov	r3, r0
 801adb2:	b507      	push	{r0, r1, r2, lr}
 801adb4:	ec51 0b10 	vmov	r0, r1, d0
 801adb8:	b183      	cbz	r3, 801addc <xflow+0x2c>
 801adba:	4602      	mov	r2, r0
 801adbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801adc0:	e9cd 2300 	strd	r2, r3, [sp]
 801adc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801adc8:	f7e5 fc1e 	bl	8000608 <__aeabi_dmul>
 801adcc:	ec41 0b10 	vmov	d0, r0, r1
 801add0:	2022      	movs	r0, #34	@ 0x22
 801add2:	b003      	add	sp, #12
 801add4:	f85d eb04 	ldr.w	lr, [sp], #4
 801add8:	f7ff bfd8 	b.w	801ad8c <with_errno>
 801addc:	4602      	mov	r2, r0
 801adde:	460b      	mov	r3, r1
 801ade0:	e7ee      	b.n	801adc0 <xflow+0x10>
 801ade2:	0000      	movs	r0, r0
 801ade4:	0000      	movs	r0, r0
	...

0801ade8 <__math_uflow>:
 801ade8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801adf0 <__math_uflow+0x8>
 801adec:	f7ff bfe0 	b.w	801adb0 <xflow>
 801adf0:	00000000 	.word	0x00000000
 801adf4:	10000000 	.word	0x10000000

0801adf8 <__math_oflow>:
 801adf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ae00 <__math_oflow+0x8>
 801adfc:	f7ff bfd8 	b.w	801adb0 <xflow>
 801ae00:	00000000 	.word	0x00000000
 801ae04:	70000000 	.word	0x70000000

0801ae08 <cabs>:
 801ae08:	b508      	push	{r3, lr}
 801ae0a:	ed2d 8b06 	vpush	{d8-d10}
 801ae0e:	eeb0 aa40 	vmov.f32	s20, s0
 801ae12:	eef0 aa60 	vmov.f32	s21, s1
 801ae16:	eeb0 9a41 	vmov.f32	s18, s2
 801ae1a:	eef0 9a61 	vmov.f32	s19, s3
 801ae1e:	f000 f821 	bl	801ae64 <creal>
 801ae22:	eeb0 1a49 	vmov.f32	s2, s18
 801ae26:	eef0 1a69 	vmov.f32	s3, s19
 801ae2a:	eeb0 8a40 	vmov.f32	s16, s0
 801ae2e:	eef0 8a60 	vmov.f32	s17, s1
 801ae32:	eeb0 0a4a 	vmov.f32	s0, s20
 801ae36:	eef0 0a6a 	vmov.f32	s1, s21
 801ae3a:	f000 f80e 	bl	801ae5a <cimag>
 801ae3e:	eeb0 1a40 	vmov.f32	s2, s0
 801ae42:	eef0 1a60 	vmov.f32	s3, s1
 801ae46:	eeb0 0a48 	vmov.f32	s0, s16
 801ae4a:	eef0 0a68 	vmov.f32	s1, s17
 801ae4e:	ecbd 8b06 	vpop	{d8-d10}
 801ae52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ae56:	f000 b807 	b.w	801ae68 <hypot>

0801ae5a <cimag>:
 801ae5a:	eeb0 0a41 	vmov.f32	s0, s2
 801ae5e:	eef0 0a61 	vmov.f32	s1, s3
 801ae62:	4770      	bx	lr

0801ae64 <creal>:
 801ae64:	4770      	bx	lr
	...

0801ae68 <hypot>:
 801ae68:	b508      	push	{r3, lr}
 801ae6a:	ed2d 8b06 	vpush	{d8-d10}
 801ae6e:	eeb0 aa40 	vmov.f32	s20, s0
 801ae72:	eef0 aa60 	vmov.f32	s21, s1
 801ae76:	eeb0 9a41 	vmov.f32	s18, s2
 801ae7a:	eef0 9a61 	vmov.f32	s19, s3
 801ae7e:	f000 faff 	bl	801b480 <__ieee754_hypot>
 801ae82:	eeb0 8a40 	vmov.f32	s16, s0
 801ae86:	eef0 8a60 	vmov.f32	s17, s1
 801ae8a:	f7fe fc25 	bl	80196d8 <finite>
 801ae8e:	b998      	cbnz	r0, 801aeb8 <hypot+0x50>
 801ae90:	eeb0 0a4a 	vmov.f32	s0, s20
 801ae94:	eef0 0a6a 	vmov.f32	s1, s21
 801ae98:	f7fe fc1e 	bl	80196d8 <finite>
 801ae9c:	b160      	cbz	r0, 801aeb8 <hypot+0x50>
 801ae9e:	eeb0 0a49 	vmov.f32	s0, s18
 801aea2:	eef0 0a69 	vmov.f32	s1, s19
 801aea6:	f7fe fc17 	bl	80196d8 <finite>
 801aeaa:	b128      	cbz	r0, 801aeb8 <hypot+0x50>
 801aeac:	f7fc fae8 	bl	8017480 <__errno>
 801aeb0:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 801aec8 <hypot+0x60>
 801aeb4:	2322      	movs	r3, #34	@ 0x22
 801aeb6:	6003      	str	r3, [r0, #0]
 801aeb8:	eeb0 0a48 	vmov.f32	s0, s16
 801aebc:	eef0 0a68 	vmov.f32	s1, s17
 801aec0:	ecbd 8b06 	vpop	{d8-d10}
 801aec4:	bd08      	pop	{r3, pc}
 801aec6:	bf00      	nop
 801aec8:	00000000 	.word	0x00000000
 801aecc:	7ff00000 	.word	0x7ff00000

0801aed0 <__kernel_rem_pio2f>:
 801aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed4:	ed2d 8b04 	vpush	{d8-d9}
 801aed8:	b0d9      	sub	sp, #356	@ 0x164
 801aeda:	4690      	mov	r8, r2
 801aedc:	9001      	str	r0, [sp, #4]
 801aede:	4ab9      	ldr	r2, [pc, #740]	@ (801b1c4 <__kernel_rem_pio2f+0x2f4>)
 801aee0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801aee2:	f118 0f04 	cmn.w	r8, #4
 801aee6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801aeea:	460f      	mov	r7, r1
 801aeec:	f103 3bff 	add.w	fp, r3, #4294967295
 801aef0:	db27      	blt.n	801af42 <__kernel_rem_pio2f+0x72>
 801aef2:	f1b8 0203 	subs.w	r2, r8, #3
 801aef6:	bf48      	it	mi
 801aef8:	f108 0204 	addmi.w	r2, r8, #4
 801aefc:	10d2      	asrs	r2, r2, #3
 801aefe:	1c55      	adds	r5, r2, #1
 801af00:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801af02:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801b1d4 <__kernel_rem_pio2f+0x304>
 801af06:	00e8      	lsls	r0, r5, #3
 801af08:	eba2 060b 	sub.w	r6, r2, fp
 801af0c:	9002      	str	r0, [sp, #8]
 801af0e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801af12:	eb0a 0c0b 	add.w	ip, sl, fp
 801af16:	ac1c      	add	r4, sp, #112	@ 0x70
 801af18:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801af1c:	2000      	movs	r0, #0
 801af1e:	4560      	cmp	r0, ip
 801af20:	dd11      	ble.n	801af46 <__kernel_rem_pio2f+0x76>
 801af22:	a91c      	add	r1, sp, #112	@ 0x70
 801af24:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801af28:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801af2c:	f04f 0c00 	mov.w	ip, #0
 801af30:	45d4      	cmp	ip, sl
 801af32:	dc27      	bgt.n	801af84 <__kernel_rem_pio2f+0xb4>
 801af34:	f8dd e004 	ldr.w	lr, [sp, #4]
 801af38:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801b1d4 <__kernel_rem_pio2f+0x304>
 801af3c:	4606      	mov	r6, r0
 801af3e:	2400      	movs	r4, #0
 801af40:	e016      	b.n	801af70 <__kernel_rem_pio2f+0xa0>
 801af42:	2200      	movs	r2, #0
 801af44:	e7db      	b.n	801aefe <__kernel_rem_pio2f+0x2e>
 801af46:	42c6      	cmn	r6, r0
 801af48:	bf5d      	ittte	pl
 801af4a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801af4e:	ee07 1a90 	vmovpl	s15, r1
 801af52:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801af56:	eef0 7a47 	vmovmi.f32	s15, s14
 801af5a:	ece4 7a01 	vstmia	r4!, {s15}
 801af5e:	3001      	adds	r0, #1
 801af60:	e7dd      	b.n	801af1e <__kernel_rem_pio2f+0x4e>
 801af62:	ecfe 6a01 	vldmia	lr!, {s13}
 801af66:	ed96 7a00 	vldr	s14, [r6]
 801af6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801af6e:	3401      	adds	r4, #1
 801af70:	455c      	cmp	r4, fp
 801af72:	f1a6 0604 	sub.w	r6, r6, #4
 801af76:	ddf4      	ble.n	801af62 <__kernel_rem_pio2f+0x92>
 801af78:	ece9 7a01 	vstmia	r9!, {s15}
 801af7c:	f10c 0c01 	add.w	ip, ip, #1
 801af80:	3004      	adds	r0, #4
 801af82:	e7d5      	b.n	801af30 <__kernel_rem_pio2f+0x60>
 801af84:	a908      	add	r1, sp, #32
 801af86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801af8a:	9104      	str	r1, [sp, #16]
 801af8c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801af8e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801b1d0 <__kernel_rem_pio2f+0x300>
 801af92:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801b1cc <__kernel_rem_pio2f+0x2fc>
 801af96:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801af9a:	9203      	str	r2, [sp, #12]
 801af9c:	4654      	mov	r4, sl
 801af9e:	00a2      	lsls	r2, r4, #2
 801afa0:	9205      	str	r2, [sp, #20]
 801afa2:	aa58      	add	r2, sp, #352	@ 0x160
 801afa4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801afa8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801afac:	a944      	add	r1, sp, #272	@ 0x110
 801afae:	aa08      	add	r2, sp, #32
 801afb0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801afb4:	4694      	mov	ip, r2
 801afb6:	4626      	mov	r6, r4
 801afb8:	2e00      	cmp	r6, #0
 801afba:	f1a0 0004 	sub.w	r0, r0, #4
 801afbe:	dc4c      	bgt.n	801b05a <__kernel_rem_pio2f+0x18a>
 801afc0:	4628      	mov	r0, r5
 801afc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801afc6:	f000 f9f5 	bl	801b3b4 <scalbnf>
 801afca:	eeb0 8a40 	vmov.f32	s16, s0
 801afce:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801afd2:	ee28 0a00 	vmul.f32	s0, s16, s0
 801afd6:	f7fe fef3 	bl	8019dc0 <floorf>
 801afda:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801afde:	eea0 8a67 	vfms.f32	s16, s0, s15
 801afe2:	2d00      	cmp	r5, #0
 801afe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801afe8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801afec:	ee17 9a90 	vmov	r9, s15
 801aff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aff4:	ee38 8a67 	vsub.f32	s16, s16, s15
 801aff8:	dd41      	ble.n	801b07e <__kernel_rem_pio2f+0x1ae>
 801affa:	f104 3cff 	add.w	ip, r4, #4294967295
 801affe:	a908      	add	r1, sp, #32
 801b000:	f1c5 0e08 	rsb	lr, r5, #8
 801b004:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801b008:	fa46 f00e 	asr.w	r0, r6, lr
 801b00c:	4481      	add	r9, r0
 801b00e:	fa00 f00e 	lsl.w	r0, r0, lr
 801b012:	1a36      	subs	r6, r6, r0
 801b014:	f1c5 0007 	rsb	r0, r5, #7
 801b018:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801b01c:	4106      	asrs	r6, r0
 801b01e:	2e00      	cmp	r6, #0
 801b020:	dd3c      	ble.n	801b09c <__kernel_rem_pio2f+0x1cc>
 801b022:	f04f 0e00 	mov.w	lr, #0
 801b026:	f109 0901 	add.w	r9, r9, #1
 801b02a:	4670      	mov	r0, lr
 801b02c:	4574      	cmp	r4, lr
 801b02e:	dc68      	bgt.n	801b102 <__kernel_rem_pio2f+0x232>
 801b030:	2d00      	cmp	r5, #0
 801b032:	dd03      	ble.n	801b03c <__kernel_rem_pio2f+0x16c>
 801b034:	2d01      	cmp	r5, #1
 801b036:	d074      	beq.n	801b122 <__kernel_rem_pio2f+0x252>
 801b038:	2d02      	cmp	r5, #2
 801b03a:	d07d      	beq.n	801b138 <__kernel_rem_pio2f+0x268>
 801b03c:	2e02      	cmp	r6, #2
 801b03e:	d12d      	bne.n	801b09c <__kernel_rem_pio2f+0x1cc>
 801b040:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b044:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b048:	b340      	cbz	r0, 801b09c <__kernel_rem_pio2f+0x1cc>
 801b04a:	4628      	mov	r0, r5
 801b04c:	9306      	str	r3, [sp, #24]
 801b04e:	f000 f9b1 	bl	801b3b4 <scalbnf>
 801b052:	9b06      	ldr	r3, [sp, #24]
 801b054:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b058:	e020      	b.n	801b09c <__kernel_rem_pio2f+0x1cc>
 801b05a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b05e:	3e01      	subs	r6, #1
 801b060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b068:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b06c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b070:	ecac 0a01 	vstmia	ip!, {s0}
 801b074:	ed90 0a00 	vldr	s0, [r0]
 801b078:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b07c:	e79c      	b.n	801afb8 <__kernel_rem_pio2f+0xe8>
 801b07e:	d105      	bne.n	801b08c <__kernel_rem_pio2f+0x1bc>
 801b080:	1e60      	subs	r0, r4, #1
 801b082:	a908      	add	r1, sp, #32
 801b084:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801b088:	11f6      	asrs	r6, r6, #7
 801b08a:	e7c8      	b.n	801b01e <__kernel_rem_pio2f+0x14e>
 801b08c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b090:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b098:	da31      	bge.n	801b0fe <__kernel_rem_pio2f+0x22e>
 801b09a:	2600      	movs	r6, #0
 801b09c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0a4:	f040 8098 	bne.w	801b1d8 <__kernel_rem_pio2f+0x308>
 801b0a8:	1e60      	subs	r0, r4, #1
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	4550      	cmp	r0, sl
 801b0ae:	da4b      	bge.n	801b148 <__kernel_rem_pio2f+0x278>
 801b0b0:	2a00      	cmp	r2, #0
 801b0b2:	d065      	beq.n	801b180 <__kernel_rem_pio2f+0x2b0>
 801b0b4:	3c01      	subs	r4, #1
 801b0b6:	ab08      	add	r3, sp, #32
 801b0b8:	3d08      	subs	r5, #8
 801b0ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d0f8      	beq.n	801b0b4 <__kernel_rem_pio2f+0x1e4>
 801b0c2:	4628      	mov	r0, r5
 801b0c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b0c8:	f000 f974 	bl	801b3b4 <scalbnf>
 801b0cc:	1c63      	adds	r3, r4, #1
 801b0ce:	aa44      	add	r2, sp, #272	@ 0x110
 801b0d0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801b1d0 <__kernel_rem_pio2f+0x300>
 801b0d4:	0099      	lsls	r1, r3, #2
 801b0d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b0da:	4623      	mov	r3, r4
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	f280 80a9 	bge.w	801b234 <__kernel_rem_pio2f+0x364>
 801b0e2:	4623      	mov	r3, r4
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	f2c0 80c7 	blt.w	801b278 <__kernel_rem_pio2f+0x3a8>
 801b0ea:	aa44      	add	r2, sp, #272	@ 0x110
 801b0ec:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b0f0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801b1c8 <__kernel_rem_pio2f+0x2f8>
 801b0f4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801b1d4 <__kernel_rem_pio2f+0x304>
 801b0f8:	2000      	movs	r0, #0
 801b0fa:	1ae2      	subs	r2, r4, r3
 801b0fc:	e0b1      	b.n	801b262 <__kernel_rem_pio2f+0x392>
 801b0fe:	2602      	movs	r6, #2
 801b100:	e78f      	b.n	801b022 <__kernel_rem_pio2f+0x152>
 801b102:	f852 1b04 	ldr.w	r1, [r2], #4
 801b106:	b948      	cbnz	r0, 801b11c <__kernel_rem_pio2f+0x24c>
 801b108:	b121      	cbz	r1, 801b114 <__kernel_rem_pio2f+0x244>
 801b10a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801b10e:	f842 1c04 	str.w	r1, [r2, #-4]
 801b112:	2101      	movs	r1, #1
 801b114:	f10e 0e01 	add.w	lr, lr, #1
 801b118:	4608      	mov	r0, r1
 801b11a:	e787      	b.n	801b02c <__kernel_rem_pio2f+0x15c>
 801b11c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801b120:	e7f5      	b.n	801b10e <__kernel_rem_pio2f+0x23e>
 801b122:	f104 3cff 	add.w	ip, r4, #4294967295
 801b126:	aa08      	add	r2, sp, #32
 801b128:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b12c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801b130:	a908      	add	r1, sp, #32
 801b132:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801b136:	e781      	b.n	801b03c <__kernel_rem_pio2f+0x16c>
 801b138:	f104 3cff 	add.w	ip, r4, #4294967295
 801b13c:	aa08      	add	r2, sp, #32
 801b13e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b142:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b146:	e7f3      	b.n	801b130 <__kernel_rem_pio2f+0x260>
 801b148:	a908      	add	r1, sp, #32
 801b14a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b14e:	3801      	subs	r0, #1
 801b150:	430a      	orrs	r2, r1
 801b152:	e7ab      	b.n	801b0ac <__kernel_rem_pio2f+0x1dc>
 801b154:	3201      	adds	r2, #1
 801b156:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801b15a:	2e00      	cmp	r6, #0
 801b15c:	d0fa      	beq.n	801b154 <__kernel_rem_pio2f+0x284>
 801b15e:	9905      	ldr	r1, [sp, #20]
 801b160:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801b164:	eb0d 0001 	add.w	r0, sp, r1
 801b168:	18e6      	adds	r6, r4, r3
 801b16a:	a91c      	add	r1, sp, #112	@ 0x70
 801b16c:	f104 0c01 	add.w	ip, r4, #1
 801b170:	384c      	subs	r0, #76	@ 0x4c
 801b172:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801b176:	4422      	add	r2, r4
 801b178:	4562      	cmp	r2, ip
 801b17a:	da04      	bge.n	801b186 <__kernel_rem_pio2f+0x2b6>
 801b17c:	4614      	mov	r4, r2
 801b17e:	e70e      	b.n	801af9e <__kernel_rem_pio2f+0xce>
 801b180:	9804      	ldr	r0, [sp, #16]
 801b182:	2201      	movs	r2, #1
 801b184:	e7e7      	b.n	801b156 <__kernel_rem_pio2f+0x286>
 801b186:	9903      	ldr	r1, [sp, #12]
 801b188:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b18c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b190:	9105      	str	r1, [sp, #20]
 801b192:	ee07 1a90 	vmov	s15, r1
 801b196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b19a:	2400      	movs	r4, #0
 801b19c:	ece6 7a01 	vstmia	r6!, {s15}
 801b1a0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801b1d4 <__kernel_rem_pio2f+0x304>
 801b1a4:	46b1      	mov	r9, r6
 801b1a6:	455c      	cmp	r4, fp
 801b1a8:	dd04      	ble.n	801b1b4 <__kernel_rem_pio2f+0x2e4>
 801b1aa:	ece0 7a01 	vstmia	r0!, {s15}
 801b1ae:	f10c 0c01 	add.w	ip, ip, #1
 801b1b2:	e7e1      	b.n	801b178 <__kernel_rem_pio2f+0x2a8>
 801b1b4:	ecfe 6a01 	vldmia	lr!, {s13}
 801b1b8:	ed39 7a01 	vldmdb	r9!, {s14}
 801b1bc:	3401      	adds	r4, #1
 801b1be:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b1c2:	e7f0      	b.n	801b1a6 <__kernel_rem_pio2f+0x2d6>
 801b1c4:	0801e7cc 	.word	0x0801e7cc
 801b1c8:	0801e7a0 	.word	0x0801e7a0
 801b1cc:	43800000 	.word	0x43800000
 801b1d0:	3b800000 	.word	0x3b800000
 801b1d4:	00000000 	.word	0x00000000
 801b1d8:	9b02      	ldr	r3, [sp, #8]
 801b1da:	eeb0 0a48 	vmov.f32	s0, s16
 801b1de:	eba3 0008 	sub.w	r0, r3, r8
 801b1e2:	f000 f8e7 	bl	801b3b4 <scalbnf>
 801b1e6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801b1cc <__kernel_rem_pio2f+0x2fc>
 801b1ea:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1f2:	db19      	blt.n	801b228 <__kernel_rem_pio2f+0x358>
 801b1f4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801b1d0 <__kernel_rem_pio2f+0x300>
 801b1f8:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b1fc:	aa08      	add	r2, sp, #32
 801b1fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b202:	3508      	adds	r5, #8
 801b204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b208:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b20c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b210:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b214:	ee10 3a10 	vmov	r3, s0
 801b218:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b21c:	ee17 3a90 	vmov	r3, s15
 801b220:	3401      	adds	r4, #1
 801b222:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b226:	e74c      	b.n	801b0c2 <__kernel_rem_pio2f+0x1f2>
 801b228:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b22c:	aa08      	add	r2, sp, #32
 801b22e:	ee10 3a10 	vmov	r3, s0
 801b232:	e7f6      	b.n	801b222 <__kernel_rem_pio2f+0x352>
 801b234:	a808      	add	r0, sp, #32
 801b236:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b23a:	9001      	str	r0, [sp, #4]
 801b23c:	ee07 0a90 	vmov	s15, r0
 801b240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b244:	3b01      	subs	r3, #1
 801b246:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b24a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b24e:	ed62 7a01 	vstmdb	r2!, {s15}
 801b252:	e743      	b.n	801b0dc <__kernel_rem_pio2f+0x20c>
 801b254:	ecfc 6a01 	vldmia	ip!, {s13}
 801b258:	ecb5 7a01 	vldmia	r5!, {s14}
 801b25c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b260:	3001      	adds	r0, #1
 801b262:	4550      	cmp	r0, sl
 801b264:	dc01      	bgt.n	801b26a <__kernel_rem_pio2f+0x39a>
 801b266:	4282      	cmp	r2, r0
 801b268:	daf4      	bge.n	801b254 <__kernel_rem_pio2f+0x384>
 801b26a:	a858      	add	r0, sp, #352	@ 0x160
 801b26c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b270:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801b274:	3b01      	subs	r3, #1
 801b276:	e735      	b.n	801b0e4 <__kernel_rem_pio2f+0x214>
 801b278:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b27a:	2b02      	cmp	r3, #2
 801b27c:	dc09      	bgt.n	801b292 <__kernel_rem_pio2f+0x3c2>
 801b27e:	2b00      	cmp	r3, #0
 801b280:	dc2b      	bgt.n	801b2da <__kernel_rem_pio2f+0x40a>
 801b282:	d044      	beq.n	801b30e <__kernel_rem_pio2f+0x43e>
 801b284:	f009 0007 	and.w	r0, r9, #7
 801b288:	b059      	add	sp, #356	@ 0x164
 801b28a:	ecbd 8b04 	vpop	{d8-d9}
 801b28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b292:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b294:	2b03      	cmp	r3, #3
 801b296:	d1f5      	bne.n	801b284 <__kernel_rem_pio2f+0x3b4>
 801b298:	aa30      	add	r2, sp, #192	@ 0xc0
 801b29a:	1f0b      	subs	r3, r1, #4
 801b29c:	4413      	add	r3, r2
 801b29e:	461a      	mov	r2, r3
 801b2a0:	4620      	mov	r0, r4
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	f1a2 0204 	sub.w	r2, r2, #4
 801b2a8:	dc52      	bgt.n	801b350 <__kernel_rem_pio2f+0x480>
 801b2aa:	4622      	mov	r2, r4
 801b2ac:	2a01      	cmp	r2, #1
 801b2ae:	f1a3 0304 	sub.w	r3, r3, #4
 801b2b2:	dc5d      	bgt.n	801b370 <__kernel_rem_pio2f+0x4a0>
 801b2b4:	ab30      	add	r3, sp, #192	@ 0xc0
 801b2b6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801b1d4 <__kernel_rem_pio2f+0x304>
 801b2ba:	440b      	add	r3, r1
 801b2bc:	2c01      	cmp	r4, #1
 801b2be:	dc67      	bgt.n	801b390 <__kernel_rem_pio2f+0x4c0>
 801b2c0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801b2c4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801b2c8:	2e00      	cmp	r6, #0
 801b2ca:	d167      	bne.n	801b39c <__kernel_rem_pio2f+0x4cc>
 801b2cc:	edc7 6a00 	vstr	s13, [r7]
 801b2d0:	ed87 7a01 	vstr	s14, [r7, #4]
 801b2d4:	edc7 7a02 	vstr	s15, [r7, #8]
 801b2d8:	e7d4      	b.n	801b284 <__kernel_rem_pio2f+0x3b4>
 801b2da:	ab30      	add	r3, sp, #192	@ 0xc0
 801b2dc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801b1d4 <__kernel_rem_pio2f+0x304>
 801b2e0:	440b      	add	r3, r1
 801b2e2:	4622      	mov	r2, r4
 801b2e4:	2a00      	cmp	r2, #0
 801b2e6:	da24      	bge.n	801b332 <__kernel_rem_pio2f+0x462>
 801b2e8:	b34e      	cbz	r6, 801b33e <__kernel_rem_pio2f+0x46e>
 801b2ea:	eef1 7a47 	vneg.f32	s15, s14
 801b2ee:	edc7 7a00 	vstr	s15, [r7]
 801b2f2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801b2f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b2fa:	aa31      	add	r2, sp, #196	@ 0xc4
 801b2fc:	2301      	movs	r3, #1
 801b2fe:	429c      	cmp	r4, r3
 801b300:	da20      	bge.n	801b344 <__kernel_rem_pio2f+0x474>
 801b302:	b10e      	cbz	r6, 801b308 <__kernel_rem_pio2f+0x438>
 801b304:	eef1 7a67 	vneg.f32	s15, s15
 801b308:	edc7 7a01 	vstr	s15, [r7, #4]
 801b30c:	e7ba      	b.n	801b284 <__kernel_rem_pio2f+0x3b4>
 801b30e:	ab30      	add	r3, sp, #192	@ 0xc0
 801b310:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801b1d4 <__kernel_rem_pio2f+0x304>
 801b314:	440b      	add	r3, r1
 801b316:	2c00      	cmp	r4, #0
 801b318:	da05      	bge.n	801b326 <__kernel_rem_pio2f+0x456>
 801b31a:	b10e      	cbz	r6, 801b320 <__kernel_rem_pio2f+0x450>
 801b31c:	eef1 7a67 	vneg.f32	s15, s15
 801b320:	edc7 7a00 	vstr	s15, [r7]
 801b324:	e7ae      	b.n	801b284 <__kernel_rem_pio2f+0x3b4>
 801b326:	ed33 7a01 	vldmdb	r3!, {s14}
 801b32a:	3c01      	subs	r4, #1
 801b32c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b330:	e7f1      	b.n	801b316 <__kernel_rem_pio2f+0x446>
 801b332:	ed73 7a01 	vldmdb	r3!, {s15}
 801b336:	3a01      	subs	r2, #1
 801b338:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b33c:	e7d2      	b.n	801b2e4 <__kernel_rem_pio2f+0x414>
 801b33e:	eef0 7a47 	vmov.f32	s15, s14
 801b342:	e7d4      	b.n	801b2ee <__kernel_rem_pio2f+0x41e>
 801b344:	ecb2 7a01 	vldmia	r2!, {s14}
 801b348:	3301      	adds	r3, #1
 801b34a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b34e:	e7d6      	b.n	801b2fe <__kernel_rem_pio2f+0x42e>
 801b350:	edd2 7a00 	vldr	s15, [r2]
 801b354:	edd2 6a01 	vldr	s13, [r2, #4]
 801b358:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b35c:	3801      	subs	r0, #1
 801b35e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b362:	ed82 7a00 	vstr	s14, [r2]
 801b366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b36a:	edc2 7a01 	vstr	s15, [r2, #4]
 801b36e:	e798      	b.n	801b2a2 <__kernel_rem_pio2f+0x3d2>
 801b370:	edd3 7a00 	vldr	s15, [r3]
 801b374:	edd3 6a01 	vldr	s13, [r3, #4]
 801b378:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b37c:	3a01      	subs	r2, #1
 801b37e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b382:	ed83 7a00 	vstr	s14, [r3]
 801b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b38a:	edc3 7a01 	vstr	s15, [r3, #4]
 801b38e:	e78d      	b.n	801b2ac <__kernel_rem_pio2f+0x3dc>
 801b390:	ed33 7a01 	vldmdb	r3!, {s14}
 801b394:	3c01      	subs	r4, #1
 801b396:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b39a:	e78f      	b.n	801b2bc <__kernel_rem_pio2f+0x3ec>
 801b39c:	eef1 6a66 	vneg.f32	s13, s13
 801b3a0:	eeb1 7a47 	vneg.f32	s14, s14
 801b3a4:	edc7 6a00 	vstr	s13, [r7]
 801b3a8:	ed87 7a01 	vstr	s14, [r7, #4]
 801b3ac:	eef1 7a67 	vneg.f32	s15, s15
 801b3b0:	e790      	b.n	801b2d4 <__kernel_rem_pio2f+0x404>
 801b3b2:	bf00      	nop

0801b3b4 <scalbnf>:
 801b3b4:	ee10 3a10 	vmov	r3, s0
 801b3b8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801b3bc:	d02b      	beq.n	801b416 <scalbnf+0x62>
 801b3be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801b3c2:	d302      	bcc.n	801b3ca <scalbnf+0x16>
 801b3c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b3c8:	4770      	bx	lr
 801b3ca:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801b3ce:	d123      	bne.n	801b418 <scalbnf+0x64>
 801b3d0:	4b24      	ldr	r3, [pc, #144]	@ (801b464 <scalbnf+0xb0>)
 801b3d2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801b468 <scalbnf+0xb4>
 801b3d6:	4298      	cmp	r0, r3
 801b3d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b3dc:	db17      	blt.n	801b40e <scalbnf+0x5a>
 801b3de:	ee10 3a10 	vmov	r3, s0
 801b3e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b3e6:	3a19      	subs	r2, #25
 801b3e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801b3ec:	4288      	cmp	r0, r1
 801b3ee:	dd15      	ble.n	801b41c <scalbnf+0x68>
 801b3f0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801b46c <scalbnf+0xb8>
 801b3f4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801b470 <scalbnf+0xbc>
 801b3f8:	ee10 3a10 	vmov	r3, s0
 801b3fc:	eeb0 7a67 	vmov.f32	s14, s15
 801b400:	2b00      	cmp	r3, #0
 801b402:	bfb8      	it	lt
 801b404:	eef0 7a66 	vmovlt.f32	s15, s13
 801b408:	ee27 0a87 	vmul.f32	s0, s15, s14
 801b40c:	4770      	bx	lr
 801b40e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801b474 <scalbnf+0xc0>
 801b412:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b416:	4770      	bx	lr
 801b418:	0dd2      	lsrs	r2, r2, #23
 801b41a:	e7e5      	b.n	801b3e8 <scalbnf+0x34>
 801b41c:	4410      	add	r0, r2
 801b41e:	28fe      	cmp	r0, #254	@ 0xfe
 801b420:	dce6      	bgt.n	801b3f0 <scalbnf+0x3c>
 801b422:	2800      	cmp	r0, #0
 801b424:	dd06      	ble.n	801b434 <scalbnf+0x80>
 801b426:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b42a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b42e:	ee00 3a10 	vmov	s0, r3
 801b432:	4770      	bx	lr
 801b434:	f110 0f16 	cmn.w	r0, #22
 801b438:	da09      	bge.n	801b44e <scalbnf+0x9a>
 801b43a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801b474 <scalbnf+0xc0>
 801b43e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801b478 <scalbnf+0xc4>
 801b442:	ee10 3a10 	vmov	r3, s0
 801b446:	eeb0 7a67 	vmov.f32	s14, s15
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	e7d9      	b.n	801b402 <scalbnf+0x4e>
 801b44e:	3019      	adds	r0, #25
 801b450:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b454:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b458:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801b47c <scalbnf+0xc8>
 801b45c:	ee07 3a90 	vmov	s15, r3
 801b460:	e7d7      	b.n	801b412 <scalbnf+0x5e>
 801b462:	bf00      	nop
 801b464:	ffff3cb0 	.word	0xffff3cb0
 801b468:	4c000000 	.word	0x4c000000
 801b46c:	7149f2ca 	.word	0x7149f2ca
 801b470:	f149f2ca 	.word	0xf149f2ca
 801b474:	0da24260 	.word	0x0da24260
 801b478:	8da24260 	.word	0x8da24260
 801b47c:	33000000 	.word	0x33000000

0801b480 <__ieee754_hypot>:
 801b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b484:	ec51 0b10 	vmov	r0, r1, d0
 801b488:	ec53 2b11 	vmov	r2, r3, d1
 801b48c:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 801b490:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801b494:	42a5      	cmp	r5, r4
 801b496:	b087      	sub	sp, #28
 801b498:	da05      	bge.n	801b4a6 <__ieee754_hypot+0x26>
 801b49a:	462e      	mov	r6, r5
 801b49c:	4625      	mov	r5, r4
 801b49e:	4634      	mov	r4, r6
 801b4a0:	4606      	mov	r6, r0
 801b4a2:	4610      	mov	r0, r2
 801b4a4:	4632      	mov	r2, r6
 801b4a6:	1b2b      	subs	r3, r5, r4
 801b4a8:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 801b4ac:	4629      	mov	r1, r5
 801b4ae:	4682      	mov	sl, r0
 801b4b0:	46ab      	mov	fp, r5
 801b4b2:	4616      	mov	r6, r2
 801b4b4:	4627      	mov	r7, r4
 801b4b6:	dd05      	ble.n	801b4c4 <__ieee754_hypot+0x44>
 801b4b8:	4623      	mov	r3, r4
 801b4ba:	f7e4 feef 	bl	800029c <__adddf3>
 801b4be:	4682      	mov	sl, r0
 801b4c0:	468b      	mov	fp, r1
 801b4c2:	e016      	b.n	801b4f2 <__ieee754_hypot+0x72>
 801b4c4:	4b75      	ldr	r3, [pc, #468]	@ (801b69c <__ieee754_hypot+0x21c>)
 801b4c6:	429d      	cmp	r5, r3
 801b4c8:	f340 8096 	ble.w	801b5f8 <__ieee754_hypot+0x178>
 801b4cc:	4b74      	ldr	r3, [pc, #464]	@ (801b6a0 <__ieee754_hypot+0x220>)
 801b4ce:	429d      	cmp	r5, r3
 801b4d0:	dd14      	ble.n	801b4fc <__ieee754_hypot+0x7c>
 801b4d2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801b4d6:	4305      	orrs	r5, r0
 801b4d8:	d004      	beq.n	801b4e4 <__ieee754_hypot+0x64>
 801b4da:	4623      	mov	r3, r4
 801b4dc:	f7e4 fede 	bl	800029c <__adddf3>
 801b4e0:	4682      	mov	sl, r0
 801b4e2:	468b      	mov	fp, r1
 801b4e4:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 801b4e8:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 801b4ec:	4334      	orrs	r4, r6
 801b4ee:	f000 80d2 	beq.w	801b696 <__ieee754_hypot+0x216>
 801b4f2:	ec4b ab10 	vmov	d0, sl, fp
 801b4f6:	b007      	add	sp, #28
 801b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4fc:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 801b500:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 801b504:	46ab      	mov	fp, r5
 801b506:	4627      	mov	r7, r4
 801b508:	f44f 7316 	mov.w	r3, #600	@ 0x258
 801b50c:	9301      	str	r3, [sp, #4]
 801b50e:	4b65      	ldr	r3, [pc, #404]	@ (801b6a4 <__ieee754_hypot+0x224>)
 801b510:	429c      	cmp	r4, r3
 801b512:	dc19      	bgt.n	801b548 <__ieee754_hypot+0xc8>
 801b514:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 801b518:	da70      	bge.n	801b5fc <__ieee754_hypot+0x17c>
 801b51a:	4633      	mov	r3, r6
 801b51c:	4323      	orrs	r3, r4
 801b51e:	d0e8      	beq.n	801b4f2 <__ieee754_hypot+0x72>
 801b520:	4b61      	ldr	r3, [pc, #388]	@ (801b6a8 <__ieee754_hypot+0x228>)
 801b522:	2200      	movs	r2, #0
 801b524:	4630      	mov	r0, r6
 801b526:	4639      	mov	r1, r7
 801b528:	f7e5 f86e 	bl	8000608 <__aeabi_dmul>
 801b52c:	4b5e      	ldr	r3, [pc, #376]	@ (801b6a8 <__ieee754_hypot+0x228>)
 801b52e:	4606      	mov	r6, r0
 801b530:	460f      	mov	r7, r1
 801b532:	4650      	mov	r0, sl
 801b534:	4659      	mov	r1, fp
 801b536:	2200      	movs	r2, #0
 801b538:	f7e5 f866 	bl	8000608 <__aeabi_dmul>
 801b53c:	9b01      	ldr	r3, [sp, #4]
 801b53e:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801b542:	4682      	mov	sl, r0
 801b544:	468b      	mov	fp, r1
 801b546:	9301      	str	r3, [sp, #4]
 801b548:	4632      	mov	r2, r6
 801b54a:	463b      	mov	r3, r7
 801b54c:	4650      	mov	r0, sl
 801b54e:	4659      	mov	r1, fp
 801b550:	f7e4 fea2 	bl	8000298 <__aeabi_dsub>
 801b554:	4602      	mov	r2, r0
 801b556:	460b      	mov	r3, r1
 801b558:	4680      	mov	r8, r0
 801b55a:	4689      	mov	r9, r1
 801b55c:	4630      	mov	r0, r6
 801b55e:	4639      	mov	r1, r7
 801b560:	f7e5 fac4 	bl	8000aec <__aeabi_dcmplt>
 801b564:	2200      	movs	r2, #0
 801b566:	2800      	cmp	r0, #0
 801b568:	d053      	beq.n	801b612 <__ieee754_hypot+0x192>
 801b56a:	462b      	mov	r3, r5
 801b56c:	4610      	mov	r0, r2
 801b56e:	4629      	mov	r1, r5
 801b570:	4614      	mov	r4, r2
 801b572:	f7e5 f849 	bl	8000608 <__aeabi_dmul>
 801b576:	4632      	mov	r2, r6
 801b578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b57c:	463b      	mov	r3, r7
 801b57e:	4630      	mov	r0, r6
 801b580:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 801b584:	f7e5 f840 	bl	8000608 <__aeabi_dmul>
 801b588:	4622      	mov	r2, r4
 801b58a:	4606      	mov	r6, r0
 801b58c:	460f      	mov	r7, r1
 801b58e:	462b      	mov	r3, r5
 801b590:	4650      	mov	r0, sl
 801b592:	4659      	mov	r1, fp
 801b594:	f7e4 fe82 	bl	800029c <__adddf3>
 801b598:	4622      	mov	r2, r4
 801b59a:	4680      	mov	r8, r0
 801b59c:	4689      	mov	r9, r1
 801b59e:	462b      	mov	r3, r5
 801b5a0:	4650      	mov	r0, sl
 801b5a2:	4659      	mov	r1, fp
 801b5a4:	f7e4 fe78 	bl	8000298 <__aeabi_dsub>
 801b5a8:	4602      	mov	r2, r0
 801b5aa:	460b      	mov	r3, r1
 801b5ac:	4640      	mov	r0, r8
 801b5ae:	4649      	mov	r1, r9
 801b5b0:	f7e5 f82a 	bl	8000608 <__aeabi_dmul>
 801b5b4:	4602      	mov	r2, r0
 801b5b6:	460b      	mov	r3, r1
 801b5b8:	4630      	mov	r0, r6
 801b5ba:	4639      	mov	r1, r7
 801b5bc:	f7e4 fe6c 	bl	8000298 <__aeabi_dsub>
 801b5c0:	4602      	mov	r2, r0
 801b5c2:	460b      	mov	r3, r1
 801b5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b5c8:	f7e4 fe66 	bl	8000298 <__aeabi_dsub>
 801b5cc:	ec41 0b10 	vmov	d0, r0, r1
 801b5d0:	f7fe fa9a 	bl	8019b08 <__ieee754_sqrt>
 801b5d4:	9b01      	ldr	r3, [sp, #4]
 801b5d6:	ec5b ab10 	vmov	sl, fp, d0
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d089      	beq.n	801b4f2 <__ieee754_hypot+0x72>
 801b5de:	051b      	lsls	r3, r3, #20
 801b5e0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801b5e4:	2000      	movs	r0, #0
 801b5e6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	460b      	mov	r3, r1
 801b5ee:	4650      	mov	r0, sl
 801b5f0:	4659      	mov	r1, fp
 801b5f2:	f7e5 f809 	bl	8000608 <__aeabi_dmul>
 801b5f6:	e762      	b.n	801b4be <__ieee754_hypot+0x3e>
 801b5f8:	2300      	movs	r3, #0
 801b5fa:	e787      	b.n	801b50c <__ieee754_hypot+0x8c>
 801b5fc:	9b01      	ldr	r3, [sp, #4]
 801b5fe:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 801b602:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 801b606:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801b60a:	9301      	str	r3, [sp, #4]
 801b60c:	46ab      	mov	fp, r5
 801b60e:	4627      	mov	r7, r4
 801b610:	e79a      	b.n	801b548 <__ieee754_hypot+0xc8>
 801b612:	4623      	mov	r3, r4
 801b614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b61c:	2200      	movs	r2, #0
 801b61e:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 801b622:	4614      	mov	r4, r2
 801b624:	461d      	mov	r5, r3
 801b626:	f7e4 ffef 	bl	8000608 <__aeabi_dmul>
 801b62a:	4642      	mov	r2, r8
 801b62c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b630:	464b      	mov	r3, r9
 801b632:	4640      	mov	r0, r8
 801b634:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 801b638:	f7e4 ffe6 	bl	8000608 <__aeabi_dmul>
 801b63c:	4652      	mov	r2, sl
 801b63e:	465b      	mov	r3, fp
 801b640:	4680      	mov	r8, r0
 801b642:	4689      	mov	r9, r1
 801b644:	4650      	mov	r0, sl
 801b646:	4659      	mov	r1, fp
 801b648:	f7e4 fe28 	bl	800029c <__adddf3>
 801b64c:	4622      	mov	r2, r4
 801b64e:	462b      	mov	r3, r5
 801b650:	f7e4 fe22 	bl	8000298 <__aeabi_dsub>
 801b654:	4632      	mov	r2, r6
 801b656:	463b      	mov	r3, r7
 801b658:	f7e4 ffd6 	bl	8000608 <__aeabi_dmul>
 801b65c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b660:	4682      	mov	sl, r0
 801b662:	468b      	mov	fp, r1
 801b664:	4630      	mov	r0, r6
 801b666:	4639      	mov	r1, r7
 801b668:	f7e4 fe16 	bl	8000298 <__aeabi_dsub>
 801b66c:	4622      	mov	r2, r4
 801b66e:	462b      	mov	r3, r5
 801b670:	f7e4 ffca 	bl	8000608 <__aeabi_dmul>
 801b674:	4602      	mov	r2, r0
 801b676:	460b      	mov	r3, r1
 801b678:	4650      	mov	r0, sl
 801b67a:	4659      	mov	r1, fp
 801b67c:	f7e4 fe0e 	bl	800029c <__adddf3>
 801b680:	4602      	mov	r2, r0
 801b682:	460b      	mov	r3, r1
 801b684:	4640      	mov	r0, r8
 801b686:	4649      	mov	r1, r9
 801b688:	f7e4 fe06 	bl	8000298 <__aeabi_dsub>
 801b68c:	4602      	mov	r2, r0
 801b68e:	460b      	mov	r3, r1
 801b690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b694:	e798      	b.n	801b5c8 <__ieee754_hypot+0x148>
 801b696:	46b2      	mov	sl, r6
 801b698:	46bb      	mov	fp, r7
 801b69a:	e72a      	b.n	801b4f2 <__ieee754_hypot+0x72>
 801b69c:	5f300000 	.word	0x5f300000
 801b6a0:	7fefffff 	.word	0x7fefffff
 801b6a4:	20afffff 	.word	0x20afffff
 801b6a8:	7fd00000 	.word	0x7fd00000

0801b6ac <_init>:
 801b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6ae:	bf00      	nop
 801b6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b6b2:	bc08      	pop	{r3}
 801b6b4:	469e      	mov	lr, r3
 801b6b6:	4770      	bx	lr

0801b6b8 <_fini>:
 801b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6ba:	bf00      	nop
 801b6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b6be:	bc08      	pop	{r3}
 801b6c0:	469e      	mov	lr, r3
 801b6c2:	4770      	bx	lr
