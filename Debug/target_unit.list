
target_unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f24  08009f24  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f2c  08009f2c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f68  2000014c  0800a080  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200030b4  0800a080  000230b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a61  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003637  00000000  00000000  00034c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00038258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e18  00000000  00000000  000394d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a47e  00000000  00000000  0003a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001763e  00000000  00000000  00054766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b6f6  00000000  00000000  0006bda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051ec  00000000  00000000  0010749c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e4c 	.word	0x08009e4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08009e4c 	.word	0x08009e4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fe4c 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f8bc 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 fb1e 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 fafc 	bl	8000b88 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000590:	f008 faa8 	bl	8008ae4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000594:	f000 f91e 	bl	80007d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000598:	f000 f9bc 	bl	8000914 <MX_TIM1_Init>
  MX_TIM2_Init();
 800059c:	f000 fa0a 	bl	80009b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a0:	f000 fa7a 	bl	8000a98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2S_Receive_DMA(&hi2s1, (int32_t*)data1, SAMPLE_N);

  HAL_ADC_Start_DMA(&hadc1, &data1, SAMPLE_N);
 80005a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005a8:	4947      	ldr	r1, [pc, #284]	; (80006c8 <main+0x14c>)
 80005aa:	4848      	ldr	r0, [pc, #288]	; (80006cc <main+0x150>)
 80005ac:	f000 ff10 	bl	80013d0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 80005b0:	4847      	ldr	r0, [pc, #284]	; (80006d0 <main+0x154>)
 80005b2:	f004 f847 	bl	8004644 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80005b6:	4847      	ldr	r0, [pc, #284]	; (80006d4 <main+0x158>)
 80005b8:	f004 f844 	bl	8004644 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80005bc:	4846      	ldr	r0, [pc, #280]	; (80006d8 <main+0x15c>)
 80005be:	f004 f841 	bl	8004644 <HAL_TIM_Base_Start>
	  data1[DMA2_Stream0->NDTR] > H_RANGE || data1[DMA2_Stream0->NDTR] < L_RANGE || GPIOB->IDR & 0b1


	   */

	  switch(status)
 80005c2:	4b46      	ldr	r3, [pc, #280]	; (80006dc <main+0x160>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d054      	beq.n	8000674 <main+0xf8>
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d876      	bhi.n	80006bc <main+0x140>
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <main+0x5c>
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d02b      	beq.n	800062e <main+0xb2>
 80005d6:	e071      	b.n	80006bc <main+0x140>
	  {
	  case 0:
		  if(ADC1->SR & ADC_SR_AWD && GPIOB->IDR & 0b1)				//Checks analog watchdog flag AND state of pin B0(debugging)
 80005d8:	4b41      	ldr	r3, [pc, #260]	; (80006e0 <main+0x164>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00e      	beq.n	8000602 <main+0x86>
 80005e4:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <main+0x168>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d008      	beq.n	8000602 <main+0x86>
		  {
			  pos =SAMPLE_N - DMA2_Stream0->NDTR;								//saving current ADC buffer position
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <main+0x16c>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80005f8:	4a3c      	ldr	r2, [pc, #240]	; (80006ec <main+0x170>)
 80005fa:	6013      	str	r3, [r2, #0]
			  status = 1;
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <main+0x160>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
		  }

		  debug[pos_debug%50] = DMA2_Stream0->NDTR;					//debug to check if code is "keeping up with DMA"
 8000602:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <main+0x16c>)
 8000604:	6858      	ldr	r0, [r3, #4]
 8000606:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <main+0x174>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <main+0x178>)
 800060c:	fba3 1302 	umull	r1, r3, r3, r2
 8000610:	091b      	lsrs	r3, r3, #4
 8000612:	2132      	movs	r1, #50	; 0x32
 8000614:	fb01 f303 	mul.w	r3, r1, r3
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	b201      	sxth	r1, r0
 800061c:	4a36      	ldr	r2, [pc, #216]	; (80006f8 <main+0x17c>)
 800061e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  	  pos_debug++;
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <main+0x174>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <main+0x174>)
 800062a:	6013      	str	r3, [r2, #0]

		  break;
 800062c:	e04a      	b.n	80006c4 <main+0x148>
	  case 1:
		  if((SAMPLE_N - DMA2_Stream0->NDTR-pos)%SAMPLE_N > SAMPLE_N/2)		//waiting for 1/2 of individual channel buffer
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <main+0x16c>)
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <main+0x170>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800063c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000644:	d93d      	bls.n	80006c2 <main+0x146>
		  {
			  TIM2->CR1 &= !TIM_CR1_CEN;												//Timer2 enable bit set to zero.Timer 2 is disabled.
 8000646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
			  GPIOC->ODR |= GPIO_ODR_OD13;
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <main+0x180>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a28      	ldr	r2, [pc, #160]	; (80006fc <main+0x180>)
 800065a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800065e:	6153      	str	r3, [r2, #20]
			  pos = SAMPLE_N - DMA2_Stream0->NDTR;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <main+0x16c>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <main+0x170>)
 800066a:	6013      	str	r3, [r2, #0]
			  status = 2;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <main+0x160>)
 800066e:	2202      	movs	r2, #2
 8000670:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8000672:	e026      	b.n	80006c2 <main+0x146>
	  case 2:
		  print_array((uint16_t*) data1,SAMPLE_N,pos-pos%4);										//Print out whole ADC buffer to console pos - pos%4
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <main+0x170>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0303 	bic.w	r3, r3, #3
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000682:	4811      	ldr	r0, [pc, #68]	; (80006c8 <main+0x14c>)
 8000684:	f000 fb32 	bl	8000cec <print_array>
		  HAL_Delay(10000);
 8000688:	f242 7010 	movw	r0, #10000	; 0x2710
 800068c:	f000 fe38 	bl	8001300 <HAL_Delay>
		  TIM2->CR1 |= TIM_CR1_CEN;													//Timer 2 enable bit set to one.Timer 2 is enabled.
 8000690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]
		  status = 0;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <main+0x160>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
		  GPIOC->ODR &= !GPIO_ODR_OD13;												//light up LED on PC13
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <main+0x180>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <main+0x180>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
		  ADC1->SR &= !ADC_SR_AWD;													//Reset analog watchdog flag
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <main+0x164>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <main+0x164>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
		  break;
 80006ba:	e003      	b.n	80006c4 <main+0x148>
	  default:
		  Error_Handler();
 80006bc:	f000 fbb0 	bl	8000e20 <Error_Handler>
		  break;
 80006c0:	e000      	b.n	80006c4 <main+0x148>
		  break;
 80006c2:	bf00      	nop
	  switch(status)
 80006c4:	e77d      	b.n	80005c2 <main+0x46>
 80006c6:	bf00      	nop
 80006c8:	200002f4 	.word	0x200002f4
 80006cc:	20000168 	.word	0x20000168
 80006d0:	20000210 	.word	0x20000210
 80006d4:	20000258 	.word	0x20000258
 80006d8:	200002a0 	.word	0x200002a0
 80006dc:	200002e8 	.word	0x200002e8
 80006e0:	40012000 	.word	0x40012000
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40026410 	.word	0x40026410
 80006ec:	200002ec 	.word	0x200002ec
 80006f0:	200002f0 	.word	0x200002f0
 80006f4:	51eb851f 	.word	0x51eb851f
 80006f8:	200012f4 	.word	0x200012f4
 80006fc:	40020800 	.word	0x40020800

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f008 ff18 	bl	8009544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a27      	ldr	r2, [pc, #156]	; (80007cc <SystemClock_Config+0xcc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xd0>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000770:	2319      	movs	r3, #25
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000774:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800077e:	2308      	movs	r3, #8
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fadc 	bl	8003d44 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000792:	f000 fb45 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2103      	movs	r1, #3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fd3e 	bl	8004234 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007be:	f000 fb2f 	bl	8000e20 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007f8:	4b44      	ldr	r3, [pc, #272]	; (800090c <MX_ADC1_Init+0x138>)
 80007fa:	4a45      	ldr	r2, [pc, #276]	; (8000910 <MX_ADC1_Init+0x13c>)
 80007fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007fe:	4b43      	ldr	r3, [pc, #268]	; (800090c <MX_ADC1_Init+0x138>)
 8000800:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000804:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000806:	4b41      	ldr	r3, [pc, #260]	; (800090c <MX_ADC1_Init+0x138>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800080c:	4b3f      	ldr	r3, [pc, #252]	; (800090c <MX_ADC1_Init+0x138>)
 800080e:	2201      	movs	r2, #1
 8000810:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000812:	4b3e      	ldr	r3, [pc, #248]	; (800090c <MX_ADC1_Init+0x138>)
 8000814:	2200      	movs	r2, #0
 8000816:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <MX_ADC1_Init+0x138>)
 800081a:	2201      	movs	r2, #1
 800081c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000820:	4b3a      	ldr	r3, [pc, #232]	; (800090c <MX_ADC1_Init+0x138>)
 8000822:	2201      	movs	r2, #1
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <MX_ADC1_Init+0x138>)
 8000828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800082e:	4b37      	ldr	r3, [pc, #220]	; (800090c <MX_ADC1_Init+0x138>)
 8000830:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000836:	4b35      	ldr	r3, [pc, #212]	; (800090c <MX_ADC1_Init+0x138>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800083c:	4b33      	ldr	r3, [pc, #204]	; (800090c <MX_ADC1_Init+0x138>)
 800083e:	2204      	movs	r2, #4
 8000840:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <MX_ADC1_Init+0x138>)
 8000844:	2201      	movs	r2, #1
 8000846:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <MX_ADC1_Init+0x138>)
 800084c:	2201      	movs	r2, #1
 800084e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000850:	482e      	ldr	r0, [pc, #184]	; (800090c <MX_ADC1_Init+0x138>)
 8000852:	f000 fd79 	bl	8001348 <HAL_ADC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800085c:	f000 fae0 	bl	8000e20 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REGINJEC;
 8000860:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000864:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = H_RANGE;
 8000866:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800086a:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = L_RANGE;
 800086c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000870:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.ITMode = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4823      	ldr	r0, [pc, #140]	; (800090c <MX_ADC1_Init+0x138>)
 8000880:	f000 ffe6 	bl	8001850 <HAL_ADC_AnalogWDGConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800088a:	f000 fac9 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000896:	2302      	movs	r3, #2
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	; (800090c <MX_ADC1_Init+0x138>)
 80008a0:	f000 fea4 	bl	80015ec <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80008aa:	f000 fab9 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4814      	ldr	r0, [pc, #80]	; (800090c <MX_ADC1_Init+0x138>)
 80008bc:	f000 fe96 	bl	80015ec <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80008c6:	f000 faab 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008ce:	2303      	movs	r3, #3
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_ADC1_Init+0x138>)
 80008d8:	f000 fe88 	bl	80015ec <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80008e2:	f000 fa9d 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008e6:	2303      	movs	r3, #3
 80008e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80008ea:	2304      	movs	r3, #4
 80008ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_ADC1_Init+0x138>)
 80008f4:	f000 fe7a 	bl	80015ec <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 80008fe:	f000 fa8f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000168 	.word	0x20000168
 8000910:	40012000 	.word	0x40012000

08000914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_TIM1_Init+0x98>)
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_TIM1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_TIM1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_TIM1_Init+0x98>)
 8000944:	22f9      	movs	r2, #249	; 0xf9
 8000946:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_TIM1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 4;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_TIM1_Init+0x98>)
 8000950:	2204      	movs	r2, #4
 8000952:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_TIM1_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <MX_TIM1_Init+0x98>)
 800095c:	f003 fe22 	bl	80045a4 <HAL_TIM_Base_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000966:	f000 fa5b 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_TIM1_Init+0x98>)
 8000978:	f004 f87c 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000982:	f000 fa4d 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_TIM1_Init+0x98>)
 8000994:	f004 fc0e 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800099e:	f000 fa3f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000210 	.word	0x20000210
 80009b0:	40010000 	.word	0x40010000

080009b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	615a      	str	r2, [r3, #20]
 80009e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_TIM2_Init+0xe0>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_TIM2_Init+0xe0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_TIM2_Init+0xe0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_TIM2_Init+0xe0>)
 80009fa:	22f9      	movs	r2, #249	; 0xf9
 80009fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_TIM2_Init+0xe0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_TIM2_Init+0xe0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0a:	4822      	ldr	r0, [pc, #136]	; (8000a94 <MX_TIM2_Init+0xe0>)
 8000a0c:	f003 fdca 	bl	80045a4 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a16:	f000 fa03 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481b      	ldr	r0, [pc, #108]	; (8000a94 <MX_TIM2_Init+0xe0>)
 8000a28:	f004 f824 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a32:	f000 f9f5 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <MX_TIM2_Init+0xe0>)
 8000a38:	f003 fe5e 	bl	80046f8 <HAL_TIM_OC_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a42:	f000 f9ed 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a46:	2320      	movs	r3, #32
 8000a48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	4619      	mov	r1, r3
 8000a54:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_TIM2_Init+0xe0>)
 8000a56:	f004 fbad 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a60:	f000 f9de 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_TIM2_Init+0xe0>)
 8000a7c:	f003 ff9e 	bl	80049bc <HAL_TIM_OC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a86:	f000 f9cb 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3738      	adds	r7, #56	; 0x38
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000258 	.word	0x20000258

08000a98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000aca:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <MX_TIM3_Init+0xec>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600;
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ad4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000ade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af0:	4823      	ldr	r0, [pc, #140]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000af2:	f003 fd57 	bl	80045a4 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000afc:	f000 f990 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481c      	ldr	r0, [pc, #112]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000b0e:	f003 ffb1 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b18:	f000 f982 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000b1c:	4818      	ldr	r0, [pc, #96]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000b1e:	f003 fdeb 	bl	80046f8 <HAL_TIM_OC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b28:	f000 f97a 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000b3c:	f004 fb3a 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b46:	f000 f96b 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000b62:	f003 ff2b 	bl	80049bc <HAL_TIM_OC_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b6c:	f000 f958 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <MX_TIM3_Init+0xe8>)
 8000b72:	f000 fa55 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000b76:	bf00      	nop
 8000b78:	3738      	adds	r7, #56	; 0x38
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200002a0 	.word	0x200002a0
 8000b84:	40000400 	.word	0x40000400

08000b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_DMA_Init+0x3c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <MX_DMA_Init+0x3c>)
 8000b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_DMA_Init+0x3c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2038      	movs	r0, #56	; 0x38
 8000bb0:	f001 f907 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bb4:	2038      	movs	r0, #56	; 0x38
 8000bb6:	f001 f920 	bl	8001dfa <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b3f      	ldr	r3, [pc, #252]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a3e      	ldr	r2, [pc, #248]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b3c      	ldr	r3, [pc, #240]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a30      	ldr	r2, [pc, #192]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a29      	ldr	r2, [pc, #164]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <MX_GPIO_Init+0x118>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c54:	4823      	ldr	r0, [pc, #140]	; (8000ce4 <MX_GPIO_Init+0x11c>)
 8000c56:	f001 fddf 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c60:	4821      	ldr	r0, [pc, #132]	; (8000ce8 <MX_GPIO_Init+0x120>)
 8000c62:	f001 fdd9 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <MX_GPIO_Init+0x11c>)
 8000c80:	f001 fc46 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <MX_GPIO_Init+0x11c>)
 8000c9c:	f001 fc38 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_GPIO_Init+0x120>)
 8000cb4:	f001 fc2c 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_GPIO_Init+0x120>)
 8000cd2:	f001 fc1d 	bl	8002510 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020400 	.word	0x40020400

08000cec <print_array>:

/* USER CODE BEGIN 4 */
void print_array(uint16_t *arr1,uint16_t size,uint32_t start_pos){
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	b095      	sub	sp, #84	; 0x54
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	817b      	strh	r3, [r7, #10]

	uint8_t xd;
	uint16_t i;
	char print_buffer[50];

	xd = sprintf(print_buffer,"start:\n\n\r");
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4945      	ldr	r1, [pc, #276]	; (8000e14 <print_array+0x128>)
 8000d00:	4618      	mov	r0, r3
 8000d02:	f008 fbff 	bl	8009504 <siprintf>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	CDC_Transmit_FS((uint8_t*)print_buffer,xd);
 8000d0c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f007 ffa1 	bl	8008c60 <CDC_Transmit_FS>

	for(i = 0;i < size;i+=4){
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000d24:	e05a      	b.n	8000ddc <print_array+0xf0>
		xd = sprintf(print_buffer,"%04d %04d %04d %04d; ",arr1[(start_pos+i)%size],arr1[(start_pos+i+1)%size],arr1[(start_pos+i+2)%size],arr1[(start_pos+i+3)%size]);     	//saving data to buffer in format: 0123 0123 0123 0123; 0123 ...
 8000d26:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	897a      	ldrh	r2, [r7, #10]
 8000d30:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d34:	fb01 f202 	mul.w	r2, r1, r2
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	461d      	mov	r5, r3
 8000d44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	897a      	ldrh	r2, [r7, #10]
 8000d50:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d54:	fb01 f202 	mul.w	r2, r1, r2
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	461e      	mov	r6, r3
 8000d64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	897a      	ldrh	r2, [r7, #10]
 8000d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d74:	fb01 f202 	mul.w	r2, r1, r2
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	461c      	mov	r4, r3
 8000d84:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	897a      	ldrh	r2, [r7, #10]
 8000d90:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d94:	fb01 f202 	mul.w	r2, r1, r2
 8000d98:	1a9b      	subs	r3, r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	f107 0010 	add.w	r0, r7, #16
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	9400      	str	r4, [sp, #0]
 8000daa:	4633      	mov	r3, r6
 8000dac:	462a      	mov	r2, r5
 8000dae:	491a      	ldr	r1, [pc, #104]	; (8000e18 <print_array+0x12c>)
 8000db0:	f008 fba8 	bl	8009504 <siprintf>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		CDC_Transmit_FS((uint8_t*)print_buffer,xd);																															//sending buffer
 8000dba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f007 ff4a 	bl	8008c60 <CDC_Transmit_FS>
		HAL_Delay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 fa97 	bl	8001300 <HAL_Delay>
	for(i = 0;i < size;i+=4){
 8000dd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000ddc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000de0:	897b      	ldrh	r3, [r7, #10]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d39f      	bcc.n	8000d26 <print_array+0x3a>
			xd = sprintf(uart_buffer,"%d ",arr2[(i+var)%size]);
			CDC_Transmit_FS((uint8_t*)uart_buffer,xd);
			HAL_Delay(1);
		}
	*/
	xd = sprintf(print_buffer,"\n end\n\r");
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	490c      	ldr	r1, [pc, #48]	; (8000e1c <print_array+0x130>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f008 fb89 	bl	8009504 <siprintf>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	CDC_Transmit_FS((uint8_t*)print_buffer,xd);
 8000df8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f007 ff2b 	bl	8008c60 <CDC_Transmit_FS>
}
 8000e0a:	bf00      	nop
 8000e0c:	374c      	adds	r7, #76	; 0x4c
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08009e64 	.word	0x08009e64
 8000e18:	08009e70 	.word	0x08009e70
 8000e1c:	08009e88 	.word	0x08009e88

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a2f      	ldr	r2, [pc, #188]	; (8000f58 <HAL_ADC_MspInit+0xdc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d158      	bne.n	8000f50 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <HAL_ADC_MspInit+0xe0>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <HAL_ADC_MspInit+0xe0>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <HAL_ADC_MspInit+0xe0>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_ADC_MspInit+0xe0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <HAL_ADC_MspInit+0xe0>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <HAL_ADC_MspInit+0xe0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481d      	ldr	r0, [pc, #116]	; (8000f60 <HAL_ADC_MspInit+0xe4>)
 8000eea:	f001 fb11 	bl	8002510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <HAL_ADC_MspInit+0xec>)
 8000ef2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f2c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f36:	f000 ff7b 	bl	8001e30 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000f40:	f7ff ff6e 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_ADC_MspInit+0xe8>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40012000 	.word	0x40012000
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	200001b0 	.word	0x200001b0
 8000f68:	40026410 	.word	0x40026410

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a26      	ldr	r2, [pc, #152]	; (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d116      	bne.n	8000fac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a24      	ldr	r2, [pc, #144]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2018      	movs	r0, #24
 8000fa0:	f000 ff0f 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000fa4:	2018      	movs	r0, #24
 8000fa6:	f000 ff28 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000faa:	e02e      	b.n	800100a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb4:	d10e      	bne.n	8000fd4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a16      	ldr	r2, [pc, #88]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
}
 8000fd2:	e01a      	b.n	800100a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a10      	ldr	r2, [pc, #64]	; (800101c <HAL_TIM_Base_MspInit+0xb0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d115      	bne.n	800100a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	201d      	movs	r0, #29
 8001000:	f000 fedf 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001004:	201d      	movs	r0, #29
 8001006:	f000 fef8 	bl	8001dfa <HAL_NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010000 	.word	0x40010000
 8001018:	40023800 	.word	0x40023800
 800101c:	40000400 	.word	0x40000400

08001020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d11d      	bne.n	800107e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800106e:	2302      	movs	r3, #2
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_TIM_MspPostInit+0x70>)
 800107a:	f001 fa49 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40000400 	.word	0x40000400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f8ee 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80010ee:	f003 fb5c 	bl	80047aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000210 	.word	0x20000210

080010fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <TIM3_IRQHandler+0x10>)
 8001102:	f003 fb52 	bl	80047aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002a0 	.word	0x200002a0

08001110 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <DMA2_Stream0_IRQHandler+0x10>)
 8001116:	f000 ff91 	bl	800203c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001b0 	.word	0x200001b0

08001124 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <OTG_FS_IRQHandler+0x10>)
 800112a:	f001 fcde 	bl	8002aea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002840 	.word	0x20002840

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f008 f9f4 	bl	8009554 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20020000 	.word	0x20020000
 8001198:	00000400 	.word	0x00000400
 800119c:	20001358 	.word	0x20001358
 80011a0:	200030b8 	.word	0x200030b8

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f008 f9b3 	bl	8009560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff f9bf 	bl	800057c <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 800120c:	08009f34 	.word	0x08009f34
  ldr r2, =_sbss
 8001210:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001214:	200030b4 	.word	0x200030b4

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 fdb1 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fdec 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fdc9 	bl	8001e16 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 fd91 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	2000135c 	.word	0x2000135c

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000135c 	.word	0x2000135c

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e033      	b.n	80013c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fd88 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800138e:	f023 0302 	bic.w	r3, r3, #2
 8001392:	f043 0202 	orr.w	r2, r3, #2
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fab8 	bl	8001910 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f023 0303 	bic.w	r3, r3, #3
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
 80013b6:	e001      	b.n	80013bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Start_DMA+0x1e>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e0ce      	b.n	800158c <HAL_ADC_Start_DMA+0x1bc>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b01      	cmp	r3, #1
 8001402:	d018      	beq.n	8001436 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001414:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <HAL_ADC_Start_DMA+0x1c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <HAL_ADC_Start_DMA+0x1c8>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9a      	lsrs	r2, r3, #18
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001428:	e002      	b.n	8001430 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	3b01      	subs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f9      	bne.n	800142a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001444:	d107      	bne.n	8001456 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001454:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	f040 8086 	bne.w	8001572 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001490:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a4:	d106      	bne.n	80014b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f023 0206 	bic.w	r2, r3, #6
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
 80014b2:	e002      	b.n	80014ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_ADC_Start_DMA+0x1cc>)
 80014c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ca:	4a35      	ldr	r2, [pc, #212]	; (80015a0 <HAL_ADC_Start_DMA+0x1d0>)
 80014cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	4a34      	ldr	r2, [pc, #208]	; (80015a4 <HAL_ADC_Start_DMA+0x1d4>)
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014da:	4a33      	ldr	r2, [pc, #204]	; (80015a8 <HAL_ADC_Start_DMA+0x1d8>)
 80014dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001506:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	334c      	adds	r3, #76	; 0x4c
 8001512:	4619      	mov	r1, r3
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f000 fd38 	bl	8001f8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10f      	bne.n	8001548 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d129      	bne.n	800158a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	e020      	b.n	800158a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a17      	ldr	r2, [pc, #92]	; (80015ac <HAL_ADC_Start_DMA+0x1dc>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d11b      	bne.n	800158a <HAL_ADC_Start_DMA+0x1ba>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d114      	bne.n	800158a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	e00b      	b.n	800158a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f043 0210 	orr.w	r2, r3, #16
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f043 0201 	orr.w	r2, r3, #1
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000000 	.word	0x20000000
 8001598:	431bde83 	.word	0x431bde83
 800159c:	40012300 	.word	0x40012300
 80015a0:	08001b09 	.word	0x08001b09
 80015a4:	08001bc3 	.word	0x08001bc3
 80015a8:	08001bdf 	.word	0x08001bdf
 80015ac:	40012000 	.word	0x40012000

080015b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1c>
 8001604:	2302      	movs	r3, #2
 8001606:	e113      	b.n	8001830 <HAL_ADC_ConfigChannel+0x244>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b09      	cmp	r3, #9
 8001616:	d925      	bls.n	8001664 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68d9      	ldr	r1, [r3, #12]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	3b1e      	subs	r3, #30
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68d9      	ldr	r1, [r3, #12]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4403      	add	r3, r0
 8001656:	3b1e      	subs	r3, #30
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	e022      	b.n	80016aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	2207      	movs	r2, #7
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	4603      	mov	r3, r0
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4403      	add	r3, r0
 80016a0:	409a      	lsls	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d824      	bhi.n	80016fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b05      	subs	r3, #5
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	400a      	ands	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b05      	subs	r3, #5
 80016ee:	fa00 f203 	lsl.w	r2, r0, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
 80016fa:	e04c      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d824      	bhi.n	800174e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b23      	subs	r3, #35	; 0x23
 8001716:	221f      	movs	r2, #31
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b23      	subs	r3, #35	; 0x23
 8001740:	fa00 f203 	lsl.w	r2, r0, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
 800174c:	e023      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b41      	subs	r3, #65	; 0x41
 8001760:	221f      	movs	r2, #31
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b41      	subs	r3, #65	; 0x41
 800178a:	fa00 f203 	lsl.w	r2, r0, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_ADC_ConfigChannel+0x250>)
 8001798:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a28      	ldr	r2, [pc, #160]	; (8001840 <HAL_ADC_ConfigChannel+0x254>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d10f      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d8>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	d10b      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_ADC_ConfigChannel+0x254>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12b      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x23a>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <HAL_ADC_ConfigChannel+0x258>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d003      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0x1f4>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b11      	cmp	r3, #17
 80017de:	d122      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_ADC_ConfigChannel+0x258>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d111      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_ADC_ConfigChannel+0x25c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_ADC_ConfigChannel+0x260>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9a      	lsrs	r2, r3, #18
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001818:	e002      	b.n	8001820 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3b01      	subs	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f9      	bne.n	800181a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40012300 	.word	0x40012300
 8001840:	40012000 	.word	0x40012000
 8001844:	10000012 	.word	0x10000012
 8001848:	20000000 	.word	0x20000000
 800184c:	431bde83 	.word	0x431bde83

08001850 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_ADC_AnalogWDGConfig+0x18>
 8001864:	2302      	movs	r3, #2
 8001866:	e04d      	b.n	8001904 <HAL_ADC_AnalogWDGConfig+0xb4>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	7c1b      	ldrb	r3, [r3, #16]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d108      	bne.n	800188a <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	e007      	b.n	800189a <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001898:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018ac:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	6852      	ldr	r2, [r2, #4]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	6892      	ldr	r2, [r2, #8]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 021f 	bic.w	r2, r2, #31
 80018e2:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4619      	mov	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001918:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <ADC_Init+0x1f0>)
 800191a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	431a      	orrs	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	021a      	lsls	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800198a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6899      	ldr	r1, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <ADC_Init+0x1f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	e00f      	b.n	8001a0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0202 	bic.w	r2, r2, #2
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7e1b      	ldrb	r3, [r3, #24]
 8001a28:	005a      	lsls	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01b      	beq.n	8001a74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	3b01      	subs	r3, #1
 8001a68:	035a      	lsls	r2, r3, #13
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	e007      	b.n	8001a84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	051a      	lsls	r2, r3, #20
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac6:	025a      	lsls	r2, r3, #9
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	029a      	lsls	r2, r3, #10
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40012300 	.word	0x40012300
 8001b04:	0f000001 	.word	0x0f000001

08001b08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d13c      	bne.n	8001b9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d12b      	bne.n	8001b94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d127      	bne.n	8001b94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d119      	bne.n	8001b94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0220 	bic.w	r2, r2, #32
 8001b6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7ff fd0b 	bl	80015b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b9a:	e00e      	b.n	8001bba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff fd15 	bl	80015d8 <HAL_ADC_ErrorCallback>
}
 8001bae:	e004      	b.n	8001bba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff fcf7 	bl	80015c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2240      	movs	r2, #64	; 0x40
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f043 0204 	orr.w	r2, r3, #4
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff fcea 	bl	80015d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4907      	ldr	r1, [pc, #28]	; (8001ca8 <__NVIC_EnableIRQ+0x38>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff29 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff3e 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff31 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa2 	bl	8001d68 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff fa54 	bl	80012e8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e099      	b.n	8001f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6c:	e00f      	b.n	8001e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e6e:	f7ff fa3b 	bl	80012e8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d908      	bls.n	8001e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2203      	movs	r2, #3
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e078      	b.n	8001f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e8      	bne.n	8001e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_DMA_Init+0x158>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f023 0307 	bic.w	r3, r3, #7
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d117      	bne.n	8001f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00e      	beq.n	8001f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fa6f 	bl	8002418 <DMA_CheckFifoParam>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e016      	b.n	8001f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fa26 	bl	80023ac <DMA_CalcBaseAndBitshift>
 8001f60:	4603      	mov	r3, r0
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	223f      	movs	r2, #63	; 0x3f
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	f010803f 	.word	0xf010803f

08001f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_DMA_Start_IT+0x26>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e040      	b.n	8002034 <HAL_DMA_Start_IT+0xa8>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d12f      	bne.n	8002026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f9b8 	bl	8002350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	223f      	movs	r2, #63	; 0x3f
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0216 	orr.w	r2, r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0208 	orr.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e005      	b.n	8002032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800202e:	2302      	movs	r3, #2
 8002030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002048:	4b8e      	ldr	r3, [pc, #568]	; (8002284 <HAL_DMA_IRQHandler+0x248>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a8e      	ldr	r2, [pc, #568]	; (8002288 <HAL_DMA_IRQHandler+0x24c>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0a9b      	lsrs	r3, r3, #10
 8002054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2208      	movs	r2, #8
 8002068:	409a      	lsls	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01a      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d013      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0204 	bic.w	r2, r2, #4
 800208e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	2208      	movs	r2, #8
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2201      	movs	r2, #1
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d012      	beq.n	80020de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2201      	movs	r2, #1
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2204      	movs	r2, #4
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00b      	beq.n	8002114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	2204      	movs	r2, #4
 8002102:	409a      	lsls	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	2210      	movs	r2, #16
 800211a:	409a      	lsls	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d043      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d03c      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	2210      	movs	r2, #16
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d018      	beq.n	800217e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d024      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
 800216a:	e01f      	b.n	80021ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
 800217c:	e016      	b.n	80021ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0208 	bic.w	r2, r2, #8
 800219a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2220      	movs	r2, #32
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 808f 	beq.w	80022dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8087 	beq.w	80022dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2220      	movs	r2, #32
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d136      	bne.n	8002254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0216 	bic.w	r2, r2, #22
 80021f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_DMA_IRQHandler+0x1da>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0208 	bic.w	r2, r2, #8
 8002224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	223f      	movs	r2, #63	; 0x3f
 800222c:	409a      	lsls	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	2b00      	cmp	r3, #0
 8002248:	d07e      	beq.n	8002348 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
        }
        return;
 8002252:	e079      	b.n	8002348 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01d      	beq.n	800229e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	2b00      	cmp	r3, #0
 8002276:	d031      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e02c      	b.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000
 8002288:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d023      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e01e      	b.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10f      	bne.n	80022cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0210 	bic.w	r2, r2, #16
 80022ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d032      	beq.n	800234a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d022      	beq.n	8002336 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2205      	movs	r2, #5
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3301      	adds	r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d307      	bcc.n	8002324 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f2      	bne.n	8002308 <HAL_DMA_IRQHandler+0x2cc>
 8002322:	e000      	b.n	8002326 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002324:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
 8002346:	e000      	b.n	800234a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002348:	bf00      	nop
    }
  }
}
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800236c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b40      	cmp	r3, #64	; 0x40
 800237c:	d108      	bne.n	8002390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800238e:	e007      	b.n	80023a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3b10      	subs	r3, #16
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <DMA_CalcBaseAndBitshift+0x64>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <DMA_CalcBaseAndBitshift+0x68>)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d909      	bls.n	80023ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	659a      	str	r2, [r3, #88]	; 0x58
 80023ec:	e007      	b.n	80023fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023f6:	f023 0303 	bic.w	r3, r3, #3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	aaaaaaab 	.word	0xaaaaaaab
 8002414:	08009ee8 	.word	0x08009ee8

08002418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11f      	bne.n	8002472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d856      	bhi.n	80024e6 <DMA_CheckFifoParam+0xce>
 8002438:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <DMA_CheckFifoParam+0x28>)
 800243a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243e:	bf00      	nop
 8002440:	08002451 	.word	0x08002451
 8002444:	08002463 	.word	0x08002463
 8002448:	08002451 	.word	0x08002451
 800244c:	080024e7 	.word	0x080024e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d046      	beq.n	80024ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002460:	e043      	b.n	80024ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800246a:	d140      	bne.n	80024ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002470:	e03d      	b.n	80024ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247a:	d121      	bne.n	80024c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d837      	bhi.n	80024f2 <DMA_CheckFifoParam+0xda>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <DMA_CheckFifoParam+0x70>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002499 	.word	0x08002499
 800248c:	0800249f 	.word	0x0800249f
 8002490:	08002499 	.word	0x08002499
 8002494:	080024b1 	.word	0x080024b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e030      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d025      	beq.n	80024f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ae:	e022      	b.n	80024f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b8:	d11f      	bne.n	80024fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024be:	e01c      	b.n	80024fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d903      	bls.n	80024ce <DMA_CheckFifoParam+0xb6>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d003      	beq.n	80024d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024cc:	e018      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      break;
 80024d2:	e015      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e00b      	b.n	80024fe <DMA_CheckFifoParam+0xe6>
      break;
 80024e6:	bf00      	nop
 80024e8:	e00a      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
 80024ec:	e008      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e006      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e004      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e002      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;   
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e159      	b.n	80027e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8148 	bne.w	80027da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	2b02      	cmp	r3, #2
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d017      	beq.n	8002600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a2 	beq.w	80027da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_GPIO_Init+0x2e8>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_GPIO_Init+0x2ec>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a49      	ldr	r2, [pc, #292]	; (8002800 <HAL_GPIO_Init+0x2f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x202>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a48      	ldr	r2, [pc, #288]	; (8002804 <HAL_GPIO_Init+0x2f4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1fe>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a47      	ldr	r2, [pc, #284]	; (8002808 <HAL_GPIO_Init+0x2f8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1fa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a46      	ldr	r2, [pc, #280]	; (800280c <HAL_GPIO_Init+0x2fc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1f6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a45      	ldr	r2, [pc, #276]	; (8002810 <HAL_GPIO_Init+0x300>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1f2>
 80026fe:	2304      	movs	r3, #4
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002702:	2307      	movs	r3, #7
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x2ec>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_GPIO_Init+0x304>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a2f      	ldr	r2, [pc, #188]	; (8002814 <HAL_GPIO_Init+0x304>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_GPIO_Init+0x304>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a24      	ldr	r2, [pc, #144]	; (8002814 <HAL_GPIO_Init+0x304>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_GPIO_Init+0x304>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <HAL_GPIO_Init+0x304>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_GPIO_Init+0x304>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <HAL_GPIO_Init+0x304>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f aea2 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800284a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284c:	b08f      	sub	sp, #60	; 0x3c
 800284e:	af0a      	add	r7, sp, #40	; 0x28
 8002850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e10f      	b.n	8002a7c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f006 fb3a 	bl	8008ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2203      	movs	r2, #3
 8002880:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f002 fe21 	bl	80054e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	687e      	ldr	r6, [r7, #4]
 80028a8:	466d      	mov	r5, sp
 80028aa:	f106 0410 	add.w	r4, r6, #16
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80028be:	1d33      	adds	r3, r6, #4
 80028c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c2:	6838      	ldr	r0, [r7, #0]
 80028c4:	f002 fcf8 	bl	80052b8 <USB_CoreInit>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0d0      	b.n	8002a7c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fe0f 	bl	8005504 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e04a      	b.n	8002982 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	333c      	adds	r3, #60	; 0x3c
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	b298      	uxth	r0, r3
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3344      	adds	r3, #68	; 0x44
 8002928:	4602      	mov	r2, r0
 800292a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3340      	adds	r3, #64	; 0x40
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3348      	adds	r3, #72	; 0x48
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	334c      	adds	r3, #76	; 0x4c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3354      	adds	r3, #84	; 0x54
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	3301      	adds	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3af      	bcc.n	80028ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e044      	b.n	8002a1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3b5      	bcc.n	8002992 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	687e      	ldr	r6, [r7, #4]
 8002a2e:	466d      	mov	r5, sp
 8002a30:	f106 0410 	add.w	r4, r6, #16
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a44:	1d33      	adds	r3, r6, #4
 8002a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a48:	6838      	ldr	r0, [r7, #0]
 8002a4a:	f002 fda7 	bl	800559c <USB_DevInit>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e00d      	b.n	8002a7c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f003 fef6 	bl	8006866 <USB_DevDisconnect>

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_PCD_Start+0x1c>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e020      	b.n	8002ae2 <HAL_PCD_Start+0x5e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d109      	bne.n	8002ac4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d005      	beq.n	8002ac4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 fcf9 	bl	80054c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 fea6 	bl	8006824 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002aea:	b590      	push	{r4, r7, lr}
 8002aec:	b08d      	sub	sp, #52	; 0x34
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 ff64 	bl	80069ce <USB_GetMode>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 848a 	bne.w	8003422 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fec8 	bl	80068a8 <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8480 	beq.w	8003420 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 feb5 	bl	80068a8 <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d107      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f002 0202 	and.w	r2, r2, #2
 8002b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fea3 	bl	80068a8 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d161      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0210 	bic.w	r2, r2, #16
 8002b7a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 020f 	and.w	r2, r3, #15
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	0c5b      	lsrs	r3, r3, #17
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d124      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d035      	beq.n	8002c20 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6a38      	ldr	r0, [r7, #32]
 8002bc8:	f003 fcda 	bl	8006580 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd8:	441a      	add	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bea:	441a      	add	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	621a      	str	r2, [r3, #32]
 8002bf0:	e016      	b.n	8002c20 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	0c5b      	lsrs	r3, r3, #17
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d110      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c04:	2208      	movs	r2, #8
 8002c06:	4619      	mov	r1, r3
 8002c08:	6a38      	ldr	r0, [r7, #32]
 8002c0a:	f003 fcb9 	bl	8006580 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c1a:	441a      	add	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0210 	orr.w	r2, r2, #16
 8002c2e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fe37 	bl	80068a8 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c44:	f040 80a7 	bne.w	8002d96 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fe3c 	bl	80068ce <USB_ReadDevAllOutEpInterrupt>
 8002c56:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c58:	e099      	b.n	8002d8e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 808e 	beq.w	8002d82 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fe60 	bl	8006936 <USB_ReadDevOutEPInterrupt>
 8002c76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00c      	beq.n	8002c9c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2301      	movs	r3, #1
 8002c92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fec2 	bl	8003a20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 ff98 	bl	8003bf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2310      	movs	r3, #16
 8002cda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d030      	beq.n	8002d48 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d109      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d04:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	78db      	ldrb	r3, [r3, #3]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d108      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2200      	movs	r2, #0
 8002d28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f006 f9d9 	bl	80090e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d42:	461a      	mov	r2, r3
 8002d44:	2302      	movs	r3, #2
 8002d46:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2320      	movs	r3, #32
 8002d62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d80:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	3301      	adds	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f47f af62 	bne.w	8002c5a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fd84 	bl	80068a8 <USB_ReadInterrupts>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002daa:	f040 80db 	bne.w	8002f64 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fda5 	bl	8006902 <USB_ReadDevAllInEpInterrupt>
 8002db8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dbe:	e0cd      	b.n	8002f5c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80c2 	beq.w	8002f50 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 fdcb 	bl	8006972 <USB_ReadDevInEPInterrupt>
 8002ddc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d057      	beq.n	8002e98 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69f9      	ldr	r1, [r7, #28]
 8002e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e08:	4013      	ands	r3, r2
 8002e0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d132      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	334c      	adds	r3, #76	; 0x4c
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4403      	add	r3, r0
 8002e46:	3348      	adds	r3, #72	; 0x48
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4419      	add	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4403      	add	r3, r0
 8002e5a:	334c      	adds	r3, #76	; 0x4c
 8002e5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d113      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x3a2>
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3354      	adds	r3, #84	; 0x54
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d108      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e84:	461a      	mov	r2, r3
 8002e86:	2101      	movs	r1, #1
 8002e88:	f003 fdd2 	bl	8006a30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f006 f8ad 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2310      	movs	r3, #16
 8002ece:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2340      	movs	r3, #64	; 0x40
 8002eea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d023      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef8:	6a38      	ldr	r0, [r7, #32]
 8002efa:	f002 fcb3 	bl	8005864 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	3338      	adds	r3, #56	; 0x38
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	78db      	ldrb	r3, [r3, #3]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d108      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f006 f8f0 	bl	800910c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fcdb 	bl	8003906 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	3301      	adds	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f47f af2e 	bne.w	8002dc0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 fc9d 	bl	80068a8 <USB_ReadInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f78:	d122      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d108      	bne.n	8002faa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fec2 	bl	8003d2c <HAL_PCDEx_LPM_Callback>
 8002fa8:	e002      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f006 f88e 	bl	80090cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 fc6f 	bl	80068a8 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd4:	d112      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d102      	bne.n	8002fec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f006 f84a 	bl	8009080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ffa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f003 fc51 	bl	80068a8 <USB_ReadInterrupts>
 8003006:	4603      	mov	r3, r0
 8003008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003010:	f040 80b7 	bne.w	8003182 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2110      	movs	r1, #16
 800302e:	4618      	mov	r0, r3
 8003030:	f002 fc18 	bl	8005864 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003034:	2300      	movs	r3, #0
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003038:	e046      	b.n	80030c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003046:	461a      	mov	r2, r3
 8003048:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800304c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305e:	0151      	lsls	r1, r2, #5
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	440a      	add	r2, r1
 8003064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003068:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800306c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307a:	461a      	mov	r2, r3
 800307c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003080:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003092:	0151      	lsls	r1, r2, #5
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	440a      	add	r2, r1
 8003098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800309c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b2:	0151      	lsls	r1, r2, #5
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	440a      	add	r2, r1
 80030b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	3301      	adds	r3, #1
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d3b3      	bcc.n	800303a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fe:	f043 030b 	orr.w	r3, r3, #11
 8003102:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003114:	f043 030b 	orr.w	r3, r3, #11
 8003118:	6453      	str	r3, [r2, #68]	; 0x44
 800311a:	e015      	b.n	8003148 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800312e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003132:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003142:	f043 030b 	orr.w	r3, r3, #11
 8003146:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003156:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800315a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800316c:	461a      	mov	r2, r3
 800316e:	f003 fc5f 	bl	8006a30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f003 fb8e 	bl	80068a8 <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003196:	d124      	bne.n	80031e2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f003 fc24 	bl	80069ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fbd9 	bl	800595e <USB_GetDevSpeed>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681c      	ldr	r4, [r3, #0]
 80031b8:	f001 f9e8 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80031bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	4620      	mov	r0, r4
 80031c8:	f002 f8d8 	bl	800537c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f005 ff38 	bl	8009042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 fb5e 	bl	80068a8 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d10a      	bne.n	800320c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f005 ff15 	bl	8009026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f002 0208 	and.w	r2, r2, #8
 800320a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fb49 	bl	80068a8 <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d122      	bne.n	8003266 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800322c:	2301      	movs	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
 8003230:	e014      	b.n	800325c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb27 	bl	80038a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	3301      	adds	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003262:	429a      	cmp	r2, r3
 8003264:	d3e5      	bcc.n	8003232 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f003 fb1c 	bl	80068a8 <USB_ReadInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327a:	d13b      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800327c:	2301      	movs	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	e02b      	b.n	80032da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3340      	adds	r3, #64	; 0x40
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d115      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	da12      	bge.n	80032d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	333f      	adds	r3, #63	; 0x3f
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fae8 	bl	80038a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	3301      	adds	r3, #1
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d3ce      	bcc.n	8003282 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fad5 	bl	80068a8 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003308:	d155      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800330a:	2301      	movs	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
 800330e:	e045      	b.n	800339c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d12e      	bne.n	8003396 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003338:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800333a:	2b00      	cmp	r3, #0
 800333c:	da2b      	bge.n	8003396 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800334a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800334e:	429a      	cmp	r2, r3
 8003350:	d121      	bne.n	8003396 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003364:	2201      	movs	r2, #1
 8003366:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800338e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003392:	6053      	str	r3, [r2, #4]
            break;
 8003394:	e007      	b.n	80033a6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	3301      	adds	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d3b4      	bcc.n	8003310 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 fa74 	bl	80068a8 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ca:	d10a      	bne.n	80033e2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f005 feaf 	bl	8009130 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 fa5e 	bl	80068a8 <USB_ReadInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d115      	bne.n	8003422 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f005 fe9f 	bl	800914c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	e000      	b.n	8003422 <HAL_PCD_IRQHandler+0x938>
      return;
 8003420:	bf00      	nop
    }
  }
}
 8003422:	3734      	adds	r7, #52	; 0x34
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}

08003428 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_PCD_SetAddress+0x1a>
 800343e:	2302      	movs	r3, #2
 8003440:	e013      	b.n	800346a <HAL_PCD_SetAddress+0x42>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f003 f9bc 	bl	80067d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	4608      	mov	r0, r1
 800347c:	4611      	mov	r1, r2
 800347e:	461a      	mov	r2, r3
 8003480:	4603      	mov	r3, r0
 8003482:	70fb      	strb	r3, [r7, #3]
 8003484:	460b      	mov	r3, r1
 8003486:	803b      	strh	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003494:	2b00      	cmp	r3, #0
 8003496:	da0f      	bge.n	80034b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	3338      	adds	r3, #56	; 0x38
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	3304      	adds	r3, #4
 80034ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	705a      	strb	r2, [r3, #1]
 80034b6:	e00f      	b.n	80034d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034e4:	883a      	ldrh	r2, [r7, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	78ba      	ldrb	r2, [r7, #2]
 80034ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003502:	78bb      	ldrb	r3, [r7, #2]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d102      	bne.n	800350e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_PCD_EP_Open+0xaa>
 8003518:	2302      	movs	r3, #2
 800351a:	e00e      	b.n	800353a <HAL_PCD_EP_Open+0xc8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	4618      	mov	r0, r3
 800352c:	f002 fa3c 	bl	80059a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003538:	7afb      	ldrb	r3, [r7, #11]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800354e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da0f      	bge.n	8003576 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 020f 	and.w	r2, r3, #15
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	3338      	adds	r3, #56	; 0x38
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	3304      	adds	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	705a      	strb	r2, [r3, #1]
 8003574:	e00f      	b.n	8003596 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 020f 	and.w	r2, r3, #15
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	3304      	adds	r3, #4
 800358e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_PCD_EP_Close+0x6e>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e00e      	b.n	80035ce <HAL_PCD_EP_Close+0x8c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	4618      	mov	r0, r3
 80035c0:	f002 fa7a 	bl	8005ab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	460b      	mov	r3, r1
 80035e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e6:	7afb      	ldrb	r3, [r7, #11]
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2200      	movs	r2, #0
 8003610:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003618:	7afb      	ldrb	r3, [r7, #11]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	b2da      	uxtb	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d102      	bne.n	8003632 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003632:	7afb      	ldrb	r3, [r7, #11]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	f002 fd59 	bl	8006100 <USB_EP0StartXfer>
 800364e:	e008      	b.n	8003662 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6979      	ldr	r1, [r7, #20]
 800365e:	f002 fb07 	bl	8005c70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	460b      	mov	r3, r1
 80036aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ac:	7afb      	ldrb	r3, [r7, #11]
 80036ae:	f003 020f 	and.w	r2, r3, #15
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	3338      	adds	r3, #56	; 0x38
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	3304      	adds	r3, #4
 80036c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2201      	movs	r2, #1
 80036da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036dc:	7afb      	ldrb	r3, [r7, #11]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036f6:	7afb      	ldrb	r3, [r7, #11]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	f002 fcf7 	bl	8006100 <USB_EP0StartXfer>
 8003712:	e008      	b.n	8003726 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	6979      	ldr	r1, [r7, #20]
 8003722:	f002 faa5 	bl	8005c70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d901      	bls.n	800374e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e050      	b.n	80037f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800374e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da0f      	bge.n	8003776 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	3338      	adds	r3, #56	; 0x38
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	3304      	adds	r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	705a      	strb	r2, [r3, #1]
 8003774:	e00d      	b.n	8003792 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	4413      	add	r3, r2
 8003788:	3304      	adds	r3, #4
 800378a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_PCD_EP_SetStall+0x82>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e01e      	b.n	80037f0 <HAL_PCD_EP_SetStall+0xc0>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f002 ff35 	bl	8006630 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	b2d9      	uxtb	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037e0:	461a      	mov	r2, r3
 80037e2:	f003 f925 	bl	8006a30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	429a      	cmp	r2, r3
 8003810:	d901      	bls.n	8003816 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e042      	b.n	800389c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800381a:	2b00      	cmp	r3, #0
 800381c:	da0f      	bge.n	800383e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	3338      	adds	r3, #56	; 0x38
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	3304      	adds	r3, #4
 8003834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	705a      	strb	r2, [r3, #1]
 800383c:	e00f      	b.n	800385e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	f003 020f 	and.w	r2, r3, #15
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	b2da      	uxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_PCD_EP_ClrStall+0x86>
 800387a:	2302      	movs	r3, #2
 800387c:	e00e      	b.n	800389c <HAL_PCD_EP_ClrStall+0xa4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	4618      	mov	r0, r3
 800388e:	f002 ff3d 	bl	800670c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da0c      	bge.n	80038d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	3338      	adds	r3, #56	; 0x38
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	3304      	adds	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e00c      	b.n	80038ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	f003 020f 	and.w	r2, r3, #15
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	3304      	adds	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68f9      	ldr	r1, [r7, #12]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 fd5c 	bl	80063b0 <USB_EPStopXfer>
 80038f8:	4603      	mov	r3, r0
 80038fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80038fc:	7afb      	ldrb	r3, [r7, #11]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b08a      	sub	sp, #40	; 0x28
 800390a:	af02      	add	r7, sp, #8
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	3338      	adds	r3, #56	; 0x38
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	429a      	cmp	r2, r3
 8003938:	d901      	bls.n	800393e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06c      	b.n	8003a18 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	429a      	cmp	r2, r3
 8003952:	d902      	bls.n	800395a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3303      	adds	r3, #3
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003962:	e02b      	b.n	80039bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	429a      	cmp	r2, r3
 8003978:	d902      	bls.n	8003980 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	3303      	adds	r3, #3
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6919      	ldr	r1, [r3, #16]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	b2da      	uxtb	r2, r3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003998:	b2db      	uxtb	r3, r3
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	4603      	mov	r3, r0
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f002 fdb0 	bl	8006504 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	441a      	add	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1a      	ldr	r2, [r3, #32]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d809      	bhi.n	80039e6 <PCD_WriteEmptyTxFifo+0xe0>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039da:	429a      	cmp	r2, r3
 80039dc:	d203      	bcs.n	80039e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1be      	bne.n	8003964 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d811      	bhi.n	8003a16 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	2201      	movs	r2, #1
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	6939      	ldr	r1, [r7, #16]
 8003a0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a12:	4013      	ands	r3, r2
 8003a14:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3720      	adds	r7, #32
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	333c      	adds	r3, #60	; 0x3c
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d17b      	bne.n	8003b4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d015      	beq.n	8003a8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4a61      	ldr	r2, [pc, #388]	; (8003be8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	f240 80b9 	bls.w	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80b3 	beq.w	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a82:	461a      	mov	r2, r3
 8003a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a88:	6093      	str	r3, [r2, #8]
 8003a8a:	e0a7      	b.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	6093      	str	r3, [r2, #8]
 8003aa8:	e098      	b.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f040 8093 	bne.w	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	4a4b      	ldr	r2, [pc, #300]	; (8003be8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d90f      	bls.n	8003ade <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ada:	6093      	str	r3, [r2, #8]
 8003adc:	e07e      	b.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	0159      	lsls	r1, r3, #5
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	440b      	add	r3, r1
 8003b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d114      	bne.n	8003b40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f002 ff80 	bl	8006a30 <USB_EP0_OutStart>
 8003b30:	e006      	b.n	8003b40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	441a      	add	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	4619      	mov	r1, r3
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f005 fa38 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
 8003b4c:	e046      	b.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4a26      	ldr	r2, [pc, #152]	; (8003bec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d124      	bne.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b72:	6093      	str	r3, [r2, #8]
 8003b74:	e032      	b.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2320      	movs	r3, #32
 8003b90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f005 fa0f 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
 8003b9e:	e01d      	b.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d114      	bne.n	8003bd0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2100      	movs	r1, #0
 8003bcc:	f002 ff30 	bl	8006a30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f005 f9f0 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	4f54300a 	.word	0x4f54300a
 8003bec:	4f54310a 	.word	0x4f54310a

08003bf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	333c      	adds	r3, #60	; 0x3c
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d90e      	bls.n	8003c44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f005 f9a7 	bl	8008f98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d90c      	bls.n	8003c6c <PCD_EP_OutSetupPacket_int+0x7c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d108      	bne.n	8003c6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c64:	461a      	mov	r2, r3
 8003c66:	2101      	movs	r1, #1
 8003c68:	f002 fee2 	bl	8006a30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	4f54300a 	.word	0x4f54300a

08003c7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c9a:	883b      	ldrh	r3, [r7, #0]
 8003c9c:	0419      	lsls	r1, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca8:	e028      	b.n	8003cfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e00d      	b.n	8003cda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	3340      	adds	r3, #64	; 0x40
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3ec      	bcc.n	8003cbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ce4:	883b      	ldrh	r3, [r7, #0]
 8003ce6:	0418      	lsls	r0, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4302      	orrs	r2, r0
 8003cf4:	3340      	adds	r3, #64	; 0x40
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e267      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d075      	beq.n	8003e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d62:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d00c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b85      	ldr	r3, [pc, #532]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d112      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b82      	ldr	r3, [pc, #520]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d86:	d10b      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	4b7e      	ldr	r3, [pc, #504]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05b      	beq.n	8003e4c <HAL_RCC_OscConfig+0x108>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d157      	bne.n	8003e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e242      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d106      	bne.n	8003db8 <HAL_RCC_OscConfig+0x74>
 8003daa:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a75      	ldr	r2, [pc, #468]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e01d      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003dc2:	4b70      	ldr	r3, [pc, #448]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6f      	ldr	r2, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b6d      	ldr	r3, [pc, #436]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6c      	ldr	r2, [pc, #432]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003ddc:	4b69      	ldr	r3, [pc, #420]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a68      	ldr	r2, [pc, #416]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b66      	ldr	r3, [pc, #408]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a65      	ldr	r2, [pc, #404]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fa74 	bl	80012e8 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fd fa70 	bl	80012e8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e207      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b5b      	ldr	r3, [pc, #364]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0xc0>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fd fa60 	bl	80012e8 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fd fa5c 	bl	80012e8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1f3      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0xe8>
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d063      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d11c      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b44      	ldr	r3, [pc, #272]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d116      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1c7      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4937      	ldr	r1, [pc, #220]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	e03a      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <HAL_RCC_OscConfig+0x244>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fd fa15 	bl	80012e8 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec2:	f7fd fa11 	bl	80012e8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e1a8      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4925      	ldr	r1, [pc, #148]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef6:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x244>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd f9f4 	bl	80012e8 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fd f9f0 	bl	80012e8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e187      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d036      	beq.n	8003f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_RCC_OscConfig+0x248>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fd f9d4 	bl	80012e8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fd f9d0 	bl	80012e8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e167      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x200>
 8003f62:	e01b      	b.n	8003f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_OscConfig+0x248>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fd f9bd 	bl	80012e8 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	e00e      	b.n	8003f90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fd f9b9 	bl	80012e8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d907      	bls.n	8003f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e150      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	42470000 	.word	0x42470000
 8003f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ea      	bne.n	8003f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8097 	beq.w	80040d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fae:	4b81      	ldr	r3, [pc, #516]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	4b7d      	ldr	r3, [pc, #500]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a7c      	ldr	r2, [pc, #496]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b7a      	ldr	r3, [pc, #488]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b77      	ldr	r3, [pc, #476]	; (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe6:	4b74      	ldr	r3, [pc, #464]	; (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	; (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fd f979 	bl	80012e8 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fd f975 	bl	80012e8 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e10c      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_OscConfig+0x474>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <HAL_RCC_OscConfig+0x2ea>
 8004020:	4b64      	ldr	r3, [pc, #400]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a63      	ldr	r2, [pc, #396]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
 800402c:	e01c      	b.n	8004068 <HAL_RCC_OscConfig+0x324>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b05      	cmp	r3, #5
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x30c>
 8004036:	4b5f      	ldr	r3, [pc, #380]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a5e      	ldr	r2, [pc, #376]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	4b5c      	ldr	r3, [pc, #368]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a5b      	ldr	r2, [pc, #364]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
 800404e:	e00b      	b.n	8004068 <HAL_RCC_OscConfig+0x324>
 8004050:	4b58      	ldr	r3, [pc, #352]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	4a57      	ldr	r2, [pc, #348]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	6713      	str	r3, [r2, #112]	; 0x70
 800405c:	4b55      	ldr	r3, [pc, #340]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	4a54      	ldr	r2, [pc, #336]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004062:	f023 0304 	bic.w	r3, r3, #4
 8004066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd f93a 	bl	80012e8 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd f936 	bl	80012e8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0cb      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0ee      	beq.n	8004078 <HAL_RCC_OscConfig+0x334>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409c:	f7fd f924 	bl	80012e8 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fd f920 	bl	80012e8 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0b5      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ba:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ee      	bne.n	80040a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040cc:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	4a38      	ldr	r2, [pc, #224]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80a1 	beq.w	8004224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e2:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d05c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d141      	bne.n	800417a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b31      	ldr	r3, [pc, #196]	; (80041bc <HAL_RCC_OscConfig+0x478>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fd f8f4 	bl	80012e8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd f8f0 	bl	80012e8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e087      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	019b      	lsls	r3, r3, #6
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	491b      	ldr	r1, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x478>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fd f8c9 	bl	80012e8 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415a:	f7fd f8c5 	bl	80012e8 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e05c      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x416>
 8004178:	e054      	b.n	8004224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_OscConfig+0x478>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fd f8b2 	bl	80012e8 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd f8ae 	bl	80012e8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e045      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCC_OscConfig+0x470>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x444>
 80041a6:	e03d      	b.n	8004224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e038      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x4ec>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d028      	beq.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d121      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d11a      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d111      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d107      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800

08004234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0cc      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b68      	ldr	r3, [pc, #416]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d90c      	bls.n	8004270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0b8      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004288:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a58      	ldr	r2, [pc, #352]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a0:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	494d      	ldr	r1, [pc, #308]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d044      	beq.n	8004354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d119      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e06f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e067      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4934      	ldr	r1, [pc, #208]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fc ffe0 	bl	80012e8 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fc ffdc 	bl	80012e8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e04f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 020c 	and.w	r2, r3, #12
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1eb      	bne.n	800432c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d20c      	bcs.n	800437c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e032      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004388:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4916      	ldr	r1, [pc, #88]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	490e      	ldr	r1, [pc, #56]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ba:	f000 f821 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	490a      	ldr	r1, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc ff40 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08009ed8 	.word	0x08009ed8
 80043f8:	20000000 	.word	0x20000000
 80043fc:	20000004 	.word	0x20000004

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b090      	sub	sp, #64	; 0x40
 8004406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
 800440c:	2300      	movs	r3, #0
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004410:	2300      	movs	r3, #0
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d00d      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x40>
 8004424:	2b08      	cmp	r3, #8
 8004426:	f200 80a1 	bhi.w	800456c <HAL_RCC_GetSysClockFreq+0x16c>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x34>
 800442e:	2b04      	cmp	r3, #4
 8004430:	d003      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x3a>
 8004432:	e09b      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <HAL_RCC_GetSysClockFreq+0x184>)
 8004436:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004438:	e09b      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800443a:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800443c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800443e:	e098      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004440:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800444a:	4b4d      	ldr	r3, [pc, #308]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d028      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	2200      	movs	r2, #0
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	627a      	str	r2, [r7, #36]	; 0x24
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004468:	2100      	movs	r1, #0
 800446a:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800446c:	fb03 f201 	mul.w	r2, r3, r1
 8004470:	2300      	movs	r3, #0
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	4413      	add	r3, r2
 8004478:	4a43      	ldr	r2, [pc, #268]	; (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800447a:	fba0 1202 	umull	r1, r2, r0, r2
 800447e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004480:	460a      	mov	r2, r1
 8004482:	62ba      	str	r2, [r7, #40]	; 0x28
 8004484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004486:	4413      	add	r3, r2
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	2200      	movs	r2, #0
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	61fa      	str	r2, [r7, #28]
 8004492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004496:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800449a:	f7fb fef1 	bl	8000280 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4613      	mov	r3, r2
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a6:	e053      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a8:	4b35      	ldr	r3, [pc, #212]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	099b      	lsrs	r3, r3, #6
 80044ae:	2200      	movs	r2, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	617a      	str	r2, [r7, #20]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044ba:	f04f 0b00 	mov.w	fp, #0
 80044be:	4652      	mov	r2, sl
 80044c0:	465b      	mov	r3, fp
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	0159      	lsls	r1, r3, #5
 80044cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d0:	0150      	lsls	r0, r2, #5
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	ebb2 080a 	subs.w	r8, r2, sl
 80044da:	eb63 090b 	sbc.w	r9, r3, fp
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044f2:	ebb2 0408 	subs.w	r4, r2, r8
 80044f6:	eb63 0509 	sbc.w	r5, r3, r9
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	00eb      	lsls	r3, r5, #3
 8004504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004508:	00e2      	lsls	r2, r4, #3
 800450a:	4614      	mov	r4, r2
 800450c:	461d      	mov	r5, r3
 800450e:	eb14 030a 	adds.w	r3, r4, sl
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	eb45 030b 	adc.w	r3, r5, fp
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004526:	4629      	mov	r1, r5
 8004528:	028b      	lsls	r3, r1, #10
 800452a:	4621      	mov	r1, r4
 800452c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004530:	4621      	mov	r1, r4
 8004532:	028a      	lsls	r2, r1, #10
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	2200      	movs	r2, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	60fa      	str	r2, [r7, #12]
 8004540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004544:	f7fb fe9c 	bl	8000280 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetSysClockFreq+0x184>)
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004574:	4618      	mov	r0, r3
 8004576:	3740      	adds	r7, #64	; 0x40
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	017d7840 	.word	0x017d7840

0800458c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000000 	.word	0x20000000

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e041      	b.n	800463a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc fcce 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 fb40 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d001      	beq.n	800465c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e03c      	b.n	80046d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <HAL_TIM_Base_Start+0xa0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d018      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004676:	d013      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <HAL_TIM_Base_Start+0xa4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00e      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a19      	ldr	r2, [pc, #100]	; (80046ec <HAL_TIM_Base_Start+0xa8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d009      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <HAL_TIM_Base_Start+0xac>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIM_Base_Start+0x5c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <HAL_TIM_Base_Start+0xb0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d010      	beq.n	80046d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	e007      	b.n	80046d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40014000 	.word	0x40014000

080046f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e041      	b.n	800478e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f839 	bl	8004796 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3304      	adds	r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f000 fa96 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d122      	bne.n	8004806 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d11b      	bne.n	8004806 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0202 	mvn.w	r2, #2
 80047d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fa1c 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 80047f2:	e005      	b.n	8004800 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fa0e 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fa1f 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d122      	bne.n	800485a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d11b      	bne.n	800485a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f06f 0204 	mvn.w	r2, #4
 800482a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f9f2 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004846:	e005      	b.n	8004854 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f9e4 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9f5 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d122      	bne.n	80048ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b08      	cmp	r3, #8
 8004874:	d11b      	bne.n	80048ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f06f 0208 	mvn.w	r2, #8
 800487e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2204      	movs	r2, #4
 8004884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f9c8 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 800489a:	e005      	b.n	80048a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f9ba 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f9cb 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d122      	bne.n	8004902 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d11b      	bne.n	8004902 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f06f 0210 	mvn.w	r2, #16
 80048d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2208      	movs	r2, #8
 80048d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f99e 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 80048ee:	e005      	b.n	80048fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f990 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9a1 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10e      	bne.n	800492e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0201 	mvn.w	r2, #1
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f96a 	bl	8004c02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004938:	2b80      	cmp	r3, #128	; 0x80
 800493a:	d10e      	bne.n	800495a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d107      	bne.n	800495a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fca5 	bl	80052a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d10e      	bne.n	8004986 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d107      	bne.n	8004986 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f966 	bl	8004c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b20      	cmp	r3, #32
 8004992:	d10e      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d107      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0220 	mvn.w	r2, #32
 80049aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fc6f 	bl	8005290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_TIM_OC_ConfigChannel+0x1e>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e048      	b.n	8004a6c <HAL_TIM_OC_ConfigChannel+0xb0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d839      	bhi.n	8004a5c <HAL_TIM_OC_ConfigChannel+0xa0>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a25 	.word	0x08004a25
 80049f4:	08004a5d 	.word	0x08004a5d
 80049f8:	08004a5d 	.word	0x08004a5d
 80049fc:	08004a5d 	.word	0x08004a5d
 8004a00:	08004a33 	.word	0x08004a33
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a5d 	.word	0x08004a5d
 8004a0c:	08004a5d 	.word	0x08004a5d
 8004a10:	08004a41 	.word	0x08004a41
 8004a14:	08004a5d 	.word	0x08004a5d
 8004a18:	08004a5d 	.word	0x08004a5d
 8004a1c:	08004a5d 	.word	0x08004a5d
 8004a20:	08004a4f 	.word	0x08004a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f99c 	bl	8004d68 <TIM_OC1_SetConfig>
      break;
 8004a30:	e017      	b.n	8004a62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 f9fb 	bl	8004e34 <TIM_OC2_SetConfig>
      break;
 8004a3e:	e010      	b.n	8004a62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fa60 	bl	8004f0c <TIM_OC3_SetConfig>
      break;
 8004a4c:	e009      	b.n	8004a62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fac3 	bl	8004fe0 <TIM_OC4_SetConfig>
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_ConfigClockSource+0x1c>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e0b4      	b.n	8004bfa <HAL_TIM_ConfigClockSource+0x186>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac8:	d03e      	beq.n	8004b48 <HAL_TIM_ConfigClockSource+0xd4>
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ace:	f200 8087 	bhi.w	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	f000 8086 	beq.w	8004be6 <HAL_TIM_ConfigClockSource+0x172>
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ade:	d87f      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b70      	cmp	r3, #112	; 0x70
 8004ae2:	d01a      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0xa6>
 8004ae4:	2b70      	cmp	r3, #112	; 0x70
 8004ae6:	d87b      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b60      	cmp	r3, #96	; 0x60
 8004aea:	d050      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x11a>
 8004aec:	2b60      	cmp	r3, #96	; 0x60
 8004aee:	d877      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b50      	cmp	r3, #80	; 0x50
 8004af2:	d03c      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0xfa>
 8004af4:	2b50      	cmp	r3, #80	; 0x50
 8004af6:	d873      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d058      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x13a>
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d86f      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b30      	cmp	r3, #48	; 0x30
 8004b02:	d064      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x15a>
 8004b04:	2b30      	cmp	r3, #48	; 0x30
 8004b06:	d86b      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d060      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x15a>
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d867      	bhi.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d05c      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x15a>
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d05a      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x15a>
 8004b18:	e062      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6899      	ldr	r1, [r3, #8]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f000 fb23 	bl	8005174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	609a      	str	r2, [r3, #8]
      break;
 8004b46:	e04f      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6899      	ldr	r1, [r3, #8]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f000 fb0c 	bl	8005174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b6a:	609a      	str	r2, [r3, #8]
      break;
 8004b6c:	e03c      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f000 fa80 	bl	8005080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2150      	movs	r1, #80	; 0x50
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fad9 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004b8c:	e02c      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f000 fa9f 	bl	80050de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2160      	movs	r1, #96	; 0x60
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fac9 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004bac:	e01c      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6859      	ldr	r1, [r3, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f000 fa60 	bl	8005080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2140      	movs	r1, #64	; 0x40
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fab9 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004bcc:	e00c      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f000 fab0 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004bde:	e003      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
      break;
 8004be4:	e000      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a31      	ldr	r2, [pc, #196]	; (8004d50 <TIM_Base_SetConfig+0xe8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <TIM_Base_SetConfig+0xec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <TIM_Base_SetConfig+0xf0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d017      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <TIM_Base_SetConfig+0xe8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <TIM_Base_SetConfig+0xec>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <TIM_Base_SetConfig+0xf0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <TIM_Base_SetConfig+0xf4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <TIM_Base_SetConfig+0xf8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <TIM_Base_SetConfig+0xfc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d103      	bne.n	8004d38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	615a      	str	r2, [r3, #20]
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800

08004d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f023 0201 	bic.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 0302 	bic.w	r3, r3, #2
 8004db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <TIM_OC1_SetConfig+0xc8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10c      	bne.n	8004dde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0308 	bic.w	r3, r3, #8
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <TIM_OC1_SetConfig+0xc8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d111      	bne.n	8004e0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40010000 	.word	0x40010000

08004e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0210 	bic.w	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 0320 	bic.w	r3, r3, #32
 8004e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <TIM_OC2_SetConfig+0xd4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d10d      	bne.n	8004eb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <TIM_OC2_SetConfig+0xd4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d113      	bne.n	8004ee0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000

08004f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0303 	bic.w	r3, r3, #3
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <TIM_OC3_SetConfig+0xd0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d10d      	bne.n	8004f86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a14      	ldr	r2, [pc, #80]	; (8004fdc <TIM_OC3_SetConfig+0xd0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d113      	bne.n	8004fb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40010000 	.word	0x40010000

08004fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <TIM_OC4_SetConfig+0x9c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d109      	bne.n	8005054 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	019b      	lsls	r3, r3, #6
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000

08005080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f023 030a 	bic.w	r3, r3, #10
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0210 	bic.w	r2, r3, #16
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800511a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	f043 0307 	orr.w	r3, r3, #7
 8005160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	431a      	orrs	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e050      	b.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d018      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d013      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a18      	ldr	r2, [pc, #96]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a16      	ldr	r2, [pc, #88]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a13      	ldr	r2, [pc, #76]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10c      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4313      	orrs	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40014000 	.word	0x40014000

08005290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b8:	b084      	sub	sp, #16
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	f107 001c 	add.w	r0, r7, #28
 80052c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d122      	bne.n	8005316 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d105      	bne.n	800530a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 fbee 	bl	8006aec <USB_CoreReset>
 8005310:	4603      	mov	r3, r0
 8005312:	73fb      	strb	r3, [r7, #15]
 8005314:	e01a      	b.n	800534c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f001 fbe2 	bl	8006aec <USB_CoreReset>
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800532c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
 800533e:	e005      	b.n	800534c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10b      	bne.n	800536a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f043 0206 	orr.w	r2, r3, #6
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005376:	b004      	add	sp, #16
 8005378:	4770      	bx	lr
	...

0800537c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d165      	bne.n	800545c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a41      	ldr	r2, [pc, #260]	; (8005498 <USB_SetTurnaroundTime+0x11c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d906      	bls.n	80053a6 <USB_SetTurnaroundTime+0x2a>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a40      	ldr	r2, [pc, #256]	; (800549c <USB_SetTurnaroundTime+0x120>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d202      	bcs.n	80053a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053a0:	230f      	movs	r3, #15
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e062      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a3c      	ldr	r2, [pc, #240]	; (800549c <USB_SetTurnaroundTime+0x120>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d306      	bcc.n	80053bc <USB_SetTurnaroundTime+0x40>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4a3b      	ldr	r2, [pc, #236]	; (80054a0 <USB_SetTurnaroundTime+0x124>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d202      	bcs.n	80053bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053b6:	230e      	movs	r3, #14
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e057      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a38      	ldr	r2, [pc, #224]	; (80054a0 <USB_SetTurnaroundTime+0x124>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d306      	bcc.n	80053d2 <USB_SetTurnaroundTime+0x56>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a37      	ldr	r2, [pc, #220]	; (80054a4 <USB_SetTurnaroundTime+0x128>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d202      	bcs.n	80053d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053cc:	230d      	movs	r3, #13
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	e04c      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4a33      	ldr	r2, [pc, #204]	; (80054a4 <USB_SetTurnaroundTime+0x128>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d306      	bcc.n	80053e8 <USB_SetTurnaroundTime+0x6c>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a32      	ldr	r2, [pc, #200]	; (80054a8 <USB_SetTurnaroundTime+0x12c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d802      	bhi.n	80053e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053e2:	230c      	movs	r3, #12
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e041      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <USB_SetTurnaroundTime+0x12c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d906      	bls.n	80053fe <USB_SetTurnaroundTime+0x82>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a2e      	ldr	r2, [pc, #184]	; (80054ac <USB_SetTurnaroundTime+0x130>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d802      	bhi.n	80053fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053f8:	230b      	movs	r3, #11
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e036      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <USB_SetTurnaroundTime+0x130>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d906      	bls.n	8005414 <USB_SetTurnaroundTime+0x98>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a29      	ldr	r2, [pc, #164]	; (80054b0 <USB_SetTurnaroundTime+0x134>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d802      	bhi.n	8005414 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800540e:	230a      	movs	r3, #10
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e02b      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a26      	ldr	r2, [pc, #152]	; (80054b0 <USB_SetTurnaroundTime+0x134>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d906      	bls.n	800542a <USB_SetTurnaroundTime+0xae>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <USB_SetTurnaroundTime+0x138>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d202      	bcs.n	800542a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005424:	2309      	movs	r3, #9
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e020      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4a21      	ldr	r2, [pc, #132]	; (80054b4 <USB_SetTurnaroundTime+0x138>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d306      	bcc.n	8005440 <USB_SetTurnaroundTime+0xc4>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a20      	ldr	r2, [pc, #128]	; (80054b8 <USB_SetTurnaroundTime+0x13c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d802      	bhi.n	8005440 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800543a:	2308      	movs	r3, #8
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e015      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <USB_SetTurnaroundTime+0x13c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d906      	bls.n	8005456 <USB_SetTurnaroundTime+0xda>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <USB_SetTurnaroundTime+0x140>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d202      	bcs.n	8005456 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005450:	2307      	movs	r3, #7
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e00a      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005456:	2306      	movs	r3, #6
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	e007      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005462:	2309      	movs	r3, #9
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e001      	b.n	800546c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005468:	2309      	movs	r3, #9
 800546a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	029b      	lsls	r3, r3, #10
 8005480:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005484:	431a      	orrs	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	00d8acbf 	.word	0x00d8acbf
 800549c:	00e4e1c0 	.word	0x00e4e1c0
 80054a0:	00f42400 	.word	0x00f42400
 80054a4:	01067380 	.word	0x01067380
 80054a8:	011a499f 	.word	0x011a499f
 80054ac:	01312cff 	.word	0x01312cff
 80054b0:	014ca43f 	.word	0x014ca43f
 80054b4:	016e3600 	.word	0x016e3600
 80054b8:	01a6ab1f 	.word	0x01a6ab1f
 80054bc:	01e84800 	.word	0x01e84800

080054c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f043 0201 	orr.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f023 0201 	bic.w	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d115      	bne.n	8005552 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005532:	2001      	movs	r0, #1
 8005534:	f7fb fee4 	bl	8001300 <HAL_Delay>
      ms++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 fa45 	bl	80069ce <USB_GetMode>
 8005544:	4603      	mov	r3, r0
 8005546:	2b01      	cmp	r3, #1
 8005548:	d01e      	beq.n	8005588 <USB_SetCurrentMode+0x84>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b31      	cmp	r3, #49	; 0x31
 800554e:	d9f0      	bls.n	8005532 <USB_SetCurrentMode+0x2e>
 8005550:	e01a      	b.n	8005588 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d115      	bne.n	8005584 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005564:	2001      	movs	r0, #1
 8005566:	f7fb fecb 	bl	8001300 <HAL_Delay>
      ms++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 fa2c 	bl	80069ce <USB_GetMode>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <USB_SetCurrentMode+0x84>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b31      	cmp	r3, #49	; 0x31
 8005580:	d9f0      	bls.n	8005564 <USB_SetCurrentMode+0x60>
 8005582:	e001      	b.n	8005588 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e005      	b.n	8005594 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b32      	cmp	r3, #50	; 0x32
 800558c:	d101      	bne.n	8005592 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800559c:	b084      	sub	sp, #16
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e009      	b.n	80055d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3340      	adds	r3, #64	; 0x40
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	2200      	movs	r2, #0
 80055c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	3301      	adds	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b0e      	cmp	r3, #14
 80055d4:	d9f2      	bls.n	80055bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11c      	bne.n	8005616 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ea:	f043 0302 	orr.w	r3, r3, #2
 80055ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
 8005614:	e00b      	b.n	800562e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005634:	461a      	mov	r2, r3
 8005636:	2300      	movs	r3, #0
 8005638:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005640:	4619      	mov	r1, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005648:	461a      	mov	r2, r3
 800564a:	680b      	ldr	r3, [r1, #0]
 800564c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10c      	bne.n	800566e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800565a:	2100      	movs	r1, #0
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f965 	bl	800592c <USB_SetDevSpeed>
 8005662:	e008      	b.n	8005676 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005664:	2101      	movs	r1, #1
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f960 	bl	800592c <USB_SetDevSpeed>
 800566c:	e003      	b.n	8005676 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800566e:	2103      	movs	r1, #3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f95b 	bl	800592c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005676:	2110      	movs	r1, #16
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8f3 	bl	8005864 <USB_FlushTxFifo>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f91f 	bl	80058cc <USB_FlushRxFifo>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	461a      	mov	r2, r3
 80056a0:	2300      	movs	r3, #0
 80056a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	461a      	mov	r2, r3
 80056ac:	2300      	movs	r3, #0
 80056ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	461a      	mov	r2, r3
 80056b8:	2300      	movs	r3, #0
 80056ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	e043      	b.n	800574a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d8:	d118      	bne.n	800570c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	461a      	mov	r2, r3
 80056ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e013      	b.n	800571e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	461a      	mov	r2, r3
 8005704:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e008      	b.n	800571e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	461a      	mov	r2, r3
 800571a:	2300      	movs	r3, #0
 800571c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	461a      	mov	r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	461a      	mov	r2, r3
 800573e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005742:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	3301      	adds	r3, #1
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	429a      	cmp	r2, r3
 8005750:	d3b7      	bcc.n	80056c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e043      	b.n	80057e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800576a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800576e:	d118      	bne.n	80057a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	461a      	mov	r2, r3
 8005784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e013      	b.n	80057b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	461a      	mov	r2, r3
 800579a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	e008      	b.n	80057b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	461a      	mov	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	461a      	mov	r2, r3
 80057c2:	2300      	movs	r3, #0
 80057c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	461a      	mov	r2, r3
 80057d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	3301      	adds	r3, #1
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d3b7      	bcc.n	8005758 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005808:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f043 0210 	orr.w	r2, r3, #16
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <USB_DevInit+0x2c4>)
 8005822:	4313      	orrs	r3, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f043 0208 	orr.w	r2, r3, #8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800583a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d107      	bne.n	8005850 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005848:	f043 0304 	orr.w	r3, r3, #4
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800585c:	b004      	add	sp, #16
 800585e:	4770      	bx	lr
 8005860:	803c3800 	.word	0x803c3800

08005864 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3301      	adds	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <USB_FlushTxFifo+0x64>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e01b      	b.n	80058bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	daf2      	bge.n	8005872 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	019b      	lsls	r3, r3, #6
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a08      	ldr	r2, [pc, #32]	; (80058c8 <USB_FlushTxFifo+0x64>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e006      	b.n	80058bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d0f0      	beq.n	800589c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	00030d40 	.word	0x00030d40

080058cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a11      	ldr	r2, [pc, #68]	; (8005928 <USB_FlushRxFifo+0x5c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e018      	b.n	800591c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	daf2      	bge.n	80058d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2210      	movs	r2, #16
 80058fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a08      	ldr	r2, [pc, #32]	; (8005928 <USB_FlushRxFifo+0x5c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e006      	b.n	800591c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b10      	cmp	r3, #16
 8005918:	d0f0      	beq.n	80058fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	00030d40 	.word	0x00030d40

0800592c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800595e:	b480      	push	{r7}
 8005960:	b087      	sub	sp, #28
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0306 	and.w	r3, r3, #6
 8005976:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800597e:	2300      	movs	r3, #0
 8005980:	75fb      	strb	r3, [r7, #23]
 8005982:	e00a      	b.n	800599a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d002      	beq.n	8005990 <USB_GetDevSpeed+0x32>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b06      	cmp	r3, #6
 800598e:	d102      	bne.n	8005996 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005990:	2302      	movs	r3, #2
 8005992:	75fb      	strb	r3, [r7, #23]
 8005994:	e001      	b.n	800599a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005996:	230f      	movs	r3, #15
 8005998:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
}
 800599c:	4618      	mov	r0, r3
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d13a      	bne.n	8005a3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	2101      	movs	r1, #1
 80059d6:	fa01 f303 	lsl.w	r3, r1, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d155      	bne.n	8005aa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	791b      	ldrb	r3, [r3, #4]
 8005a16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	059b      	lsls	r3, r3, #22
 8005a1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a20:	4313      	orrs	r3, r2
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	e036      	b.n	8005aa8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a40:	69da      	ldr	r2, [r3, #28]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a50:	041b      	lsls	r3, r3, #16
 8005a52:	68f9      	ldr	r1, [r7, #12]
 8005a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11a      	bne.n	8005aa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	791b      	ldrb	r3, [r3, #4]
 8005a8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	4313      	orrs	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d161      	bne.n	8005b98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aea:	d11f      	bne.n	8005b2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	43db      	mvns	r3, r3
 8005b46:	68f9      	ldr	r1, [r7, #12]
 8005b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	2101      	movs	r1, #1
 8005b62:	fa01 f303 	lsl.w	r3, r1, r3
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b70:	4013      	ands	r3, r2
 8005b72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	0159      	lsls	r1, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	440b      	add	r3, r1
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4b35      	ldr	r3, [pc, #212]	; (8005c68 <USB_DeactivateEndpoint+0x1b0>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	600b      	str	r3, [r1, #0]
 8005b96:	e060      	b.n	8005c5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bae:	d11f      	bne.n	8005bf0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f303 	lsl.w	r3, r1, r3
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c10:	4013      	ands	r3, r2
 8005c12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	2101      	movs	r1, #1
 8005c26:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c34:	4013      	ands	r3, r2
 8005c36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	0159      	lsls	r1, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	440b      	add	r3, r1
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	4619      	mov	r1, r3
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <USB_DeactivateEndpoint+0x1b4>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	ec337800 	.word	0xec337800
 8005c6c:	eff37800 	.word	0xeff37800

08005c70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	; 0x28
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	785b      	ldrb	r3, [r3, #1]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	f040 815c 	bne.w	8005f4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d132      	bne.n	8005d00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf8:	0cdb      	lsrs	r3, r3, #19
 8005cfa:	04db      	lsls	r3, r3, #19
 8005cfc:	6113      	str	r3, [r2, #16]
 8005cfe:	e074      	b.n	8005dea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1a:	0cdb      	lsrs	r3, r3, #19
 8005d1c:	04db      	lsls	r3, r3, #19
 8005d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6999      	ldr	r1, [r3, #24]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	440b      	add	r3, r1
 8005d5c:	1e59      	subs	r1, r3, #1
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d68:	4b9d      	ldr	r3, [pc, #628]	; (8005fe0 <USB_EPStartXfer+0x370>)
 8005d6a:	400b      	ands	r3, r1
 8005d6c:	69b9      	ldr	r1, [r7, #24]
 8005d6e:	0148      	lsls	r0, r1, #5
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	4401      	add	r1, r0
 8005d74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d92:	69b9      	ldr	r1, [r7, #24]
 8005d94:	0148      	lsls	r0, r1, #5
 8005d96:	69f9      	ldr	r1, [r7, #28]
 8005d98:	4401      	add	r1, r0
 8005d9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	791b      	ldrb	r3, [r3, #4]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d11f      	bne.n	8005dea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005dc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005de8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d14b      	bne.n	8005e88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	461a      	mov	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	791b      	ldrb	r3, [r3, #4]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d128      	bne.n	8005e66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d110      	bne.n	8005e46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	e00f      	b.n	8005e66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e133      	b.n	80060f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ea6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	791b      	ldrb	r3, [r3, #4]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d015      	beq.n	8005edc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 811b 	beq.w	80060f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	2101      	movs	r1, #1
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	69f9      	ldr	r1, [r7, #28]
 8005ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	634b      	str	r3, [r1, #52]	; 0x34
 8005eda:	e109      	b.n	80060f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d110      	bne.n	8005f0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	e00f      	b.n	8005f2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6919      	ldr	r1, [r3, #16]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	781a      	ldrb	r2, [r3, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	b298      	uxth	r0, r3
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fade 	bl	8006504 <USB_WritePacket>
 8005f48:	e0d2      	b.n	80060f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f64:	0cdb      	lsrs	r3, r3, #19
 8005f66:	04db      	lsls	r3, r3, #19
 8005f68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d126      	bne.n	8005fe4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fac:	69b9      	ldr	r1, [r7, #24]
 8005fae:	0148      	lsls	r0, r1, #5
 8005fb0:	69f9      	ldr	r1, [r7, #28]
 8005fb2:	4401      	add	r1, r0
 8005fb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fda:	6113      	str	r3, [r2, #16]
 8005fdc:	e03a      	b.n	8006054 <USB_EPStartXfer+0x3e4>
 8005fde:	bf00      	nop
 8005fe0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	699a      	ldr	r2, [r3, #24]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	1e5a      	subs	r2, r3, #1
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	8afa      	ldrh	r2, [r7, #22]
 8006000:	fb03 f202 	mul.w	r2, r3, r2
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	8afb      	ldrh	r3, [r7, #22]
 8006018:	04d9      	lsls	r1, r3, #19
 800601a:	4b38      	ldr	r3, [pc, #224]	; (80060fc <USB_EPStartXfer+0x48c>)
 800601c:	400b      	ands	r3, r1
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	0148      	lsls	r0, r1, #5
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	4401      	add	r1, r0
 8006026:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800602a:	4313      	orrs	r3, r2
 800602c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	0148      	lsls	r0, r1, #5
 8006048:	69f9      	ldr	r1, [r7, #28]
 800604a:	4401      	add	r1, r0
 800604c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006050:	4313      	orrs	r3, r2
 8006052:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10d      	bne.n	8006076 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6919      	ldr	r1, [r3, #16]
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	460a      	mov	r2, r1
 8006074:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	791b      	ldrb	r3, [r3, #4]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d128      	bne.n	80060d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d110      	bne.n	80060b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e00f      	b.n	80060d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	1ff80000 	.word	0x1ff80000

08006100 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	785b      	ldrb	r3, [r3, #1]
 800611c:	2b01      	cmp	r3, #1
 800611e:	f040 80ce 	bne.w	80062be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d132      	bne.n	8006190 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	440a      	add	r2, r1
 8006140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800614c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006168:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800616c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006188:	0cdb      	lsrs	r3, r3, #19
 800618a:	04db      	lsls	r3, r3, #19
 800618c:	6113      	str	r3, [r2, #16]
 800618e:	e04e      	b.n	800622e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061aa:	0cdb      	lsrs	r3, r3, #19
 80061ac:	04db      	lsls	r3, r3, #19
 80061ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	699a      	ldr	r2, [r3, #24]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d903      	bls.n	80061e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621e:	6939      	ldr	r1, [r7, #16]
 8006220:	0148      	lsls	r0, r1, #5
 8006222:	6979      	ldr	r1, [r7, #20]
 8006224:	4401      	add	r1, r0
 8006226:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800622a:	4313      	orrs	r3, r2
 800622c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d11e      	bne.n	8006272 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d009      	beq.n	8006250 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	461a      	mov	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e097      	b.n	80063a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006290:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8083 	beq.w	80063a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	2101      	movs	r1, #1
 80062ae:	fa01 f303 	lsl.w	r3, r1, r3
 80062b2:	6979      	ldr	r1, [r7, #20]
 80062b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b8:	4313      	orrs	r3, r2
 80062ba:	634b      	str	r3, [r1, #52]	; 0x34
 80062bc:	e071      	b.n	80063a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d8:	0cdb      	lsrs	r3, r3, #19
 80062da:	04db      	lsls	r3, r3, #19
 80062dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006300:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006338:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006350:	6939      	ldr	r1, [r7, #16]
 8006352:	0148      	lsls	r0, r1, #5
 8006354:	6979      	ldr	r1, [r7, #20]
 8006356:	4401      	add	r1, r0
 8006358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800635c:	4313      	orrs	r3, r2
 800635e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d10d      	bne.n	8006382 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6919      	ldr	r1, [r3, #16]
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	460a      	mov	r2, r1
 8006380:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d14a      	bne.n	8006464 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e6:	f040 8086 	bne.w	80064f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800640c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	7812      	ldrb	r2, [r2, #0]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006430:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f242 7210 	movw	r2, #10000	; 0x2710
 800643e:	4293      	cmp	r3, r2
 8006440:	d902      	bls.n	8006448 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
          break;
 8006446:	e056      	b.n	80064f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800645c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006460:	d0e7      	beq.n	8006432 <USB_EPStopXfer+0x82>
 8006462:	e048      	b.n	80064f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800647c:	d13b      	bne.n	80064f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800649c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	7812      	ldrb	r2, [r2, #0]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3301      	adds	r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d902      	bls.n	80064dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75fb      	strb	r3, [r7, #23]
          break;
 80064da:	e00c      	b.n	80064f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f4:	d0e7      	beq.n	80064c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	460b      	mov	r3, r1
 8006514:	71fb      	strb	r3, [r7, #7]
 8006516:	4613      	mov	r3, r2
 8006518:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d123      	bne.n	8006572 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800652a:	88bb      	ldrh	r3, [r7, #4]
 800652c:	3303      	adds	r3, #3
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006532:	2300      	movs	r3, #0
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	e018      	b.n	800656a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	031a      	lsls	r2, r3, #12
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	4413      	add	r3, r2
 8006540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006544:	461a      	mov	r2, r3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	3301      	adds	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	3301      	adds	r3, #1
 8006556:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	3301      	adds	r3, #1
 8006562:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	3301      	adds	r3, #1
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	429a      	cmp	r2, r3
 8006570:	d3e2      	bcc.n	8006538 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3724      	adds	r7, #36	; 0x24
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006580:	b480      	push	{r7}
 8006582:	b08b      	sub	sp, #44	; 0x2c
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	089b      	lsrs	r3, r3, #2
 800659a:	b29b      	uxth	r3, r3
 800659c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065a6:	2300      	movs	r3, #0
 80065a8:	623b      	str	r3, [r7, #32]
 80065aa:	e014      	b.n	80065d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	3301      	adds	r3, #1
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	3301      	adds	r3, #1
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	3301      	adds	r3, #1
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	3301      	adds	r3, #1
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	3301      	adds	r3, #1
 80065d4:	623b      	str	r3, [r7, #32]
 80065d6:	6a3a      	ldr	r2, [r7, #32]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d3e6      	bcc.n	80065ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065de:	8bfb      	ldrh	r3, [r7, #30]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01e      	beq.n	8006622 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ee:	461a      	mov	r2, r3
 80065f0:	f107 0310 	add.w	r3, r7, #16
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
 8006604:	b2da      	uxtb	r2, r3
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	701a      	strb	r2, [r3, #0]
      i++;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	3301      	adds	r3, #1
 800660e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	3301      	adds	r3, #1
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006616:	8bfb      	ldrh	r3, [r7, #30]
 8006618:	3b01      	subs	r3, #1
 800661a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800661c:	8bfb      	ldrh	r3, [r7, #30]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ea      	bne.n	80065f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006624:	4618      	mov	r0, r3
 8006626:	372c      	adds	r7, #44	; 0x2c
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d12c      	bne.n	80066a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	db12      	blt.n	8006684 <USB_EPSetStall+0x54>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00f      	beq.n	8006684 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006682:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	e02b      	b.n	80066fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	db12      	blt.n	80066de <USB_EPSetStall+0xae>
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00f      	beq.n	80066de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d128      	bne.n	800677a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	440a      	add	r2, r1
 800673e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006746:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	791b      	ldrb	r3, [r3, #4]
 800674c:	2b03      	cmp	r3, #3
 800674e:	d003      	beq.n	8006758 <USB_EPClearStall+0x4c>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	791b      	ldrb	r3, [r3, #4]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d138      	bne.n	80067ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	e027      	b.n	80067ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	440a      	add	r2, r1
 8006790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006798:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	791b      	ldrb	r3, [r3, #4]
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d003      	beq.n	80067aa <USB_EPClearStall+0x9e>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	791b      	ldrb	r3, [r3, #4]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d10f      	bne.n	80067ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800680c:	68f9      	ldr	r1, [r7, #12]
 800680e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006812:	4313      	orrs	r3, r2
 8006814:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006852:	f023 0302 	bic.w	r3, r3, #2
 8006856:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006880:	f023 0303 	bic.w	r3, r3, #3
 8006884:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006894:	f043 0302 	orr.w	r3, r3, #2
 8006898:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4013      	ands	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	4013      	ands	r3, r2
 80068f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	0c1b      	lsrs	r3, r3, #16
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	b29b      	uxth	r3, r3
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4013      	ands	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006964:	68bb      	ldr	r3, [r7, #8]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	fa22 f303 	lsr.w	r3, r2, r3
 80069a2:	01db      	lsls	r3, r3, #7
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4013      	ands	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069c0:	68bb      	ldr	r3, [r7, #8]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f003 0301 	and.w	r3, r3, #1
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a08:	f023 0307 	bic.w	r3, r3, #7
 8006a0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	333c      	adds	r3, #60	; 0x3c
 8006a46:	3304      	adds	r3, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	4a26      	ldr	r2, [pc, #152]	; (8006ae8 <USB_EP0_OutStart+0xb8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d90a      	bls.n	8006a6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a64:	d101      	bne.n	8006a6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e037      	b.n	8006ada <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a70:	461a      	mov	r2, r3
 8006a72:	2300      	movs	r3, #0
 8006a74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a98:	f043 0318 	orr.w	r3, r3, #24
 8006a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ab0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ab2:	7afb      	ldrb	r3, [r7, #11]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d10f      	bne.n	8006ad8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ad6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	4f54300a 	.word	0x4f54300a

08006aec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <USB_CoreReset+0x64>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d901      	bls.n	8006b0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e01b      	b.n	8006b42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	daf2      	bge.n	8006af8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f043 0201 	orr.w	r2, r3, #1
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3301      	adds	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <USB_CoreReset+0x64>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d901      	bls.n	8006b34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e006      	b.n	8006b42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d0f0      	beq.n	8006b22 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	00030d40 	.word	0x00030d40

08006b54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b64:	f002 fc8a 	bl	800947c <USBD_static_malloc>
 8006b68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	32b0      	adds	r2, #176	; 0xb0
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b80:	2302      	movs	r3, #2
 8006b82:	e0d4      	b.n	8006d2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b88:	2100      	movs	r1, #0
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f002 fcda 	bl	8009544 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	32b0      	adds	r2, #176	; 0xb0
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	32b0      	adds	r2, #176	; 0xb0
 8006baa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	7c1b      	ldrb	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d138      	bne.n	8006c2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bbc:	4b5e      	ldr	r3, [pc, #376]	; (8006d38 <USBD_CDC_Init+0x1e4>)
 8006bbe:	7819      	ldrb	r1, [r3, #0]
 8006bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f002 fb35 	bl	8009236 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bcc:	4b5a      	ldr	r3, [pc, #360]	; (8006d38 <USBD_CDC_Init+0x1e4>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f003 020f 	and.w	r2, r3, #15
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	3324      	adds	r3, #36	; 0x24
 8006be2:	2201      	movs	r2, #1
 8006be4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006be6:	4b55      	ldr	r3, [pc, #340]	; (8006d3c <USBD_CDC_Init+0x1e8>)
 8006be8:	7819      	ldrb	r1, [r3, #0]
 8006bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bee:	2202      	movs	r2, #2
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f002 fb20 	bl	8009236 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bf6:	4b51      	ldr	r3, [pc, #324]	; (8006d3c <USBD_CDC_Init+0x1e8>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f003 020f 	and.w	r2, r3, #15
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c0e:	2201      	movs	r2, #1
 8006c10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c12:	4b4b      	ldr	r3, [pc, #300]	; (8006d40 <USBD_CDC_Init+0x1ec>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	3326      	adds	r3, #38	; 0x26
 8006c28:	2210      	movs	r2, #16
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e035      	b.n	8006c9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c2e:	4b42      	ldr	r3, [pc, #264]	; (8006d38 <USBD_CDC_Init+0x1e4>)
 8006c30:	7819      	ldrb	r1, [r3, #0]
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	2202      	movs	r2, #2
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f002 fafd 	bl	8009236 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c3c:	4b3e      	ldr	r3, [pc, #248]	; (8006d38 <USBD_CDC_Init+0x1e4>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	f003 020f 	and.w	r2, r3, #15
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	440b      	add	r3, r1
 8006c50:	3324      	adds	r3, #36	; 0x24
 8006c52:	2201      	movs	r2, #1
 8006c54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c56:	4b39      	ldr	r3, [pc, #228]	; (8006d3c <USBD_CDC_Init+0x1e8>)
 8006c58:	7819      	ldrb	r1, [r3, #0]
 8006c5a:	2340      	movs	r3, #64	; 0x40
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f002 fae9 	bl	8009236 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c64:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <USBD_CDC_Init+0x1e8>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 020f 	and.w	r2, r3, #15
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	440b      	add	r3, r1
 8006c78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c80:	4b2f      	ldr	r3, [pc, #188]	; (8006d40 <USBD_CDC_Init+0x1ec>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f003 020f 	and.w	r2, r3, #15
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	3326      	adds	r3, #38	; 0x26
 8006c96:	2210      	movs	r2, #16
 8006c98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c9a:	4b29      	ldr	r3, [pc, #164]	; (8006d40 <USBD_CDC_Init+0x1ec>)
 8006c9c:	7819      	ldrb	r1, [r3, #0]
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f002 fac7 	bl	8009236 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ca8:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <USBD_CDC_Init+0x1ec>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 020f 	and.w	r2, r3, #15
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	3324      	adds	r3, #36	; 0x24
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	33b0      	adds	r3, #176	; 0xb0
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e018      	b.n	8006d2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	7c1b      	ldrb	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <USBD_CDC_Init+0x1e8>)
 8006d06:	7819      	ldrb	r1, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f002 fb7e 	bl	8009414 <USBD_LL_PrepareReceive>
 8006d18:	e008      	b.n	8006d2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <USBD_CDC_Init+0x1e8>)
 8006d1c:	7819      	ldrb	r1, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f002 fb74 	bl	8009414 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000093 	.word	0x20000093
 8006d3c:	20000094 	.word	0x20000094
 8006d40:	20000095 	.word	0x20000095

08006d44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d50:	4b3a      	ldr	r3, [pc, #232]	; (8006e3c <USBD_CDC_DeInit+0xf8>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f002 fa93 	bl	8009282 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d5c:	4b37      	ldr	r3, [pc, #220]	; (8006e3c <USBD_CDC_DeInit+0xf8>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 020f 	and.w	r2, r3, #15
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	3324      	adds	r3, #36	; 0x24
 8006d72:	2200      	movs	r2, #0
 8006d74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d76:	4b32      	ldr	r3, [pc, #200]	; (8006e40 <USBD_CDC_DeInit+0xfc>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f002 fa80 	bl	8009282 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d82:	4b2f      	ldr	r3, [pc, #188]	; (8006e40 <USBD_CDC_DeInit+0xfc>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d9e:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <USBD_CDC_DeInit+0x100>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f002 fa6c 	bl	8009282 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006daa:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <USBD_CDC_DeInit+0x100>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 020f 	and.w	r2, r3, #15
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	3324      	adds	r3, #36	; 0x24
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006dc4:	4b1f      	ldr	r3, [pc, #124]	; (8006e44 <USBD_CDC_DeInit+0x100>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 020f 	and.w	r2, r3, #15
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3326      	adds	r3, #38	; 0x26
 8006dda:	2200      	movs	r2, #0
 8006ddc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	32b0      	adds	r2, #176	; 0xb0
 8006de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01f      	beq.n	8006e30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	33b0      	adds	r3, #176	; 0xb0
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	32b0      	adds	r2, #176	; 0xb0
 8006e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f002 fb40 	bl	8009498 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32b0      	adds	r2, #176	; 0xb0
 8006e22:	2100      	movs	r1, #0
 8006e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000093 	.word	0x20000093
 8006e40:	20000094 	.word	0x20000094
 8006e44:	20000095 	.word	0x20000095

08006e48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	32b0      	adds	r2, #176	; 0xb0
 8006e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e0bf      	b.n	8006ff8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d050      	beq.n	8006f26 <USBD_CDC_Setup+0xde>
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	f040 80af 	bne.w	8006fe8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	88db      	ldrh	r3, [r3, #6]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d03a      	beq.n	8006f08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	b25b      	sxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	da1b      	bge.n	8006ed4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	33b0      	adds	r3, #176	; 0xb0
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006eb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	88d2      	ldrh	r2, [r2, #6]
 8006eb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	88db      	ldrh	r3, [r3, #6]
 8006ebe:	2b07      	cmp	r3, #7
 8006ec0:	bf28      	it	cs
 8006ec2:	2307      	movcs	r3, #7
 8006ec4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	89fa      	ldrh	r2, [r7, #14]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fd89 	bl	80089e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ed2:	e090      	b.n	8006ff6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	785a      	ldrb	r2, [r3, #1]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	88db      	ldrh	r3, [r3, #6]
 8006ee2:	2b3f      	cmp	r3, #63	; 0x3f
 8006ee4:	d803      	bhi.n	8006eee <USBD_CDC_Setup+0xa6>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	88db      	ldrh	r3, [r3, #6]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	e000      	b.n	8006ef0 <USBD_CDC_Setup+0xa8>
 8006eee:	2240      	movs	r2, #64	; 0x40
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006ef6:	6939      	ldr	r1, [r7, #16]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006efe:	461a      	mov	r2, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fd9b 	bl	8008a3c <USBD_CtlPrepareRx>
      break;
 8006f06:	e076      	b.n	8006ff6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	33b0      	adds	r3, #176	; 0xb0
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	7850      	ldrb	r0, [r2, #1]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	4798      	blx	r3
      break;
 8006f24:	e067      	b.n	8006ff6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b0b      	cmp	r3, #11
 8006f2c:	d851      	bhi.n	8006fd2 <USBD_CDC_Setup+0x18a>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <USBD_CDC_Setup+0xec>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f65 	.word	0x08006f65
 8006f38:	08006fe1 	.word	0x08006fe1
 8006f3c:	08006fd3 	.word	0x08006fd3
 8006f40:	08006fd3 	.word	0x08006fd3
 8006f44:	08006fd3 	.word	0x08006fd3
 8006f48:	08006fd3 	.word	0x08006fd3
 8006f4c:	08006fd3 	.word	0x08006fd3
 8006f50:	08006fd3 	.word	0x08006fd3
 8006f54:	08006fd3 	.word	0x08006fd3
 8006f58:	08006fd3 	.word	0x08006fd3
 8006f5c:	08006f8f 	.word	0x08006f8f
 8006f60:	08006fb9 	.word	0x08006fb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d107      	bne.n	8006f80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f70:	f107 030a 	add.w	r3, r7, #10
 8006f74:	2202      	movs	r2, #2
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fd33 	bl	80089e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f7e:	e032      	b.n	8006fe6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 fcbd 	bl	8008902 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f8c:	e02b      	b.n	8006fe6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d107      	bne.n	8006faa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f9a:	f107 030d 	add.w	r3, r7, #13
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fd1e 	bl	80089e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fa8:	e01d      	b.n	8006fe6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 fca8 	bl	8008902 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fb6:	e016      	b.n	8006fe6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d00f      	beq.n	8006fe4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fc9b 	bl	8008902 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fd0:	e008      	b.n	8006fe4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fc94 	bl	8008902 <USBD_CtlError>
          ret = USBD_FAIL;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8006fde:	e002      	b.n	8006fe6 <USBD_CDC_Setup+0x19e>
          break;
 8006fe0:	bf00      	nop
 8006fe2:	e008      	b.n	8006ff6 <USBD_CDC_Setup+0x1ae>
          break;
 8006fe4:	bf00      	nop
      }
      break;
 8006fe6:	e006      	b.n	8006ff6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fc89 	bl	8008902 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	32b0      	adds	r2, #176	; 0xb0
 800701e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007026:	2303      	movs	r3, #3
 8007028:	e065      	b.n	80070f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	32b0      	adds	r2, #176	; 0xb0
 8007034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007038:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f003 020f 	and.w	r2, r3, #15
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	3318      	adds	r3, #24
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02f      	beq.n	80070b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	f003 020f 	and.w	r2, r3, #15
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	3318      	adds	r3, #24
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	f003 010f 	and.w	r1, r3, #15
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	460b      	mov	r3, r1
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	440b      	add	r3, r1
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4403      	add	r3, r0
 800707c:	3348      	adds	r3, #72	; 0x48
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	fbb2 f1f3 	udiv	r1, r2, r3
 8007084:	fb01 f303 	mul.w	r3, r1, r3
 8007088:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800708a:	2b00      	cmp	r3, #0
 800708c:	d112      	bne.n	80070b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	3318      	adds	r3, #24
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070a6:	78f9      	ldrb	r1, [r7, #3]
 80070a8:	2300      	movs	r3, #0
 80070aa:	2200      	movs	r2, #0
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f002 f990 	bl	80093d2 <USBD_LL_Transmit>
 80070b2:	e01f      	b.n	80070f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	33b0      	adds	r3, #176	; 0xb0
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d010      	beq.n	80070f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	33b0      	adds	r3, #176	; 0xb0
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	32b0      	adds	r2, #176	; 0xb0
 8007114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007118:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32b0      	adds	r2, #176	; 0xb0
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800712c:	2303      	movs	r3, #3
 800712e:	e01a      	b.n	8007166 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f002 f98e 	bl	8009456 <USBD_LL_GetRxDataSize>
 800713a:	4602      	mov	r2, r0
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	33b0      	adds	r3, #176	; 0xb0
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007160:	4611      	mov	r1, r2
 8007162:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	32b0      	adds	r2, #176	; 0xb0
 8007180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007184:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800718c:	2303      	movs	r3, #3
 800718e:	e025      	b.n	80071dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	33b0      	adds	r3, #176	; 0xb0
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01a      	beq.n	80071da <USBD_CDC_EP0_RxReady+0x6c>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071aa:	2bff      	cmp	r3, #255	; 0xff
 80071ac:	d015      	beq.n	80071da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	33b0      	adds	r3, #176	; 0xb0
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80071c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071ce:	b292      	uxth	r2, r2
 80071d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	22ff      	movs	r2, #255	; 0xff
 80071d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071ec:	2182      	movs	r1, #130	; 0x82
 80071ee:	4818      	ldr	r0, [pc, #96]	; (8007250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071f0:	f000 fd4f 	bl	8007c92 <USBD_GetEpDesc>
 80071f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071f6:	2101      	movs	r1, #1
 80071f8:	4815      	ldr	r0, [pc, #84]	; (8007250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071fa:	f000 fd4a 	bl	8007c92 <USBD_GetEpDesc>
 80071fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007200:	2181      	movs	r1, #129	; 0x81
 8007202:	4813      	ldr	r0, [pc, #76]	; (8007250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007204:	f000 fd45 	bl	8007c92 <USBD_GetEpDesc>
 8007208:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2210      	movs	r2, #16
 8007214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2200      	movs	r2, #0
 8007220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007224:	711a      	strb	r2, [r3, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d006      	beq.n	800723e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007238:	711a      	strb	r2, [r3, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2243      	movs	r2, #67	; 0x43
 8007242:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007244:	4b02      	ldr	r3, [pc, #8]	; (8007250 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000050 	.word	0x20000050

08007254 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800725c:	2182      	movs	r1, #130	; 0x82
 800725e:	4818      	ldr	r0, [pc, #96]	; (80072c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007260:	f000 fd17 	bl	8007c92 <USBD_GetEpDesc>
 8007264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007266:	2101      	movs	r1, #1
 8007268:	4815      	ldr	r0, [pc, #84]	; (80072c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800726a:	f000 fd12 	bl	8007c92 <USBD_GetEpDesc>
 800726e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007270:	2181      	movs	r1, #129	; 0x81
 8007272:	4813      	ldr	r0, [pc, #76]	; (80072c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007274:	f000 fd0d 	bl	8007c92 <USBD_GetEpDesc>
 8007278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2210      	movs	r2, #16
 8007284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d006      	beq.n	800729a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2200      	movs	r2, #0
 8007290:	711a      	strb	r2, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f042 0202 	orr.w	r2, r2, #2
 8007298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	711a      	strb	r2, [r3, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f042 0202 	orr.w	r2, r2, #2
 80072ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2243      	movs	r2, #67	; 0x43
 80072b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072b4:	4b02      	ldr	r3, [pc, #8]	; (80072c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000050 	.word	0x20000050

080072c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072cc:	2182      	movs	r1, #130	; 0x82
 80072ce:	4818      	ldr	r0, [pc, #96]	; (8007330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072d0:	f000 fcdf 	bl	8007c92 <USBD_GetEpDesc>
 80072d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072d6:	2101      	movs	r1, #1
 80072d8:	4815      	ldr	r0, [pc, #84]	; (8007330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072da:	f000 fcda 	bl	8007c92 <USBD_GetEpDesc>
 80072de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072e0:	2181      	movs	r1, #129	; 0x81
 80072e2:	4813      	ldr	r0, [pc, #76]	; (8007330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072e4:	f000 fcd5 	bl	8007c92 <USBD_GetEpDesc>
 80072e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2210      	movs	r2, #16
 80072f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d006      	beq.n	800730a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2200      	movs	r2, #0
 8007300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007304:	711a      	strb	r2, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d006      	beq.n	800731e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007318:	711a      	strb	r2, [r3, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2243      	movs	r2, #67	; 0x43
 8007322:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007324:	4b02      	ldr	r3, [pc, #8]	; (8007330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000050 	.word	0x20000050

08007334 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	220a      	movs	r2, #10
 8007340:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007342:	4b03      	ldr	r3, [pc, #12]	; (8007350 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	2000000c 	.word	0x2000000c

08007354 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007364:	2303      	movs	r3, #3
 8007366:	e009      	b.n	800737c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	33b0      	adds	r3, #176	; 0xb0
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	32b0      	adds	r2, #176	; 0xb0
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e008      	b.n	80073c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	32b0      	adds	r2, #176	; 0xb0
 80073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e004      	b.n	80073fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	32b0      	adds	r2, #176	; 0xb0
 800741a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	32b0      	adds	r2, #176	; 0xb0
 800742e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007436:	2303      	movs	r3, #3
 8007438:	e025      	b.n	8007486 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11f      	bne.n	8007484 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2201      	movs	r2, #1
 8007448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800744c:	4b10      	ldr	r3, [pc, #64]	; (8007490 <USBD_CDC_TransmitPacket+0x88>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 020f 	and.w	r2, r3, #15
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4403      	add	r3, r0
 8007466:	3318      	adds	r3, #24
 8007468:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <USBD_CDC_TransmitPacket+0x88>)
 800746c:	7819      	ldrb	r1, [r3, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 ffa9 	bl	80093d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000093 	.word	0x20000093

08007494 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	32b0      	adds	r2, #176	; 0xb0
 80074a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	32b0      	adds	r2, #176	; 0xb0
 80074b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80074be:	2303      	movs	r3, #3
 80074c0:	e018      	b.n	80074f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7c1b      	ldrb	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074ca:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <USBD_CDC_ReceivePacket+0x68>)
 80074cc:	7819      	ldrb	r1, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 ff9b 	bl	8009414 <USBD_LL_PrepareReceive>
 80074de:	e008      	b.n	80074f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <USBD_CDC_ReceivePacket+0x68>)
 80074e2:	7819      	ldrb	r1, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074ea:	2340      	movs	r3, #64	; 0x40
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 ff91 	bl	8009414 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000094 	.word	0x20000094

08007500 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	4613      	mov	r3, r2
 800750c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007514:	2303      	movs	r3, #3
 8007516:	e01f      	b.n	8007558 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	79fa      	ldrb	r2, [r7, #7]
 800754a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f001 fe0b 	bl	8009168 <USBD_LL_Init>
 8007552:	4603      	mov	r3, r0
 8007554:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	e025      	b.n	80075c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	32ae      	adds	r2, #174	; 0xae
 800758a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00f      	beq.n	80075b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	32ae      	adds	r2, #174	; 0xae
 800759e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	f107 020e 	add.w	r2, r7, #14
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
 80075ac:	4602      	mov	r2, r0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 fe13 	bl	8009200 <USBD_LL_Start>
 80075da:	4603      	mov	r3, r0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007610:	2b00      	cmp	r3, #0
 8007612:	d009      	beq.n	8007628 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	78fa      	ldrb	r2, [r7, #3]
 800761e:	4611      	mov	r1, r2
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	4611      	mov	r1, r2
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007658:	2303      	movs	r3, #3
 800765a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f001 f908 	bl	800888e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800768c:	461a      	mov	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d01a      	beq.n	80076d8 <USBD_LL_SetupStage+0x72>
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d822      	bhi.n	80076ec <USBD_LL_SetupStage+0x86>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <USBD_LL_SetupStage+0x4a>
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d00a      	beq.n	80076c4 <USBD_LL_SetupStage+0x5e>
 80076ae:	e01d      	b.n	80076ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fb5f 	bl	8007d7c <USBD_StdDevReq>
 80076be:	4603      	mov	r3, r0
 80076c0:	73fb      	strb	r3, [r7, #15]
      break;
 80076c2:	e020      	b.n	8007706 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fbc7 	bl	8007e60 <USBD_StdItfReq>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73fb      	strb	r3, [r7, #15]
      break;
 80076d6:	e016      	b.n	8007706 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc29 	bl	8007f38 <USBD_StdEPReq>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
      break;
 80076ea:	e00c      	b.n	8007706 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fde0 	bl	80092c0 <USBD_LL_StallEP>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]
      break;
 8007704:	bf00      	nop
  }

  return ret;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	460b      	mov	r3, r1
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d16e      	bne.n	8007806 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800772e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007736:	2b03      	cmp	r3, #3
 8007738:	f040 8098 	bne.w	800786c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	429a      	cmp	r2, r3
 8007746:	d913      	bls.n	8007770 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	1ad2      	subs	r2, r2, r3
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	4293      	cmp	r3, r2
 8007760:	bf28      	it	cs
 8007762:	4613      	movcs	r3, r2
 8007764:	461a      	mov	r2, r3
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f001 f984 	bl	8008a76 <USBD_CtlContinueRx>
 800776e:	e07d      	b.n	800786c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007776:	f003 031f 	and.w	r3, r3, #31
 800777a:	2b02      	cmp	r3, #2
 800777c:	d014      	beq.n	80077a8 <USBD_LL_DataOutStage+0x98>
 800777e:	2b02      	cmp	r3, #2
 8007780:	d81d      	bhi.n	80077be <USBD_LL_DataOutStage+0xae>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <USBD_LL_DataOutStage+0x7c>
 8007786:	2b01      	cmp	r3, #1
 8007788:	d003      	beq.n	8007792 <USBD_LL_DataOutStage+0x82>
 800778a:	e018      	b.n	80077be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	75bb      	strb	r3, [r7, #22]
            break;
 8007790:	e018      	b.n	80077c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007798:	b2db      	uxtb	r3, r3
 800779a:	4619      	mov	r1, r3
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fa5e 	bl	8007c5e <USBD_CoreFindIF>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75bb      	strb	r3, [r7, #22]
            break;
 80077a6:	e00d      	b.n	80077c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	4619      	mov	r1, r3
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fa60 	bl	8007c78 <USBD_CoreFindEP>
 80077b8:	4603      	mov	r3, r0
 80077ba:	75bb      	strb	r3, [r7, #22]
            break;
 80077bc:	e002      	b.n	80077c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	75bb      	strb	r3, [r7, #22]
            break;
 80077c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80077c4:	7dbb      	ldrb	r3, [r7, #22]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d119      	bne.n	80077fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d113      	bne.n	80077fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80077d6:	7dba      	ldrb	r2, [r7, #22]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	32ae      	adds	r2, #174	; 0xae
 80077dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00b      	beq.n	80077fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80077e6:	7dba      	ldrb	r2, [r7, #22]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077ee:	7dba      	ldrb	r2, [r7, #22]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	32ae      	adds	r2, #174	; 0xae
 80077f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 f94a 	bl	8008a98 <USBD_CtlSendStatus>
 8007804:	e032      	b.n	800786c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780c:	b2db      	uxtb	r3, r3
 800780e:	4619      	mov	r1, r3
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fa31 	bl	8007c78 <USBD_CoreFindEP>
 8007816:	4603      	mov	r3, r0
 8007818:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800781a:	7dbb      	ldrb	r3, [r7, #22]
 800781c:	2bff      	cmp	r3, #255	; 0xff
 800781e:	d025      	beq.n	800786c <USBD_LL_DataOutStage+0x15c>
 8007820:	7dbb      	ldrb	r3, [r7, #22]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d122      	bne.n	800786c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b03      	cmp	r3, #3
 8007830:	d117      	bne.n	8007862 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007832:	7dba      	ldrb	r2, [r7, #22]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	32ae      	adds	r2, #174	; 0xae
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00f      	beq.n	8007862 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007842:	7dba      	ldrb	r2, [r7, #22]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800784a:	7dba      	ldrb	r2, [r7, #22]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	32ae      	adds	r2, #174	; 0xae
 8007850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	7afa      	ldrb	r2, [r7, #11]
 8007858:	4611      	mov	r1, r2
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	e000      	b.n	800786e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	460b      	mov	r3, r1
 8007880:	607a      	str	r2, [r7, #4]
 8007882:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d16f      	bne.n	800796a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3314      	adds	r3, #20
 800788e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007896:	2b02      	cmp	r3, #2
 8007898:	d15a      	bne.n	8007950 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d914      	bls.n	80078d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f001 f8ac 	bl	8008a1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078c2:	2300      	movs	r3, #0
 80078c4:	2200      	movs	r2, #0
 80078c6:	2100      	movs	r1, #0
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f001 fda3 	bl	8009414 <USBD_LL_PrepareReceive>
 80078ce:	e03f      	b.n	8007950 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d11c      	bne.n	8007916 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d316      	bcc.n	8007916 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d20f      	bcs.n	8007916 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078f6:	2200      	movs	r2, #0
 80078f8:	2100      	movs	r1, #0
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f001 f88d 	bl	8008a1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007908:	2300      	movs	r3, #0
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f001 fd80 	bl	8009414 <USBD_LL_PrepareReceive>
 8007914:	e01c      	b.n	8007950 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b03      	cmp	r3, #3
 8007920:	d10f      	bne.n	8007942 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d009      	beq.n	8007942 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007942:	2180      	movs	r1, #128	; 0x80
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f001 fcbb 	bl	80092c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f001 f8b7 	bl	8008abe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d03a      	beq.n	80079d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff fe42 	bl	80075e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007968:	e032      	b.n	80079d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007970:	b2db      	uxtb	r3, r3
 8007972:	4619      	mov	r1, r3
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f97f 	bl	8007c78 <USBD_CoreFindEP>
 800797a:	4603      	mov	r3, r0
 800797c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	2bff      	cmp	r3, #255	; 0xff
 8007982:	d025      	beq.n	80079d0 <USBD_LL_DataInStage+0x15a>
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d122      	bne.n	80079d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b03      	cmp	r3, #3
 8007994:	d11c      	bne.n	80079d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007996:	7dfa      	ldrb	r2, [r7, #23]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	32ae      	adds	r2, #174	; 0xae
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d014      	beq.n	80079d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80079a6:	7dfa      	ldrb	r2, [r7, #23]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80079ae:	7dfa      	ldrb	r2, [r7, #23]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	32ae      	adds	r2, #174	; 0xae
 80079b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	7afa      	ldrb	r2, [r7, #11]
 80079bc:	4611      	mov	r1, r2
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	4798      	blx	r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80079c6:	7dbb      	ldrb	r3, [r7, #22]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80079cc:	7dbb      	ldrb	r3, [r7, #22]
 80079ce:	e000      	b.n	80079d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d014      	beq.n	8007a40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00e      	beq.n	8007a40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6852      	ldr	r2, [r2, #4]
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	4611      	mov	r1, r2
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	4798      	blx	r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a40:	2340      	movs	r3, #64	; 0x40
 8007a42:	2200      	movs	r2, #0
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 fbf5 	bl	8009236 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2240      	movs	r2, #64	; 0x40
 8007a58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a5c:	2340      	movs	r3, #64	; 0x40
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2180      	movs	r1, #128	; 0x80
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fbe7 	bl	8009236 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2240      	movs	r2, #64	; 0x40
 8007a72:	621a      	str	r2, [r3, #32]

  return ret;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d106      	bne.n	8007aec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d110      	bne.n	8007b30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	32ae      	adds	r2, #174	; 0xae
 8007b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e01c      	b.n	8007b96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d115      	bne.n	8007b94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32ae      	adds	r2, #174	; 0xae
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	; 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	32ae      	adds	r2, #174	; 0xae
 8007bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e01c      	b.n	8007bfa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d115      	bne.n	8007bf8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	32ae      	adds	r2, #174	; 0xae
 8007bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	32ae      	adds	r2, #174	; 0xae
 8007bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00e      	beq.n	8007c54 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6852      	ldr	r2, [r2, #4]
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	4611      	mov	r1, r2
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c50:	2303      	movs	r3, #3
 8007c52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d920      	bls.n	8007cfc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007cc2:	e013      	b.n	8007cec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007cc4:	f107 030a 	add.w	r3, r7, #10
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6978      	ldr	r0, [r7, #20]
 8007ccc:	f000 f81b 	bl	8007d06 <USBD_GetNextDesc>
 8007cd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	2b05      	cmp	r3, #5
 8007cd8:	d108      	bne.n	8007cec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	789b      	ldrb	r3, [r3, #2]
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d008      	beq.n	8007cfa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	885b      	ldrh	r3, [r3, #2]
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	897b      	ldrh	r3, [r7, #10]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d8e5      	bhi.n	8007cc4 <USBD_GetEpDesc+0x32>
 8007cf8:	e000      	b.n	8007cfc <USBD_GetEpDesc+0x6a>
          break;
 8007cfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007cfc:	693b      	ldr	r3, [r7, #16]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	881a      	ldrh	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4413      	add	r3, r2
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d32:	68fb      	ldr	r3, [r7, #12]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	3301      	adds	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d5e:	8a3b      	ldrh	r3, [r7, #16]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	b21a      	sxth	r2, r3
 8007d64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b21b      	sxth	r3, r3
 8007d6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d005      	beq.n	8007da2 <USBD_StdDevReq+0x26>
 8007d96:	2b40      	cmp	r3, #64	; 0x40
 8007d98:	d857      	bhi.n	8007e4a <USBD_StdDevReq+0xce>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00f      	beq.n	8007dbe <USBD_StdDevReq+0x42>
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d153      	bne.n	8007e4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	32ae      	adds	r2, #174	; 0xae
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]
      break;
 8007dbc:	e04a      	b.n	8007e54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	d83b      	bhi.n	8007e3e <USBD_StdDevReq+0xc2>
 8007dc6:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <USBD_StdDevReq+0x50>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007e21 	.word	0x08007e21
 8007dd0:	08007e35 	.word	0x08007e35
 8007dd4:	08007e3f 	.word	0x08007e3f
 8007dd8:	08007e2b 	.word	0x08007e2b
 8007ddc:	08007e3f 	.word	0x08007e3f
 8007de0:	08007dff 	.word	0x08007dff
 8007de4:	08007df5 	.word	0x08007df5
 8007de8:	08007e3f 	.word	0x08007e3f
 8007dec:	08007e17 	.word	0x08007e17
 8007df0:	08007e09 	.word	0x08007e09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa3c 	bl	8008274 <USBD_GetDescriptor>
          break;
 8007dfc:	e024      	b.n	8007e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fba1 	bl	8008548 <USBD_SetAddress>
          break;
 8007e06:	e01f      	b.n	8007e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fbe0 	bl	80085d0 <USBD_SetConfig>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]
          break;
 8007e14:	e018      	b.n	8007e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fc83 	bl	8008724 <USBD_GetConfig>
          break;
 8007e1e:	e013      	b.n	8007e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fcb4 	bl	8008790 <USBD_GetStatus>
          break;
 8007e28:	e00e      	b.n	8007e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fce3 	bl	80087f8 <USBD_SetFeature>
          break;
 8007e32:	e009      	b.n	8007e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fd07 	bl	800884a <USBD_ClrFeature>
          break;
 8007e3c:	e004      	b.n	8007e48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fd5e 	bl	8008902 <USBD_CtlError>
          break;
 8007e46:	bf00      	nop
      }
      break;
 8007e48:	e004      	b.n	8007e54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fd58 	bl	8008902 <USBD_CtlError>
      break;
 8007e52:	bf00      	nop
  }

  return ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop

08007e60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	d005      	beq.n	8007e86 <USBD_StdItfReq+0x26>
 8007e7a:	2b40      	cmp	r3, #64	; 0x40
 8007e7c:	d852      	bhi.n	8007f24 <USBD_StdItfReq+0xc4>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <USBD_StdItfReq+0x26>
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d14e      	bne.n	8007f24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d840      	bhi.n	8007f16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	889b      	ldrh	r3, [r3, #4]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d836      	bhi.n	8007f0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	889b      	ldrh	r3, [r3, #4]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff fed9 	bl	8007c5e <USBD_CoreFindIF>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2bff      	cmp	r3, #255	; 0xff
 8007eb4:	d01d      	beq.n	8007ef2 <USBD_StdItfReq+0x92>
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d11a      	bne.n	8007ef2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007ebc:	7bba      	ldrb	r2, [r7, #14]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32ae      	adds	r2, #174	; 0xae
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00f      	beq.n	8007eec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ecc:	7bba      	ldrb	r2, [r7, #14]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ed4:	7bba      	ldrb	r2, [r7, #14]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	32ae      	adds	r2, #174	; 0xae
 8007eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	4798      	blx	r3
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007eea:	e004      	b.n	8007ef6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007eec:	2303      	movs	r3, #3
 8007eee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ef0:	e001      	b.n	8007ef6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d110      	bne.n	8007f20 <USBD_StdItfReq+0xc0>
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fdc7 	bl	8008a98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f0a:	e009      	b.n	8007f20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fcf7 	bl	8008902 <USBD_CtlError>
          break;
 8007f14:	e004      	b.n	8007f20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fcf2 	bl	8008902 <USBD_CtlError>
          break;
 8007f1e:	e000      	b.n	8007f22 <USBD_StdItfReq+0xc2>
          break;
 8007f20:	bf00      	nop
      }
      break;
 8007f22:	e004      	b.n	8007f2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fceb 	bl	8008902 <USBD_CtlError>
      break;
 8007f2c:	bf00      	nop
  }

  return ret;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	889b      	ldrh	r3, [r3, #4]
 8007f4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d007      	beq.n	8007f68 <USBD_StdEPReq+0x30>
 8007f58:	2b40      	cmp	r3, #64	; 0x40
 8007f5a:	f200 817f 	bhi.w	800825c <USBD_StdEPReq+0x324>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d02a      	beq.n	8007fb8 <USBD_StdEPReq+0x80>
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	f040 817a 	bne.w	800825c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fe83 	bl	8007c78 <USBD_CoreFindEP>
 8007f72:	4603      	mov	r3, r0
 8007f74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f76:	7b7b      	ldrb	r3, [r7, #13]
 8007f78:	2bff      	cmp	r3, #255	; 0xff
 8007f7a:	f000 8174 	beq.w	8008266 <USBD_StdEPReq+0x32e>
 8007f7e:	7b7b      	ldrb	r3, [r7, #13]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 8170 	bne.w	8008266 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f86:	7b7a      	ldrb	r2, [r7, #13]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f8e:	7b7a      	ldrb	r2, [r7, #13]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	32ae      	adds	r2, #174	; 0xae
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8163 	beq.w	8008266 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007fa0:	7b7a      	ldrb	r2, [r7, #13]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	32ae      	adds	r2, #174	; 0xae
 8007fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	4798      	blx	r3
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fb6:	e156      	b.n	8008266 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d008      	beq.n	8007fd2 <USBD_StdEPReq+0x9a>
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	f300 8145 	bgt.w	8008250 <USBD_StdEPReq+0x318>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 809b 	beq.w	8008102 <USBD_StdEPReq+0x1ca>
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d03c      	beq.n	800804a <USBD_StdEPReq+0x112>
 8007fd0:	e13e      	b.n	8008250 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d002      	beq.n	8007fe4 <USBD_StdEPReq+0xac>
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d016      	beq.n	8008010 <USBD_StdEPReq+0xd8>
 8007fe2:	e02c      	b.n	800803e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00d      	beq.n	8008006 <USBD_StdEPReq+0xce>
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b80      	cmp	r3, #128	; 0x80
 8007fee:	d00a      	beq.n	8008006 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 f963 	bl	80092c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ffa:	2180      	movs	r1, #128	; 0x80
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 f95f 	bl	80092c0 <USBD_LL_StallEP>
 8008002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008004:	e020      	b.n	8008048 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fc7a 	bl	8008902 <USBD_CtlError>
              break;
 800800e:	e01b      	b.n	8008048 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	885b      	ldrh	r3, [r3, #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10e      	bne.n	8008036 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <USBD_StdEPReq+0xfe>
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	2b80      	cmp	r3, #128	; 0x80
 8008022:	d008      	beq.n	8008036 <USBD_StdEPReq+0xfe>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	88db      	ldrh	r3, [r3, #6]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f945 	bl	80092c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fd2e 	bl	8008a98 <USBD_CtlSendStatus>

              break;
 800803c:	e004      	b.n	8008048 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fc5e 	bl	8008902 <USBD_CtlError>
              break;
 8008046:	bf00      	nop
          }
          break;
 8008048:	e107      	b.n	800825a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d002      	beq.n	800805c <USBD_StdEPReq+0x124>
 8008056:	2b03      	cmp	r3, #3
 8008058:	d016      	beq.n	8008088 <USBD_StdEPReq+0x150>
 800805a:	e04b      	b.n	80080f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00d      	beq.n	800807e <USBD_StdEPReq+0x146>
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d00a      	beq.n	800807e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 f927 	bl	80092c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008072:	2180      	movs	r1, #128	; 0x80
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 f923 	bl	80092c0 <USBD_LL_StallEP>
 800807a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800807c:	e040      	b.n	8008100 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fc3e 	bl	8008902 <USBD_CtlError>
              break;
 8008086:	e03b      	b.n	8008100 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	885b      	ldrh	r3, [r3, #2]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d136      	bne.n	80080fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 f92d 	bl	80092fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fcf7 	bl	8008a98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fde2 	bl	8007c78 <USBD_CoreFindEP>
 80080b4:	4603      	mov	r3, r0
 80080b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080b8:	7b7b      	ldrb	r3, [r7, #13]
 80080ba:	2bff      	cmp	r3, #255	; 0xff
 80080bc:	d01f      	beq.n	80080fe <USBD_StdEPReq+0x1c6>
 80080be:	7b7b      	ldrb	r3, [r7, #13]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d11c      	bne.n	80080fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80080c4:	7b7a      	ldrb	r2, [r7, #13]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80080cc:	7b7a      	ldrb	r2, [r7, #13]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32ae      	adds	r2, #174	; 0xae
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d010      	beq.n	80080fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080dc:	7b7a      	ldrb	r2, [r7, #13]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32ae      	adds	r2, #174	; 0xae
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80080f2:	e004      	b.n	80080fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fc03 	bl	8008902 <USBD_CtlError>
              break;
 80080fc:	e000      	b.n	8008100 <USBD_StdEPReq+0x1c8>
              break;
 80080fe:	bf00      	nop
          }
          break;
 8008100:	e0ab      	b.n	800825a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d002      	beq.n	8008114 <USBD_StdEPReq+0x1dc>
 800810e:	2b03      	cmp	r3, #3
 8008110:	d032      	beq.n	8008178 <USBD_StdEPReq+0x240>
 8008112:	e097      	b.n	8008244 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <USBD_StdEPReq+0x1f2>
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b80      	cmp	r3, #128	; 0x80
 800811e:	d004      	beq.n	800812a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fbed 	bl	8008902 <USBD_CtlError>
                break;
 8008128:	e091      	b.n	800824e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800812a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800812e:	2b00      	cmp	r3, #0
 8008130:	da0b      	bge.n	800814a <USBD_StdEPReq+0x212>
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	3310      	adds	r3, #16
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	4413      	add	r3, r2
 8008146:	3304      	adds	r3, #4
 8008148:	e00b      	b.n	8008162 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	4413      	add	r3, r2
 8008160:	3304      	adds	r3, #4
 8008162:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2202      	movs	r2, #2
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fc37 	bl	80089e4 <USBD_CtlSendData>
              break;
 8008176:	e06a      	b.n	800824e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800817c:	2b00      	cmp	r3, #0
 800817e:	da11      	bge.n	80081a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	f003 020f 	and.w	r2, r3, #15
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	3324      	adds	r3, #36	; 0x24
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d117      	bne.n	80081ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fbb0 	bl	8008902 <USBD_CtlError>
                  break;
 80081a2:	e054      	b.n	800824e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	f003 020f 	and.w	r2, r3, #15
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fb9d 	bl	8008902 <USBD_CtlError>
                  break;
 80081c8:	e041      	b.n	800824e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da0b      	bge.n	80081ea <USBD_StdEPReq+0x2b2>
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	3310      	adds	r3, #16
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4413      	add	r3, r2
 80081e6:	3304      	adds	r3, #4
 80081e8:	e00b      	b.n	8008202 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4413      	add	r3, r2
 8008200:	3304      	adds	r3, #4
 8008202:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <USBD_StdEPReq+0x2d8>
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b80      	cmp	r3, #128	; 0x80
 800820e:	d103      	bne.n	8008218 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e00e      	b.n	8008236 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 f88d 	bl	800933c <USBD_LL_IsStallEP>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2201      	movs	r2, #1
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e002      	b.n	8008236 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2202      	movs	r2, #2
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fbd1 	bl	80089e4 <USBD_CtlSendData>
              break;
 8008242:	e004      	b.n	800824e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fb5b 	bl	8008902 <USBD_CtlError>
              break;
 800824c:	bf00      	nop
          }
          break;
 800824e:	e004      	b.n	800825a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fb55 	bl	8008902 <USBD_CtlError>
          break;
 8008258:	bf00      	nop
      }
      break;
 800825a:	e005      	b.n	8008268 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fb4f 	bl	8008902 <USBD_CtlError>
      break;
 8008264:	e000      	b.n	8008268 <USBD_StdEPReq+0x330>
      break;
 8008266:	bf00      	nop
  }

  return ret;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	2b06      	cmp	r3, #6
 8008296:	f200 8128 	bhi.w	80084ea <USBD_GetDescriptor+0x276>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <USBD_GetDescriptor+0x2c>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082bd 	.word	0x080082bd
 80082a4:	080082d5 	.word	0x080082d5
 80082a8:	08008315 	.word	0x08008315
 80082ac:	080084eb 	.word	0x080084eb
 80082b0:	080084eb 	.word	0x080084eb
 80082b4:	0800848b 	.word	0x0800848b
 80082b8:	080084b7 	.word	0x080084b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7c12      	ldrb	r2, [r2, #16]
 80082c8:	f107 0108 	add.w	r1, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
      break;
 80082d2:	e112      	b.n	80084fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7c1b      	ldrb	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10d      	bne.n	80082f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	f107 0208 	add.w	r2, r7, #8
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	2202      	movs	r2, #2
 80082f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082f6:	e100      	b.n	80084fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008300:	f107 0208 	add.w	r2, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	2202      	movs	r2, #2
 8008310:	701a      	strb	r2, [r3, #0]
      break;
 8008312:	e0f2      	b.n	80084fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	885b      	ldrh	r3, [r3, #2]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b05      	cmp	r3, #5
 800831c:	f200 80ac 	bhi.w	8008478 <USBD_GetDescriptor+0x204>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <USBD_GetDescriptor+0xb4>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	08008341 	.word	0x08008341
 800832c:	08008375 	.word	0x08008375
 8008330:	080083a9 	.word	0x080083a9
 8008334:	080083dd 	.word	0x080083dd
 8008338:	08008411 	.word	0x08008411
 800833c:	08008445 	.word	0x08008445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008362:	e091      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 facb 	bl	8008902 <USBD_CtlError>
            err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
          break;
 8008372:	e089      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008396:	e077      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fab1 	bl	8008902 <USBD_CtlError>
            err++;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	3301      	adds	r3, #1
 80083a4:	72fb      	strb	r3, [r7, #11]
          break;
 80083a6:	e06f      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ca:	e05d      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa97 	bl	8008902 <USBD_CtlError>
            err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
          break;
 80083da:	e055      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fe:	e043      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa7d 	bl	8008902 <USBD_CtlError>
            err++;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	3301      	adds	r3, #1
 800840c:	72fb      	strb	r3, [r7, #11]
          break;
 800840e:	e03b      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	7c12      	ldrb	r2, [r2, #16]
 8008428:	f107 0108 	add.w	r1, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008432:	e029      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa63 	bl	8008902 <USBD_CtlError>
            err++;
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	3301      	adds	r3, #1
 8008440:	72fb      	strb	r3, [r7, #11]
          break;
 8008442:	e021      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	7c12      	ldrb	r2, [r2, #16]
 800845c:	f107 0108 	add.w	r1, r7, #8
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
 8008464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008466:	e00f      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa49 	bl	8008902 <USBD_CtlError>
            err++;
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	3301      	adds	r3, #1
 8008474:	72fb      	strb	r3, [r7, #11]
          break;
 8008476:	e007      	b.n	8008488 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa41 	bl	8008902 <USBD_CtlError>
          err++;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3301      	adds	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008486:	bf00      	nop
      }
      break;
 8008488:	e037      	b.n	80084fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7c1b      	ldrb	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849a:	f107 0208 	add.w	r2, r7, #8
 800849e:	4610      	mov	r0, r2
 80084a0:	4798      	blx	r3
 80084a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a4:	e029      	b.n	80084fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fa2a 	bl	8008902 <USBD_CtlError>
        err++;
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	3301      	adds	r3, #1
 80084b2:	72fb      	strb	r3, [r7, #11]
      break;
 80084b4:	e021      	b.n	80084fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	7c1b      	ldrb	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c6:	f107 0208 	add.w	r2, r7, #8
 80084ca:	4610      	mov	r0, r2
 80084cc:	4798      	blx	r3
 80084ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	2207      	movs	r2, #7
 80084d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084d8:	e00f      	b.n	80084fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fa10 	bl	8008902 <USBD_CtlError>
        err++;
 80084e2:	7afb      	ldrb	r3, [r7, #11]
 80084e4:	3301      	adds	r3, #1
 80084e6:	72fb      	strb	r3, [r7, #11]
      break;
 80084e8:	e007      	b.n	80084fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fa08 	bl	8008902 <USBD_CtlError>
      err++;
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	3301      	adds	r3, #1
 80084f6:	72fb      	strb	r3, [r7, #11]
      break;
 80084f8:	bf00      	nop
  }

  if (err != 0U)
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d11e      	bne.n	800853e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	88db      	ldrh	r3, [r3, #6]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d016      	beq.n	8008536 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008508:	893b      	ldrh	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00e      	beq.n	800852c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88da      	ldrh	r2, [r3, #6]
 8008512:	893b      	ldrh	r3, [r7, #8]
 8008514:	4293      	cmp	r3, r2
 8008516:	bf28      	it	cs
 8008518:	4613      	movcs	r3, r2
 800851a:	b29b      	uxth	r3, r3
 800851c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800851e:	893b      	ldrh	r3, [r7, #8]
 8008520:	461a      	mov	r2, r3
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fa5d 	bl	80089e4 <USBD_CtlSendData>
 800852a:	e009      	b.n	8008540 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f9e7 	bl	8008902 <USBD_CtlError>
 8008534:	e004      	b.n	8008540 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 faae 	bl	8008a98 <USBD_CtlSendStatus>
 800853c:	e000      	b.n	8008540 <USBD_GetDescriptor+0x2cc>
    return;
 800853e:	bf00      	nop
  }
}
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop

08008548 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d131      	bne.n	80085be <USBD_SetAddress+0x76>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	88db      	ldrh	r3, [r3, #6]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d12d      	bne.n	80085be <USBD_SetAddress+0x76>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	885b      	ldrh	r3, [r3, #2]
 8008566:	2b7f      	cmp	r3, #127	; 0x7f
 8008568:	d829      	bhi.n	80085be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b03      	cmp	r3, #3
 8008580:	d104      	bne.n	800858c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f9bc 	bl	8008902 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858a:	e01d      	b.n	80085c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	7bfa      	ldrb	r2, [r7, #15]
 8008590:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fefb 	bl	8009394 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa7a 	bl	8008a98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b2:	e009      	b.n	80085c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085bc:	e004      	b.n	80085c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f99e 	bl	8008902 <USBD_CtlError>
  }
}
 80085c6:	bf00      	nop
 80085c8:	bf00      	nop
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	885b      	ldrh	r3, [r3, #2]
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	4b4e      	ldr	r3, [pc, #312]	; (8008720 <USBD_SetConfig+0x150>)
 80085e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085e8:	4b4d      	ldr	r3, [pc, #308]	; (8008720 <USBD_SetConfig+0x150>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d905      	bls.n	80085fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f985 	bl	8008902 <USBD_CtlError>
    return USBD_FAIL;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e08c      	b.n	8008716 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b02      	cmp	r3, #2
 8008606:	d002      	beq.n	800860e <USBD_SetConfig+0x3e>
 8008608:	2b03      	cmp	r3, #3
 800860a:	d029      	beq.n	8008660 <USBD_SetConfig+0x90>
 800860c:	e075      	b.n	80086fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800860e:	4b44      	ldr	r3, [pc, #272]	; (8008720 <USBD_SetConfig+0x150>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d020      	beq.n	8008658 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008616:	4b42      	ldr	r3, [pc, #264]	; (8008720 <USBD_SetConfig+0x150>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008620:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <USBD_SetConfig+0x150>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fe ffe7 	bl	80075fa <USBD_SetClassConfig>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d008      	beq.n	8008648 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f962 	bl	8008902 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2202      	movs	r2, #2
 8008642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008646:	e065      	b.n	8008714 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fa25 	bl	8008a98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2203      	movs	r2, #3
 8008652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008656:	e05d      	b.n	8008714 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fa1d 	bl	8008a98 <USBD_CtlSendStatus>
      break;
 800865e:	e059      	b.n	8008714 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008660:	4b2f      	ldr	r3, [pc, #188]	; (8008720 <USBD_SetConfig+0x150>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d112      	bne.n	800868e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008670:	4b2b      	ldr	r3, [pc, #172]	; (8008720 <USBD_SetConfig+0x150>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800867a:	4b29      	ldr	r3, [pc, #164]	; (8008720 <USBD_SetConfig+0x150>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7fe ffd6 	bl	8007632 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fa06 	bl	8008a98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800868c:	e042      	b.n	8008714 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800868e:	4b24      	ldr	r3, [pc, #144]	; (8008720 <USBD_SetConfig+0x150>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	429a      	cmp	r2, r3
 800869a:	d02a      	beq.n	80086f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7fe ffc4 	bl	8007632 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086aa:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <USBD_SetConfig+0x150>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086b4:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <USBD_SetConfig+0x150>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7fe ff9d 	bl	80075fa <USBD_SetClassConfig>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00f      	beq.n	80086ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f918 	bl	8008902 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fe ffa9 	bl	8007632 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086e8:	e014      	b.n	8008714 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9d4 	bl	8008a98 <USBD_CtlSendStatus>
      break;
 80086f0:	e010      	b.n	8008714 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f9d0 	bl	8008a98 <USBD_CtlSendStatus>
      break;
 80086f8:	e00c      	b.n	8008714 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f900 	bl	8008902 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008702:	4b07      	ldr	r3, [pc, #28]	; (8008720 <USBD_SetConfig+0x150>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7fe ff92 	bl	8007632 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800870e:	2303      	movs	r3, #3
 8008710:	73fb      	strb	r3, [r7, #15]
      break;
 8008712:	bf00      	nop
  }

  return ret;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20001360 	.word	0x20001360

08008724 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	88db      	ldrh	r3, [r3, #6]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d004      	beq.n	8008740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f8e2 	bl	8008902 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800873e:	e023      	b.n	8008788 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	dc02      	bgt.n	8008752 <USBD_GetConfig+0x2e>
 800874c:	2b00      	cmp	r3, #0
 800874e:	dc03      	bgt.n	8008758 <USBD_GetConfig+0x34>
 8008750:	e015      	b.n	800877e <USBD_GetConfig+0x5a>
 8008752:	2b03      	cmp	r3, #3
 8008754:	d00b      	beq.n	800876e <USBD_GetConfig+0x4a>
 8008756:	e012      	b.n	800877e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3308      	adds	r3, #8
 8008762:	2201      	movs	r2, #1
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f93c 	bl	80089e4 <USBD_CtlSendData>
        break;
 800876c:	e00c      	b.n	8008788 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3304      	adds	r3, #4
 8008772:	2201      	movs	r2, #1
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f934 	bl	80089e4 <USBD_CtlSendData>
        break;
 800877c:	e004      	b.n	8008788 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8be 	bl	8008902 <USBD_CtlError>
        break;
 8008786:	bf00      	nop
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d81e      	bhi.n	80087e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	88db      	ldrh	r3, [r3, #6]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d004      	beq.n	80087ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f8a5 	bl	8008902 <USBD_CtlError>
        break;
 80087b8:	e01a      	b.n	80087f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f043 0202 	orr.w	r2, r3, #2
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	330c      	adds	r3, #12
 80087da:	2202      	movs	r2, #2
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f900 	bl	80089e4 <USBD_CtlSendData>
      break;
 80087e4:	e004      	b.n	80087f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f88a 	bl	8008902 <USBD_CtlError>
      break;
 80087ee:	bf00      	nop
  }
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d107      	bne.n	800881a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f940 	bl	8008a98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008818:	e013      	b.n	8008842 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	885b      	ldrh	r3, [r3, #2]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d10b      	bne.n	800883a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	889b      	ldrh	r3, [r3, #4]
 8008826:	0a1b      	lsrs	r3, r3, #8
 8008828:	b29b      	uxth	r3, r3
 800882a:	b2da      	uxtb	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f930 	bl	8008a98 <USBD_CtlSendStatus>
}
 8008838:	e003      	b.n	8008842 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f860 	bl	8008902 <USBD_CtlError>
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885a:	b2db      	uxtb	r3, r3
 800885c:	3b01      	subs	r3, #1
 800885e:	2b02      	cmp	r3, #2
 8008860:	d80b      	bhi.n	800887a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	885b      	ldrh	r3, [r3, #2]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d10c      	bne.n	8008884 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f910 	bl	8008a98 <USBD_CtlSendStatus>
      }
      break;
 8008878:	e004      	b.n	8008884 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f840 	bl	8008902 <USBD_CtlError>
      break;
 8008882:	e000      	b.n	8008886 <USBD_ClrFeature+0x3c>
      break;
 8008884:	bf00      	nop
  }
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	781a      	ldrb	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff fa41 	bl	8007d40 <SWAPBYTE>
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3301      	adds	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff fa34 	bl	8007d40 <SWAPBYTE>
 80088d8:	4603      	mov	r3, r0
 80088da:	461a      	mov	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3301      	adds	r3, #1
 80088e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3301      	adds	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f7ff fa27 	bl	8007d40 <SWAPBYTE>
 80088f2:	4603      	mov	r3, r0
 80088f4:	461a      	mov	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	80da      	strh	r2, [r3, #6]
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800890c:	2180      	movs	r1, #128	; 0x80
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fcd6 	bl	80092c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008914:	2100      	movs	r1, #0
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fcd2 	bl	80092c0 <USBD_LL_StallEP>
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d036      	beq.n	80089a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800893e:	6938      	ldr	r0, [r7, #16]
 8008940:	f000 f836 	bl	80089b0 <USBD_GetLen>
 8008944:	4603      	mov	r3, r0
 8008946:	3301      	adds	r3, #1
 8008948:	b29b      	uxth	r3, r3
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	4413      	add	r3, r2
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	7812      	ldrb	r2, [r2, #0]
 800895c:	701a      	strb	r2, [r3, #0]
  idx++;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	3301      	adds	r3, #1
 8008962:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	4413      	add	r3, r2
 800896a:	2203      	movs	r2, #3
 800896c:	701a      	strb	r2, [r3, #0]
  idx++;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	3301      	adds	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008974:	e013      	b.n	800899e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	4413      	add	r3, r2
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	3301      	adds	r3, #1
 8008986:	613b      	str	r3, [r7, #16]
    idx++;
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	3301      	adds	r3, #1
 800898c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	4413      	add	r3, r2
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
    idx++;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	3301      	adds	r3, #1
 800899c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e7      	bne.n	8008976 <USBD_GetString+0x52>
 80089a6:	e000      	b.n	80089aa <USBD_GetString+0x86>
    return;
 80089a8:	bf00      	nop
  }
}
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089c0:	e005      	b.n	80089ce <USBD_GetLen+0x1e>
  {
    len++;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	3301      	adds	r3, #1
 80089c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	3301      	adds	r3, #1
 80089cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f5      	bne.n	80089c2 <USBD_GetLen+0x12>
  }

  return len;
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	2100      	movs	r1, #0
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 fce1 	bl	80093d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 fcd0 	bl	80093d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	2100      	movs	r1, #0
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 fcd4 	bl	8009414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	2100      	movs	r1, #0
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fcc3 	bl	8009414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2100      	movs	r1, #0
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fc8f 	bl	80093d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2205      	movs	r2, #5
 8008aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fc9d 	bl	8009414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4912      	ldr	r1, [pc, #72]	; (8008b34 <MX_USB_DEVICE_Init+0x50>)
 8008aec:	4812      	ldr	r0, [pc, #72]	; (8008b38 <MX_USB_DEVICE_Init+0x54>)
 8008aee:	f7fe fd07 	bl	8007500 <USBD_Init>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008af8:	f7f8 f992 	bl	8000e20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008afc:	490f      	ldr	r1, [pc, #60]	; (8008b3c <MX_USB_DEVICE_Init+0x58>)
 8008afe:	480e      	ldr	r0, [pc, #56]	; (8008b38 <MX_USB_DEVICE_Init+0x54>)
 8008b00:	f7fe fd2e 	bl	8007560 <USBD_RegisterClass>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b0a:	f7f8 f989 	bl	8000e20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b0e:	490c      	ldr	r1, [pc, #48]	; (8008b40 <MX_USB_DEVICE_Init+0x5c>)
 8008b10:	4809      	ldr	r0, [pc, #36]	; (8008b38 <MX_USB_DEVICE_Init+0x54>)
 8008b12:	f7fe fc1f 	bl	8007354 <USBD_CDC_RegisterInterface>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b1c:	f7f8 f980 	bl	8000e20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b20:	4805      	ldr	r0, [pc, #20]	; (8008b38 <MX_USB_DEVICE_Init+0x54>)
 8008b22:	f7fe fd53 	bl	80075cc <USBD_Start>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b2c:	f7f8 f978 	bl	8000e20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b30:	bf00      	nop
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	200000ac 	.word	0x200000ac
 8008b38:	20001364 	.word	0x20001364
 8008b3c:	20000018 	.word	0x20000018
 8008b40:	20000098 	.word	0x20000098

08008b44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4905      	ldr	r1, [pc, #20]	; (8008b60 <CDC_Init_FS+0x1c>)
 8008b4c:	4805      	ldr	r0, [pc, #20]	; (8008b64 <CDC_Init_FS+0x20>)
 8008b4e:	f7fe fc1b 	bl	8007388 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b52:	4905      	ldr	r1, [pc, #20]	; (8008b68 <CDC_Init_FS+0x24>)
 8008b54:	4803      	ldr	r0, [pc, #12]	; (8008b64 <CDC_Init_FS+0x20>)
 8008b56:	f7fe fc39 	bl	80073cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20001e40 	.word	0x20001e40
 8008b64:	20001364 	.word	0x20001364
 8008b68:	20001640 	.word	0x20001640

08008b6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	6039      	str	r1, [r7, #0]
 8008b86:	71fb      	strb	r3, [r7, #7]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	2b23      	cmp	r3, #35	; 0x23
 8008b90:	d84a      	bhi.n	8008c28 <CDC_Control_FS+0xac>
 8008b92:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <CDC_Control_FS+0x1c>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008c29 	.word	0x08008c29
 8008b9c:	08008c29 	.word	0x08008c29
 8008ba0:	08008c29 	.word	0x08008c29
 8008ba4:	08008c29 	.word	0x08008c29
 8008ba8:	08008c29 	.word	0x08008c29
 8008bac:	08008c29 	.word	0x08008c29
 8008bb0:	08008c29 	.word	0x08008c29
 8008bb4:	08008c29 	.word	0x08008c29
 8008bb8:	08008c29 	.word	0x08008c29
 8008bbc:	08008c29 	.word	0x08008c29
 8008bc0:	08008c29 	.word	0x08008c29
 8008bc4:	08008c29 	.word	0x08008c29
 8008bc8:	08008c29 	.word	0x08008c29
 8008bcc:	08008c29 	.word	0x08008c29
 8008bd0:	08008c29 	.word	0x08008c29
 8008bd4:	08008c29 	.word	0x08008c29
 8008bd8:	08008c29 	.word	0x08008c29
 8008bdc:	08008c29 	.word	0x08008c29
 8008be0:	08008c29 	.word	0x08008c29
 8008be4:	08008c29 	.word	0x08008c29
 8008be8:	08008c29 	.word	0x08008c29
 8008bec:	08008c29 	.word	0x08008c29
 8008bf0:	08008c29 	.word	0x08008c29
 8008bf4:	08008c29 	.word	0x08008c29
 8008bf8:	08008c29 	.word	0x08008c29
 8008bfc:	08008c29 	.word	0x08008c29
 8008c00:	08008c29 	.word	0x08008c29
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c29 	.word	0x08008c29
 8008c0c:	08008c29 	.word	0x08008c29
 8008c10:	08008c29 	.word	0x08008c29
 8008c14:	08008c29 	.word	0x08008c29
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c29 	.word	0x08008c29
 8008c20:	08008c29 	.word	0x08008c29
 8008c24:	08008c29 	.word	0x08008c29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c28:	bf00      	nop
  }

  return (USBD_OK);
 8008c2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	4805      	ldr	r0, [pc, #20]	; (8008c5c <CDC_Receive_FS+0x24>)
 8008c46:	f7fe fbc1 	bl	80073cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c4a:	4804      	ldr	r0, [pc, #16]	; (8008c5c <CDC_Receive_FS+0x24>)
 8008c4c:	f7fe fc22 	bl	8007494 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20001364 	.word	0x20001364

08008c60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c70:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e00b      	b.n	8008c9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c86:	887b      	ldrh	r3, [r7, #2]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	4806      	ldr	r0, [pc, #24]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c8e:	f7fe fb7b 	bl	8007388 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c92:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c94:	f7fe fbb8 	bl	8007408 <USBD_CDC_TransmitPacket>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20001364 	.word	0x20001364

08008cac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
	...

08008cd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2212      	movs	r2, #18
 8008ce0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ce2:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	200000c8 	.word	0x200000c8

08008cf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2204      	movs	r2, #4
 8008d04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d06:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	200000dc 	.word	0x200000dc

08008d18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d105      	bne.n	8008d36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4907      	ldr	r1, [pc, #28]	; (8008d4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008d2e:	4808      	ldr	r0, [pc, #32]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d30:	f7ff fdf8 	bl	8008924 <USBD_GetString>
 8008d34:	e004      	b.n	8008d40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	4904      	ldr	r1, [pc, #16]	; (8008d4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008d3a:	4805      	ldr	r0, [pc, #20]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d3c:	f7ff fdf2 	bl	8008924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d40:	4b02      	ldr	r3, [pc, #8]	; (8008d4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20002640 	.word	0x20002640
 8008d50:	08009e90 	.word	0x08009e90

08008d54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6039      	str	r1, [r7, #0]
 8008d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	4904      	ldr	r1, [pc, #16]	; (8008d74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d64:	4804      	ldr	r0, [pc, #16]	; (8008d78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d66:	f7ff fddd 	bl	8008924 <USBD_GetString>
  return USBD_StrDesc;
 8008d6a:	4b02      	ldr	r3, [pc, #8]	; (8008d74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20002640 	.word	0x20002640
 8008d78:	08009ea8 	.word	0x08009ea8

08008d7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	221a      	movs	r2, #26
 8008d8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d8e:	f000 f843 	bl	8008e18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d92:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	200000e0 	.word	0x200000e0

08008da0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	6039      	str	r1, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d105      	bne.n	8008dbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4907      	ldr	r1, [pc, #28]	; (8008dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008db6:	4808      	ldr	r0, [pc, #32]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008db8:	f7ff fdb4 	bl	8008924 <USBD_GetString>
 8008dbc:	e004      	b.n	8008dc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4904      	ldr	r1, [pc, #16]	; (8008dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dc2:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dc4:	f7ff fdae 	bl	8008924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20002640 	.word	0x20002640
 8008dd8:	08009ebc 	.word	0x08009ebc

08008ddc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4907      	ldr	r1, [pc, #28]	; (8008e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008df2:	4808      	ldr	r0, [pc, #32]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008df4:	f7ff fd96 	bl	8008924 <USBD_GetString>
 8008df8:	e004      	b.n	8008e04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	4904      	ldr	r1, [pc, #16]	; (8008e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dfe:	4805      	ldr	r0, [pc, #20]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e00:	f7ff fd90 	bl	8008924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e04:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20002640 	.word	0x20002640
 8008e14:	08009ec8 	.word	0x08009ec8

08008e18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <Get_SerialNum+0x44>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <Get_SerialNum+0x48>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e2a:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <Get_SerialNum+0x4c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4413      	add	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d009      	beq.n	8008e52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e3e:	2208      	movs	r2, #8
 8008e40:	4909      	ldr	r1, [pc, #36]	; (8008e68 <Get_SerialNum+0x50>)
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 f814 	bl	8008e70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e48:	2204      	movs	r2, #4
 8008e4a:	4908      	ldr	r1, [pc, #32]	; (8008e6c <Get_SerialNum+0x54>)
 8008e4c:	68b8      	ldr	r0, [r7, #8]
 8008e4e:	f000 f80f 	bl	8008e70 <IntToUnicode>
  }
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	1fff7a10 	.word	0x1fff7a10
 8008e60:	1fff7a14 	.word	0x1fff7a14
 8008e64:	1fff7a18 	.word	0x1fff7a18
 8008e68:	200000e2 	.word	0x200000e2
 8008e6c:	200000f2 	.word	0x200000f2

08008e70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
 8008e86:	e027      	b.n	8008ed8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	0f1b      	lsrs	r3, r3, #28
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d80b      	bhi.n	8008ea8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	0f1b      	lsrs	r3, r3, #28
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	440b      	add	r3, r1
 8008ea0:	3230      	adds	r2, #48	; 0x30
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e00a      	b.n	8008ebe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	0f1b      	lsrs	r3, r3, #28
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3237      	adds	r2, #55	; 0x37
 8008eba:	b2d2      	uxtb	r2, r2
 8008ebc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	011b      	lsls	r3, r3, #4
 8008ec2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	3301      	adds	r3, #1
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	4413      	add	r3, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	75fb      	strb	r3, [r7, #23]
 8008ed8:	7dfa      	ldrb	r2, [r7, #23]
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d3d3      	bcc.n	8008e88 <IntToUnicode+0x18>
  }
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
	...

08008ef0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ef8:	f107 0314 	add.w	r3, r7, #20
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	605a      	str	r2, [r3, #4]
 8008f02:	609a      	str	r2, [r3, #8]
 8008f04:	60da      	str	r2, [r3, #12]
 8008f06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f10:	d13a      	bne.n	8008f88 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f12:	2300      	movs	r3, #0
 8008f14:	613b      	str	r3, [r7, #16]
 8008f16:	4b1e      	ldr	r3, [pc, #120]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	4a1d      	ldr	r2, [pc, #116]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	6313      	str	r3, [r2, #48]	; 0x30
 8008f22:	4b1b      	ldr	r3, [pc, #108]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f34:	2302      	movs	r3, #2
 8008f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f40:	230a      	movs	r3, #10
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f44:	f107 0314 	add.w	r3, r7, #20
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4812      	ldr	r0, [pc, #72]	; (8008f94 <HAL_PCD_MspInit+0xa4>)
 8008f4c:	f7f9 fae0 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f50:	4b0f      	ldr	r3, [pc, #60]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	4a0e      	ldr	r2, [pc, #56]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5a:	6353      	str	r3, [r2, #52]	; 0x34
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f64:	4a0a      	ldr	r2, [pc, #40]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8008f6c:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	2043      	movs	r0, #67	; 0x43
 8008f7e:	f7f8 ff20 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f82:	2043      	movs	r0, #67	; 0x43
 8008f84:	f7f8 ff39 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f88:	bf00      	nop
 8008f8a:	3728      	adds	r7, #40	; 0x28
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	40023800 	.word	0x40023800
 8008f94:	40020000 	.word	0x40020000

08008f98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fe fb59 	bl	8007666 <USBD_LL_SetupStage>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	f7fe fb93 	bl	8007710 <USBD_LL_DataOutStage>
}
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4613      	mov	r3, r2
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	4413      	add	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	334c      	adds	r3, #76	; 0x4c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	4619      	mov	r1, r3
 800901a:	f7fe fc2c 	bl	8007876 <USBD_LL_DataInStage>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fd60 	bl	8007afa <USBD_LL_SOF>
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800904a:	2301      	movs	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d001      	beq.n	800905a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009056:	f7f7 fee3 	bl	8000e20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009060:	7bfa      	ldrb	r2, [r7, #15]
 8009062:	4611      	mov	r1, r2
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fd0a 	bl	8007a7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fcb2 	bl	80079da <USBD_LL_Reset>
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fd05 	bl	8007a9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	6812      	ldr	r2, [r2, #0]
 80090a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090a6:	f043 0301 	orr.w	r3, r3, #1
 80090aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <HAL_PCD_SuspendCallback+0x48>)
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	4a03      	ldr	r2, [pc, #12]	; (80090c8 <HAL_PCD_SuspendCallback+0x48>)
 80090ba:	f043 0306 	orr.w	r3, r3, #6
 80090be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	e000ed00 	.word	0xe000ed00

080090cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fcf5 	bl	8007aca <USBD_LL_Resume>
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fd4d 	bl	8007b9e <USBD_LL_IsoOUTIncomplete>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fd09 	bl	8007b3a <USBD_LL_IsoINIncomplete>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fd5f 	bl	8007c02 <USBD_LL_DevConnected>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fd5c 	bl	8007c18 <USBD_LL_DevDisconnected>
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d13c      	bne.n	80091f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009178:	4a20      	ldr	r2, [pc, #128]	; (80091fc <USBD_LL_Init+0x94>)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a1e      	ldr	r2, [pc, #120]	; (80091fc <USBD_LL_Init+0x94>)
 8009184:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009188:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <USBD_LL_Init+0x94>)
 800918a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800918e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009190:	4b1a      	ldr	r3, [pc, #104]	; (80091fc <USBD_LL_Init+0x94>)
 8009192:	2204      	movs	r2, #4
 8009194:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009196:	4b19      	ldr	r3, [pc, #100]	; (80091fc <USBD_LL_Init+0x94>)
 8009198:	2202      	movs	r2, #2
 800919a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800919c:	4b17      	ldr	r3, [pc, #92]	; (80091fc <USBD_LL_Init+0x94>)
 800919e:	2200      	movs	r2, #0
 80091a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091a2:	4b16      	ldr	r3, [pc, #88]	; (80091fc <USBD_LL_Init+0x94>)
 80091a4:	2202      	movs	r2, #2
 80091a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091a8:	4b14      	ldr	r3, [pc, #80]	; (80091fc <USBD_LL_Init+0x94>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091ae:	4b13      	ldr	r3, [pc, #76]	; (80091fc <USBD_LL_Init+0x94>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091b4:	4b11      	ldr	r3, [pc, #68]	; (80091fc <USBD_LL_Init+0x94>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80091ba:	4b10      	ldr	r3, [pc, #64]	; (80091fc <USBD_LL_Init+0x94>)
 80091bc:	2200      	movs	r2, #0
 80091be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091c0:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <USBD_LL_Init+0x94>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091c6:	480d      	ldr	r0, [pc, #52]	; (80091fc <USBD_LL_Init+0x94>)
 80091c8:	f7f9 fb3f 	bl	800284a <HAL_PCD_Init>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091d2:	f7f7 fe25 	bl	8000e20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091d6:	2180      	movs	r1, #128	; 0x80
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <USBD_LL_Init+0x94>)
 80091da:	f7fa fd96 	bl	8003d0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091de:	2240      	movs	r2, #64	; 0x40
 80091e0:	2100      	movs	r1, #0
 80091e2:	4806      	ldr	r0, [pc, #24]	; (80091fc <USBD_LL_Init+0x94>)
 80091e4:	f7fa fd4a 	bl	8003c7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091e8:	2280      	movs	r2, #128	; 0x80
 80091ea:	2101      	movs	r1, #1
 80091ec:	4803      	ldr	r0, [pc, #12]	; (80091fc <USBD_LL_Init+0x94>)
 80091ee:	f7fa fd45 	bl	8003c7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	20002840 	.word	0x20002840

08009200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009216:	4618      	mov	r0, r3
 8009218:	f7f9 fc34 	bl	8002a84 <HAL_PCD_Start>
 800921c:	4603      	mov	r3, r0
 800921e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	4618      	mov	r0, r3
 8009224:	f000 f942 	bl	80094ac <USBD_Get_USB_Status>
 8009228:	4603      	mov	r3, r0
 800922a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922c:	7bbb      	ldrb	r3, [r7, #14]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	4608      	mov	r0, r1
 8009240:	4611      	mov	r1, r2
 8009242:	461a      	mov	r2, r3
 8009244:	4603      	mov	r3, r0
 8009246:	70fb      	strb	r3, [r7, #3]
 8009248:	460b      	mov	r3, r1
 800924a:	70bb      	strb	r3, [r7, #2]
 800924c:	4613      	mov	r3, r2
 800924e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800925e:	78bb      	ldrb	r3, [r7, #2]
 8009260:	883a      	ldrh	r2, [r7, #0]
 8009262:	78f9      	ldrb	r1, [r7, #3]
 8009264:	f7fa f905 	bl	8003472 <HAL_PCD_EP_Open>
 8009268:	4603      	mov	r3, r0
 800926a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f91c 	bl	80094ac <USBD_Get_USB_Status>
 8009274:	4603      	mov	r3, r0
 8009276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009278:	7bbb      	ldrb	r3, [r7, #14]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800929c:	78fa      	ldrb	r2, [r7, #3]
 800929e:	4611      	mov	r1, r2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fa f94e 	bl	8003542 <HAL_PCD_EP_Close>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f8fd 	bl	80094ac <USBD_Get_USB_Status>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fa fa26 	bl	8003730 <HAL_PCD_EP_SetStall>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f8de 	bl	80094ac <USBD_Get_USB_Status>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f7fa fa6b 	bl	80037f8 <HAL_PCD_EP_ClrStall>
 8009322:	4603      	mov	r3, r0
 8009324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 f8bf 	bl	80094ac <USBD_Get_USB_Status>
 800932e:	4603      	mov	r3, r0
 8009330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009332:	7bbb      	ldrb	r3, [r7, #14]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800934e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009354:	2b00      	cmp	r3, #0
 8009356:	da0b      	bge.n	8009370 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	4613      	mov	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	440b      	add	r3, r1
 800936a:	333e      	adds	r3, #62	; 0x3e
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	e00b      	b.n	8009388 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	4613      	mov	r3, r2
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009386:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093ae:	78fa      	ldrb	r2, [r7, #3]
 80093b0:	4611      	mov	r1, r2
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fa f838 	bl	8003428 <HAL_PCD_SetAddress>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 f874 	bl	80094ac <USBD_Get_USB_Status>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b086      	sub	sp, #24
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
 80093de:	460b      	mov	r3, r1
 80093e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093f0:	7af9      	ldrb	r1, [r7, #11]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	f7fa f951 	bl	800369c <HAL_PCD_EP_Transmit>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f853 	bl	80094ac <USBD_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800940a:	7dbb      	ldrb	r3, [r7, #22]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	607a      	str	r2, [r7, #4]
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	460b      	mov	r3, r1
 8009422:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009432:	7af9      	ldrb	r1, [r7, #11]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	f7fa f8cd 	bl	80035d6 <HAL_PCD_EP_Receive>
 800943c:	4603      	mov	r3, r0
 800943e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f832 	bl	80094ac <USBD_Get_USB_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800944c:	7dbb      	ldrb	r3, [r7, #22]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	4611      	mov	r1, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f7fa f8fd 	bl	800366c <HAL_PCD_EP_GetRxCount>
 8009472:	4603      	mov	r3, r0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009484:	4b03      	ldr	r3, [pc, #12]	; (8009494 <USBD_static_malloc+0x18>)
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20002d4c 	.word	0x20002d4c

08009498 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]

}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d817      	bhi.n	80094f0 <USBD_Get_USB_Status+0x44>
 80094c0:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <USBD_Get_USB_Status+0x1c>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094d9 	.word	0x080094d9
 80094cc:	080094df 	.word	0x080094df
 80094d0:	080094e5 	.word	0x080094e5
 80094d4:	080094eb 	.word	0x080094eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
    break;
 80094dc:	e00b      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094de:	2303      	movs	r3, #3
 80094e0:	73fb      	strb	r3, [r7, #15]
    break;
 80094e2:	e008      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e4:	2301      	movs	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]
    break;
 80094e8:	e005      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ea:	2303      	movs	r3, #3
 80094ec:	73fb      	strb	r3, [r7, #15]
    break;
 80094ee:	e002      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094f0:	2303      	movs	r3, #3
 80094f2:	73fb      	strb	r3, [r7, #15]
    break;
 80094f4:	bf00      	nop
  }
  return usb_status;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <siprintf>:
 8009504:	b40e      	push	{r1, r2, r3}
 8009506:	b500      	push	{lr}
 8009508:	b09c      	sub	sp, #112	; 0x70
 800950a:	ab1d      	add	r3, sp, #116	; 0x74
 800950c:	9002      	str	r0, [sp, #8]
 800950e:	9006      	str	r0, [sp, #24]
 8009510:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009514:	4809      	ldr	r0, [pc, #36]	; (800953c <siprintf+0x38>)
 8009516:	9107      	str	r1, [sp, #28]
 8009518:	9104      	str	r1, [sp, #16]
 800951a:	4909      	ldr	r1, [pc, #36]	; (8009540 <siprintf+0x3c>)
 800951c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009520:	9105      	str	r1, [sp, #20]
 8009522:	6800      	ldr	r0, [r0, #0]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	a902      	add	r1, sp, #8
 8009528:	f000 f992 	bl	8009850 <_svfiprintf_r>
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	2200      	movs	r2, #0
 8009530:	701a      	strb	r2, [r3, #0]
 8009532:	b01c      	add	sp, #112	; 0x70
 8009534:	f85d eb04 	ldr.w	lr, [sp], #4
 8009538:	b003      	add	sp, #12
 800953a:	4770      	bx	lr
 800953c:	20000148 	.word	0x20000148
 8009540:	ffff0208 	.word	0xffff0208

08009544 <memset>:
 8009544:	4402      	add	r2, r0
 8009546:	4603      	mov	r3, r0
 8009548:	4293      	cmp	r3, r2
 800954a:	d100      	bne.n	800954e <memset+0xa>
 800954c:	4770      	bx	lr
 800954e:	f803 1b01 	strb.w	r1, [r3], #1
 8009552:	e7f9      	b.n	8009548 <memset+0x4>

08009554 <__errno>:
 8009554:	4b01      	ldr	r3, [pc, #4]	; (800955c <__errno+0x8>)
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	20000148 	.word	0x20000148

08009560 <__libc_init_array>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	4d0d      	ldr	r5, [pc, #52]	; (8009598 <__libc_init_array+0x38>)
 8009564:	4c0d      	ldr	r4, [pc, #52]	; (800959c <__libc_init_array+0x3c>)
 8009566:	1b64      	subs	r4, r4, r5
 8009568:	10a4      	asrs	r4, r4, #2
 800956a:	2600      	movs	r6, #0
 800956c:	42a6      	cmp	r6, r4
 800956e:	d109      	bne.n	8009584 <__libc_init_array+0x24>
 8009570:	4d0b      	ldr	r5, [pc, #44]	; (80095a0 <__libc_init_array+0x40>)
 8009572:	4c0c      	ldr	r4, [pc, #48]	; (80095a4 <__libc_init_array+0x44>)
 8009574:	f000 fc6a 	bl	8009e4c <_init>
 8009578:	1b64      	subs	r4, r4, r5
 800957a:	10a4      	asrs	r4, r4, #2
 800957c:	2600      	movs	r6, #0
 800957e:	42a6      	cmp	r6, r4
 8009580:	d105      	bne.n	800958e <__libc_init_array+0x2e>
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	f855 3b04 	ldr.w	r3, [r5], #4
 8009588:	4798      	blx	r3
 800958a:	3601      	adds	r6, #1
 800958c:	e7ee      	b.n	800956c <__libc_init_array+0xc>
 800958e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009592:	4798      	blx	r3
 8009594:	3601      	adds	r6, #1
 8009596:	e7f2      	b.n	800957e <__libc_init_array+0x1e>
 8009598:	08009f2c 	.word	0x08009f2c
 800959c:	08009f2c 	.word	0x08009f2c
 80095a0:	08009f2c 	.word	0x08009f2c
 80095a4:	08009f30 	.word	0x08009f30

080095a8 <__retarget_lock_acquire_recursive>:
 80095a8:	4770      	bx	lr

080095aa <__retarget_lock_release_recursive>:
 80095aa:	4770      	bx	lr

080095ac <_free_r>:
 80095ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ae:	2900      	cmp	r1, #0
 80095b0:	d044      	beq.n	800963c <_free_r+0x90>
 80095b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b6:	9001      	str	r0, [sp, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f1a1 0404 	sub.w	r4, r1, #4
 80095be:	bfb8      	it	lt
 80095c0:	18e4      	addlt	r4, r4, r3
 80095c2:	f000 f8df 	bl	8009784 <__malloc_lock>
 80095c6:	4a1e      	ldr	r2, [pc, #120]	; (8009640 <_free_r+0x94>)
 80095c8:	9801      	ldr	r0, [sp, #4]
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	b933      	cbnz	r3, 80095dc <_free_r+0x30>
 80095ce:	6063      	str	r3, [r4, #4]
 80095d0:	6014      	str	r4, [r2, #0]
 80095d2:	b003      	add	sp, #12
 80095d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095d8:	f000 b8da 	b.w	8009790 <__malloc_unlock>
 80095dc:	42a3      	cmp	r3, r4
 80095de:	d908      	bls.n	80095f2 <_free_r+0x46>
 80095e0:	6825      	ldr	r5, [r4, #0]
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf01      	itttt	eq
 80095e8:	6819      	ldreq	r1, [r3, #0]
 80095ea:	685b      	ldreq	r3, [r3, #4]
 80095ec:	1949      	addeq	r1, r1, r5
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	e7ed      	b.n	80095ce <_free_r+0x22>
 80095f2:	461a      	mov	r2, r3
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	b10b      	cbz	r3, 80095fc <_free_r+0x50>
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d9fa      	bls.n	80095f2 <_free_r+0x46>
 80095fc:	6811      	ldr	r1, [r2, #0]
 80095fe:	1855      	adds	r5, r2, r1
 8009600:	42a5      	cmp	r5, r4
 8009602:	d10b      	bne.n	800961c <_free_r+0x70>
 8009604:	6824      	ldr	r4, [r4, #0]
 8009606:	4421      	add	r1, r4
 8009608:	1854      	adds	r4, r2, r1
 800960a:	42a3      	cmp	r3, r4
 800960c:	6011      	str	r1, [r2, #0]
 800960e:	d1e0      	bne.n	80095d2 <_free_r+0x26>
 8009610:	681c      	ldr	r4, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	6053      	str	r3, [r2, #4]
 8009616:	440c      	add	r4, r1
 8009618:	6014      	str	r4, [r2, #0]
 800961a:	e7da      	b.n	80095d2 <_free_r+0x26>
 800961c:	d902      	bls.n	8009624 <_free_r+0x78>
 800961e:	230c      	movs	r3, #12
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	e7d6      	b.n	80095d2 <_free_r+0x26>
 8009624:	6825      	ldr	r5, [r4, #0]
 8009626:	1961      	adds	r1, r4, r5
 8009628:	428b      	cmp	r3, r1
 800962a:	bf04      	itt	eq
 800962c:	6819      	ldreq	r1, [r3, #0]
 800962e:	685b      	ldreq	r3, [r3, #4]
 8009630:	6063      	str	r3, [r4, #4]
 8009632:	bf04      	itt	eq
 8009634:	1949      	addeq	r1, r1, r5
 8009636:	6021      	streq	r1, [r4, #0]
 8009638:	6054      	str	r4, [r2, #4]
 800963a:	e7ca      	b.n	80095d2 <_free_r+0x26>
 800963c:	b003      	add	sp, #12
 800963e:	bd30      	pop	{r4, r5, pc}
 8009640:	200030ac 	.word	0x200030ac

08009644 <sbrk_aligned>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	4e0e      	ldr	r6, [pc, #56]	; (8009680 <sbrk_aligned+0x3c>)
 8009648:	460c      	mov	r4, r1
 800964a:	6831      	ldr	r1, [r6, #0]
 800964c:	4605      	mov	r5, r0
 800964e:	b911      	cbnz	r1, 8009656 <sbrk_aligned+0x12>
 8009650:	f000 fba6 	bl	8009da0 <_sbrk_r>
 8009654:	6030      	str	r0, [r6, #0]
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	f000 fba1 	bl	8009da0 <_sbrk_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d00a      	beq.n	8009678 <sbrk_aligned+0x34>
 8009662:	1cc4      	adds	r4, r0, #3
 8009664:	f024 0403 	bic.w	r4, r4, #3
 8009668:	42a0      	cmp	r0, r4
 800966a:	d007      	beq.n	800967c <sbrk_aligned+0x38>
 800966c:	1a21      	subs	r1, r4, r0
 800966e:	4628      	mov	r0, r5
 8009670:	f000 fb96 	bl	8009da0 <_sbrk_r>
 8009674:	3001      	adds	r0, #1
 8009676:	d101      	bne.n	800967c <sbrk_aligned+0x38>
 8009678:	f04f 34ff 	mov.w	r4, #4294967295
 800967c:	4620      	mov	r0, r4
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	200030b0 	.word	0x200030b0

08009684 <_malloc_r>:
 8009684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009688:	1ccd      	adds	r5, r1, #3
 800968a:	f025 0503 	bic.w	r5, r5, #3
 800968e:	3508      	adds	r5, #8
 8009690:	2d0c      	cmp	r5, #12
 8009692:	bf38      	it	cc
 8009694:	250c      	movcc	r5, #12
 8009696:	2d00      	cmp	r5, #0
 8009698:	4607      	mov	r7, r0
 800969a:	db01      	blt.n	80096a0 <_malloc_r+0x1c>
 800969c:	42a9      	cmp	r1, r5
 800969e:	d905      	bls.n	80096ac <_malloc_r+0x28>
 80096a0:	230c      	movs	r3, #12
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	2600      	movs	r6, #0
 80096a6:	4630      	mov	r0, r6
 80096a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009780 <_malloc_r+0xfc>
 80096b0:	f000 f868 	bl	8009784 <__malloc_lock>
 80096b4:	f8d8 3000 	ldr.w	r3, [r8]
 80096b8:	461c      	mov	r4, r3
 80096ba:	bb5c      	cbnz	r4, 8009714 <_malloc_r+0x90>
 80096bc:	4629      	mov	r1, r5
 80096be:	4638      	mov	r0, r7
 80096c0:	f7ff ffc0 	bl	8009644 <sbrk_aligned>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	4604      	mov	r4, r0
 80096c8:	d155      	bne.n	8009776 <_malloc_r+0xf2>
 80096ca:	f8d8 4000 	ldr.w	r4, [r8]
 80096ce:	4626      	mov	r6, r4
 80096d0:	2e00      	cmp	r6, #0
 80096d2:	d145      	bne.n	8009760 <_malloc_r+0xdc>
 80096d4:	2c00      	cmp	r4, #0
 80096d6:	d048      	beq.n	800976a <_malloc_r+0xe6>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	4631      	mov	r1, r6
 80096dc:	4638      	mov	r0, r7
 80096de:	eb04 0903 	add.w	r9, r4, r3
 80096e2:	f000 fb5d 	bl	8009da0 <_sbrk_r>
 80096e6:	4581      	cmp	r9, r0
 80096e8:	d13f      	bne.n	800976a <_malloc_r+0xe6>
 80096ea:	6821      	ldr	r1, [r4, #0]
 80096ec:	1a6d      	subs	r5, r5, r1
 80096ee:	4629      	mov	r1, r5
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff ffa7 	bl	8009644 <sbrk_aligned>
 80096f6:	3001      	adds	r0, #1
 80096f8:	d037      	beq.n	800976a <_malloc_r+0xe6>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	442b      	add	r3, r5
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	f8d8 3000 	ldr.w	r3, [r8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d038      	beq.n	800977a <_malloc_r+0xf6>
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	42a2      	cmp	r2, r4
 800970c:	d12b      	bne.n	8009766 <_malloc_r+0xe2>
 800970e:	2200      	movs	r2, #0
 8009710:	605a      	str	r2, [r3, #4]
 8009712:	e00f      	b.n	8009734 <_malloc_r+0xb0>
 8009714:	6822      	ldr	r2, [r4, #0]
 8009716:	1b52      	subs	r2, r2, r5
 8009718:	d41f      	bmi.n	800975a <_malloc_r+0xd6>
 800971a:	2a0b      	cmp	r2, #11
 800971c:	d917      	bls.n	800974e <_malloc_r+0xca>
 800971e:	1961      	adds	r1, r4, r5
 8009720:	42a3      	cmp	r3, r4
 8009722:	6025      	str	r5, [r4, #0]
 8009724:	bf18      	it	ne
 8009726:	6059      	strne	r1, [r3, #4]
 8009728:	6863      	ldr	r3, [r4, #4]
 800972a:	bf08      	it	eq
 800972c:	f8c8 1000 	streq.w	r1, [r8]
 8009730:	5162      	str	r2, [r4, r5]
 8009732:	604b      	str	r3, [r1, #4]
 8009734:	4638      	mov	r0, r7
 8009736:	f104 060b 	add.w	r6, r4, #11
 800973a:	f000 f829 	bl	8009790 <__malloc_unlock>
 800973e:	f026 0607 	bic.w	r6, r6, #7
 8009742:	1d23      	adds	r3, r4, #4
 8009744:	1af2      	subs	r2, r6, r3
 8009746:	d0ae      	beq.n	80096a6 <_malloc_r+0x22>
 8009748:	1b9b      	subs	r3, r3, r6
 800974a:	50a3      	str	r3, [r4, r2]
 800974c:	e7ab      	b.n	80096a6 <_malloc_r+0x22>
 800974e:	42a3      	cmp	r3, r4
 8009750:	6862      	ldr	r2, [r4, #4]
 8009752:	d1dd      	bne.n	8009710 <_malloc_r+0x8c>
 8009754:	f8c8 2000 	str.w	r2, [r8]
 8009758:	e7ec      	b.n	8009734 <_malloc_r+0xb0>
 800975a:	4623      	mov	r3, r4
 800975c:	6864      	ldr	r4, [r4, #4]
 800975e:	e7ac      	b.n	80096ba <_malloc_r+0x36>
 8009760:	4634      	mov	r4, r6
 8009762:	6876      	ldr	r6, [r6, #4]
 8009764:	e7b4      	b.n	80096d0 <_malloc_r+0x4c>
 8009766:	4613      	mov	r3, r2
 8009768:	e7cc      	b.n	8009704 <_malloc_r+0x80>
 800976a:	230c      	movs	r3, #12
 800976c:	603b      	str	r3, [r7, #0]
 800976e:	4638      	mov	r0, r7
 8009770:	f000 f80e 	bl	8009790 <__malloc_unlock>
 8009774:	e797      	b.n	80096a6 <_malloc_r+0x22>
 8009776:	6025      	str	r5, [r4, #0]
 8009778:	e7dc      	b.n	8009734 <_malloc_r+0xb0>
 800977a:	605b      	str	r3, [r3, #4]
 800977c:	deff      	udf	#255	; 0xff
 800977e:	bf00      	nop
 8009780:	200030ac 	.word	0x200030ac

08009784 <__malloc_lock>:
 8009784:	4801      	ldr	r0, [pc, #4]	; (800978c <__malloc_lock+0x8>)
 8009786:	f7ff bf0f 	b.w	80095a8 <__retarget_lock_acquire_recursive>
 800978a:	bf00      	nop
 800978c:	200030a8 	.word	0x200030a8

08009790 <__malloc_unlock>:
 8009790:	4801      	ldr	r0, [pc, #4]	; (8009798 <__malloc_unlock+0x8>)
 8009792:	f7ff bf0a 	b.w	80095aa <__retarget_lock_release_recursive>
 8009796:	bf00      	nop
 8009798:	200030a8 	.word	0x200030a8

0800979c <__ssputs_r>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	688e      	ldr	r6, [r1, #8]
 80097a2:	461f      	mov	r7, r3
 80097a4:	42be      	cmp	r6, r7
 80097a6:	680b      	ldr	r3, [r1, #0]
 80097a8:	4682      	mov	sl, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	4690      	mov	r8, r2
 80097ae:	d82c      	bhi.n	800980a <__ssputs_r+0x6e>
 80097b0:	898a      	ldrh	r2, [r1, #12]
 80097b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097b6:	d026      	beq.n	8009806 <__ssputs_r+0x6a>
 80097b8:	6965      	ldr	r5, [r4, #20]
 80097ba:	6909      	ldr	r1, [r1, #16]
 80097bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097c0:	eba3 0901 	sub.w	r9, r3, r1
 80097c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097c8:	1c7b      	adds	r3, r7, #1
 80097ca:	444b      	add	r3, r9
 80097cc:	106d      	asrs	r5, r5, #1
 80097ce:	429d      	cmp	r5, r3
 80097d0:	bf38      	it	cc
 80097d2:	461d      	movcc	r5, r3
 80097d4:	0553      	lsls	r3, r2, #21
 80097d6:	d527      	bpl.n	8009828 <__ssputs_r+0x8c>
 80097d8:	4629      	mov	r1, r5
 80097da:	f7ff ff53 	bl	8009684 <_malloc_r>
 80097de:	4606      	mov	r6, r0
 80097e0:	b360      	cbz	r0, 800983c <__ssputs_r+0xa0>
 80097e2:	6921      	ldr	r1, [r4, #16]
 80097e4:	464a      	mov	r2, r9
 80097e6:	f000 faeb 	bl	8009dc0 <memcpy>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	6126      	str	r6, [r4, #16]
 80097f8:	6165      	str	r5, [r4, #20]
 80097fa:	444e      	add	r6, r9
 80097fc:	eba5 0509 	sub.w	r5, r5, r9
 8009800:	6026      	str	r6, [r4, #0]
 8009802:	60a5      	str	r5, [r4, #8]
 8009804:	463e      	mov	r6, r7
 8009806:	42be      	cmp	r6, r7
 8009808:	d900      	bls.n	800980c <__ssputs_r+0x70>
 800980a:	463e      	mov	r6, r7
 800980c:	6820      	ldr	r0, [r4, #0]
 800980e:	4632      	mov	r2, r6
 8009810:	4641      	mov	r1, r8
 8009812:	f000 faab 	bl	8009d6c <memmove>
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	1b9b      	subs	r3, r3, r6
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	4433      	add	r3, r6
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	2000      	movs	r0, #0
 8009824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009828:	462a      	mov	r2, r5
 800982a:	f000 fad7 	bl	8009ddc <_realloc_r>
 800982e:	4606      	mov	r6, r0
 8009830:	2800      	cmp	r0, #0
 8009832:	d1e0      	bne.n	80097f6 <__ssputs_r+0x5a>
 8009834:	6921      	ldr	r1, [r4, #16]
 8009836:	4650      	mov	r0, sl
 8009838:	f7ff feb8 	bl	80095ac <_free_r>
 800983c:	230c      	movs	r3, #12
 800983e:	f8ca 3000 	str.w	r3, [sl]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	f04f 30ff 	mov.w	r0, #4294967295
 800984e:	e7e9      	b.n	8009824 <__ssputs_r+0x88>

08009850 <_svfiprintf_r>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	4698      	mov	r8, r3
 8009856:	898b      	ldrh	r3, [r1, #12]
 8009858:	061b      	lsls	r3, r3, #24
 800985a:	b09d      	sub	sp, #116	; 0x74
 800985c:	4607      	mov	r7, r0
 800985e:	460d      	mov	r5, r1
 8009860:	4614      	mov	r4, r2
 8009862:	d50e      	bpl.n	8009882 <_svfiprintf_r+0x32>
 8009864:	690b      	ldr	r3, [r1, #16]
 8009866:	b963      	cbnz	r3, 8009882 <_svfiprintf_r+0x32>
 8009868:	2140      	movs	r1, #64	; 0x40
 800986a:	f7ff ff0b 	bl	8009684 <_malloc_r>
 800986e:	6028      	str	r0, [r5, #0]
 8009870:	6128      	str	r0, [r5, #16]
 8009872:	b920      	cbnz	r0, 800987e <_svfiprintf_r+0x2e>
 8009874:	230c      	movs	r3, #12
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	e0d0      	b.n	8009a20 <_svfiprintf_r+0x1d0>
 800987e:	2340      	movs	r3, #64	; 0x40
 8009880:	616b      	str	r3, [r5, #20]
 8009882:	2300      	movs	r3, #0
 8009884:	9309      	str	r3, [sp, #36]	; 0x24
 8009886:	2320      	movs	r3, #32
 8009888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800988c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009890:	2330      	movs	r3, #48	; 0x30
 8009892:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a38 <_svfiprintf_r+0x1e8>
 8009896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800989a:	f04f 0901 	mov.w	r9, #1
 800989e:	4623      	mov	r3, r4
 80098a0:	469a      	mov	sl, r3
 80098a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098a6:	b10a      	cbz	r2, 80098ac <_svfiprintf_r+0x5c>
 80098a8:	2a25      	cmp	r2, #37	; 0x25
 80098aa:	d1f9      	bne.n	80098a0 <_svfiprintf_r+0x50>
 80098ac:	ebba 0b04 	subs.w	fp, sl, r4
 80098b0:	d00b      	beq.n	80098ca <_svfiprintf_r+0x7a>
 80098b2:	465b      	mov	r3, fp
 80098b4:	4622      	mov	r2, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	4638      	mov	r0, r7
 80098ba:	f7ff ff6f 	bl	800979c <__ssputs_r>
 80098be:	3001      	adds	r0, #1
 80098c0:	f000 80a9 	beq.w	8009a16 <_svfiprintf_r+0x1c6>
 80098c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098c6:	445a      	add	r2, fp
 80098c8:	9209      	str	r2, [sp, #36]	; 0x24
 80098ca:	f89a 3000 	ldrb.w	r3, [sl]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 80a1 	beq.w	8009a16 <_svfiprintf_r+0x1c6>
 80098d4:	2300      	movs	r3, #0
 80098d6:	f04f 32ff 	mov.w	r2, #4294967295
 80098da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098de:	f10a 0a01 	add.w	sl, sl, #1
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	9307      	str	r3, [sp, #28]
 80098e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098ea:	931a      	str	r3, [sp, #104]	; 0x68
 80098ec:	4654      	mov	r4, sl
 80098ee:	2205      	movs	r2, #5
 80098f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f4:	4850      	ldr	r0, [pc, #320]	; (8009a38 <_svfiprintf_r+0x1e8>)
 80098f6:	f7f6 fc73 	bl	80001e0 <memchr>
 80098fa:	9a04      	ldr	r2, [sp, #16]
 80098fc:	b9d8      	cbnz	r0, 8009936 <_svfiprintf_r+0xe6>
 80098fe:	06d0      	lsls	r0, r2, #27
 8009900:	bf44      	itt	mi
 8009902:	2320      	movmi	r3, #32
 8009904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009908:	0711      	lsls	r1, r2, #28
 800990a:	bf44      	itt	mi
 800990c:	232b      	movmi	r3, #43	; 0x2b
 800990e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009912:	f89a 3000 	ldrb.w	r3, [sl]
 8009916:	2b2a      	cmp	r3, #42	; 0x2a
 8009918:	d015      	beq.n	8009946 <_svfiprintf_r+0xf6>
 800991a:	9a07      	ldr	r2, [sp, #28]
 800991c:	4654      	mov	r4, sl
 800991e:	2000      	movs	r0, #0
 8009920:	f04f 0c0a 	mov.w	ip, #10
 8009924:	4621      	mov	r1, r4
 8009926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800992a:	3b30      	subs	r3, #48	; 0x30
 800992c:	2b09      	cmp	r3, #9
 800992e:	d94d      	bls.n	80099cc <_svfiprintf_r+0x17c>
 8009930:	b1b0      	cbz	r0, 8009960 <_svfiprintf_r+0x110>
 8009932:	9207      	str	r2, [sp, #28]
 8009934:	e014      	b.n	8009960 <_svfiprintf_r+0x110>
 8009936:	eba0 0308 	sub.w	r3, r0, r8
 800993a:	fa09 f303 	lsl.w	r3, r9, r3
 800993e:	4313      	orrs	r3, r2
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	46a2      	mov	sl, r4
 8009944:	e7d2      	b.n	80098ec <_svfiprintf_r+0x9c>
 8009946:	9b03      	ldr	r3, [sp, #12]
 8009948:	1d19      	adds	r1, r3, #4
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	9103      	str	r1, [sp, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	bfbb      	ittet	lt
 8009952:	425b      	neglt	r3, r3
 8009954:	f042 0202 	orrlt.w	r2, r2, #2
 8009958:	9307      	strge	r3, [sp, #28]
 800995a:	9307      	strlt	r3, [sp, #28]
 800995c:	bfb8      	it	lt
 800995e:	9204      	strlt	r2, [sp, #16]
 8009960:	7823      	ldrb	r3, [r4, #0]
 8009962:	2b2e      	cmp	r3, #46	; 0x2e
 8009964:	d10c      	bne.n	8009980 <_svfiprintf_r+0x130>
 8009966:	7863      	ldrb	r3, [r4, #1]
 8009968:	2b2a      	cmp	r3, #42	; 0x2a
 800996a:	d134      	bne.n	80099d6 <_svfiprintf_r+0x186>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	1d1a      	adds	r2, r3, #4
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	9203      	str	r2, [sp, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfb8      	it	lt
 8009978:	f04f 33ff 	movlt.w	r3, #4294967295
 800997c:	3402      	adds	r4, #2
 800997e:	9305      	str	r3, [sp, #20]
 8009980:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a48 <_svfiprintf_r+0x1f8>
 8009984:	7821      	ldrb	r1, [r4, #0]
 8009986:	2203      	movs	r2, #3
 8009988:	4650      	mov	r0, sl
 800998a:	f7f6 fc29 	bl	80001e0 <memchr>
 800998e:	b138      	cbz	r0, 80099a0 <_svfiprintf_r+0x150>
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	eba0 000a 	sub.w	r0, r0, sl
 8009996:	2240      	movs	r2, #64	; 0x40
 8009998:	4082      	lsls	r2, r0
 800999a:	4313      	orrs	r3, r2
 800999c:	3401      	adds	r4, #1
 800999e:	9304      	str	r3, [sp, #16]
 80099a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a4:	4825      	ldr	r0, [pc, #148]	; (8009a3c <_svfiprintf_r+0x1ec>)
 80099a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099aa:	2206      	movs	r2, #6
 80099ac:	f7f6 fc18 	bl	80001e0 <memchr>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d038      	beq.n	8009a26 <_svfiprintf_r+0x1d6>
 80099b4:	4b22      	ldr	r3, [pc, #136]	; (8009a40 <_svfiprintf_r+0x1f0>)
 80099b6:	bb1b      	cbnz	r3, 8009a00 <_svfiprintf_r+0x1b0>
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	3307      	adds	r3, #7
 80099bc:	f023 0307 	bic.w	r3, r3, #7
 80099c0:	3308      	adds	r3, #8
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c6:	4433      	add	r3, r6
 80099c8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ca:	e768      	b.n	800989e <_svfiprintf_r+0x4e>
 80099cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80099d0:	460c      	mov	r4, r1
 80099d2:	2001      	movs	r0, #1
 80099d4:	e7a6      	b.n	8009924 <_svfiprintf_r+0xd4>
 80099d6:	2300      	movs	r3, #0
 80099d8:	3401      	adds	r4, #1
 80099da:	9305      	str	r3, [sp, #20]
 80099dc:	4619      	mov	r1, r3
 80099de:	f04f 0c0a 	mov.w	ip, #10
 80099e2:	4620      	mov	r0, r4
 80099e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e8:	3a30      	subs	r2, #48	; 0x30
 80099ea:	2a09      	cmp	r2, #9
 80099ec:	d903      	bls.n	80099f6 <_svfiprintf_r+0x1a6>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0c6      	beq.n	8009980 <_svfiprintf_r+0x130>
 80099f2:	9105      	str	r1, [sp, #20]
 80099f4:	e7c4      	b.n	8009980 <_svfiprintf_r+0x130>
 80099f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099fa:	4604      	mov	r4, r0
 80099fc:	2301      	movs	r3, #1
 80099fe:	e7f0      	b.n	80099e2 <_svfiprintf_r+0x192>
 8009a00:	ab03      	add	r3, sp, #12
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	462a      	mov	r2, r5
 8009a06:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <_svfiprintf_r+0x1f4>)
 8009a08:	a904      	add	r1, sp, #16
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	f3af 8000 	nop.w
 8009a10:	1c42      	adds	r2, r0, #1
 8009a12:	4606      	mov	r6, r0
 8009a14:	d1d6      	bne.n	80099c4 <_svfiprintf_r+0x174>
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	065b      	lsls	r3, r3, #25
 8009a1a:	f53f af2d 	bmi.w	8009878 <_svfiprintf_r+0x28>
 8009a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a20:	b01d      	add	sp, #116	; 0x74
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	ab03      	add	r3, sp, #12
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <_svfiprintf_r+0x1f4>)
 8009a2e:	a904      	add	r1, sp, #16
 8009a30:	4638      	mov	r0, r7
 8009a32:	f000 f879 	bl	8009b28 <_printf_i>
 8009a36:	e7eb      	b.n	8009a10 <_svfiprintf_r+0x1c0>
 8009a38:	08009ef0 	.word	0x08009ef0
 8009a3c:	08009efa 	.word	0x08009efa
 8009a40:	00000000 	.word	0x00000000
 8009a44:	0800979d 	.word	0x0800979d
 8009a48:	08009ef6 	.word	0x08009ef6

08009a4c <_printf_common>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	4616      	mov	r6, r2
 8009a52:	4699      	mov	r9, r3
 8009a54:	688a      	ldr	r2, [r1, #8]
 8009a56:	690b      	ldr	r3, [r1, #16]
 8009a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	bfb8      	it	lt
 8009a60:	4613      	movlt	r3, r2
 8009a62:	6033      	str	r3, [r6, #0]
 8009a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a68:	4607      	mov	r7, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	b10a      	cbz	r2, 8009a72 <_printf_common+0x26>
 8009a6e:	3301      	adds	r3, #1
 8009a70:	6033      	str	r3, [r6, #0]
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	0699      	lsls	r1, r3, #26
 8009a76:	bf42      	ittt	mi
 8009a78:	6833      	ldrmi	r3, [r6, #0]
 8009a7a:	3302      	addmi	r3, #2
 8009a7c:	6033      	strmi	r3, [r6, #0]
 8009a7e:	6825      	ldr	r5, [r4, #0]
 8009a80:	f015 0506 	ands.w	r5, r5, #6
 8009a84:	d106      	bne.n	8009a94 <_printf_common+0x48>
 8009a86:	f104 0a19 	add.w	sl, r4, #25
 8009a8a:	68e3      	ldr	r3, [r4, #12]
 8009a8c:	6832      	ldr	r2, [r6, #0]
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	dc26      	bgt.n	8009ae2 <_printf_common+0x96>
 8009a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a98:	1e13      	subs	r3, r2, #0
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	bf18      	it	ne
 8009a9e:	2301      	movne	r3, #1
 8009aa0:	0692      	lsls	r2, r2, #26
 8009aa2:	d42b      	bmi.n	8009afc <_printf_common+0xb0>
 8009aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	4638      	mov	r0, r7
 8009aac:	47c0      	blx	r8
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d01e      	beq.n	8009af0 <_printf_common+0xa4>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	6922      	ldr	r2, [r4, #16]
 8009ab6:	f003 0306 	and.w	r3, r3, #6
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	bf02      	ittt	eq
 8009abe:	68e5      	ldreq	r5, [r4, #12]
 8009ac0:	6833      	ldreq	r3, [r6, #0]
 8009ac2:	1aed      	subeq	r5, r5, r3
 8009ac4:	68a3      	ldr	r3, [r4, #8]
 8009ac6:	bf0c      	ite	eq
 8009ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009acc:	2500      	movne	r5, #0
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	bfc4      	itt	gt
 8009ad2:	1a9b      	subgt	r3, r3, r2
 8009ad4:	18ed      	addgt	r5, r5, r3
 8009ad6:	2600      	movs	r6, #0
 8009ad8:	341a      	adds	r4, #26
 8009ada:	42b5      	cmp	r5, r6
 8009adc:	d11a      	bne.n	8009b14 <_printf_common+0xc8>
 8009ade:	2000      	movs	r0, #0
 8009ae0:	e008      	b.n	8009af4 <_printf_common+0xa8>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4652      	mov	r2, sl
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	4638      	mov	r0, r7
 8009aea:	47c0      	blx	r8
 8009aec:	3001      	adds	r0, #1
 8009aee:	d103      	bne.n	8009af8 <_printf_common+0xac>
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af8:	3501      	adds	r5, #1
 8009afa:	e7c6      	b.n	8009a8a <_printf_common+0x3e>
 8009afc:	18e1      	adds	r1, r4, r3
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	2030      	movs	r0, #48	; 0x30
 8009b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b06:	4422      	add	r2, r4
 8009b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b10:	3302      	adds	r3, #2
 8009b12:	e7c7      	b.n	8009aa4 <_printf_common+0x58>
 8009b14:	2301      	movs	r3, #1
 8009b16:	4622      	mov	r2, r4
 8009b18:	4649      	mov	r1, r9
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	47c0      	blx	r8
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d0e6      	beq.n	8009af0 <_printf_common+0xa4>
 8009b22:	3601      	adds	r6, #1
 8009b24:	e7d9      	b.n	8009ada <_printf_common+0x8e>
	...

08009b28 <_printf_i>:
 8009b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	7e0f      	ldrb	r7, [r1, #24]
 8009b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b30:	2f78      	cmp	r7, #120	; 0x78
 8009b32:	4691      	mov	r9, r2
 8009b34:	4680      	mov	r8, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	469a      	mov	sl, r3
 8009b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b3e:	d807      	bhi.n	8009b50 <_printf_i+0x28>
 8009b40:	2f62      	cmp	r7, #98	; 0x62
 8009b42:	d80a      	bhi.n	8009b5a <_printf_i+0x32>
 8009b44:	2f00      	cmp	r7, #0
 8009b46:	f000 80d4 	beq.w	8009cf2 <_printf_i+0x1ca>
 8009b4a:	2f58      	cmp	r7, #88	; 0x58
 8009b4c:	f000 80c0 	beq.w	8009cd0 <_printf_i+0x1a8>
 8009b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b58:	e03a      	b.n	8009bd0 <_printf_i+0xa8>
 8009b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b5e:	2b15      	cmp	r3, #21
 8009b60:	d8f6      	bhi.n	8009b50 <_printf_i+0x28>
 8009b62:	a101      	add	r1, pc, #4	; (adr r1, 8009b68 <_printf_i+0x40>)
 8009b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b68:	08009bc1 	.word	0x08009bc1
 8009b6c:	08009bd5 	.word	0x08009bd5
 8009b70:	08009b51 	.word	0x08009b51
 8009b74:	08009b51 	.word	0x08009b51
 8009b78:	08009b51 	.word	0x08009b51
 8009b7c:	08009b51 	.word	0x08009b51
 8009b80:	08009bd5 	.word	0x08009bd5
 8009b84:	08009b51 	.word	0x08009b51
 8009b88:	08009b51 	.word	0x08009b51
 8009b8c:	08009b51 	.word	0x08009b51
 8009b90:	08009b51 	.word	0x08009b51
 8009b94:	08009cd9 	.word	0x08009cd9
 8009b98:	08009c01 	.word	0x08009c01
 8009b9c:	08009c93 	.word	0x08009c93
 8009ba0:	08009b51 	.word	0x08009b51
 8009ba4:	08009b51 	.word	0x08009b51
 8009ba8:	08009cfb 	.word	0x08009cfb
 8009bac:	08009b51 	.word	0x08009b51
 8009bb0:	08009c01 	.word	0x08009c01
 8009bb4:	08009b51 	.word	0x08009b51
 8009bb8:	08009b51 	.word	0x08009b51
 8009bbc:	08009c9b 	.word	0x08009c9b
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	1d1a      	adds	r2, r3, #4
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	602a      	str	r2, [r5, #0]
 8009bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e09f      	b.n	8009d14 <_printf_i+0x1ec>
 8009bd4:	6820      	ldr	r0, [r4, #0]
 8009bd6:	682b      	ldr	r3, [r5, #0]
 8009bd8:	0607      	lsls	r7, r0, #24
 8009bda:	f103 0104 	add.w	r1, r3, #4
 8009bde:	6029      	str	r1, [r5, #0]
 8009be0:	d501      	bpl.n	8009be6 <_printf_i+0xbe>
 8009be2:	681e      	ldr	r6, [r3, #0]
 8009be4:	e003      	b.n	8009bee <_printf_i+0xc6>
 8009be6:	0646      	lsls	r6, r0, #25
 8009be8:	d5fb      	bpl.n	8009be2 <_printf_i+0xba>
 8009bea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	da03      	bge.n	8009bfa <_printf_i+0xd2>
 8009bf2:	232d      	movs	r3, #45	; 0x2d
 8009bf4:	4276      	negs	r6, r6
 8009bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bfa:	485a      	ldr	r0, [pc, #360]	; (8009d64 <_printf_i+0x23c>)
 8009bfc:	230a      	movs	r3, #10
 8009bfe:	e012      	b.n	8009c26 <_printf_i+0xfe>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	6820      	ldr	r0, [r4, #0]
 8009c04:	1d19      	adds	r1, r3, #4
 8009c06:	6029      	str	r1, [r5, #0]
 8009c08:	0605      	lsls	r5, r0, #24
 8009c0a:	d501      	bpl.n	8009c10 <_printf_i+0xe8>
 8009c0c:	681e      	ldr	r6, [r3, #0]
 8009c0e:	e002      	b.n	8009c16 <_printf_i+0xee>
 8009c10:	0641      	lsls	r1, r0, #25
 8009c12:	d5fb      	bpl.n	8009c0c <_printf_i+0xe4>
 8009c14:	881e      	ldrh	r6, [r3, #0]
 8009c16:	4853      	ldr	r0, [pc, #332]	; (8009d64 <_printf_i+0x23c>)
 8009c18:	2f6f      	cmp	r7, #111	; 0x6f
 8009c1a:	bf0c      	ite	eq
 8009c1c:	2308      	moveq	r3, #8
 8009c1e:	230a      	movne	r3, #10
 8009c20:	2100      	movs	r1, #0
 8009c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c26:	6865      	ldr	r5, [r4, #4]
 8009c28:	60a5      	str	r5, [r4, #8]
 8009c2a:	2d00      	cmp	r5, #0
 8009c2c:	bfa2      	ittt	ge
 8009c2e:	6821      	ldrge	r1, [r4, #0]
 8009c30:	f021 0104 	bicge.w	r1, r1, #4
 8009c34:	6021      	strge	r1, [r4, #0]
 8009c36:	b90e      	cbnz	r6, 8009c3c <_printf_i+0x114>
 8009c38:	2d00      	cmp	r5, #0
 8009c3a:	d04b      	beq.n	8009cd4 <_printf_i+0x1ac>
 8009c3c:	4615      	mov	r5, r2
 8009c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c42:	fb03 6711 	mls	r7, r3, r1, r6
 8009c46:	5dc7      	ldrb	r7, [r0, r7]
 8009c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c4c:	4637      	mov	r7, r6
 8009c4e:	42bb      	cmp	r3, r7
 8009c50:	460e      	mov	r6, r1
 8009c52:	d9f4      	bls.n	8009c3e <_printf_i+0x116>
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d10b      	bne.n	8009c70 <_printf_i+0x148>
 8009c58:	6823      	ldr	r3, [r4, #0]
 8009c5a:	07de      	lsls	r6, r3, #31
 8009c5c:	d508      	bpl.n	8009c70 <_printf_i+0x148>
 8009c5e:	6923      	ldr	r3, [r4, #16]
 8009c60:	6861      	ldr	r1, [r4, #4]
 8009c62:	4299      	cmp	r1, r3
 8009c64:	bfde      	ittt	le
 8009c66:	2330      	movle	r3, #48	; 0x30
 8009c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c70:	1b52      	subs	r2, r2, r5
 8009c72:	6122      	str	r2, [r4, #16]
 8009c74:	f8cd a000 	str.w	sl, [sp]
 8009c78:	464b      	mov	r3, r9
 8009c7a:	aa03      	add	r2, sp, #12
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	4640      	mov	r0, r8
 8009c80:	f7ff fee4 	bl	8009a4c <_printf_common>
 8009c84:	3001      	adds	r0, #1
 8009c86:	d14a      	bne.n	8009d1e <_printf_i+0x1f6>
 8009c88:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8c:	b004      	add	sp, #16
 8009c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	f043 0320 	orr.w	r3, r3, #32
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	4833      	ldr	r0, [pc, #204]	; (8009d68 <_printf_i+0x240>)
 8009c9c:	2778      	movs	r7, #120	; 0x78
 8009c9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	6829      	ldr	r1, [r5, #0]
 8009ca6:	061f      	lsls	r7, r3, #24
 8009ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cac:	d402      	bmi.n	8009cb4 <_printf_i+0x18c>
 8009cae:	065f      	lsls	r7, r3, #25
 8009cb0:	bf48      	it	mi
 8009cb2:	b2b6      	uxthmi	r6, r6
 8009cb4:	07df      	lsls	r7, r3, #31
 8009cb6:	bf48      	it	mi
 8009cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8009cbc:	6029      	str	r1, [r5, #0]
 8009cbe:	bf48      	it	mi
 8009cc0:	6023      	strmi	r3, [r4, #0]
 8009cc2:	b91e      	cbnz	r6, 8009ccc <_printf_i+0x1a4>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	f023 0320 	bic.w	r3, r3, #32
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	2310      	movs	r3, #16
 8009cce:	e7a7      	b.n	8009c20 <_printf_i+0xf8>
 8009cd0:	4824      	ldr	r0, [pc, #144]	; (8009d64 <_printf_i+0x23c>)
 8009cd2:	e7e4      	b.n	8009c9e <_printf_i+0x176>
 8009cd4:	4615      	mov	r5, r2
 8009cd6:	e7bd      	b.n	8009c54 <_printf_i+0x12c>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	6826      	ldr	r6, [r4, #0]
 8009cdc:	6961      	ldr	r1, [r4, #20]
 8009cde:	1d18      	adds	r0, r3, #4
 8009ce0:	6028      	str	r0, [r5, #0]
 8009ce2:	0635      	lsls	r5, r6, #24
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	d501      	bpl.n	8009cec <_printf_i+0x1c4>
 8009ce8:	6019      	str	r1, [r3, #0]
 8009cea:	e002      	b.n	8009cf2 <_printf_i+0x1ca>
 8009cec:	0670      	lsls	r0, r6, #25
 8009cee:	d5fb      	bpl.n	8009ce8 <_printf_i+0x1c0>
 8009cf0:	8019      	strh	r1, [r3, #0]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	6123      	str	r3, [r4, #16]
 8009cf6:	4615      	mov	r5, r2
 8009cf8:	e7bc      	b.n	8009c74 <_printf_i+0x14c>
 8009cfa:	682b      	ldr	r3, [r5, #0]
 8009cfc:	1d1a      	adds	r2, r3, #4
 8009cfe:	602a      	str	r2, [r5, #0]
 8009d00:	681d      	ldr	r5, [r3, #0]
 8009d02:	6862      	ldr	r2, [r4, #4]
 8009d04:	2100      	movs	r1, #0
 8009d06:	4628      	mov	r0, r5
 8009d08:	f7f6 fa6a 	bl	80001e0 <memchr>
 8009d0c:	b108      	cbz	r0, 8009d12 <_printf_i+0x1ea>
 8009d0e:	1b40      	subs	r0, r0, r5
 8009d10:	6060      	str	r0, [r4, #4]
 8009d12:	6863      	ldr	r3, [r4, #4]
 8009d14:	6123      	str	r3, [r4, #16]
 8009d16:	2300      	movs	r3, #0
 8009d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d1c:	e7aa      	b.n	8009c74 <_printf_i+0x14c>
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	462a      	mov	r2, r5
 8009d22:	4649      	mov	r1, r9
 8009d24:	4640      	mov	r0, r8
 8009d26:	47d0      	blx	sl
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d0ad      	beq.n	8009c88 <_printf_i+0x160>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	079b      	lsls	r3, r3, #30
 8009d30:	d413      	bmi.n	8009d5a <_printf_i+0x232>
 8009d32:	68e0      	ldr	r0, [r4, #12]
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	4298      	cmp	r0, r3
 8009d38:	bfb8      	it	lt
 8009d3a:	4618      	movlt	r0, r3
 8009d3c:	e7a6      	b.n	8009c8c <_printf_i+0x164>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	4632      	mov	r2, r6
 8009d42:	4649      	mov	r1, r9
 8009d44:	4640      	mov	r0, r8
 8009d46:	47d0      	blx	sl
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d09d      	beq.n	8009c88 <_printf_i+0x160>
 8009d4c:	3501      	adds	r5, #1
 8009d4e:	68e3      	ldr	r3, [r4, #12]
 8009d50:	9903      	ldr	r1, [sp, #12]
 8009d52:	1a5b      	subs	r3, r3, r1
 8009d54:	42ab      	cmp	r3, r5
 8009d56:	dcf2      	bgt.n	8009d3e <_printf_i+0x216>
 8009d58:	e7eb      	b.n	8009d32 <_printf_i+0x20a>
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	f104 0619 	add.w	r6, r4, #25
 8009d60:	e7f5      	b.n	8009d4e <_printf_i+0x226>
 8009d62:	bf00      	nop
 8009d64:	08009f01 	.word	0x08009f01
 8009d68:	08009f12 	.word	0x08009f12

08009d6c <memmove>:
 8009d6c:	4288      	cmp	r0, r1
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	eb01 0402 	add.w	r4, r1, r2
 8009d74:	d902      	bls.n	8009d7c <memmove+0x10>
 8009d76:	4284      	cmp	r4, r0
 8009d78:	4623      	mov	r3, r4
 8009d7a:	d807      	bhi.n	8009d8c <memmove+0x20>
 8009d7c:	1e43      	subs	r3, r0, #1
 8009d7e:	42a1      	cmp	r1, r4
 8009d80:	d008      	beq.n	8009d94 <memmove+0x28>
 8009d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d8a:	e7f8      	b.n	8009d7e <memmove+0x12>
 8009d8c:	4402      	add	r2, r0
 8009d8e:	4601      	mov	r1, r0
 8009d90:	428a      	cmp	r2, r1
 8009d92:	d100      	bne.n	8009d96 <memmove+0x2a>
 8009d94:	bd10      	pop	{r4, pc}
 8009d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d9e:	e7f7      	b.n	8009d90 <memmove+0x24>

08009da0 <_sbrk_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d06      	ldr	r5, [pc, #24]	; (8009dbc <_sbrk_r+0x1c>)
 8009da4:	2300      	movs	r3, #0
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7f7 f9c4 	bl	8001138 <_sbrk>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_sbrk_r+0x1a>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_sbrk_r+0x1a>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	200030a4 	.word	0x200030a4

08009dc0 <memcpy>:
 8009dc0:	440a      	add	r2, r1
 8009dc2:	4291      	cmp	r1, r2
 8009dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dc8:	d100      	bne.n	8009dcc <memcpy+0xc>
 8009dca:	4770      	bx	lr
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dd6:	4291      	cmp	r1, r2
 8009dd8:	d1f9      	bne.n	8009dce <memcpy+0xe>
 8009dda:	bd10      	pop	{r4, pc}

08009ddc <_realloc_r>:
 8009ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de0:	4680      	mov	r8, r0
 8009de2:	4614      	mov	r4, r2
 8009de4:	460e      	mov	r6, r1
 8009de6:	b921      	cbnz	r1, 8009df2 <_realloc_r+0x16>
 8009de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	4611      	mov	r1, r2
 8009dee:	f7ff bc49 	b.w	8009684 <_malloc_r>
 8009df2:	b92a      	cbnz	r2, 8009e00 <_realloc_r+0x24>
 8009df4:	f7ff fbda 	bl	80095ac <_free_r>
 8009df8:	4625      	mov	r5, r4
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e00:	f000 f81b 	bl	8009e3a <_malloc_usable_size_r>
 8009e04:	4284      	cmp	r4, r0
 8009e06:	4607      	mov	r7, r0
 8009e08:	d802      	bhi.n	8009e10 <_realloc_r+0x34>
 8009e0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e0e:	d812      	bhi.n	8009e36 <_realloc_r+0x5a>
 8009e10:	4621      	mov	r1, r4
 8009e12:	4640      	mov	r0, r8
 8009e14:	f7ff fc36 	bl	8009684 <_malloc_r>
 8009e18:	4605      	mov	r5, r0
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d0ed      	beq.n	8009dfa <_realloc_r+0x1e>
 8009e1e:	42bc      	cmp	r4, r7
 8009e20:	4622      	mov	r2, r4
 8009e22:	4631      	mov	r1, r6
 8009e24:	bf28      	it	cs
 8009e26:	463a      	movcs	r2, r7
 8009e28:	f7ff ffca 	bl	8009dc0 <memcpy>
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4640      	mov	r0, r8
 8009e30:	f7ff fbbc 	bl	80095ac <_free_r>
 8009e34:	e7e1      	b.n	8009dfa <_realloc_r+0x1e>
 8009e36:	4635      	mov	r5, r6
 8009e38:	e7df      	b.n	8009dfa <_realloc_r+0x1e>

08009e3a <_malloc_usable_size_r>:
 8009e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3e:	1f18      	subs	r0, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	bfbc      	itt	lt
 8009e44:	580b      	ldrlt	r3, [r1, r0]
 8009e46:	18c0      	addlt	r0, r0, r3
 8009e48:	4770      	bx	lr
	...

08009e4c <_init>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr

08009e58 <_fini>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr
